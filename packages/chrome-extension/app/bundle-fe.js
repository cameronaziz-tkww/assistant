(function () {
            'use strict';

            var global$1 = (typeof global !== "undefined" ? global :
                        typeof self !== "undefined" ? self :
                        typeof window !== "undefined" ? window : {});

            // shim for using process in browser
            // based off https://github.com/defunctzombie/node-process/blob/master/browser.js

            function defaultSetTimout() {
                throw new Error('setTimeout has not been defined');
            }
            function defaultClearTimeout () {
                throw new Error('clearTimeout has not been defined');
            }
            var cachedSetTimeout = defaultSetTimout;
            var cachedClearTimeout = defaultClearTimeout;
            if (typeof global$1.setTimeout === 'function') {
                cachedSetTimeout = setTimeout;
            }
            if (typeof global$1.clearTimeout === 'function') {
                cachedClearTimeout = clearTimeout;
            }

            function runTimeout(fun) {
                if (cachedSetTimeout === setTimeout) {
                    //normal enviroments in sane situations
                    return setTimeout(fun, 0);
                }
                // if setTimeout wasn't available but was latter defined
                if ((cachedSetTimeout === defaultSetTimout || !cachedSetTimeout) && setTimeout) {
                    cachedSetTimeout = setTimeout;
                    return setTimeout(fun, 0);
                }
                try {
                    // when when somebody has screwed with setTimeout but no I.E. maddness
                    return cachedSetTimeout(fun, 0);
                } catch(e){
                    try {
                        // When we are in I.E. but the script has been evaled so I.E. doesn't trust the global object when called normally
                        return cachedSetTimeout.call(null, fun, 0);
                    } catch(e){
                        // same as above but when it's a version of I.E. that must have the global object for 'this', hopfully our context correct otherwise it will throw a global error
                        return cachedSetTimeout.call(this, fun, 0);
                    }
                }


            }
            function runClearTimeout(marker) {
                if (cachedClearTimeout === clearTimeout) {
                    //normal enviroments in sane situations
                    return clearTimeout(marker);
                }
                // if clearTimeout wasn't available but was latter defined
                if ((cachedClearTimeout === defaultClearTimeout || !cachedClearTimeout) && clearTimeout) {
                    cachedClearTimeout = clearTimeout;
                    return clearTimeout(marker);
                }
                try {
                    // when when somebody has screwed with setTimeout but no I.E. maddness
                    return cachedClearTimeout(marker);
                } catch (e){
                    try {
                        // When we are in I.E. but the script has been evaled so I.E. doesn't  trust the global object when called normally
                        return cachedClearTimeout.call(null, marker);
                    } catch (e){
                        // same as above but when it's a version of I.E. that must have the global object for 'this', hopfully our context correct otherwise it will throw a global error.
                        // Some versions of I.E. have different rules for clearTimeout vs setTimeout
                        return cachedClearTimeout.call(this, marker);
                    }
                }



            }
            var queue$1 = [];
            var draining = false;
            var currentQueue;
            var queueIndex = -1;

            function cleanUpNextTick() {
                if (!draining || !currentQueue) {
                    return;
                }
                draining = false;
                if (currentQueue.length) {
                    queue$1 = currentQueue.concat(queue$1);
                } else {
                    queueIndex = -1;
                }
                if (queue$1.length) {
                    drainQueue();
                }
            }

            function drainQueue() {
                if (draining) {
                    return;
                }
                var timeout = runTimeout(cleanUpNextTick);
                draining = true;

                var len = queue$1.length;
                while(len) {
                    currentQueue = queue$1;
                    queue$1 = [];
                    while (++queueIndex < len) {
                        if (currentQueue) {
                            currentQueue[queueIndex].run();
                        }
                    }
                    queueIndex = -1;
                    len = queue$1.length;
                }
                currentQueue = null;
                draining = false;
                runClearTimeout(timeout);
            }
            function nextTick(fun) {
                var args = new Array(arguments.length - 1);
                if (arguments.length > 1) {
                    for (var i = 1; i < arguments.length; i++) {
                        args[i - 1] = arguments[i];
                    }
                }
                queue$1.push(new Item$4(fun, args));
                if (queue$1.length === 1 && !draining) {
                    runTimeout(drainQueue);
                }
            }
            // v8 likes predictible objects
            function Item$4(fun, array) {
                this.fun = fun;
                this.array = array;
            }
            Item$4.prototype.run = function () {
                this.fun.apply(null, this.array);
            };
            var title = 'browser';
            var platform = 'browser';
            var browser = true;
            var env = {};
            var argv = [];
            var version = ''; // empty string to avoid regexp issues
            var versions = {};
            var release = {};
            var config = {};

            function noop$1() {}

            var on$1 = noop$1;
            var addListener$1 = noop$1;
            var once = noop$1;
            var off = noop$1;
            var removeListener = noop$1;
            var removeAllListeners = noop$1;
            var emit = noop$1;

            function binding(name) {
                throw new Error('process.binding is not supported');
            }

            function cwd () { return '/' }
            function chdir (dir) {
                throw new Error('process.chdir is not supported');
            }function umask() { return 0; }

            // from https://github.com/kumavis/browser-process-hrtime/blob/master/index.js
            var performance$1 = global$1.performance || {};
            var performanceNow =
              performance$1.now        ||
              performance$1.mozNow     ||
              performance$1.msNow      ||
              performance$1.oNow       ||
              performance$1.webkitNow  ||
              function(){ return (new Date()).getTime() };

            // generate timestamp or delta
            // see http://nodejs.org/api/process.html#process_process_hrtime
            function hrtime(previousTimestamp){
              var clocktime = performanceNow.call(performance$1)*1e-3;
              var seconds = Math.floor(clocktime);
              var nanoseconds = Math.floor((clocktime%1)*1e9);
              if (previousTimestamp) {
                seconds = seconds - previousTimestamp[0];
                nanoseconds = nanoseconds - previousTimestamp[1];
                if (nanoseconds<0) {
                  seconds--;
                  nanoseconds += 1e9;
                }
              }
              return [seconds,nanoseconds]
            }

            var startTime = new Date();
            function uptime() {
              var currentTime = new Date();
              var dif = currentTime - startTime;
              return dif / 1000;
            }

            var process = {
              nextTick: nextTick,
              title: title,
              browser: browser,
              env: env,
              argv: argv,
              version: version,
              versions: versions,
              on: on$1,
              addListener: addListener$1,
              once: once,
              off: off,
              removeListener: removeListener,
              removeAllListeners: removeAllListeners,
              emit: emit,
              binding: binding,
              cwd: cwd,
              chdir: chdir,
              umask: umask,
              hrtime: hrtime,
              platform: platform,
              release: release,
              config: config,
              uptime: uptime
            };

            function getAugmentedNamespace(n) {
            	if (n.__esModule) return n;
            	var a = Object.defineProperty({}, '__esModule', {value: true});
            	Object.keys(n).forEach(function (k) {
            		var d = Object.getOwnPropertyDescriptor(n, k);
            		Object.defineProperty(a, k, d.get ? d : {
            			enumerable: true,
            			get: function () {
            				return n[k];
            			}
            		});
            	});
            	return a;
            }

            function createCommonjsModule(fn) {
              var module = { exports: {} };
            	return fn(module, module.exports), module.exports;
            }

            /*
            object-assign
            (c) Sindre Sorhus
            @license MIT
            */
            /* eslint-disable no-unused-vars */
            var getOwnPropertySymbols$1 = Object.getOwnPropertySymbols;
            var hasOwnProperty$1 = Object.prototype.hasOwnProperty;
            var propIsEnumerable = Object.prototype.propertyIsEnumerable;

            function toObject(val) {
            	if (val === null || val === undefined) {
            		throw new TypeError('Object.assign cannot be called with null or undefined');
            	}

            	return Object(val);
            }

            function shouldUseNative() {
            	try {
            		if (!Object.assign) {
            			return false;
            		}

            		// Detect buggy property enumeration order in older V8 versions.

            		// https://bugs.chromium.org/p/v8/issues/detail?id=4118
            		var test1 = new String('abc');  // eslint-disable-line no-new-wrappers
            		test1[5] = 'de';
            		if (Object.getOwnPropertyNames(test1)[0] === '5') {
            			return false;
            		}

            		// https://bugs.chromium.org/p/v8/issues/detail?id=3056
            		var test2 = {};
            		for (var i = 0; i < 10; i++) {
            			test2['_' + String.fromCharCode(i)] = i;
            		}
            		var order2 = Object.getOwnPropertyNames(test2).map(function (n) {
            			return test2[n];
            		});
            		if (order2.join('') !== '0123456789') {
            			return false;
            		}

            		// https://bugs.chromium.org/p/v8/issues/detail?id=3056
            		var test3 = {};
            		'abcdefghijklmnopqrst'.split('').forEach(function (letter) {
            			test3[letter] = letter;
            		});
            		if (Object.keys(Object.assign({}, test3)).join('') !==
            				'abcdefghijklmnopqrst') {
            			return false;
            		}

            		return true;
            	} catch (err) {
            		// We don't expect any of the above to throw, but better to be safe.
            		return false;
            	}
            }

            var objectAssign = shouldUseNative() ? Object.assign : function (target, source) {
            	var from;
            	var to = toObject(target);
            	var symbols;

            	for (var s = 1; s < arguments.length; s++) {
            		from = Object(arguments[s]);

            		for (var key in from) {
            			if (hasOwnProperty$1.call(from, key)) {
            				to[key] = from[key];
            			}
            		}

            		if (getOwnPropertySymbols$1) {
            			symbols = getOwnPropertySymbols$1(from);
            			for (var i = 0; i < symbols.length; i++) {
            				if (propIsEnumerable.call(from, symbols[i])) {
            					to[symbols[i]] = from[symbols[i]];
            				}
            			}
            		}
            	}

            	return to;
            };

            /** @license React v17.0.2
             * react.production.min.js
             *
             * Copyright (c) Facebook, Inc. and its affiliates.
             *
             * This source code is licensed under the MIT license found in the
             * LICENSE file in the root directory of this source tree.
             */

            createCommonjsModule(function (module, exports) {
            var n=60103,p=60106;exports.Fragment=60107;exports.StrictMode=60108;exports.Profiler=60114;var q=60109,r=60110,t=60112;exports.Suspense=60113;var u=60115,v=60116;
            if("function"===typeof Symbol&&Symbol.for){var w=Symbol.for;n=w("react.element");p=w("react.portal");exports.Fragment=w("react.fragment");exports.StrictMode=w("react.strict_mode");exports.Profiler=w("react.profiler");q=w("react.provider");r=w("react.context");t=w("react.forward_ref");exports.Suspense=w("react.suspense");u=w("react.memo");v=w("react.lazy");}var x="function"===typeof Symbol&&Symbol.iterator;
            function y(a){if(null===a||"object"!==typeof a)return null;a=x&&a[x]||a["@@iterator"];return "function"===typeof a?a:null}function z(a){for(var b="https://reactjs.org/docs/error-decoder.html?invariant="+a,c=1;c<arguments.length;c++)b+="&args[]="+encodeURIComponent(arguments[c]);return "Minified React error #"+a+"; visit "+b+" for the full message or use the non-minified dev environment for full errors and additional helpful warnings."}
            var A={isMounted:function(){return !1},enqueueForceUpdate:function(){},enqueueReplaceState:function(){},enqueueSetState:function(){}},B={};function C(a,b,c){this.props=a;this.context=b;this.refs=B;this.updater=c||A;}C.prototype.isReactComponent={};C.prototype.setState=function(a,b){if("object"!==typeof a&&"function"!==typeof a&&null!=a)throw Error(z(85));this.updater.enqueueSetState(this,a,b,"setState");};C.prototype.forceUpdate=function(a){this.updater.enqueueForceUpdate(this,a,"forceUpdate");};
            function D(){}D.prototype=C.prototype;function E(a,b,c){this.props=a;this.context=b;this.refs=B;this.updater=c||A;}var F=E.prototype=new D;F.constructor=E;objectAssign(F,C.prototype);F.isPureReactComponent=!0;var G={current:null},H=Object.prototype.hasOwnProperty,I={key:!0,ref:!0,__self:!0,__source:!0};
            function J(a,b,c){var e,d={},k=null,h=null;if(null!=b)for(e in void 0!==b.ref&&(h=b.ref),void 0!==b.key&&(k=""+b.key),b)H.call(b,e)&&!I.hasOwnProperty(e)&&(d[e]=b[e]);var g=arguments.length-2;if(1===g)d.children=c;else if(1<g){for(var f=Array(g),m=0;m<g;m++)f[m]=arguments[m+2];d.children=f;}if(a&&a.defaultProps)for(e in g=a.defaultProps,g)void 0===d[e]&&(d[e]=g[e]);return {$$typeof:n,type:a,key:k,ref:h,props:d,_owner:G.current}}
            function K(a,b){return {$$typeof:n,type:a.type,key:b,ref:a.ref,props:a.props,_owner:a._owner}}function L(a){return "object"===typeof a&&null!==a&&a.$$typeof===n}function escape(a){var b={"=":"=0",":":"=2"};return "$"+a.replace(/[=:]/g,function(a){return b[a]})}var M=/\/+/g;function N(a,b){return "object"===typeof a&&null!==a&&null!=a.key?escape(""+a.key):b.toString(36)}
            function O(a,b,c,e,d){var k=typeof a;if("undefined"===k||"boolean"===k)a=null;var h=!1;if(null===a)h=!0;else switch(k){case "string":case "number":h=!0;break;case "object":switch(a.$$typeof){case n:case p:h=!0;}}if(h)return h=a,d=d(h),a=""===e?"."+N(h,0):e,Array.isArray(d)?(c="",null!=a&&(c=a.replace(M,"$&/")+"/"),O(d,b,c,"",function(a){return a})):null!=d&&(L(d)&&(d=K(d,c+(!d.key||h&&h.key===d.key?"":(""+d.key).replace(M,"$&/")+"/")+a)),b.push(d)),1;h=0;e=""===e?".":e+":";if(Array.isArray(a))for(var g=
            0;g<a.length;g++){k=a[g];var f=e+N(k,g);h+=O(k,b,c,f,d);}else if(f=y(a),"function"===typeof f)for(a=f.call(a),g=0;!(k=a.next()).done;)k=k.value,f=e+N(k,g++),h+=O(k,b,c,f,d);else if("object"===k)throw b=""+a,Error(z(31,"[object Object]"===b?"object with keys {"+Object.keys(a).join(", ")+"}":b));return h}function P(a,b,c){if(null==a)return a;var e=[],d=0;O(a,e,"","",function(a){return b.call(c,a,d++)});return e}
            function Q(a){if(-1===a._status){var b=a._result;b=b();a._status=0;a._result=b;b.then(function(b){0===a._status&&(b=b.default,a._status=1,a._result=b);},function(b){0===a._status&&(a._status=2,a._result=b);});}if(1===a._status)return a._result;throw a._result;}var R={current:null};function S(){var a=R.current;if(null===a)throw Error(z(321));return a}var T={ReactCurrentDispatcher:R,ReactCurrentBatchConfig:{transition:0},ReactCurrentOwner:G,IsSomeRendererActing:{current:!1},assign:objectAssign};
            exports.Children={map:P,forEach:function(a,b,c){P(a,function(){b.apply(this,arguments);},c);},count:function(a){var b=0;P(a,function(){b++;});return b},toArray:function(a){return P(a,function(a){return a})||[]},only:function(a){if(!L(a))throw Error(z(143));return a}};exports.Component=C;exports.PureComponent=E;exports.__SECRET_INTERNALS_DO_NOT_USE_OR_YOU_WILL_BE_FIRED=T;
            exports.cloneElement=function(a,b,c){if(null===a||void 0===a)throw Error(z(267,a));var e=objectAssign({},a.props),d=a.key,k=a.ref,h=a._owner;if(null!=b){void 0!==b.ref&&(k=b.ref,h=G.current);void 0!==b.key&&(d=""+b.key);if(a.type&&a.type.defaultProps)var g=a.type.defaultProps;for(f in b)H.call(b,f)&&!I.hasOwnProperty(f)&&(e[f]=void 0===b[f]&&void 0!==g?g[f]:b[f]);}var f=arguments.length-2;if(1===f)e.children=c;else if(1<f){g=Array(f);for(var m=0;m<f;m++)g[m]=arguments[m+2];e.children=g;}return {$$typeof:n,type:a.type,
            key:d,ref:k,props:e,_owner:h}};exports.createContext=function(a,b){void 0===b&&(b=null);a={$$typeof:r,_calculateChangedBits:b,_currentValue:a,_currentValue2:a,_threadCount:0,Provider:null,Consumer:null};a.Provider={$$typeof:q,_context:a};return a.Consumer=a};exports.createElement=J;exports.createFactory=function(a){var b=J.bind(null,a);b.type=a;return b};exports.createRef=function(){return {current:null}};exports.forwardRef=function(a){return {$$typeof:t,render:a}};exports.isValidElement=L;
            exports.lazy=function(a){return {$$typeof:v,_payload:{_status:-1,_result:a},_init:Q}};exports.memo=function(a,b){return {$$typeof:u,type:a,compare:void 0===b?null:b}};exports.useCallback=function(a,b){return S().useCallback(a,b)};exports.useContext=function(a,b){return S().useContext(a,b)};exports.useDebugValue=function(){};exports.useEffect=function(a,b){return S().useEffect(a,b)};exports.useImperativeHandle=function(a,b,c){return S().useImperativeHandle(a,b,c)};
            exports.useLayoutEffect=function(a,b){return S().useLayoutEffect(a,b)};exports.useMemo=function(a,b){return S().useMemo(a,b)};exports.useReducer=function(a,b,c){return S().useReducer(a,b,c)};exports.useRef=function(a){return S().useRef(a)};exports.useState=function(a){return S().useState(a)};exports.version="17.0.2";
            });

            var react_development = createCommonjsModule(function (module, exports) {

            {
              (function() {

            var _assign = objectAssign;

            // TODO: this is special because it gets imported during build.
            var ReactVersion = '17.0.2';

            // ATTENTION
            // When adding new symbols to this file,
            // Please consider also adding to 'react-devtools-shared/src/backend/ReactSymbols'
            // The Symbol used to tag the ReactElement-like types. If there is no native Symbol
            // nor polyfill, then a plain number is used for performance.
            var REACT_ELEMENT_TYPE = 0xeac7;
            var REACT_PORTAL_TYPE = 0xeaca;
            exports.Fragment = 0xeacb;
            exports.StrictMode = 0xeacc;
            exports.Profiler = 0xead2;
            var REACT_PROVIDER_TYPE = 0xeacd;
            var REACT_CONTEXT_TYPE = 0xeace;
            var REACT_FORWARD_REF_TYPE = 0xead0;
            exports.Suspense = 0xead1;
            var REACT_SUSPENSE_LIST_TYPE = 0xead8;
            var REACT_MEMO_TYPE = 0xead3;
            var REACT_LAZY_TYPE = 0xead4;
            var REACT_BLOCK_TYPE = 0xead9;
            var REACT_SERVER_BLOCK_TYPE = 0xeada;
            var REACT_FUNDAMENTAL_TYPE = 0xead5;
            var REACT_DEBUG_TRACING_MODE_TYPE = 0xeae1;
            var REACT_LEGACY_HIDDEN_TYPE = 0xeae3;

            if (typeof Symbol === 'function' && Symbol.for) {
              var symbolFor = Symbol.for;
              REACT_ELEMENT_TYPE = symbolFor('react.element');
              REACT_PORTAL_TYPE = symbolFor('react.portal');
              exports.Fragment = symbolFor('react.fragment');
              exports.StrictMode = symbolFor('react.strict_mode');
              exports.Profiler = symbolFor('react.profiler');
              REACT_PROVIDER_TYPE = symbolFor('react.provider');
              REACT_CONTEXT_TYPE = symbolFor('react.context');
              REACT_FORWARD_REF_TYPE = symbolFor('react.forward_ref');
              exports.Suspense = symbolFor('react.suspense');
              REACT_SUSPENSE_LIST_TYPE = symbolFor('react.suspense_list');
              REACT_MEMO_TYPE = symbolFor('react.memo');
              REACT_LAZY_TYPE = symbolFor('react.lazy');
              REACT_BLOCK_TYPE = symbolFor('react.block');
              REACT_SERVER_BLOCK_TYPE = symbolFor('react.server.block');
              REACT_FUNDAMENTAL_TYPE = symbolFor('react.fundamental');
              symbolFor('react.scope');
              symbolFor('react.opaque.id');
              REACT_DEBUG_TRACING_MODE_TYPE = symbolFor('react.debug_trace_mode');
              symbolFor('react.offscreen');
              REACT_LEGACY_HIDDEN_TYPE = symbolFor('react.legacy_hidden');
            }

            var MAYBE_ITERATOR_SYMBOL = typeof Symbol === 'function' && Symbol.iterator;
            var FAUX_ITERATOR_SYMBOL = '@@iterator';
            function getIteratorFn(maybeIterable) {
              if (maybeIterable === null || typeof maybeIterable !== 'object') {
                return null;
              }

              var maybeIterator = MAYBE_ITERATOR_SYMBOL && maybeIterable[MAYBE_ITERATOR_SYMBOL] || maybeIterable[FAUX_ITERATOR_SYMBOL];

              if (typeof maybeIterator === 'function') {
                return maybeIterator;
              }

              return null;
            }

            /**
             * Keeps track of the current dispatcher.
             */
            var ReactCurrentDispatcher = {
              /**
               * @internal
               * @type {ReactComponent}
               */
              current: null
            };

            /**
             * Keeps track of the current batch's configuration such as how long an update
             * should suspend for if it needs to.
             */
            var ReactCurrentBatchConfig = {
              transition: 0
            };

            /**
             * Keeps track of the current owner.
             *
             * The current owner is the component who should own any components that are
             * currently being constructed.
             */
            var ReactCurrentOwner = {
              /**
               * @internal
               * @type {ReactComponent}
               */
              current: null
            };

            var ReactDebugCurrentFrame = {};
            var currentExtraStackFrame = null;
            function setExtraStackFrame(stack) {
              {
                currentExtraStackFrame = stack;
              }
            }

            {
              ReactDebugCurrentFrame.setExtraStackFrame = function (stack) {
                {
                  currentExtraStackFrame = stack;
                }
              }; // Stack implementation injected by the current renderer.


              ReactDebugCurrentFrame.getCurrentStack = null;

              ReactDebugCurrentFrame.getStackAddendum = function () {
                var stack = ''; // Add an extra top frame while an element is being validated

                if (currentExtraStackFrame) {
                  stack += currentExtraStackFrame;
                } // Delegate to the injected renderer-specific implementation


                var impl = ReactDebugCurrentFrame.getCurrentStack;

                if (impl) {
                  stack += impl() || '';
                }

                return stack;
              };
            }

            /**
             * Used by act() to track whether you're inside an act() scope.
             */
            var IsSomeRendererActing = {
              current: false
            };

            var ReactSharedInternals = {
              ReactCurrentDispatcher: ReactCurrentDispatcher,
              ReactCurrentBatchConfig: ReactCurrentBatchConfig,
              ReactCurrentOwner: ReactCurrentOwner,
              IsSomeRendererActing: IsSomeRendererActing,
              // Used by renderers to avoid bundling object-assign twice in UMD bundles:
              assign: _assign
            };

            {
              ReactSharedInternals.ReactDebugCurrentFrame = ReactDebugCurrentFrame;
            }

            // by calls to these methods by a Babel plugin.
            //
            // In PROD (or in packages without access to React internals),
            // they are left as they are instead.

            function warn(format) {
              {
                for (var _len = arguments.length, args = new Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++) {
                  args[_key - 1] = arguments[_key];
                }

                printWarning('warn', format, args);
              }
            }
            function error(format) {
              {
                for (var _len2 = arguments.length, args = new Array(_len2 > 1 ? _len2 - 1 : 0), _key2 = 1; _key2 < _len2; _key2++) {
                  args[_key2 - 1] = arguments[_key2];
                }

                printWarning('error', format, args);
              }
            }

            function printWarning(level, format, args) {
              // When changing this logic, you might want to also
              // update consoleWithStackDev.www.js as well.
              {
                var ReactDebugCurrentFrame = ReactSharedInternals.ReactDebugCurrentFrame;
                var stack = ReactDebugCurrentFrame.getStackAddendum();

                if (stack !== '') {
                  format += '%s';
                  args = args.concat([stack]);
                }

                var argsWithFormat = args.map(function (item) {
                  return '' + item;
                }); // Careful: RN currently depends on this prefix

                argsWithFormat.unshift('Warning: ' + format); // We intentionally don't use spread (or .apply) directly because it
                // breaks IE9: https://github.com/facebook/react/issues/13610
                // eslint-disable-next-line react-internal/no-production-logging

                Function.prototype.apply.call(console[level], console, argsWithFormat);
              }
            }

            var didWarnStateUpdateForUnmountedComponent = {};

            function warnNoop(publicInstance, callerName) {
              {
                var _constructor = publicInstance.constructor;
                var componentName = _constructor && (_constructor.displayName || _constructor.name) || 'ReactClass';
                var warningKey = componentName + "." + callerName;

                if (didWarnStateUpdateForUnmountedComponent[warningKey]) {
                  return;
                }

                error("Can't call %s on a component that is not yet mounted. " + 'This is a no-op, but it might indicate a bug in your application. ' + 'Instead, assign to `this.state` directly or define a `state = {};` ' + 'class property with the desired state in the %s component.', callerName, componentName);

                didWarnStateUpdateForUnmountedComponent[warningKey] = true;
              }
            }
            /**
             * This is the abstract API for an update queue.
             */


            var ReactNoopUpdateQueue = {
              /**
               * Checks whether or not this composite component is mounted.
               * @param {ReactClass} publicInstance The instance we want to test.
               * @return {boolean} True if mounted, false otherwise.
               * @protected
               * @final
               */
              isMounted: function (publicInstance) {
                return false;
              },

              /**
               * Forces an update. This should only be invoked when it is known with
               * certainty that we are **not** in a DOM transaction.
               *
               * You may want to call this when you know that some deeper aspect of the
               * component's state has changed but `setState` was not called.
               *
               * This will not invoke `shouldComponentUpdate`, but it will invoke
               * `componentWillUpdate` and `componentDidUpdate`.
               *
               * @param {ReactClass} publicInstance The instance that should rerender.
               * @param {?function} callback Called after component is updated.
               * @param {?string} callerName name of the calling function in the public API.
               * @internal
               */
              enqueueForceUpdate: function (publicInstance, callback, callerName) {
                warnNoop(publicInstance, 'forceUpdate');
              },

              /**
               * Replaces all of the state. Always use this or `setState` to mutate state.
               * You should treat `this.state` as immutable.
               *
               * There is no guarantee that `this.state` will be immediately updated, so
               * accessing `this.state` after calling this method may return the old value.
               *
               * @param {ReactClass} publicInstance The instance that should rerender.
               * @param {object} completeState Next state.
               * @param {?function} callback Called after component is updated.
               * @param {?string} callerName name of the calling function in the public API.
               * @internal
               */
              enqueueReplaceState: function (publicInstance, completeState, callback, callerName) {
                warnNoop(publicInstance, 'replaceState');
              },

              /**
               * Sets a subset of the state. This only exists because _pendingState is
               * internal. This provides a merging strategy that is not available to deep
               * properties which is confusing. TODO: Expose pendingState or don't use it
               * during the merge.
               *
               * @param {ReactClass} publicInstance The instance that should rerender.
               * @param {object} partialState Next partial state to be merged with state.
               * @param {?function} callback Called after component is updated.
               * @param {?string} Name of the calling function in the public API.
               * @internal
               */
              enqueueSetState: function (publicInstance, partialState, callback, callerName) {
                warnNoop(publicInstance, 'setState');
              }
            };

            var emptyObject = {};

            {
              Object.freeze(emptyObject);
            }
            /**
             * Base class helpers for the updating state of a component.
             */


            function Component(props, context, updater) {
              this.props = props;
              this.context = context; // If a component has string refs, we will assign a different object later.

              this.refs = emptyObject; // We initialize the default updater but the real one gets injected by the
              // renderer.

              this.updater = updater || ReactNoopUpdateQueue;
            }

            Component.prototype.isReactComponent = {};
            /**
             * Sets a subset of the state. Always use this to mutate
             * state. You should treat `this.state` as immutable.
             *
             * There is no guarantee that `this.state` will be immediately updated, so
             * accessing `this.state` after calling this method may return the old value.
             *
             * There is no guarantee that calls to `setState` will run synchronously,
             * as they may eventually be batched together.  You can provide an optional
             * callback that will be executed when the call to setState is actually
             * completed.
             *
             * When a function is provided to setState, it will be called at some point in
             * the future (not synchronously). It will be called with the up to date
             * component arguments (state, props, context). These values can be different
             * from this.* because your function may be called after receiveProps but before
             * shouldComponentUpdate, and this new state, props, and context will not yet be
             * assigned to this.
             *
             * @param {object|function} partialState Next partial state or function to
             *        produce next partial state to be merged with current state.
             * @param {?function} callback Called after state is updated.
             * @final
             * @protected
             */

            Component.prototype.setState = function (partialState, callback) {
              if (!(typeof partialState === 'object' || typeof partialState === 'function' || partialState == null)) {
                {
                  throw Error( "setState(...): takes an object of state variables to update or a function which returns an object of state variables." );
                }
              }

              this.updater.enqueueSetState(this, partialState, callback, 'setState');
            };
            /**
             * Forces an update. This should only be invoked when it is known with
             * certainty that we are **not** in a DOM transaction.
             *
             * You may want to call this when you know that some deeper aspect of the
             * component's state has changed but `setState` was not called.
             *
             * This will not invoke `shouldComponentUpdate`, but it will invoke
             * `componentWillUpdate` and `componentDidUpdate`.
             *
             * @param {?function} callback Called after update is complete.
             * @final
             * @protected
             */


            Component.prototype.forceUpdate = function (callback) {
              this.updater.enqueueForceUpdate(this, callback, 'forceUpdate');
            };
            /**
             * Deprecated APIs. These APIs used to exist on classic React classes but since
             * we would like to deprecate them, we're not going to move them over to this
             * modern base class. Instead, we define a getter that warns if it's accessed.
             */


            {
              var deprecatedAPIs = {
                isMounted: ['isMounted', 'Instead, make sure to clean up subscriptions and pending requests in ' + 'componentWillUnmount to prevent memory leaks.'],
                replaceState: ['replaceState', 'Refactor your code to use setState instead (see ' + 'https://github.com/facebook/react/issues/3236).']
              };

              var defineDeprecationWarning = function (methodName, info) {
                Object.defineProperty(Component.prototype, methodName, {
                  get: function () {
                    warn('%s(...) is deprecated in plain JavaScript React classes. %s', info[0], info[1]);

                    return undefined;
                  }
                });
              };

              for (var fnName in deprecatedAPIs) {
                if (deprecatedAPIs.hasOwnProperty(fnName)) {
                  defineDeprecationWarning(fnName, deprecatedAPIs[fnName]);
                }
              }
            }

            function ComponentDummy() {}

            ComponentDummy.prototype = Component.prototype;
            /**
             * Convenience component with default shallow equality check for sCU.
             */

            function PureComponent(props, context, updater) {
              this.props = props;
              this.context = context; // If a component has string refs, we will assign a different object later.

              this.refs = emptyObject;
              this.updater = updater || ReactNoopUpdateQueue;
            }

            var pureComponentPrototype = PureComponent.prototype = new ComponentDummy();
            pureComponentPrototype.constructor = PureComponent; // Avoid an extra prototype jump for these methods.

            _assign(pureComponentPrototype, Component.prototype);

            pureComponentPrototype.isPureReactComponent = true;

            // an immutable object with a single mutable value
            function createRef() {
              var refObject = {
                current: null
              };

              {
                Object.seal(refObject);
              }

              return refObject;
            }

            function getWrappedName(outerType, innerType, wrapperName) {
              var functionName = innerType.displayName || innerType.name || '';
              return outerType.displayName || (functionName !== '' ? wrapperName + "(" + functionName + ")" : wrapperName);
            }

            function getContextName(type) {
              return type.displayName || 'Context';
            }

            function getComponentName(type) {
              if (type == null) {
                // Host root, text node or just invalid type.
                return null;
              }

              {
                if (typeof type.tag === 'number') {
                  error('Received an unexpected object in getComponentName(). ' + 'This is likely a bug in React. Please file an issue.');
                }
              }

              if (typeof type === 'function') {
                return type.displayName || type.name || null;
              }

              if (typeof type === 'string') {
                return type;
              }

              switch (type) {
                case exports.Fragment:
                  return 'Fragment';

                case REACT_PORTAL_TYPE:
                  return 'Portal';

                case exports.Profiler:
                  return 'Profiler';

                case exports.StrictMode:
                  return 'StrictMode';

                case exports.Suspense:
                  return 'Suspense';

                case REACT_SUSPENSE_LIST_TYPE:
                  return 'SuspenseList';
              }

              if (typeof type === 'object') {
                switch (type.$$typeof) {
                  case REACT_CONTEXT_TYPE:
                    var context = type;
                    return getContextName(context) + '.Consumer';

                  case REACT_PROVIDER_TYPE:
                    var provider = type;
                    return getContextName(provider._context) + '.Provider';

                  case REACT_FORWARD_REF_TYPE:
                    return getWrappedName(type, type.render, 'ForwardRef');

                  case REACT_MEMO_TYPE:
                    return getComponentName(type.type);

                  case REACT_BLOCK_TYPE:
                    return getComponentName(type._render);

                  case REACT_LAZY_TYPE:
                    {
                      var lazyComponent = type;
                      var payload = lazyComponent._payload;
                      var init = lazyComponent._init;

                      try {
                        return getComponentName(init(payload));
                      } catch (x) {
                        return null;
                      }
                    }
                }
              }

              return null;
            }

            var hasOwnProperty = Object.prototype.hasOwnProperty;
            var RESERVED_PROPS = {
              key: true,
              ref: true,
              __self: true,
              __source: true
            };
            var specialPropKeyWarningShown, specialPropRefWarningShown, didWarnAboutStringRefs;

            {
              didWarnAboutStringRefs = {};
            }

            function hasValidRef(config) {
              {
                if (hasOwnProperty.call(config, 'ref')) {
                  var getter = Object.getOwnPropertyDescriptor(config, 'ref').get;

                  if (getter && getter.isReactWarning) {
                    return false;
                  }
                }
              }

              return config.ref !== undefined;
            }

            function hasValidKey(config) {
              {
                if (hasOwnProperty.call(config, 'key')) {
                  var getter = Object.getOwnPropertyDescriptor(config, 'key').get;

                  if (getter && getter.isReactWarning) {
                    return false;
                  }
                }
              }

              return config.key !== undefined;
            }

            function defineKeyPropWarningGetter(props, displayName) {
              var warnAboutAccessingKey = function () {
                {
                  if (!specialPropKeyWarningShown) {
                    specialPropKeyWarningShown = true;

                    error('%s: `key` is not a prop. Trying to access it will result ' + 'in `undefined` being returned. If you need to access the same ' + 'value within the child component, you should pass it as a different ' + 'prop. (https://reactjs.org/link/special-props)', displayName);
                  }
                }
              };

              warnAboutAccessingKey.isReactWarning = true;
              Object.defineProperty(props, 'key', {
                get: warnAboutAccessingKey,
                configurable: true
              });
            }

            function defineRefPropWarningGetter(props, displayName) {
              var warnAboutAccessingRef = function () {
                {
                  if (!specialPropRefWarningShown) {
                    specialPropRefWarningShown = true;

                    error('%s: `ref` is not a prop. Trying to access it will result ' + 'in `undefined` being returned. If you need to access the same ' + 'value within the child component, you should pass it as a different ' + 'prop. (https://reactjs.org/link/special-props)', displayName);
                  }
                }
              };

              warnAboutAccessingRef.isReactWarning = true;
              Object.defineProperty(props, 'ref', {
                get: warnAboutAccessingRef,
                configurable: true
              });
            }

            function warnIfStringRefCannotBeAutoConverted(config) {
              {
                if (typeof config.ref === 'string' && ReactCurrentOwner.current && config.__self && ReactCurrentOwner.current.stateNode !== config.__self) {
                  var componentName = getComponentName(ReactCurrentOwner.current.type);

                  if (!didWarnAboutStringRefs[componentName]) {
                    error('Component "%s" contains the string ref "%s". ' + 'Support for string refs will be removed in a future major release. ' + 'This case cannot be automatically converted to an arrow function. ' + 'We ask you to manually fix this case by using useRef() or createRef() instead. ' + 'Learn more about using refs safely here: ' + 'https://reactjs.org/link/strict-mode-string-ref', componentName, config.ref);

                    didWarnAboutStringRefs[componentName] = true;
                  }
                }
              }
            }
            /**
             * Factory method to create a new React element. This no longer adheres to
             * the class pattern, so do not use new to call it. Also, instanceof check
             * will not work. Instead test $$typeof field against Symbol.for('react.element') to check
             * if something is a React Element.
             *
             * @param {*} type
             * @param {*} props
             * @param {*} key
             * @param {string|object} ref
             * @param {*} owner
             * @param {*} self A *temporary* helper to detect places where `this` is
             * different from the `owner` when React.createElement is called, so that we
             * can warn. We want to get rid of owner and replace string `ref`s with arrow
             * functions, and as long as `this` and owner are the same, there will be no
             * change in behavior.
             * @param {*} source An annotation object (added by a transpiler or otherwise)
             * indicating filename, line number, and/or other information.
             * @internal
             */


            var ReactElement = function (type, key, ref, self, source, owner, props) {
              var element = {
                // This tag allows us to uniquely identify this as a React Element
                $$typeof: REACT_ELEMENT_TYPE,
                // Built-in properties that belong on the element
                type: type,
                key: key,
                ref: ref,
                props: props,
                // Record the component responsible for creating this element.
                _owner: owner
              };

              {
                // The validation flag is currently mutative. We put it on
                // an external backing store so that we can freeze the whole object.
                // This can be replaced with a WeakMap once they are implemented in
                // commonly used development environments.
                element._store = {}; // To make comparing ReactElements easier for testing purposes, we make
                // the validation flag non-enumerable (where possible, which should
                // include every environment we run tests in), so the test framework
                // ignores it.

                Object.defineProperty(element._store, 'validated', {
                  configurable: false,
                  enumerable: false,
                  writable: true,
                  value: false
                }); // self and source are DEV only properties.

                Object.defineProperty(element, '_self', {
                  configurable: false,
                  enumerable: false,
                  writable: false,
                  value: self
                }); // Two elements created in two different places should be considered
                // equal for testing purposes and therefore we hide it from enumeration.

                Object.defineProperty(element, '_source', {
                  configurable: false,
                  enumerable: false,
                  writable: false,
                  value: source
                });

                if (Object.freeze) {
                  Object.freeze(element.props);
                  Object.freeze(element);
                }
              }

              return element;
            };
            /**
             * Create and return a new ReactElement of the given type.
             * See https://reactjs.org/docs/react-api.html#createelement
             */

            function createElement(type, config, children) {
              var propName; // Reserved names are extracted

              var props = {};
              var key = null;
              var ref = null;
              var self = null;
              var source = null;

              if (config != null) {
                if (hasValidRef(config)) {
                  ref = config.ref;

                  {
                    warnIfStringRefCannotBeAutoConverted(config);
                  }
                }

                if (hasValidKey(config)) {
                  key = '' + config.key;
                }

                self = config.__self === undefined ? null : config.__self;
                source = config.__source === undefined ? null : config.__source; // Remaining properties are added to a new props object

                for (propName in config) {
                  if (hasOwnProperty.call(config, propName) && !RESERVED_PROPS.hasOwnProperty(propName)) {
                    props[propName] = config[propName];
                  }
                }
              } // Children can be more than one argument, and those are transferred onto
              // the newly allocated props object.


              var childrenLength = arguments.length - 2;

              if (childrenLength === 1) {
                props.children = children;
              } else if (childrenLength > 1) {
                var childArray = Array(childrenLength);

                for (var i = 0; i < childrenLength; i++) {
                  childArray[i] = arguments[i + 2];
                }

                {
                  if (Object.freeze) {
                    Object.freeze(childArray);
                  }
                }

                props.children = childArray;
              } // Resolve default props


              if (type && type.defaultProps) {
                var defaultProps = type.defaultProps;

                for (propName in defaultProps) {
                  if (props[propName] === undefined) {
                    props[propName] = defaultProps[propName];
                  }
                }
              }

              {
                if (key || ref) {
                  var displayName = typeof type === 'function' ? type.displayName || type.name || 'Unknown' : type;

                  if (key) {
                    defineKeyPropWarningGetter(props, displayName);
                  }

                  if (ref) {
                    defineRefPropWarningGetter(props, displayName);
                  }
                }
              }

              return ReactElement(type, key, ref, self, source, ReactCurrentOwner.current, props);
            }
            function cloneAndReplaceKey(oldElement, newKey) {
              var newElement = ReactElement(oldElement.type, newKey, oldElement.ref, oldElement._self, oldElement._source, oldElement._owner, oldElement.props);
              return newElement;
            }
            /**
             * Clone and return a new ReactElement using element as the starting point.
             * See https://reactjs.org/docs/react-api.html#cloneelement
             */

            function cloneElement(element, config, children) {
              if (!!(element === null || element === undefined)) {
                {
                  throw Error( "React.cloneElement(...): The argument must be a React element, but you passed " + element + "." );
                }
              }

              var propName; // Original props are copied

              var props = _assign({}, element.props); // Reserved names are extracted


              var key = element.key;
              var ref = element.ref; // Self is preserved since the owner is preserved.

              var self = element._self; // Source is preserved since cloneElement is unlikely to be targeted by a
              // transpiler, and the original source is probably a better indicator of the
              // true owner.

              var source = element._source; // Owner will be preserved, unless ref is overridden

              var owner = element._owner;

              if (config != null) {
                if (hasValidRef(config)) {
                  // Silently steal the ref from the parent.
                  ref = config.ref;
                  owner = ReactCurrentOwner.current;
                }

                if (hasValidKey(config)) {
                  key = '' + config.key;
                } // Remaining properties override existing props


                var defaultProps;

                if (element.type && element.type.defaultProps) {
                  defaultProps = element.type.defaultProps;
                }

                for (propName in config) {
                  if (hasOwnProperty.call(config, propName) && !RESERVED_PROPS.hasOwnProperty(propName)) {
                    if (config[propName] === undefined && defaultProps !== undefined) {
                      // Resolve default props
                      props[propName] = defaultProps[propName];
                    } else {
                      props[propName] = config[propName];
                    }
                  }
                }
              } // Children can be more than one argument, and those are transferred onto
              // the newly allocated props object.


              var childrenLength = arguments.length - 2;

              if (childrenLength === 1) {
                props.children = children;
              } else if (childrenLength > 1) {
                var childArray = Array(childrenLength);

                for (var i = 0; i < childrenLength; i++) {
                  childArray[i] = arguments[i + 2];
                }

                props.children = childArray;
              }

              return ReactElement(element.type, key, ref, self, source, owner, props);
            }
            /**
             * Verifies the object is a ReactElement.
             * See https://reactjs.org/docs/react-api.html#isvalidelement
             * @param {?object} object
             * @return {boolean} True if `object` is a ReactElement.
             * @final
             */

            function isValidElement(object) {
              return typeof object === 'object' && object !== null && object.$$typeof === REACT_ELEMENT_TYPE;
            }

            var SEPARATOR = '.';
            var SUBSEPARATOR = ':';
            /**
             * Escape and wrap key so it is safe to use as a reactid
             *
             * @param {string} key to be escaped.
             * @return {string} the escaped key.
             */

            function escape(key) {
              var escapeRegex = /[=:]/g;
              var escaperLookup = {
                '=': '=0',
                ':': '=2'
              };
              var escapedString = key.replace(escapeRegex, function (match) {
                return escaperLookup[match];
              });
              return '$' + escapedString;
            }
            /**
             * TODO: Test that a single child and an array with one item have the same key
             * pattern.
             */


            var didWarnAboutMaps = false;
            var userProvidedKeyEscapeRegex = /\/+/g;

            function escapeUserProvidedKey(text) {
              return text.replace(userProvidedKeyEscapeRegex, '$&/');
            }
            /**
             * Generate a key string that identifies a element within a set.
             *
             * @param {*} element A element that could contain a manual key.
             * @param {number} index Index that is used if a manual key is not provided.
             * @return {string}
             */


            function getElementKey(element, index) {
              // Do some typechecking here since we call this blindly. We want to ensure
              // that we don't block potential future ES APIs.
              if (typeof element === 'object' && element !== null && element.key != null) {
                // Explicit key
                return escape('' + element.key);
              } // Implicit key determined by the index in the set


              return index.toString(36);
            }

            function mapIntoArray(children, array, escapedPrefix, nameSoFar, callback) {
              var type = typeof children;

              if (type === 'undefined' || type === 'boolean') {
                // All of the above are perceived as null.
                children = null;
              }

              var invokeCallback = false;

              if (children === null) {
                invokeCallback = true;
              } else {
                switch (type) {
                  case 'string':
                  case 'number':
                    invokeCallback = true;
                    break;

                  case 'object':
                    switch (children.$$typeof) {
                      case REACT_ELEMENT_TYPE:
                      case REACT_PORTAL_TYPE:
                        invokeCallback = true;
                    }

                }
              }

              if (invokeCallback) {
                var _child = children;
                var mappedChild = callback(_child); // If it's the only child, treat the name as if it was wrapped in an array
                // so that it's consistent if the number of children grows:

                var childKey = nameSoFar === '' ? SEPARATOR + getElementKey(_child, 0) : nameSoFar;

                if (Array.isArray(mappedChild)) {
                  var escapedChildKey = '';

                  if (childKey != null) {
                    escapedChildKey = escapeUserProvidedKey(childKey) + '/';
                  }

                  mapIntoArray(mappedChild, array, escapedChildKey, '', function (c) {
                    return c;
                  });
                } else if (mappedChild != null) {
                  if (isValidElement(mappedChild)) {
                    mappedChild = cloneAndReplaceKey(mappedChild, // Keep both the (mapped) and old keys if they differ, just as
                    // traverseAllChildren used to do for objects as children
                    escapedPrefix + ( // $FlowFixMe Flow incorrectly thinks React.Portal doesn't have a key
                    mappedChild.key && (!_child || _child.key !== mappedChild.key) ? // $FlowFixMe Flow incorrectly thinks existing element's key can be a number
                    escapeUserProvidedKey('' + mappedChild.key) + '/' : '') + childKey);
                  }

                  array.push(mappedChild);
                }

                return 1;
              }

              var child;
              var nextName;
              var subtreeCount = 0; // Count of children found in the current subtree.

              var nextNamePrefix = nameSoFar === '' ? SEPARATOR : nameSoFar + SUBSEPARATOR;

              if (Array.isArray(children)) {
                for (var i = 0; i < children.length; i++) {
                  child = children[i];
                  nextName = nextNamePrefix + getElementKey(child, i);
                  subtreeCount += mapIntoArray(child, array, escapedPrefix, nextName, callback);
                }
              } else {
                var iteratorFn = getIteratorFn(children);

                if (typeof iteratorFn === 'function') {
                  var iterableChildren = children;

                  {
                    // Warn about using Maps as children
                    if (iteratorFn === iterableChildren.entries) {
                      if (!didWarnAboutMaps) {
                        warn('Using Maps as children is not supported. ' + 'Use an array of keyed ReactElements instead.');
                      }

                      didWarnAboutMaps = true;
                    }
                  }

                  var iterator = iteratorFn.call(iterableChildren);
                  var step;
                  var ii = 0;

                  while (!(step = iterator.next()).done) {
                    child = step.value;
                    nextName = nextNamePrefix + getElementKey(child, ii++);
                    subtreeCount += mapIntoArray(child, array, escapedPrefix, nextName, callback);
                  }
                } else if (type === 'object') {
                  var childrenString = '' + children;

                  {
                    {
                      throw Error( "Objects are not valid as a React child (found: " + (childrenString === '[object Object]' ? 'object with keys {' + Object.keys(children).join(', ') + '}' : childrenString) + "). If you meant to render a collection of children, use an array instead." );
                    }
                  }
                }
              }

              return subtreeCount;
            }

            /**
             * Maps children that are typically specified as `props.children`.
             *
             * See https://reactjs.org/docs/react-api.html#reactchildrenmap
             *
             * The provided mapFunction(child, index) will be called for each
             * leaf child.
             *
             * @param {?*} children Children tree container.
             * @param {function(*, int)} func The map function.
             * @param {*} context Context for mapFunction.
             * @return {object} Object containing the ordered map of results.
             */
            function mapChildren(children, func, context) {
              if (children == null) {
                return children;
              }

              var result = [];
              var count = 0;
              mapIntoArray(children, result, '', '', function (child) {
                return func.call(context, child, count++);
              });
              return result;
            }
            /**
             * Count the number of children that are typically specified as
             * `props.children`.
             *
             * See https://reactjs.org/docs/react-api.html#reactchildrencount
             *
             * @param {?*} children Children tree container.
             * @return {number} The number of children.
             */


            function countChildren(children) {
              var n = 0;
              mapChildren(children, function () {
                n++; // Don't return anything
              });
              return n;
            }

            /**
             * Iterates through children that are typically specified as `props.children`.
             *
             * See https://reactjs.org/docs/react-api.html#reactchildrenforeach
             *
             * The provided forEachFunc(child, index) will be called for each
             * leaf child.
             *
             * @param {?*} children Children tree container.
             * @param {function(*, int)} forEachFunc
             * @param {*} forEachContext Context for forEachContext.
             */
            function forEachChildren(children, forEachFunc, forEachContext) {
              mapChildren(children, function () {
                forEachFunc.apply(this, arguments); // Don't return anything.
              }, forEachContext);
            }
            /**
             * Flatten a children object (typically specified as `props.children`) and
             * return an array with appropriately re-keyed children.
             *
             * See https://reactjs.org/docs/react-api.html#reactchildrentoarray
             */


            function toArray(children) {
              return mapChildren(children, function (child) {
                return child;
              }) || [];
            }
            /**
             * Returns the first child in a collection of children and verifies that there
             * is only one child in the collection.
             *
             * See https://reactjs.org/docs/react-api.html#reactchildrenonly
             *
             * The current implementation of this function assumes that a single child gets
             * passed without a wrapper, but the purpose of this helper function is to
             * abstract away the particular structure of children.
             *
             * @param {?object} children Child collection structure.
             * @return {ReactElement} The first and only `ReactElement` contained in the
             * structure.
             */


            function onlyChild(children) {
              if (!isValidElement(children)) {
                {
                  throw Error( "React.Children.only expected to receive a single React element child." );
                }
              }

              return children;
            }

            function createContext(defaultValue, calculateChangedBits) {
              if (calculateChangedBits === undefined) {
                calculateChangedBits = null;
              } else {
                {
                  if (calculateChangedBits !== null && typeof calculateChangedBits !== 'function') {
                    error('createContext: Expected the optional second argument to be a ' + 'function. Instead received: %s', calculateChangedBits);
                  }
                }
              }

              var context = {
                $$typeof: REACT_CONTEXT_TYPE,
                _calculateChangedBits: calculateChangedBits,
                // As a workaround to support multiple concurrent renderers, we categorize
                // some renderers as primary and others as secondary. We only expect
                // there to be two concurrent renderers at most: React Native (primary) and
                // Fabric (secondary); React DOM (primary) and React ART (secondary).
                // Secondary renderers store their context values on separate fields.
                _currentValue: defaultValue,
                _currentValue2: defaultValue,
                // Used to track how many concurrent renderers this context currently
                // supports within in a single renderer. Such as parallel server rendering.
                _threadCount: 0,
                // These are circular
                Provider: null,
                Consumer: null
              };
              context.Provider = {
                $$typeof: REACT_PROVIDER_TYPE,
                _context: context
              };
              var hasWarnedAboutUsingNestedContextConsumers = false;
              var hasWarnedAboutUsingConsumerProvider = false;
              var hasWarnedAboutDisplayNameOnConsumer = false;

              {
                // A separate object, but proxies back to the original context object for
                // backwards compatibility. It has a different $$typeof, so we can properly
                // warn for the incorrect usage of Context as a Consumer.
                var Consumer = {
                  $$typeof: REACT_CONTEXT_TYPE,
                  _context: context,
                  _calculateChangedBits: context._calculateChangedBits
                }; // $FlowFixMe: Flow complains about not setting a value, which is intentional here

                Object.defineProperties(Consumer, {
                  Provider: {
                    get: function () {
                      if (!hasWarnedAboutUsingConsumerProvider) {
                        hasWarnedAboutUsingConsumerProvider = true;

                        error('Rendering <Context.Consumer.Provider> is not supported and will be removed in ' + 'a future major release. Did you mean to render <Context.Provider> instead?');
                      }

                      return context.Provider;
                    },
                    set: function (_Provider) {
                      context.Provider = _Provider;
                    }
                  },
                  _currentValue: {
                    get: function () {
                      return context._currentValue;
                    },
                    set: function (_currentValue) {
                      context._currentValue = _currentValue;
                    }
                  },
                  _currentValue2: {
                    get: function () {
                      return context._currentValue2;
                    },
                    set: function (_currentValue2) {
                      context._currentValue2 = _currentValue2;
                    }
                  },
                  _threadCount: {
                    get: function () {
                      return context._threadCount;
                    },
                    set: function (_threadCount) {
                      context._threadCount = _threadCount;
                    }
                  },
                  Consumer: {
                    get: function () {
                      if (!hasWarnedAboutUsingNestedContextConsumers) {
                        hasWarnedAboutUsingNestedContextConsumers = true;

                        error('Rendering <Context.Consumer.Consumer> is not supported and will be removed in ' + 'a future major release. Did you mean to render <Context.Consumer> instead?');
                      }

                      return context.Consumer;
                    }
                  },
                  displayName: {
                    get: function () {
                      return context.displayName;
                    },
                    set: function (displayName) {
                      if (!hasWarnedAboutDisplayNameOnConsumer) {
                        warn('Setting `displayName` on Context.Consumer has no effect. ' + "You should set it directly on the context with Context.displayName = '%s'.", displayName);

                        hasWarnedAboutDisplayNameOnConsumer = true;
                      }
                    }
                  }
                }); // $FlowFixMe: Flow complains about missing properties because it doesn't understand defineProperty

                context.Consumer = Consumer;
              }

              {
                context._currentRenderer = null;
                context._currentRenderer2 = null;
              }

              return context;
            }

            var Uninitialized = -1;
            var Pending = 0;
            var Resolved = 1;
            var Rejected = 2;

            function lazyInitializer(payload) {
              if (payload._status === Uninitialized) {
                var ctor = payload._result;
                var thenable = ctor(); // Transition to the next state.

                var pending = payload;
                pending._status = Pending;
                pending._result = thenable;
                thenable.then(function (moduleObject) {
                  if (payload._status === Pending) {
                    var defaultExport = moduleObject.default;

                    {
                      if (defaultExport === undefined) {
                        error('lazy: Expected the result of a dynamic import() call. ' + 'Instead received: %s\n\nYour code should look like: \n  ' + // Break up imports to avoid accidentally parsing them as dependencies.
                        'const MyComponent = lazy(() => imp' + "ort('./MyComponent'))", moduleObject);
                      }
                    } // Transition to the next state.


                    var resolved = payload;
                    resolved._status = Resolved;
                    resolved._result = defaultExport;
                  }
                }, function (error) {
                  if (payload._status === Pending) {
                    // Transition to the next state.
                    var rejected = payload;
                    rejected._status = Rejected;
                    rejected._result = error;
                  }
                });
              }

              if (payload._status === Resolved) {
                return payload._result;
              } else {
                throw payload._result;
              }
            }

            function lazy(ctor) {
              var payload = {
                // We use these fields to store the result.
                _status: -1,
                _result: ctor
              };
              var lazyType = {
                $$typeof: REACT_LAZY_TYPE,
                _payload: payload,
                _init: lazyInitializer
              };

              {
                // In production, this would just set it on the object.
                var defaultProps;
                var propTypes; // $FlowFixMe

                Object.defineProperties(lazyType, {
                  defaultProps: {
                    configurable: true,
                    get: function () {
                      return defaultProps;
                    },
                    set: function (newDefaultProps) {
                      error('React.lazy(...): It is not supported to assign `defaultProps` to ' + 'a lazy component import. Either specify them where the component ' + 'is defined, or create a wrapping component around it.');

                      defaultProps = newDefaultProps; // Match production behavior more closely:
                      // $FlowFixMe

                      Object.defineProperty(lazyType, 'defaultProps', {
                        enumerable: true
                      });
                    }
                  },
                  propTypes: {
                    configurable: true,
                    get: function () {
                      return propTypes;
                    },
                    set: function (newPropTypes) {
                      error('React.lazy(...): It is not supported to assign `propTypes` to ' + 'a lazy component import. Either specify them where the component ' + 'is defined, or create a wrapping component around it.');

                      propTypes = newPropTypes; // Match production behavior more closely:
                      // $FlowFixMe

                      Object.defineProperty(lazyType, 'propTypes', {
                        enumerable: true
                      });
                    }
                  }
                });
              }

              return lazyType;
            }

            function forwardRef(render) {
              {
                if (render != null && render.$$typeof === REACT_MEMO_TYPE) {
                  error('forwardRef requires a render function but received a `memo` ' + 'component. Instead of forwardRef(memo(...)), use ' + 'memo(forwardRef(...)).');
                } else if (typeof render !== 'function') {
                  error('forwardRef requires a render function but was given %s.', render === null ? 'null' : typeof render);
                } else {
                  if (render.length !== 0 && render.length !== 2) {
                    error('forwardRef render functions accept exactly two parameters: props and ref. %s', render.length === 1 ? 'Did you forget to use the ref parameter?' : 'Any additional parameter will be undefined.');
                  }
                }

                if (render != null) {
                  if (render.defaultProps != null || render.propTypes != null) {
                    error('forwardRef render functions do not support propTypes or defaultProps. ' + 'Did you accidentally pass a React component?');
                  }
                }
              }

              var elementType = {
                $$typeof: REACT_FORWARD_REF_TYPE,
                render: render
              };

              {
                var ownName;
                Object.defineProperty(elementType, 'displayName', {
                  enumerable: false,
                  configurable: true,
                  get: function () {
                    return ownName;
                  },
                  set: function (name) {
                    ownName = name;

                    if (render.displayName == null) {
                      render.displayName = name;
                    }
                  }
                });
              }

              return elementType;
            }

            // Filter certain DOM attributes (e.g. src, href) if their values are empty strings.

            var enableScopeAPI = false; // Experimental Create Event Handle API.

            function isValidElementType(type) {
              if (typeof type === 'string' || typeof type === 'function') {
                return true;
              } // Note: typeof might be other than 'symbol' or 'number' (e.g. if it's a polyfill).


              if (type === exports.Fragment || type === exports.Profiler || type === REACT_DEBUG_TRACING_MODE_TYPE || type === exports.StrictMode || type === exports.Suspense || type === REACT_SUSPENSE_LIST_TYPE || type === REACT_LEGACY_HIDDEN_TYPE || enableScopeAPI ) {
                return true;
              }

              if (typeof type === 'object' && type !== null) {
                if (type.$$typeof === REACT_LAZY_TYPE || type.$$typeof === REACT_MEMO_TYPE || type.$$typeof === REACT_PROVIDER_TYPE || type.$$typeof === REACT_CONTEXT_TYPE || type.$$typeof === REACT_FORWARD_REF_TYPE || type.$$typeof === REACT_FUNDAMENTAL_TYPE || type.$$typeof === REACT_BLOCK_TYPE || type[0] === REACT_SERVER_BLOCK_TYPE) {
                  return true;
                }
              }

              return false;
            }

            function memo(type, compare) {
              {
                if (!isValidElementType(type)) {
                  error('memo: The first argument must be a component. Instead ' + 'received: %s', type === null ? 'null' : typeof type);
                }
              }

              var elementType = {
                $$typeof: REACT_MEMO_TYPE,
                type: type,
                compare: compare === undefined ? null : compare
              };

              {
                var ownName;
                Object.defineProperty(elementType, 'displayName', {
                  enumerable: false,
                  configurable: true,
                  get: function () {
                    return ownName;
                  },
                  set: function (name) {
                    ownName = name;

                    if (type.displayName == null) {
                      type.displayName = name;
                    }
                  }
                });
              }

              return elementType;
            }

            function resolveDispatcher() {
              var dispatcher = ReactCurrentDispatcher.current;

              if (!(dispatcher !== null)) {
                {
                  throw Error( "Invalid hook call. Hooks can only be called inside of the body of a function component. This could happen for one of the following reasons:\n1. You might have mismatching versions of React and the renderer (such as React DOM)\n2. You might be breaking the Rules of Hooks\n3. You might have more than one copy of React in the same app\nSee https://reactjs.org/link/invalid-hook-call for tips about how to debug and fix this problem." );
                }
              }

              return dispatcher;
            }

            function useContext(Context, unstable_observedBits) {
              var dispatcher = resolveDispatcher();

              {
                if (unstable_observedBits !== undefined) {
                  error('useContext() second argument is reserved for future ' + 'use in React. Passing it is not supported. ' + 'You passed: %s.%s', unstable_observedBits, typeof unstable_observedBits === 'number' && Array.isArray(arguments[2]) ? '\n\nDid you call array.map(useContext)? ' + 'Calling Hooks inside a loop is not supported. ' + 'Learn more at https://reactjs.org/link/rules-of-hooks' : '');
                } // TODO: add a more generic warning for invalid values.


                if (Context._context !== undefined) {
                  var realContext = Context._context; // Don't deduplicate because this legitimately causes bugs
                  // and nobody should be using this in existing code.

                  if (realContext.Consumer === Context) {
                    error('Calling useContext(Context.Consumer) is not supported, may cause bugs, and will be ' + 'removed in a future major release. Did you mean to call useContext(Context) instead?');
                  } else if (realContext.Provider === Context) {
                    error('Calling useContext(Context.Provider) is not supported. ' + 'Did you mean to call useContext(Context) instead?');
                  }
                }
              }

              return dispatcher.useContext(Context, unstable_observedBits);
            }
            function useState(initialState) {
              var dispatcher = resolveDispatcher();
              return dispatcher.useState(initialState);
            }
            function useReducer(reducer, initialArg, init) {
              var dispatcher = resolveDispatcher();
              return dispatcher.useReducer(reducer, initialArg, init);
            }
            function useRef(initialValue) {
              var dispatcher = resolveDispatcher();
              return dispatcher.useRef(initialValue);
            }
            function useEffect(create, deps) {
              var dispatcher = resolveDispatcher();
              return dispatcher.useEffect(create, deps);
            }
            function useLayoutEffect(create, deps) {
              var dispatcher = resolveDispatcher();
              return dispatcher.useLayoutEffect(create, deps);
            }
            function useCallback(callback, deps) {
              var dispatcher = resolveDispatcher();
              return dispatcher.useCallback(callback, deps);
            }
            function useMemo(create, deps) {
              var dispatcher = resolveDispatcher();
              return dispatcher.useMemo(create, deps);
            }
            function useImperativeHandle(ref, create, deps) {
              var dispatcher = resolveDispatcher();
              return dispatcher.useImperativeHandle(ref, create, deps);
            }
            function useDebugValue(value, formatterFn) {
              {
                var dispatcher = resolveDispatcher();
                return dispatcher.useDebugValue(value, formatterFn);
              }
            }

            // Helpers to patch console.logs to avoid logging during side-effect free
            // replaying on render function. This currently only patches the object
            // lazily which won't cover if the log function was extracted eagerly.
            // We could also eagerly patch the method.
            var disabledDepth = 0;
            var prevLog;
            var prevInfo;
            var prevWarn;
            var prevError;
            var prevGroup;
            var prevGroupCollapsed;
            var prevGroupEnd;

            function disabledLog() {}

            disabledLog.__reactDisabledLog = true;
            function disableLogs() {
              {
                if (disabledDepth === 0) {
                  /* eslint-disable react-internal/no-production-logging */
                  prevLog = console.log;
                  prevInfo = console.info;
                  prevWarn = console.warn;
                  prevError = console.error;
                  prevGroup = console.group;
                  prevGroupCollapsed = console.groupCollapsed;
                  prevGroupEnd = console.groupEnd; // https://github.com/facebook/react/issues/19099

                  var props = {
                    configurable: true,
                    enumerable: true,
                    value: disabledLog,
                    writable: true
                  }; // $FlowFixMe Flow thinks console is immutable.

                  Object.defineProperties(console, {
                    info: props,
                    log: props,
                    warn: props,
                    error: props,
                    group: props,
                    groupCollapsed: props,
                    groupEnd: props
                  });
                  /* eslint-enable react-internal/no-production-logging */
                }

                disabledDepth++;
              }
            }
            function reenableLogs() {
              {
                disabledDepth--;

                if (disabledDepth === 0) {
                  /* eslint-disable react-internal/no-production-logging */
                  var props = {
                    configurable: true,
                    enumerable: true,
                    writable: true
                  }; // $FlowFixMe Flow thinks console is immutable.

                  Object.defineProperties(console, {
                    log: _assign({}, props, {
                      value: prevLog
                    }),
                    info: _assign({}, props, {
                      value: prevInfo
                    }),
                    warn: _assign({}, props, {
                      value: prevWarn
                    }),
                    error: _assign({}, props, {
                      value: prevError
                    }),
                    group: _assign({}, props, {
                      value: prevGroup
                    }),
                    groupCollapsed: _assign({}, props, {
                      value: prevGroupCollapsed
                    }),
                    groupEnd: _assign({}, props, {
                      value: prevGroupEnd
                    })
                  });
                  /* eslint-enable react-internal/no-production-logging */
                }

                if (disabledDepth < 0) {
                  error('disabledDepth fell below zero. ' + 'This is a bug in React. Please file an issue.');
                }
              }
            }

            var ReactCurrentDispatcher$1 = ReactSharedInternals.ReactCurrentDispatcher;
            var prefix;
            function describeBuiltInComponentFrame(name, source, ownerFn) {
              {
                if (prefix === undefined) {
                  // Extract the VM specific prefix used by each line.
                  try {
                    throw Error();
                  } catch (x) {
                    var match = x.stack.trim().match(/\n( *(at )?)/);
                    prefix = match && match[1] || '';
                  }
                } // We use the prefix to ensure our stacks line up with native stack frames.


                return '\n' + prefix + name;
              }
            }
            var reentry = false;
            var componentFrameCache;

            {
              var PossiblyWeakMap = typeof WeakMap === 'function' ? WeakMap : Map;
              componentFrameCache = new PossiblyWeakMap();
            }

            function describeNativeComponentFrame(fn, construct) {
              // If something asked for a stack inside a fake render, it should get ignored.
              if (!fn || reentry) {
                return '';
              }

              {
                var frame = componentFrameCache.get(fn);

                if (frame !== undefined) {
                  return frame;
                }
              }

              var control;
              reentry = true;
              var previousPrepareStackTrace = Error.prepareStackTrace; // $FlowFixMe It does accept undefined.

              Error.prepareStackTrace = undefined;
              var previousDispatcher;

              {
                previousDispatcher = ReactCurrentDispatcher$1.current; // Set the dispatcher in DEV because this might be call in the render function
                // for warnings.

                ReactCurrentDispatcher$1.current = null;
                disableLogs();
              }

              try {
                // This should throw.
                if (construct) {
                  // Something should be setting the props in the constructor.
                  var Fake = function () {
                    throw Error();
                  }; // $FlowFixMe


                  Object.defineProperty(Fake.prototype, 'props', {
                    set: function () {
                      // We use a throwing setter instead of frozen or non-writable props
                      // because that won't throw in a non-strict mode function.
                      throw Error();
                    }
                  });

                  if (typeof Reflect === 'object' && Reflect.construct) {
                    // We construct a different control for this case to include any extra
                    // frames added by the construct call.
                    try {
                      Reflect.construct(Fake, []);
                    } catch (x) {
                      control = x;
                    }

                    Reflect.construct(fn, [], Fake);
                  } else {
                    try {
                      Fake.call();
                    } catch (x) {
                      control = x;
                    }

                    fn.call(Fake.prototype);
                  }
                } else {
                  try {
                    throw Error();
                  } catch (x) {
                    control = x;
                  }

                  fn();
                }
              } catch (sample) {
                // This is inlined manually because closure doesn't do it for us.
                if (sample && control && typeof sample.stack === 'string') {
                  // This extracts the first frame from the sample that isn't also in the control.
                  // Skipping one frame that we assume is the frame that calls the two.
                  var sampleLines = sample.stack.split('\n');
                  var controlLines = control.stack.split('\n');
                  var s = sampleLines.length - 1;
                  var c = controlLines.length - 1;

                  while (s >= 1 && c >= 0 && sampleLines[s] !== controlLines[c]) {
                    // We expect at least one stack frame to be shared.
                    // Typically this will be the root most one. However, stack frames may be
                    // cut off due to maximum stack limits. In this case, one maybe cut off
                    // earlier than the other. We assume that the sample is longer or the same
                    // and there for cut off earlier. So we should find the root most frame in
                    // the sample somewhere in the control.
                    c--;
                  }

                  for (; s >= 1 && c >= 0; s--, c--) {
                    // Next we find the first one that isn't the same which should be the
                    // frame that called our sample function and the control.
                    if (sampleLines[s] !== controlLines[c]) {
                      // In V8, the first line is describing the message but other VMs don't.
                      // If we're about to return the first line, and the control is also on the same
                      // line, that's a pretty good indicator that our sample threw at same line as
                      // the control. I.e. before we entered the sample frame. So we ignore this result.
                      // This can happen if you passed a class to function component, or non-function.
                      if (s !== 1 || c !== 1) {
                        do {
                          s--;
                          c--; // We may still have similar intermediate frames from the construct call.
                          // The next one that isn't the same should be our match though.

                          if (c < 0 || sampleLines[s] !== controlLines[c]) {
                            // V8 adds a "new" prefix for native classes. Let's remove it to make it prettier.
                            var _frame = '\n' + sampleLines[s].replace(' at new ', ' at ');

                            {
                              if (typeof fn === 'function') {
                                componentFrameCache.set(fn, _frame);
                              }
                            } // Return the line we found.


                            return _frame;
                          }
                        } while (s >= 1 && c >= 0);
                      }

                      break;
                    }
                  }
                }
              } finally {
                reentry = false;

                {
                  ReactCurrentDispatcher$1.current = previousDispatcher;
                  reenableLogs();
                }

                Error.prepareStackTrace = previousPrepareStackTrace;
              } // Fallback to just using the name if we couldn't make it throw.


              var name = fn ? fn.displayName || fn.name : '';
              var syntheticFrame = name ? describeBuiltInComponentFrame(name) : '';

              {
                if (typeof fn === 'function') {
                  componentFrameCache.set(fn, syntheticFrame);
                }
              }

              return syntheticFrame;
            }
            function describeFunctionComponentFrame(fn, source, ownerFn) {
              {
                return describeNativeComponentFrame(fn, false);
              }
            }

            function shouldConstruct(Component) {
              var prototype = Component.prototype;
              return !!(prototype && prototype.isReactComponent);
            }

            function describeUnknownElementTypeFrameInDEV(type, source, ownerFn) {

              if (type == null) {
                return '';
              }

              if (typeof type === 'function') {
                {
                  return describeNativeComponentFrame(type, shouldConstruct(type));
                }
              }

              if (typeof type === 'string') {
                return describeBuiltInComponentFrame(type);
              }

              switch (type) {
                case exports.Suspense:
                  return describeBuiltInComponentFrame('Suspense');

                case REACT_SUSPENSE_LIST_TYPE:
                  return describeBuiltInComponentFrame('SuspenseList');
              }

              if (typeof type === 'object') {
                switch (type.$$typeof) {
                  case REACT_FORWARD_REF_TYPE:
                    return describeFunctionComponentFrame(type.render);

                  case REACT_MEMO_TYPE:
                    // Memo may contain any component type so we recursively resolve it.
                    return describeUnknownElementTypeFrameInDEV(type.type, source, ownerFn);

                  case REACT_BLOCK_TYPE:
                    return describeFunctionComponentFrame(type._render);

                  case REACT_LAZY_TYPE:
                    {
                      var lazyComponent = type;
                      var payload = lazyComponent._payload;
                      var init = lazyComponent._init;

                      try {
                        // Lazy may contain any component type so we recursively resolve it.
                        return describeUnknownElementTypeFrameInDEV(init(payload), source, ownerFn);
                      } catch (x) {}
                    }
                }
              }

              return '';
            }

            var loggedTypeFailures = {};
            var ReactDebugCurrentFrame$1 = ReactSharedInternals.ReactDebugCurrentFrame;

            function setCurrentlyValidatingElement(element) {
              {
                if (element) {
                  var owner = element._owner;
                  var stack = describeUnknownElementTypeFrameInDEV(element.type, element._source, owner ? owner.type : null);
                  ReactDebugCurrentFrame$1.setExtraStackFrame(stack);
                } else {
                  ReactDebugCurrentFrame$1.setExtraStackFrame(null);
                }
              }
            }

            function checkPropTypes(typeSpecs, values, location, componentName, element) {
              {
                // $FlowFixMe This is okay but Flow doesn't know it.
                var has = Function.call.bind(Object.prototype.hasOwnProperty);

                for (var typeSpecName in typeSpecs) {
                  if (has(typeSpecs, typeSpecName)) {
                    var error$1 = void 0; // Prop type validation may throw. In case they do, we don't want to
                    // fail the render phase where it didn't fail before. So we log it.
                    // After these have been cleaned up, we'll let them throw.

                    try {
                      // This is intentionally an invariant that gets caught. It's the same
                      // behavior as without this statement except with a better message.
                      if (typeof typeSpecs[typeSpecName] !== 'function') {
                        var err = Error((componentName || 'React class') + ': ' + location + ' type `' + typeSpecName + '` is invalid; ' + 'it must be a function, usually from the `prop-types` package, but received `' + typeof typeSpecs[typeSpecName] + '`.' + 'This often happens because of typos such as `PropTypes.function` instead of `PropTypes.func`.');
                        err.name = 'Invariant Violation';
                        throw err;
                      }

                      error$1 = typeSpecs[typeSpecName](values, typeSpecName, componentName, location, null, 'SECRET_DO_NOT_PASS_THIS_OR_YOU_WILL_BE_FIRED');
                    } catch (ex) {
                      error$1 = ex;
                    }

                    if (error$1 && !(error$1 instanceof Error)) {
                      setCurrentlyValidatingElement(element);

                      error('%s: type specification of %s' + ' `%s` is invalid; the type checker ' + 'function must return `null` or an `Error` but returned a %s. ' + 'You may have forgotten to pass an argument to the type checker ' + 'creator (arrayOf, instanceOf, objectOf, oneOf, oneOfType, and ' + 'shape all require an argument).', componentName || 'React class', location, typeSpecName, typeof error$1);

                      setCurrentlyValidatingElement(null);
                    }

                    if (error$1 instanceof Error && !(error$1.message in loggedTypeFailures)) {
                      // Only monitor this failure once because there tends to be a lot of the
                      // same error.
                      loggedTypeFailures[error$1.message] = true;
                      setCurrentlyValidatingElement(element);

                      error('Failed %s type: %s', location, error$1.message);

                      setCurrentlyValidatingElement(null);
                    }
                  }
                }
              }
            }

            function setCurrentlyValidatingElement$1(element) {
              {
                if (element) {
                  var owner = element._owner;
                  var stack = describeUnknownElementTypeFrameInDEV(element.type, element._source, owner ? owner.type : null);
                  setExtraStackFrame(stack);
                } else {
                  setExtraStackFrame(null);
                }
              }
            }

            var propTypesMisspellWarningShown;

            {
              propTypesMisspellWarningShown = false;
            }

            function getDeclarationErrorAddendum() {
              if (ReactCurrentOwner.current) {
                var name = getComponentName(ReactCurrentOwner.current.type);

                if (name) {
                  return '\n\nCheck the render method of `' + name + '`.';
                }
              }

              return '';
            }

            function getSourceInfoErrorAddendum(source) {
              if (source !== undefined) {
                var fileName = source.fileName.replace(/^.*[\\\/]/, '');
                var lineNumber = source.lineNumber;
                return '\n\nCheck your code at ' + fileName + ':' + lineNumber + '.';
              }

              return '';
            }

            function getSourceInfoErrorAddendumForProps(elementProps) {
              if (elementProps !== null && elementProps !== undefined) {
                return getSourceInfoErrorAddendum(elementProps.__source);
              }

              return '';
            }
            /**
             * Warn if there's no key explicitly set on dynamic arrays of children or
             * object keys are not valid. This allows us to keep track of children between
             * updates.
             */


            var ownerHasKeyUseWarning = {};

            function getCurrentComponentErrorInfo(parentType) {
              var info = getDeclarationErrorAddendum();

              if (!info) {
                var parentName = typeof parentType === 'string' ? parentType : parentType.displayName || parentType.name;

                if (parentName) {
                  info = "\n\nCheck the top-level render call using <" + parentName + ">.";
                }
              }

              return info;
            }
            /**
             * Warn if the element doesn't have an explicit key assigned to it.
             * This element is in an array. The array could grow and shrink or be
             * reordered. All children that haven't already been validated are required to
             * have a "key" property assigned to it. Error statuses are cached so a warning
             * will only be shown once.
             *
             * @internal
             * @param {ReactElement} element Element that requires a key.
             * @param {*} parentType element's parent's type.
             */


            function validateExplicitKey(element, parentType) {
              if (!element._store || element._store.validated || element.key != null) {
                return;
              }

              element._store.validated = true;
              var currentComponentErrorInfo = getCurrentComponentErrorInfo(parentType);

              if (ownerHasKeyUseWarning[currentComponentErrorInfo]) {
                return;
              }

              ownerHasKeyUseWarning[currentComponentErrorInfo] = true; // Usually the current owner is the offender, but if it accepts children as a
              // property, it may be the creator of the child that's responsible for
              // assigning it a key.

              var childOwner = '';

              if (element && element._owner && element._owner !== ReactCurrentOwner.current) {
                // Give the component that originally created this child.
                childOwner = " It was passed a child from " + getComponentName(element._owner.type) + ".";
              }

              {
                setCurrentlyValidatingElement$1(element);

                error('Each child in a list should have a unique "key" prop.' + '%s%s See https://reactjs.org/link/warning-keys for more information.', currentComponentErrorInfo, childOwner);

                setCurrentlyValidatingElement$1(null);
              }
            }
            /**
             * Ensure that every element either is passed in a static location, in an
             * array with an explicit keys property defined, or in an object literal
             * with valid key property.
             *
             * @internal
             * @param {ReactNode} node Statically passed child of any type.
             * @param {*} parentType node's parent's type.
             */


            function validateChildKeys(node, parentType) {
              if (typeof node !== 'object') {
                return;
              }

              if (Array.isArray(node)) {
                for (var i = 0; i < node.length; i++) {
                  var child = node[i];

                  if (isValidElement(child)) {
                    validateExplicitKey(child, parentType);
                  }
                }
              } else if (isValidElement(node)) {
                // This element was passed in a valid location.
                if (node._store) {
                  node._store.validated = true;
                }
              } else if (node) {
                var iteratorFn = getIteratorFn(node);

                if (typeof iteratorFn === 'function') {
                  // Entry iterators used to provide implicit keys,
                  // but now we print a separate warning for them later.
                  if (iteratorFn !== node.entries) {
                    var iterator = iteratorFn.call(node);
                    var step;

                    while (!(step = iterator.next()).done) {
                      if (isValidElement(step.value)) {
                        validateExplicitKey(step.value, parentType);
                      }
                    }
                  }
                }
              }
            }
            /**
             * Given an element, validate that its props follow the propTypes definition,
             * provided by the type.
             *
             * @param {ReactElement} element
             */


            function validatePropTypes(element) {
              {
                var type = element.type;

                if (type === null || type === undefined || typeof type === 'string') {
                  return;
                }

                var propTypes;

                if (typeof type === 'function') {
                  propTypes = type.propTypes;
                } else if (typeof type === 'object' && (type.$$typeof === REACT_FORWARD_REF_TYPE || // Note: Memo only checks outer props here.
                // Inner props are checked in the reconciler.
                type.$$typeof === REACT_MEMO_TYPE)) {
                  propTypes = type.propTypes;
                } else {
                  return;
                }

                if (propTypes) {
                  // Intentionally inside to avoid triggering lazy initializers:
                  var name = getComponentName(type);
                  checkPropTypes(propTypes, element.props, 'prop', name, element);
                } else if (type.PropTypes !== undefined && !propTypesMisspellWarningShown) {
                  propTypesMisspellWarningShown = true; // Intentionally inside to avoid triggering lazy initializers:

                  var _name = getComponentName(type);

                  error('Component %s declared `PropTypes` instead of `propTypes`. Did you misspell the property assignment?', _name || 'Unknown');
                }

                if (typeof type.getDefaultProps === 'function' && !type.getDefaultProps.isReactClassApproved) {
                  error('getDefaultProps is only used on classic React.createClass ' + 'definitions. Use a static property named `defaultProps` instead.');
                }
              }
            }
            /**
             * Given a fragment, validate that it can only be provided with fragment props
             * @param {ReactElement} fragment
             */


            function validateFragmentProps(fragment) {
              {
                var keys = Object.keys(fragment.props);

                for (var i = 0; i < keys.length; i++) {
                  var key = keys[i];

                  if (key !== 'children' && key !== 'key') {
                    setCurrentlyValidatingElement$1(fragment);

                    error('Invalid prop `%s` supplied to `React.Fragment`. ' + 'React.Fragment can only have `key` and `children` props.', key);

                    setCurrentlyValidatingElement$1(null);
                    break;
                  }
                }

                if (fragment.ref !== null) {
                  setCurrentlyValidatingElement$1(fragment);

                  error('Invalid attribute `ref` supplied to `React.Fragment`.');

                  setCurrentlyValidatingElement$1(null);
                }
              }
            }
            function createElementWithValidation(type, props, children) {
              var validType = isValidElementType(type); // We warn in this case but don't throw. We expect the element creation to
              // succeed and there will likely be errors in render.

              if (!validType) {
                var info = '';

                if (type === undefined || typeof type === 'object' && type !== null && Object.keys(type).length === 0) {
                  info += ' You likely forgot to export your component from the file ' + "it's defined in, or you might have mixed up default and named imports.";
                }

                var sourceInfo = getSourceInfoErrorAddendumForProps(props);

                if (sourceInfo) {
                  info += sourceInfo;
                } else {
                  info += getDeclarationErrorAddendum();
                }

                var typeString;

                if (type === null) {
                  typeString = 'null';
                } else if (Array.isArray(type)) {
                  typeString = 'array';
                } else if (type !== undefined && type.$$typeof === REACT_ELEMENT_TYPE) {
                  typeString = "<" + (getComponentName(type.type) || 'Unknown') + " />";
                  info = ' Did you accidentally export a JSX literal instead of a component?';
                } else {
                  typeString = typeof type;
                }

                {
                  error('React.createElement: type is invalid -- expected a string (for ' + 'built-in components) or a class/function (for composite ' + 'components) but got: %s.%s', typeString, info);
                }
              }

              var element = createElement.apply(this, arguments); // The result can be nullish if a mock or a custom function is used.
              // TODO: Drop this when these are no longer allowed as the type argument.

              if (element == null) {
                return element;
              } // Skip key warning if the type isn't valid since our key validation logic
              // doesn't expect a non-string/function type and can throw confusing errors.
              // We don't want exception behavior to differ between dev and prod.
              // (Rendering will throw with a helpful message and as soon as the type is
              // fixed, the key warnings will appear.)


              if (validType) {
                for (var i = 2; i < arguments.length; i++) {
                  validateChildKeys(arguments[i], type);
                }
              }

              if (type === exports.Fragment) {
                validateFragmentProps(element);
              } else {
                validatePropTypes(element);
              }

              return element;
            }
            var didWarnAboutDeprecatedCreateFactory = false;
            function createFactoryWithValidation(type) {
              var validatedFactory = createElementWithValidation.bind(null, type);
              validatedFactory.type = type;

              {
                if (!didWarnAboutDeprecatedCreateFactory) {
                  didWarnAboutDeprecatedCreateFactory = true;

                  warn('React.createFactory() is deprecated and will be removed in ' + 'a future major release. Consider using JSX ' + 'or use React.createElement() directly instead.');
                } // Legacy hook: remove it


                Object.defineProperty(validatedFactory, 'type', {
                  enumerable: false,
                  get: function () {
                    warn('Factory.type is deprecated. Access the class directly ' + 'before passing it to createFactory.');

                    Object.defineProperty(this, 'type', {
                      value: type
                    });
                    return type;
                  }
                });
              }

              return validatedFactory;
            }
            function cloneElementWithValidation(element, props, children) {
              var newElement = cloneElement.apply(this, arguments);

              for (var i = 2; i < arguments.length; i++) {
                validateChildKeys(arguments[i], newElement.type);
              }

              validatePropTypes(newElement);
              return newElement;
            }

            {

              try {
                var frozenObject = Object.freeze({});
                /* eslint-disable no-new */

                new Map([[frozenObject, null]]);
                new Set([frozenObject]);
                /* eslint-enable no-new */
              } catch (e) {
              }
            }

            var createElement$1 =  createElementWithValidation ;
            var cloneElement$1 =  cloneElementWithValidation ;
            var createFactory =  createFactoryWithValidation ;
            var Children = {
              map: mapChildren,
              forEach: forEachChildren,
              count: countChildren,
              toArray: toArray,
              only: onlyChild
            };

            exports.Children = Children;
            exports.Component = Component;
            exports.PureComponent = PureComponent;
            exports.__SECRET_INTERNALS_DO_NOT_USE_OR_YOU_WILL_BE_FIRED = ReactSharedInternals;
            exports.cloneElement = cloneElement$1;
            exports.createContext = createContext;
            exports.createElement = createElement$1;
            exports.createFactory = createFactory;
            exports.createRef = createRef;
            exports.forwardRef = forwardRef;
            exports.isValidElement = isValidElement;
            exports.lazy = lazy;
            exports.memo = memo;
            exports.useCallback = useCallback;
            exports.useContext = useContext;
            exports.useDebugValue = useDebugValue;
            exports.useEffect = useEffect;
            exports.useImperativeHandle = useImperativeHandle;
            exports.useLayoutEffect = useLayoutEffect;
            exports.useMemo = useMemo;
            exports.useReducer = useReducer;
            exports.useRef = useRef;
            exports.useState = useState;
            exports.version = ReactVersion;
              })();
            }
            });

            var react = createCommonjsModule(function (module) {

            {
              module.exports = react_development;
            }
            });

            /** @license React v0.20.2
             * scheduler.production.min.js
             *
             * Copyright (c) Facebook, Inc. and its affiliates.
             *
             * This source code is licensed under the MIT license found in the
             * LICENSE file in the root directory of this source tree.
             */

            createCommonjsModule(function (module, exports) {
            var f,g,h,k;if("object"===typeof performance&&"function"===typeof performance.now){var l=performance;exports.unstable_now=function(){return l.now()};}else {var p=Date,q=p.now();exports.unstable_now=function(){return p.now()-q};}
            if("undefined"===typeof window||"function"!==typeof MessageChannel){var t=null,u=null,w=function(){if(null!==t)try{var a=exports.unstable_now();t(!0,a);t=null;}catch(b){throw setTimeout(w,0),b;}};f=function(a){null!==t?setTimeout(f,0,a):(t=a,setTimeout(w,0));};g=function(a,b){u=setTimeout(a,b);};h=function(){clearTimeout(u);};exports.unstable_shouldYield=function(){return !1};k=exports.unstable_forceFrameRate=function(){};}else {var x=window.setTimeout,y=window.clearTimeout;if("undefined"!==typeof console){var z=
            window.cancelAnimationFrame;"function"!==typeof window.requestAnimationFrame&&console.error("This browser doesn't support requestAnimationFrame. Make sure that you load a polyfill in older browsers. https://reactjs.org/link/react-polyfills");"function"!==typeof z&&console.error("This browser doesn't support cancelAnimationFrame. Make sure that you load a polyfill in older browsers. https://reactjs.org/link/react-polyfills");}var A=!1,B=null,C=-1,D=5,E=0;exports.unstable_shouldYield=function(){return exports.unstable_now()>=
            E};k=function(){};exports.unstable_forceFrameRate=function(a){0>a||125<a?console.error("forceFrameRate takes a positive int between 0 and 125, forcing frame rates higher than 125 fps is not supported"):D=0<a?Math.floor(1E3/a):5;};var F=new MessageChannel,G=F.port2;F.port1.onmessage=function(){if(null!==B){var a=exports.unstable_now();E=a+D;try{B(!0,a)?G.postMessage(null):(A=!1,B=null);}catch(b){throw G.postMessage(null),b;}}else A=!1;};f=function(a){B=a;A||(A=!0,G.postMessage(null));};g=function(a,b){C=
            x(function(){a(exports.unstable_now());},b);};h=function(){y(C);C=-1;};}function H(a,b){var c=a.length;a.push(b);a:for(;;){var d=c-1>>>1,e=a[d];if(void 0!==e&&0<I(e,b))a[d]=b,a[c]=e,c=d;else break a}}function J(a){a=a[0];return void 0===a?null:a}
            function K(a){var b=a[0];if(void 0!==b){var c=a.pop();if(c!==b){a[0]=c;a:for(var d=0,e=a.length;d<e;){var m=2*(d+1)-1,n=a[m],v=m+1,r=a[v];if(void 0!==n&&0>I(n,c))void 0!==r&&0>I(r,n)?(a[d]=r,a[v]=c,d=v):(a[d]=n,a[m]=c,d=m);else if(void 0!==r&&0>I(r,c))a[d]=r,a[v]=c,d=v;else break a}}return b}return null}function I(a,b){var c=a.sortIndex-b.sortIndex;return 0!==c?c:a.id-b.id}var L=[],M=[],N=1,O=null,P=3,Q=!1,R=!1,S=!1;
            function T(a){for(var b=J(M);null!==b;){if(null===b.callback)K(M);else if(b.startTime<=a)K(M),b.sortIndex=b.expirationTime,H(L,b);else break;b=J(M);}}function U(a){S=!1;T(a);if(!R)if(null!==J(L))R=!0,f(V);else {var b=J(M);null!==b&&g(U,b.startTime-a);}}
            function V(a,b){R=!1;S&&(S=!1,h());Q=!0;var c=P;try{T(b);for(O=J(L);null!==O&&(!(O.expirationTime>b)||a&&!exports.unstable_shouldYield());){var d=O.callback;if("function"===typeof d){O.callback=null;P=O.priorityLevel;var e=d(O.expirationTime<=b);b=exports.unstable_now();"function"===typeof e?O.callback=e:O===J(L)&&K(L);T(b);}else K(L);O=J(L);}if(null!==O)var m=!0;else {var n=J(M);null!==n&&g(U,n.startTime-b);m=!1;}return m}finally{O=null,P=c,Q=!1;}}var W=k;exports.unstable_IdlePriority=5;
            exports.unstable_ImmediatePriority=1;exports.unstable_LowPriority=4;exports.unstable_NormalPriority=3;exports.unstable_Profiling=null;exports.unstable_UserBlockingPriority=2;exports.unstable_cancelCallback=function(a){a.callback=null;};exports.unstable_continueExecution=function(){R||Q||(R=!0,f(V));};exports.unstable_getCurrentPriorityLevel=function(){return P};exports.unstable_getFirstCallbackNode=function(){return J(L)};
            exports.unstable_next=function(a){switch(P){case 1:case 2:case 3:var b=3;break;default:b=P;}var c=P;P=b;try{return a()}finally{P=c;}};exports.unstable_pauseExecution=function(){};exports.unstable_requestPaint=W;exports.unstable_runWithPriority=function(a,b){switch(a){case 1:case 2:case 3:case 4:case 5:break;default:a=3;}var c=P;P=a;try{return b()}finally{P=c;}};
            exports.unstable_scheduleCallback=function(a,b,c){var d=exports.unstable_now();"object"===typeof c&&null!==c?(c=c.delay,c="number"===typeof c&&0<c?d+c:d):c=d;switch(a){case 1:var e=-1;break;case 2:e=250;break;case 5:e=1073741823;break;case 4:e=1E4;break;default:e=5E3;}e=c+e;a={id:N++,callback:b,priorityLevel:a,startTime:c,expirationTime:e,sortIndex:-1};c>d?(a.sortIndex=c,H(M,a),null===J(L)&&a===J(M)&&(S?h():S=!0,g(U,c-d))):(a.sortIndex=e,H(L,a),R||Q||(R=!0,f(V)));return a};
            exports.unstable_wrapCallback=function(a){var b=P;return function(){var c=P;P=b;try{return a.apply(this,arguments)}finally{P=c;}}};
            });

            var scheduler_development = createCommonjsModule(function (module, exports) {

            {
              (function() {

            var enableSchedulerDebugging = false;
            var enableProfiling = false;

            var requestHostCallback;
            var requestHostTimeout;
            var cancelHostTimeout;
            var requestPaint;
            var hasPerformanceNow = typeof performance === 'object' && typeof performance.now === 'function';

            if (hasPerformanceNow) {
              var localPerformance = performance;

              exports.unstable_now = function () {
                return localPerformance.now();
              };
            } else {
              var localDate = Date;
              var initialTime = localDate.now();

              exports.unstable_now = function () {
                return localDate.now() - initialTime;
              };
            }

            if ( // If Scheduler runs in a non-DOM environment, it falls back to a naive
            // implementation using setTimeout.
            typeof window === 'undefined' || // Check if MessageChannel is supported, too.
            typeof MessageChannel !== 'function') {
              // If this accidentally gets imported in a non-browser environment, e.g. JavaScriptCore,
              // fallback to a naive implementation.
              var _callback = null;
              var _timeoutID = null;

              var _flushCallback = function () {
                if (_callback !== null) {
                  try {
                    var currentTime = exports.unstable_now();
                    var hasRemainingTime = true;

                    _callback(hasRemainingTime, currentTime);

                    _callback = null;
                  } catch (e) {
                    setTimeout(_flushCallback, 0);
                    throw e;
                  }
                }
              };

              requestHostCallback = function (cb) {
                if (_callback !== null) {
                  // Protect against re-entrancy.
                  setTimeout(requestHostCallback, 0, cb);
                } else {
                  _callback = cb;
                  setTimeout(_flushCallback, 0);
                }
              };

              requestHostTimeout = function (cb, ms) {
                _timeoutID = setTimeout(cb, ms);
              };

              cancelHostTimeout = function () {
                clearTimeout(_timeoutID);
              };

              exports.unstable_shouldYield = function () {
                return false;
              };

              requestPaint = exports.unstable_forceFrameRate = function () {};
            } else {
              // Capture local references to native APIs, in case a polyfill overrides them.
              var _setTimeout = window.setTimeout;
              var _clearTimeout = window.clearTimeout;

              if (typeof console !== 'undefined') {
                // TODO: Scheduler no longer requires these methods to be polyfilled. But
                // maybe we want to continue warning if they don't exist, to preserve the
                // option to rely on it in the future?
                var requestAnimationFrame = window.requestAnimationFrame;
                var cancelAnimationFrame = window.cancelAnimationFrame;

                if (typeof requestAnimationFrame !== 'function') {
                  // Using console['error'] to evade Babel and ESLint
                  console['error']("This browser doesn't support requestAnimationFrame. " + 'Make sure that you load a ' + 'polyfill in older browsers. https://reactjs.org/link/react-polyfills');
                }

                if (typeof cancelAnimationFrame !== 'function') {
                  // Using console['error'] to evade Babel and ESLint
                  console['error']("This browser doesn't support cancelAnimationFrame. " + 'Make sure that you load a ' + 'polyfill in older browsers. https://reactjs.org/link/react-polyfills');
                }
              }

              var isMessageLoopRunning = false;
              var scheduledHostCallback = null;
              var taskTimeoutID = -1; // Scheduler periodically yields in case there is other work on the main
              // thread, like user events. By default, it yields multiple times per frame.
              // It does not attempt to align with frame boundaries, since most tasks don't
              // need to be frame aligned; for those that do, use requestAnimationFrame.

              var yieldInterval = 5;
              var deadline = 0; // TODO: Make this configurable

              {
                // `isInputPending` is not available. Since we have no way of knowing if
                // there's pending input, always yield at the end of the frame.
                exports.unstable_shouldYield = function () {
                  return exports.unstable_now() >= deadline;
                }; // Since we yield every frame regardless, `requestPaint` has no effect.


                requestPaint = function () {};
              }

              exports.unstable_forceFrameRate = function (fps) {
                if (fps < 0 || fps > 125) {
                  // Using console['error'] to evade Babel and ESLint
                  console['error']('forceFrameRate takes a positive int between 0 and 125, ' + 'forcing frame rates higher than 125 fps is not supported');
                  return;
                }

                if (fps > 0) {
                  yieldInterval = Math.floor(1000 / fps);
                } else {
                  // reset the framerate
                  yieldInterval = 5;
                }
              };

              var performWorkUntilDeadline = function () {
                if (scheduledHostCallback !== null) {
                  var currentTime = exports.unstable_now(); // Yield after `yieldInterval` ms, regardless of where we are in the vsync
                  // cycle. This means there's always time remaining at the beginning of
                  // the message event.

                  deadline = currentTime + yieldInterval;
                  var hasTimeRemaining = true;

                  try {
                    var hasMoreWork = scheduledHostCallback(hasTimeRemaining, currentTime);

                    if (!hasMoreWork) {
                      isMessageLoopRunning = false;
                      scheduledHostCallback = null;
                    } else {
                      // If there's more work, schedule the next message event at the end
                      // of the preceding one.
                      port.postMessage(null);
                    }
                  } catch (error) {
                    // If a scheduler task throws, exit the current browser task so the
                    // error can be observed.
                    port.postMessage(null);
                    throw error;
                  }
                } else {
                  isMessageLoopRunning = false;
                } // Yielding to the browser will give it a chance to paint, so we can
              };

              var channel = new MessageChannel();
              var port = channel.port2;
              channel.port1.onmessage = performWorkUntilDeadline;

              requestHostCallback = function (callback) {
                scheduledHostCallback = callback;

                if (!isMessageLoopRunning) {
                  isMessageLoopRunning = true;
                  port.postMessage(null);
                }
              };

              requestHostTimeout = function (callback, ms) {
                taskTimeoutID = _setTimeout(function () {
                  callback(exports.unstable_now());
                }, ms);
              };

              cancelHostTimeout = function () {
                _clearTimeout(taskTimeoutID);

                taskTimeoutID = -1;
              };
            }

            function push(heap, node) {
              var index = heap.length;
              heap.push(node);
              siftUp(heap, node, index);
            }
            function peek(heap) {
              var first = heap[0];
              return first === undefined ? null : first;
            }
            function pop(heap) {
              var first = heap[0];

              if (first !== undefined) {
                var last = heap.pop();

                if (last !== first) {
                  heap[0] = last;
                  siftDown(heap, last, 0);
                }

                return first;
              } else {
                return null;
              }
            }

            function siftUp(heap, node, i) {
              var index = i;

              while (true) {
                var parentIndex = index - 1 >>> 1;
                var parent = heap[parentIndex];

                if (parent !== undefined && compare(parent, node) > 0) {
                  // The parent is larger. Swap positions.
                  heap[parentIndex] = node;
                  heap[index] = parent;
                  index = parentIndex;
                } else {
                  // The parent is smaller. Exit.
                  return;
                }
              }
            }

            function siftDown(heap, node, i) {
              var index = i;
              var length = heap.length;

              while (index < length) {
                var leftIndex = (index + 1) * 2 - 1;
                var left = heap[leftIndex];
                var rightIndex = leftIndex + 1;
                var right = heap[rightIndex]; // If the left or right node is smaller, swap with the smaller of those.

                if (left !== undefined && compare(left, node) < 0) {
                  if (right !== undefined && compare(right, left) < 0) {
                    heap[index] = right;
                    heap[rightIndex] = node;
                    index = rightIndex;
                  } else {
                    heap[index] = left;
                    heap[leftIndex] = node;
                    index = leftIndex;
                  }
                } else if (right !== undefined && compare(right, node) < 0) {
                  heap[index] = right;
                  heap[rightIndex] = node;
                  index = rightIndex;
                } else {
                  // Neither child is smaller. Exit.
                  return;
                }
              }
            }

            function compare(a, b) {
              // Compare sort index first, then task id.
              var diff = a.sortIndex - b.sortIndex;
              return diff !== 0 ? diff : a.id - b.id;
            }

            // TODO: Use symbols?
            var ImmediatePriority = 1;
            var UserBlockingPriority = 2;
            var NormalPriority = 3;
            var LowPriority = 4;
            var IdlePriority = 5;

            function markTaskErrored(task, ms) {
            }

            /* eslint-disable no-var */
            // Math.pow(2, 30) - 1
            // 0b111111111111111111111111111111

            var maxSigned31BitInt = 1073741823; // Times out immediately

            var IMMEDIATE_PRIORITY_TIMEOUT = -1; // Eventually times out

            var USER_BLOCKING_PRIORITY_TIMEOUT = 250;
            var NORMAL_PRIORITY_TIMEOUT = 5000;
            var LOW_PRIORITY_TIMEOUT = 10000; // Never times out

            var IDLE_PRIORITY_TIMEOUT = maxSigned31BitInt; // Tasks are stored on a min heap

            var taskQueue = [];
            var timerQueue = []; // Incrementing id counter. Used to maintain insertion order.

            var taskIdCounter = 1; // Pausing the scheduler is useful for debugging.
            var currentTask = null;
            var currentPriorityLevel = NormalPriority; // This is set while performing work, to prevent re-entrancy.

            var isPerformingWork = false;
            var isHostCallbackScheduled = false;
            var isHostTimeoutScheduled = false;

            function advanceTimers(currentTime) {
              // Check for tasks that are no longer delayed and add them to the queue.
              var timer = peek(timerQueue);

              while (timer !== null) {
                if (timer.callback === null) {
                  // Timer was cancelled.
                  pop(timerQueue);
                } else if (timer.startTime <= currentTime) {
                  // Timer fired. Transfer to the task queue.
                  pop(timerQueue);
                  timer.sortIndex = timer.expirationTime;
                  push(taskQueue, timer);
                } else {
                  // Remaining timers are pending.
                  return;
                }

                timer = peek(timerQueue);
              }
            }

            function handleTimeout(currentTime) {
              isHostTimeoutScheduled = false;
              advanceTimers(currentTime);

              if (!isHostCallbackScheduled) {
                if (peek(taskQueue) !== null) {
                  isHostCallbackScheduled = true;
                  requestHostCallback(flushWork);
                } else {
                  var firstTimer = peek(timerQueue);

                  if (firstTimer !== null) {
                    requestHostTimeout(handleTimeout, firstTimer.startTime - currentTime);
                  }
                }
              }
            }

            function flushWork(hasTimeRemaining, initialTime) {


              isHostCallbackScheduled = false;

              if (isHostTimeoutScheduled) {
                // We scheduled a timeout but it's no longer needed. Cancel it.
                isHostTimeoutScheduled = false;
                cancelHostTimeout();
              }

              isPerformingWork = true;
              var previousPriorityLevel = currentPriorityLevel;

              try {
                var currentTime; if (enableProfiling) ; else {
                  // No catch in prod code path.
                  return workLoop(hasTimeRemaining, initialTime);
                }
              } finally {
                currentTask = null;
                currentPriorityLevel = previousPriorityLevel;
                isPerformingWork = false;
              }
            }

            function workLoop(hasTimeRemaining, initialTime) {
              var currentTime = initialTime;
              advanceTimers(currentTime);
              currentTask = peek(taskQueue);

              while (currentTask !== null && !(enableSchedulerDebugging )) {
                if (currentTask.expirationTime > currentTime && (!hasTimeRemaining || exports.unstable_shouldYield())) {
                  // This currentTask hasn't expired, and we've reached the deadline.
                  break;
                }

                var callback = currentTask.callback;

                if (typeof callback === 'function') {
                  currentTask.callback = null;
                  currentPriorityLevel = currentTask.priorityLevel;
                  var didUserCallbackTimeout = currentTask.expirationTime <= currentTime;

                  var continuationCallback = callback(didUserCallbackTimeout);
                  currentTime = exports.unstable_now();

                  if (typeof continuationCallback === 'function') {
                    currentTask.callback = continuationCallback;
                  } else {

                    if (currentTask === peek(taskQueue)) {
                      pop(taskQueue);
                    }
                  }

                  advanceTimers(currentTime);
                } else {
                  pop(taskQueue);
                }

                currentTask = peek(taskQueue);
              } // Return whether there's additional work


              if (currentTask !== null) {
                return true;
              } else {
                var firstTimer = peek(timerQueue);

                if (firstTimer !== null) {
                  requestHostTimeout(handleTimeout, firstTimer.startTime - currentTime);
                }

                return false;
              }
            }

            function unstable_runWithPriority(priorityLevel, eventHandler) {
              switch (priorityLevel) {
                case ImmediatePriority:
                case UserBlockingPriority:
                case NormalPriority:
                case LowPriority:
                case IdlePriority:
                  break;

                default:
                  priorityLevel = NormalPriority;
              }

              var previousPriorityLevel = currentPriorityLevel;
              currentPriorityLevel = priorityLevel;

              try {
                return eventHandler();
              } finally {
                currentPriorityLevel = previousPriorityLevel;
              }
            }

            function unstable_next(eventHandler) {
              var priorityLevel;

              switch (currentPriorityLevel) {
                case ImmediatePriority:
                case UserBlockingPriority:
                case NormalPriority:
                  // Shift down to normal priority
                  priorityLevel = NormalPriority;
                  break;

                default:
                  // Anything lower than normal priority should remain at the current level.
                  priorityLevel = currentPriorityLevel;
                  break;
              }

              var previousPriorityLevel = currentPriorityLevel;
              currentPriorityLevel = priorityLevel;

              try {
                return eventHandler();
              } finally {
                currentPriorityLevel = previousPriorityLevel;
              }
            }

            function unstable_wrapCallback(callback) {
              var parentPriorityLevel = currentPriorityLevel;
              return function () {
                // This is a fork of runWithPriority, inlined for performance.
                var previousPriorityLevel = currentPriorityLevel;
                currentPriorityLevel = parentPriorityLevel;

                try {
                  return callback.apply(this, arguments);
                } finally {
                  currentPriorityLevel = previousPriorityLevel;
                }
              };
            }

            function unstable_scheduleCallback(priorityLevel, callback, options) {
              var currentTime = exports.unstable_now();
              var startTime;

              if (typeof options === 'object' && options !== null) {
                var delay = options.delay;

                if (typeof delay === 'number' && delay > 0) {
                  startTime = currentTime + delay;
                } else {
                  startTime = currentTime;
                }
              } else {
                startTime = currentTime;
              }

              var timeout;

              switch (priorityLevel) {
                case ImmediatePriority:
                  timeout = IMMEDIATE_PRIORITY_TIMEOUT;
                  break;

                case UserBlockingPriority:
                  timeout = USER_BLOCKING_PRIORITY_TIMEOUT;
                  break;

                case IdlePriority:
                  timeout = IDLE_PRIORITY_TIMEOUT;
                  break;

                case LowPriority:
                  timeout = LOW_PRIORITY_TIMEOUT;
                  break;

                case NormalPriority:
                default:
                  timeout = NORMAL_PRIORITY_TIMEOUT;
                  break;
              }

              var expirationTime = startTime + timeout;
              var newTask = {
                id: taskIdCounter++,
                callback: callback,
                priorityLevel: priorityLevel,
                startTime: startTime,
                expirationTime: expirationTime,
                sortIndex: -1
              };

              if (startTime > currentTime) {
                // This is a delayed task.
                newTask.sortIndex = startTime;
                push(timerQueue, newTask);

                if (peek(taskQueue) === null && newTask === peek(timerQueue)) {
                  // All tasks are delayed, and this is the task with the earliest delay.
                  if (isHostTimeoutScheduled) {
                    // Cancel an existing timeout.
                    cancelHostTimeout();
                  } else {
                    isHostTimeoutScheduled = true;
                  } // Schedule a timeout.


                  requestHostTimeout(handleTimeout, startTime - currentTime);
                }
              } else {
                newTask.sortIndex = expirationTime;
                push(taskQueue, newTask);
                // wait until the next time we yield.


                if (!isHostCallbackScheduled && !isPerformingWork) {
                  isHostCallbackScheduled = true;
                  requestHostCallback(flushWork);
                }
              }

              return newTask;
            }

            function unstable_pauseExecution() {
            }

            function unstable_continueExecution() {

              if (!isHostCallbackScheduled && !isPerformingWork) {
                isHostCallbackScheduled = true;
                requestHostCallback(flushWork);
              }
            }

            function unstable_getFirstCallbackNode() {
              return peek(taskQueue);
            }

            function unstable_cancelCallback(task) {
              // remove from the queue because you can't remove arbitrary nodes from an
              // array based heap, only the first one.)


              task.callback = null;
            }

            function unstable_getCurrentPriorityLevel() {
              return currentPriorityLevel;
            }

            var unstable_requestPaint = requestPaint;
            var unstable_Profiling =  null;

            exports.unstable_IdlePriority = IdlePriority;
            exports.unstable_ImmediatePriority = ImmediatePriority;
            exports.unstable_LowPriority = LowPriority;
            exports.unstable_NormalPriority = NormalPriority;
            exports.unstable_Profiling = unstable_Profiling;
            exports.unstable_UserBlockingPriority = UserBlockingPriority;
            exports.unstable_cancelCallback = unstable_cancelCallback;
            exports.unstable_continueExecution = unstable_continueExecution;
            exports.unstable_getCurrentPriorityLevel = unstable_getCurrentPriorityLevel;
            exports.unstable_getFirstCallbackNode = unstable_getFirstCallbackNode;
            exports.unstable_next = unstable_next;
            exports.unstable_pauseExecution = unstable_pauseExecution;
            exports.unstable_requestPaint = unstable_requestPaint;
            exports.unstable_runWithPriority = unstable_runWithPriority;
            exports.unstable_scheduleCallback = unstable_scheduleCallback;
            exports.unstable_wrapCallback = unstable_wrapCallback;
              })();
            }
            });

            var scheduler = createCommonjsModule(function (module) {

            {
              module.exports = scheduler_development;
            }
            });

            /** @license React v17.0.2
             * react-dom.production.min.js
             *
             * Copyright (c) Facebook, Inc. and its affiliates.
             *
             * This source code is licensed under the MIT license found in the
             * LICENSE file in the root directory of this source tree.
             */
            function y$2(a){for(var b="https://reactjs.org/docs/error-decoder.html?invariant="+a,c=1;c<arguments.length;c++)b+="&args[]="+encodeURIComponent(arguments[c]);return "Minified React error #"+a+"; visit "+b+" for the full message or use the non-minified dev environment for full errors and additional helpful warnings."}if(!react)throw Error(y$2(227));var ba=new Set;function da(a,b){ea(a,b);ea(a+"Capture",b);}
            function ea(a,b){for(a=0;a<b.length;a++)ba.add(b[a]);}
            var fa=!("undefined"===typeof window||"undefined"===typeof window.document||"undefined"===typeof window.document.createElement);function B$2(a,b,c,d,e,f,g){this.acceptsBooleans=2===b||3===b||4===b;this.attributeName=d;this.attributeNamespace=e;this.mustUseProperty=c;this.propertyName=a;this.type=b;this.sanitizeURL=f;this.removeEmptyString=g;}[["acceptCharset","accept-charset"],["className","class"],["htmlFor","for"],["httpEquiv","http-equiv"]].forEach(function(a){var b=a[0];new B$2(b,1,!1,a[1],null,!1,!1);});["contentEditable","draggable","spellCheck","value"].forEach(function(a){new B$2(a,2,!1,a.toLowerCase(),null,!1,!1);});
            "allowFullScreen async autoFocus autoPlay controls default defer disabled disablePictureInPicture disableRemotePlayback formNoValidate hidden loop noModule noValidate open playsInline readOnly required reversed scoped seamless itemScope".split(" ").forEach(function(a){new B$2(a,3,!1,a.toLowerCase(),null,!1,!1);});
            ["rowSpan","start"].forEach(function(a){new B$2(a,5,!1,a.toLowerCase(),null,!1,!1);});var oa=/[\-:]([a-z])/g;function pa(a){return a[1].toUpperCase()}
            "accent-height alignment-baseline arabic-form baseline-shift cap-height clip-path clip-rule color-interpolation color-interpolation-filters color-profile color-rendering dominant-baseline enable-background fill-opacity fill-rule flood-color flood-opacity font-family font-size font-size-adjust font-stretch font-style font-variant font-weight glyph-name glyph-orientation-horizontal glyph-orientation-vertical horiz-adv-x horiz-origin-x image-rendering letter-spacing lighting-color marker-end marker-mid marker-start overline-position overline-thickness paint-order panose-1 pointer-events rendering-intent shape-rendering stop-color stop-opacity strikethrough-position strikethrough-thickness stroke-dasharray stroke-dashoffset stroke-linecap stroke-linejoin stroke-miterlimit stroke-opacity stroke-width text-anchor text-decoration text-rendering underline-position underline-thickness unicode-bidi unicode-range units-per-em v-alphabetic v-hanging v-ideographic v-mathematical vector-effect vert-adv-y vert-origin-x vert-origin-y word-spacing writing-mode xmlns:xlink x-height".split(" ").forEach(function(a){a.replace(oa,
            pa);});"xlink:actuate xlink:arcrole xlink:role xlink:show xlink:title xlink:type".split(" ").forEach(function(a){a.replace(oa,pa);});["xml:base","xml:lang","xml:space"].forEach(function(a){a.replace(oa,pa);});["tabIndex","crossOrigin"].forEach(function(a){new B$2(a,1,!1,a.toLowerCase(),null,!1,!1);});
            ["src","href","action","formAction"].forEach(function(a){new B$2(a,1,!1,a.toLowerCase(),null,!0,!0);});
            var ra=react.__SECRET_INTERNALS_DO_NOT_USE_OR_YOU_WILL_BE_FIRED;
            if("function"===typeof Symbol&&Symbol.for){var E$4=Symbol.for;E$4("react.element");E$4("react.portal");E$4("react.fragment");E$4("react.strict_mode");E$4("react.profiler");E$4("react.provider");E$4("react.context");E$4("react.forward_ref");E$4("react.suspense");E$4("react.suspense_list");E$4("react.memo");E$4("react.lazy");E$4("react.block");E$4("react.scope");E$4("react.opaque.id");E$4("react.debug_trace_mode");E$4("react.offscreen");E$4("react.legacy_hidden");}
            var kb={html:"http://www.w3.org/1999/xhtml",mathml:"http://www.w3.org/1998/Math/MathML",svg:"http://www.w3.org/2000/svg"};
            var nb;(function(a){return "undefined"!==typeof MSApp&&MSApp.execUnsafeLocalFunction?function(b,c,d,e){MSApp.execUnsafeLocalFunction(function(){return a(b,c,d,e)});}:a})(function(a,b){if(a.namespaceURI!==kb.svg||"innerHTML"in a)a.innerHTML=b;else {nb=nb||document.createElement("div");nb.innerHTML="<svg>"+b.valueOf().toString()+"</svg>";for(b=nb.firstChild;a.firstChild;)a.removeChild(a.firstChild);for(;b.firstChild;)a.appendChild(b.firstChild);}});
            var qb={animationIterationCount:!0,borderImageOutset:!0,borderImageSlice:!0,borderImageWidth:!0,boxFlex:!0,boxFlexGroup:!0,boxOrdinalGroup:!0,columnCount:!0,columns:!0,flex:!0,flexGrow:!0,flexPositive:!0,flexShrink:!0,flexNegative:!0,flexOrder:!0,gridArea:!0,gridRow:!0,gridRowEnd:!0,gridRowSpan:!0,gridRowStart:!0,gridColumn:!0,gridColumnEnd:!0,gridColumnSpan:!0,gridColumnStart:!0,fontWeight:!0,lineClamp:!0,lineHeight:!0,opacity:!0,order:!0,orphans:!0,tabSize:!0,widows:!0,zIndex:!0,zoom:!0,fillOpacity:!0,
            floodOpacity:!0,stopOpacity:!0,strokeDasharray:!0,strokeDashoffset:!0,strokeMiterlimit:!0,strokeOpacity:!0,strokeWidth:!0},rb=["Webkit","ms","Moz","O"];Object.keys(qb).forEach(function(a){rb.forEach(function(b){b=b+a.charAt(0).toUpperCase()+a.substring(1);qb[b]=qb[a];});});objectAssign({menuitem:!0},{area:!0,base:!0,br:!0,col:!0,embed:!0,hr:!0,img:!0,input:!0,keygen:!0,link:!0,meta:!0,param:!0,source:!0,track:!0,wbr:!0});
            var Pb=!1;if(fa)try{var Qb={};Object.defineProperty(Qb,"passive",{get:function(){Pb=!0;}});window.addEventListener("test",Qb,Qb);window.removeEventListener("test",Qb,Qb);}catch(a){Pb=!1;}function Zb(a){var b=a,c=a;if(a.alternate)for(;b.return;)b=b.return;else {a=b;do b=a,0!==(b.flags&1026)&&(c=b.return),a=b.return;while(a)}return 3===b.tag?c:null}function ac(a){if(Zb(a)!==a)throw Error(y$2(188));}
            function bc(a){var b=a.alternate;if(!b){b=Zb(a);if(null===b)throw Error(y$2(188));return b!==a?null:a}for(var c=a,d=b;;){var e=c.return;if(null===e)break;var f=e.alternate;if(null===f){d=e.return;if(null!==d){c=d;continue}break}if(e.child===f.child){for(f=e.child;f;){if(f===c)return ac(e),a;if(f===d)return ac(e),b;f=f.sibling;}throw Error(y$2(188));}if(c.return!==d.return)c=e,d=f;else {for(var g=!1,h=e.child;h;){if(h===c){g=!0;c=e;d=f;break}if(h===d){g=!0;d=e;c=f;break}h=h.sibling;}if(!g){for(h=f.child;h;){if(h===
            c){g=!0;c=f;d=e;break}if(h===d){g=!0;d=f;c=e;break}h=h.sibling;}if(!g)throw Error(y$2(189));}}if(c.alternate!==d)throw Error(y$2(190));}if(3!==c.tag)throw Error(y$2(188));return c.stateNode.current===c?a:b}function cc(a){a=bc(a);if(!a)return null;for(var b=a;;){if(5===b.tag||6===b.tag)return b;if(b.child)b.child.return=b,b=b.child;else {if(b===a)break;for(;!b.sibling;){if(!b.return||b.return===a)return null;b=b.return;}b.sibling.return=b.return;b=b.sibling;}}return null}
            function Dc(a,b){var c={};c[a.toLowerCase()]=b.toLowerCase();c["Webkit"+a]="webkit"+b;c["Moz"+a]="moz"+b;return c}var Ec={animationend:Dc("Animation","AnimationEnd"),animationiteration:Dc("Animation","AnimationIteration"),animationstart:Dc("Animation","AnimationStart"),transitionend:Dc("Transition","TransitionEnd")},Fc={},Gc={};
            fa&&(Gc=document.createElement("div").style,"AnimationEvent"in window||(delete Ec.animationend.animation,delete Ec.animationiteration.animation,delete Ec.animationstart.animation),"TransitionEvent"in window||delete Ec.transitionend.transition);function Hc(a){if(Fc[a])return Fc[a];if(!Ec[a])return a;var b=Ec[a],c;for(c in b)if(b.hasOwnProperty(c)&&c in Gc)return Fc[a]=b[c];return a}
            var Ic=Hc("animationend"),Jc=Hc("animationiteration"),Kc=Hc("animationstart"),Lc=Hc("transitionend"),Mc=new Map,Nc=new Map,Oc=["abort","abort",Ic,"animationEnd",Jc,"animationIteration",Kc,"animationStart","canplay","canPlay","canplaythrough","canPlayThrough","durationchange","durationChange","emptied","emptied","encrypted","encrypted","ended","ended","error","error","gotpointercapture","gotPointerCapture","load","load","loadeddata","loadedData","loadedmetadata","loadedMetadata","loadstart","loadStart",
            "lostpointercapture","lostPointerCapture","playing","playing","progress","progress","seeking","seeking","stalled","stalled","suspend","suspend","timeupdate","timeUpdate",Lc,"transitionEnd","waiting","waiting"];function Pc(a,b){for(var c=0;c<a.length;c+=2){var d=a[c],e=a[c+1];e="on"+(e[0].toUpperCase()+e.slice(1));Nc.set(d,b);Mc.set(d,e);da(e,[d]);}}var Qc=scheduler.unstable_now;Qc();scheduler.unstable_UserBlockingPriority;scheduler.unstable_runWithPriority;function od(a){var b=a.keyCode;"charCode"in a?(a=a.charCode,0===a&&13===b&&(a=13)):a=b;10===a&&(a=13);return 32<=a||13===a?a:0}function pd(){return !0}function qd(){return !1}
            function rd(a){function b(b,d,e,f,g){this._reactName=b;this._targetInst=e;this.type=d;this.nativeEvent=f;this.target=g;this.currentTarget=null;for(var c in a)a.hasOwnProperty(c)&&(b=a[c],this[c]=b?b(f):f[c]);this.isDefaultPrevented=(null!=f.defaultPrevented?f.defaultPrevented:!1===f.returnValue)?pd:qd;this.isPropagationStopped=qd;return this}objectAssign(b.prototype,{preventDefault:function(){this.defaultPrevented=!0;var a=this.nativeEvent;a&&(a.preventDefault?a.preventDefault():"unknown"!==typeof a.returnValue&&
            (a.returnValue=!1),this.isDefaultPrevented=pd);},stopPropagation:function(){var a=this.nativeEvent;a&&(a.stopPropagation?a.stopPropagation():"unknown"!==typeof a.cancelBubble&&(a.cancelBubble=!0),this.isPropagationStopped=pd);},persist:function(){},isPersistent:pd});return b}
            var sd={eventPhase:0,bubbles:0,cancelable:0,timeStamp:function(a){return a.timeStamp||Date.now()},defaultPrevented:0,isTrusted:0};rd(sd);var ud=objectAssign({},sd,{view:0,detail:0});rd(ud);var wd,xd,yd,Ad=objectAssign({},ud,{screenX:0,screenY:0,clientX:0,clientY:0,pageX:0,pageY:0,ctrlKey:0,shiftKey:0,altKey:0,metaKey:0,getModifierState:zd,button:0,buttons:0,relatedTarget:function(a){return void 0===a.relatedTarget?a.fromElement===a.srcElement?a.toElement:a.fromElement:a.relatedTarget},movementX:function(a){if("movementX"in
            a)return a.movementX;a!==yd&&(yd&&"mousemove"===a.type?(wd=a.screenX-yd.screenX,xd=a.screenY-yd.screenY):xd=wd=0,yd=a);return wd},movementY:function(a){return "movementY"in a?a.movementY:xd}});rd(Ad);var Cd=objectAssign({},Ad,{dataTransfer:0});rd(Cd);var Ed=objectAssign({},ud,{relatedTarget:0});rd(Ed);var Gd=objectAssign({},sd,{animationName:0,elapsedTime:0,pseudoElement:0});rd(Gd);var Id=objectAssign({},sd,{clipboardData:function(a){return "clipboardData"in a?a.clipboardData:window.clipboardData}});rd(Id);var Kd=objectAssign({},sd,{data:0});rd(Kd);var Md={Esc:"Escape",
            Spacebar:" ",Left:"ArrowLeft",Up:"ArrowUp",Right:"ArrowRight",Down:"ArrowDown",Del:"Delete",Win:"OS",Menu:"ContextMenu",Apps:"ContextMenu",Scroll:"ScrollLock",MozPrintableKey:"Unidentified"},Nd={8:"Backspace",9:"Tab",12:"Clear",13:"Enter",16:"Shift",17:"Control",18:"Alt",19:"Pause",20:"CapsLock",27:"Escape",32:" ",33:"PageUp",34:"PageDown",35:"End",36:"Home",37:"ArrowLeft",38:"ArrowUp",39:"ArrowRight",40:"ArrowDown",45:"Insert",46:"Delete",112:"F1",113:"F2",114:"F3",115:"F4",116:"F5",117:"F6",118:"F7",
            119:"F8",120:"F9",121:"F10",122:"F11",123:"F12",144:"NumLock",145:"ScrollLock",224:"Meta"},Od={Alt:"altKey",Control:"ctrlKey",Meta:"metaKey",Shift:"shiftKey"};function Pd(a){var b=this.nativeEvent;return b.getModifierState?b.getModifierState(a):(a=Od[a])?!!b[a]:!1}function zd(){return Pd}
            var Qd=objectAssign({},ud,{key:function(a){if(a.key){var b=Md[a.key]||a.key;if("Unidentified"!==b)return b}return "keypress"===a.type?(a=od(a),13===a?"Enter":String.fromCharCode(a)):"keydown"===a.type||"keyup"===a.type?Nd[a.keyCode]||"Unidentified":""},code:0,location:0,ctrlKey:0,shiftKey:0,altKey:0,metaKey:0,repeat:0,locale:0,getModifierState:zd,charCode:function(a){return "keypress"===a.type?od(a):0},keyCode:function(a){return "keydown"===a.type||"keyup"===a.type?a.keyCode:0},which:function(a){return "keypress"===
            a.type?od(a):"keydown"===a.type||"keyup"===a.type?a.keyCode:0}});rd(Qd);var Sd=objectAssign({},Ad,{pointerId:0,width:0,height:0,pressure:0,tangentialPressure:0,tiltX:0,tiltY:0,twist:0,pointerType:0,isPrimary:0});rd(Sd);var Ud=objectAssign({},ud,{touches:0,targetTouches:0,changedTouches:0,altKey:0,metaKey:0,ctrlKey:0,shiftKey:0,getModifierState:zd});rd(Ud);var Wd=objectAssign({},sd,{propertyName:0,elapsedTime:0,pseudoElement:0});rd(Wd);var Yd=objectAssign({},Ad,{deltaX:function(a){return "deltaX"in a?a.deltaX:"wheelDeltaX"in a?-a.wheelDeltaX:0},
            deltaY:function(a){return "deltaY"in a?a.deltaY:"wheelDeltaY"in a?-a.wheelDeltaY:"wheelDelta"in a?-a.wheelDelta:0},deltaZ:0,deltaMode:0});rd(Yd);if(fa){if(fa){var ye="oninput"in document;if(!ye){var ze$1=document.createElement("div");ze$1.setAttribute("oninput","return;");ye="function"===typeof ze$1.oninput;}}}Pc("cancel cancel click click close close contextmenu contextMenu copy copy cut cut auxclick auxClick dblclick doubleClick dragend dragEnd dragstart dragStart drop drop focusin focus focusout blur input input invalid invalid keydown keyDown keypress keyPress keyup keyUp mousedown mouseDown mouseup mouseUp paste paste pause pause play play pointercancel pointerCancel pointerdown pointerDown pointerup pointerUp ratechange rateChange reset reset seeked seeked submit submit touchcancel touchCancel touchend touchEnd touchstart touchStart volumechange volumeChange".split(" "),
            0);Pc("drag drag dragenter dragEnter dragexit dragExit dragleave dragLeave dragover dragOver mousemove mouseMove mouseout mouseOut mouseover mouseOver pointermove pointerMove pointerout pointerOut pointerover pointerOver scroll scroll toggle toggle touchmove touchMove wheel wheel".split(" "),1);Pc(Oc,2);for(var Ve$1="change selectionchange textInput compositionstart compositionend compositionupdate".split(" "),We$1=0;We$1<Ve$1.length;We$1++)Nc.set(Ve$1[We$1],0);ea("onMouseEnter",["mouseout","mouseover"]);
            ea("onMouseLeave",["mouseout","mouseover"]);ea("onPointerEnter",["pointerout","pointerover"]);ea("onPointerLeave",["pointerout","pointerover"]);da("onChange","change click focusin focusout input keydown keyup selectionchange".split(" "));da("onSelect","focusout contextmenu dragend focusin keydown keyup mousedown mouseup selectionchange".split(" "));da("onBeforeInput",["compositionend","keypress","textInput","paste"]);da("onCompositionEnd","compositionend focusout keydown keypress keyup mousedown".split(" "));
            da("onCompositionStart","compositionstart focusout keydown keypress keyup mousedown".split(" "));da("onCompositionUpdate","compositionupdate focusout keydown keypress keyup mousedown".split(" "));"_reactListening"+Math.random().toString(36).slice(2);function sf(a){a=a.previousSibling;for(var b=0;a;){if(8===a.nodeType){var c=a.data;if("$"===c||"$!"===c||"$?"===c){if(0===b)return a;b--;}else "/$"===c&&b++;}a=a.previousSibling;}return null}var vf=Math.random().toString(36).slice(2),wf="__reactFiber$"+vf,ff="__reactContainer$"+vf;
            function wc(a){var b=a[wf];if(b)return b;for(var c=a.parentNode;c;){if(b=c[ff]||c[wf]){c=b.alternate;if(null!==b.child||null!==c&&null!==c.child)for(a=sf(a);null!==a;){if(c=a[wf])return c;a=sf(a);}return b}a=c;c=a.parentNode;}return null}var Lf=null,Mf=null;scheduler.unstable_runWithPriority;scheduler.unstable_scheduleCallback;scheduler.unstable_cancelCallback;scheduler.unstable_shouldYield;scheduler.unstable_requestPaint;var Sf=scheduler.unstable_now;scheduler.unstable_getCurrentPriorityLevel;scheduler.unstable_ImmediatePriority;scheduler.unstable_UserBlockingPriority;scheduler.unstable_NormalPriority;scheduler.unstable_LowPriority;scheduler.unstable_IdlePriority;Sf();
            ra.ReactCurrentBatchConfig;(new react.Component).refs;
            ra.ReactCurrentDispatcher;ra.ReactCurrentBatchConfig;ra.ReactCurrentOwner;ra.ReactCurrentDispatcher;ra.ReactCurrentOwner;function pk(){return null}
            var wk={findFiberByHostInstance:wc,bundleType:0,version:"17.0.2",rendererPackageName:"react-dom"};
            var xk={bundleType:wk.bundleType,version:wk.version,rendererPackageName:wk.rendererPackageName,rendererConfig:wk.rendererConfig,overrideHookState:null,overrideHookStateDeletePath:null,overrideHookStateRenamePath:null,overrideProps:null,overridePropsDeletePath:null,overridePropsRenamePath:null,setSuspenseHandler:null,scheduleUpdate:null,currentDispatcherRef:ra.ReactCurrentDispatcher,findHostInstanceByFiber:function(a){a=cc(a);return null===a?null:a.stateNode},findFiberByHostInstance:wk.findFiberByHostInstance||
            pk,findHostInstancesForRefresh:null,scheduleRefresh:null,scheduleRoot:null,setRefreshHandler:null,getCurrentFiber:null};if("undefined"!==typeof __REACT_DEVTOOLS_GLOBAL_HOOK__){var yk=__REACT_DEVTOOLS_GLOBAL_HOOK__;if(!yk.isDisabled&&yk.supportsFiber)try{Lf=yk.inject(xk),Mf=yk;}catch(a){}}

            var schedulerTracing_development = createCommonjsModule(function (module, exports) {

            {
              (function() {

            var DEFAULT_THREAD_ID = 0; // Counters used to generate unique IDs.

            var interactionIDCounter = 0;
            var threadIDCounter = 0; // Set of currently traced interactions.
            // Interactions "stack"–
            // Meaning that newly traced interactions are appended to the previously active set.
            // When an interaction goes out of scope, the previous set (if any) is restored.

            exports.__interactionsRef = null; // Listener(s) to notify when interactions begin and end.

            exports.__subscriberRef = null;

            {
              exports.__interactionsRef = {
                current: new Set()
              };
              exports.__subscriberRef = {
                current: null
              };
            }
            function unstable_clear(callback) {

              var prevInteractions = exports.__interactionsRef.current;
              exports.__interactionsRef.current = new Set();

              try {
                return callback();
              } finally {
                exports.__interactionsRef.current = prevInteractions;
              }
            }
            function unstable_getCurrent() {
              {
                return exports.__interactionsRef.current;
              }
            }
            function unstable_getThreadID() {
              return ++threadIDCounter;
            }
            function unstable_trace(name, timestamp, callback) {
              var threadID = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : DEFAULT_THREAD_ID;

              var interaction = {
                __count: 1,
                id: interactionIDCounter++,
                name: name,
                timestamp: timestamp
              };
              var prevInteractions = exports.__interactionsRef.current; // Traced interactions should stack/accumulate.
              // To do that, clone the current interactions.
              // The previous set will be restored upon completion.

              var interactions = new Set(prevInteractions);
              interactions.add(interaction);
              exports.__interactionsRef.current = interactions;
              var subscriber = exports.__subscriberRef.current;
              var returnValue;

              try {
                if (subscriber !== null) {
                  subscriber.onInteractionTraced(interaction);
                }
              } finally {
                try {
                  if (subscriber !== null) {
                    subscriber.onWorkStarted(interactions, threadID);
                  }
                } finally {
                  try {
                    returnValue = callback();
                  } finally {
                    exports.__interactionsRef.current = prevInteractions;

                    try {
                      if (subscriber !== null) {
                        subscriber.onWorkStopped(interactions, threadID);
                      }
                    } finally {
                      interaction.__count--; // If no async work was scheduled for this interaction,
                      // Notify subscribers that it's completed.

                      if (subscriber !== null && interaction.__count === 0) {
                        subscriber.onInteractionScheduledWorkCompleted(interaction);
                      }
                    }
                  }
                }
              }

              return returnValue;
            }
            function unstable_wrap(callback) {
              var threadID = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : DEFAULT_THREAD_ID;

              var wrappedInteractions = exports.__interactionsRef.current;
              var subscriber = exports.__subscriberRef.current;

              if (subscriber !== null) {
                subscriber.onWorkScheduled(wrappedInteractions, threadID);
              } // Update the pending async work count for the current interactions.
              // Update after calling subscribers in case of error.


              wrappedInteractions.forEach(function (interaction) {
                interaction.__count++;
              });
              var hasRun = false;

              function wrapped() {
                var prevInteractions = exports.__interactionsRef.current;
                exports.__interactionsRef.current = wrappedInteractions;
                subscriber = exports.__subscriberRef.current;

                try {
                  var returnValue;

                  try {
                    if (subscriber !== null) {
                      subscriber.onWorkStarted(wrappedInteractions, threadID);
                    }
                  } finally {
                    try {
                      returnValue = callback.apply(undefined, arguments);
                    } finally {
                      exports.__interactionsRef.current = prevInteractions;

                      if (subscriber !== null) {
                        subscriber.onWorkStopped(wrappedInteractions, threadID);
                      }
                    }
                  }

                  return returnValue;
                } finally {
                  if (!hasRun) {
                    // We only expect a wrapped function to be executed once,
                    // But in the event that it's executed more than once–
                    // Only decrement the outstanding interaction counts once.
                    hasRun = true; // Update pending async counts for all wrapped interactions.
                    // If this was the last scheduled async work for any of them,
                    // Mark them as completed.

                    wrappedInteractions.forEach(function (interaction) {
                      interaction.__count--;

                      if (subscriber !== null && interaction.__count === 0) {
                        subscriber.onInteractionScheduledWorkCompleted(interaction);
                      }
                    });
                  }
                }
              }

              wrapped.cancel = function cancel() {
                subscriber = exports.__subscriberRef.current;

                try {
                  if (subscriber !== null) {
                    subscriber.onWorkCanceled(wrappedInteractions, threadID);
                  }
                } finally {
                  // Update pending async counts for all wrapped interactions.
                  // If this was the last scheduled async work for any of them,
                  // Mark them as completed.
                  wrappedInteractions.forEach(function (interaction) {
                    interaction.__count--;

                    if (subscriber && interaction.__count === 0) {
                      subscriber.onInteractionScheduledWorkCompleted(interaction);
                    }
                  });
                }
              };

              return wrapped;
            }

            var subscribers = null;

            {
              subscribers = new Set();
            }

            function unstable_subscribe(subscriber) {
              {
                subscribers.add(subscriber);

                if (subscribers.size === 1) {
                  exports.__subscriberRef.current = {
                    onInteractionScheduledWorkCompleted: onInteractionScheduledWorkCompleted,
                    onInteractionTraced: onInteractionTraced,
                    onWorkCanceled: onWorkCanceled,
                    onWorkScheduled: onWorkScheduled,
                    onWorkStarted: onWorkStarted,
                    onWorkStopped: onWorkStopped
                  };
                }
              }
            }
            function unstable_unsubscribe(subscriber) {
              {
                subscribers.delete(subscriber);

                if (subscribers.size === 0) {
                  exports.__subscriberRef.current = null;
                }
              }
            }

            function onInteractionTraced(interaction) {
              var didCatchError = false;
              var caughtError = null;
              subscribers.forEach(function (subscriber) {
                try {
                  subscriber.onInteractionTraced(interaction);
                } catch (error) {
                  if (!didCatchError) {
                    didCatchError = true;
                    caughtError = error;
                  }
                }
              });

              if (didCatchError) {
                throw caughtError;
              }
            }

            function onInteractionScheduledWorkCompleted(interaction) {
              var didCatchError = false;
              var caughtError = null;
              subscribers.forEach(function (subscriber) {
                try {
                  subscriber.onInteractionScheduledWorkCompleted(interaction);
                } catch (error) {
                  if (!didCatchError) {
                    didCatchError = true;
                    caughtError = error;
                  }
                }
              });

              if (didCatchError) {
                throw caughtError;
              }
            }

            function onWorkScheduled(interactions, threadID) {
              var didCatchError = false;
              var caughtError = null;
              subscribers.forEach(function (subscriber) {
                try {
                  subscriber.onWorkScheduled(interactions, threadID);
                } catch (error) {
                  if (!didCatchError) {
                    didCatchError = true;
                    caughtError = error;
                  }
                }
              });

              if (didCatchError) {
                throw caughtError;
              }
            }

            function onWorkStarted(interactions, threadID) {
              var didCatchError = false;
              var caughtError = null;
              subscribers.forEach(function (subscriber) {
                try {
                  subscriber.onWorkStarted(interactions, threadID);
                } catch (error) {
                  if (!didCatchError) {
                    didCatchError = true;
                    caughtError = error;
                  }
                }
              });

              if (didCatchError) {
                throw caughtError;
              }
            }

            function onWorkStopped(interactions, threadID) {
              var didCatchError = false;
              var caughtError = null;
              subscribers.forEach(function (subscriber) {
                try {
                  subscriber.onWorkStopped(interactions, threadID);
                } catch (error) {
                  if (!didCatchError) {
                    didCatchError = true;
                    caughtError = error;
                  }
                }
              });

              if (didCatchError) {
                throw caughtError;
              }
            }

            function onWorkCanceled(interactions, threadID) {
              var didCatchError = false;
              var caughtError = null;
              subscribers.forEach(function (subscriber) {
                try {
                  subscriber.onWorkCanceled(interactions, threadID);
                } catch (error) {
                  if (!didCatchError) {
                    didCatchError = true;
                    caughtError = error;
                  }
                }
              });

              if (didCatchError) {
                throw caughtError;
              }
            }

            exports.unstable_clear = unstable_clear;
            exports.unstable_getCurrent = unstable_getCurrent;
            exports.unstable_getThreadID = unstable_getThreadID;
            exports.unstable_subscribe = unstable_subscribe;
            exports.unstable_trace = unstable_trace;
            exports.unstable_unsubscribe = unstable_unsubscribe;
            exports.unstable_wrap = unstable_wrap;
              })();
            }
            });

            var tracing = createCommonjsModule(function (module) {

            {
              module.exports = schedulerTracing_development;
            }
            });

            var reactDom_development = createCommonjsModule(function (module, exports) {

            {
              (function() {

            var React = react;
            var _assign = objectAssign;
            var Scheduler = scheduler;
            var tracing$1 = tracing;

            var ReactSharedInternals = React.__SECRET_INTERNALS_DO_NOT_USE_OR_YOU_WILL_BE_FIRED;

            // by calls to these methods by a Babel plugin.
            //
            // In PROD (or in packages without access to React internals),
            // they are left as they are instead.

            function warn(format) {
              {
                for (var _len = arguments.length, args = new Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++) {
                  args[_key - 1] = arguments[_key];
                }

                printWarning('warn', format, args);
              }
            }
            function error(format) {
              {
                for (var _len2 = arguments.length, args = new Array(_len2 > 1 ? _len2 - 1 : 0), _key2 = 1; _key2 < _len2; _key2++) {
                  args[_key2 - 1] = arguments[_key2];
                }

                printWarning('error', format, args);
              }
            }

            function printWarning(level, format, args) {
              // When changing this logic, you might want to also
              // update consoleWithStackDev.www.js as well.
              {
                var ReactDebugCurrentFrame = ReactSharedInternals.ReactDebugCurrentFrame;
                var stack = ReactDebugCurrentFrame.getStackAddendum();

                if (stack !== '') {
                  format += '%s';
                  args = args.concat([stack]);
                }

                var argsWithFormat = args.map(function (item) {
                  return '' + item;
                }); // Careful: RN currently depends on this prefix

                argsWithFormat.unshift('Warning: ' + format); // We intentionally don't use spread (or .apply) directly because it
                // breaks IE9: https://github.com/facebook/react/issues/13610
                // eslint-disable-next-line react-internal/no-production-logging

                Function.prototype.apply.call(console[level], console, argsWithFormat);
              }
            }

            if (!React) {
              {
                throw Error( "ReactDOM was loaded before React. Make sure you load the React package before loading ReactDOM." );
              }
            }

            var FunctionComponent = 0;
            var ClassComponent = 1;
            var IndeterminateComponent = 2; // Before we know whether it is function or class

            var HostRoot = 3; // Root of a host tree. Could be nested inside another node.

            var HostPortal = 4; // A subtree. Could be an entry point to a different renderer.

            var HostComponent = 5;
            var HostText = 6;
            var Fragment = 7;
            var Mode = 8;
            var ContextConsumer = 9;
            var ContextProvider = 10;
            var ForwardRef = 11;
            var Profiler = 12;
            var SuspenseComponent = 13;
            var MemoComponent = 14;
            var SimpleMemoComponent = 15;
            var LazyComponent = 16;
            var IncompleteClassComponent = 17;
            var DehydratedFragment = 18;
            var SuspenseListComponent = 19;
            var FundamentalComponent = 20;
            var ScopeComponent = 21;
            var Block = 22;
            var OffscreenComponent = 23;
            var LegacyHiddenComponent = 24;

            // Filter certain DOM attributes (e.g. src, href) if their values are empty strings.

            var enableProfilerTimer = true; // Record durations for commit and passive effects phases.

            var enableFundamentalAPI = false; // Experimental Scope support.
            var enableNewReconciler = false; // Errors that are thrown while unmounting (or after in the case of passive effects)
            var warnAboutStringRefs = false;

            var allNativeEvents = new Set();
            /**
             * Mapping from registration name to event name
             */


            var registrationNameDependencies = {};
            /**
             * Mapping from lowercase registration names to the properly cased version,
             * used to warn in the case of missing event handlers. Available
             * only in true.
             * @type {Object}
             */

            var possibleRegistrationNames =  {} ; // Trust the developer to only use possibleRegistrationNames in true

            function registerTwoPhaseEvent(registrationName, dependencies) {
              registerDirectEvent(registrationName, dependencies);
              registerDirectEvent(registrationName + 'Capture', dependencies);
            }
            function registerDirectEvent(registrationName, dependencies) {
              {
                if (registrationNameDependencies[registrationName]) {
                  error('EventRegistry: More than one plugin attempted to publish the same ' + 'registration name, `%s`.', registrationName);
                }
              }

              registrationNameDependencies[registrationName] = dependencies;

              {
                var lowerCasedName = registrationName.toLowerCase();
                possibleRegistrationNames[lowerCasedName] = registrationName;

                if (registrationName === 'onDoubleClick') {
                  possibleRegistrationNames.ondblclick = registrationName;
                }
              }

              for (var i = 0; i < dependencies.length; i++) {
                allNativeEvents.add(dependencies[i]);
              }
            }

            var canUseDOM = !!(typeof window !== 'undefined' && typeof window.document !== 'undefined' && typeof window.document.createElement !== 'undefined');

            // A reserved attribute.
            // It is handled by React separately and shouldn't be written to the DOM.
            var RESERVED = 0; // A simple string attribute.
            // Attributes that aren't in the filter are presumed to have this type.

            var STRING = 1; // A string attribute that accepts booleans in React. In HTML, these are called
            // "enumerated" attributes with "true" and "false" as possible values.
            // When true, it should be set to a "true" string.
            // When false, it should be set to a "false" string.

            var BOOLEANISH_STRING = 2; // A real boolean attribute.
            // When true, it should be present (set either to an empty string or its name).
            // When false, it should be omitted.

            var BOOLEAN = 3; // An attribute that can be used as a flag as well as with a value.
            // When true, it should be present (set either to an empty string or its name).
            // When false, it should be omitted.
            // For any other value, should be present with that value.

            var OVERLOADED_BOOLEAN = 4; // An attribute that must be numeric or parse as a numeric.
            // When falsy, it should be removed.

            var NUMERIC = 5; // An attribute that must be positive numeric or parse as a positive numeric.
            // When falsy, it should be removed.

            var POSITIVE_NUMERIC = 6;

            /* eslint-disable max-len */
            var ATTRIBUTE_NAME_START_CHAR = ":A-Z_a-z\\u00C0-\\u00D6\\u00D8-\\u00F6\\u00F8-\\u02FF\\u0370-\\u037D\\u037F-\\u1FFF\\u200C-\\u200D\\u2070-\\u218F\\u2C00-\\u2FEF\\u3001-\\uD7FF\\uF900-\\uFDCF\\uFDF0-\\uFFFD";
            /* eslint-enable max-len */

            var ATTRIBUTE_NAME_CHAR = ATTRIBUTE_NAME_START_CHAR + "\\-.0-9\\u00B7\\u0300-\\u036F\\u203F-\\u2040";
            var ROOT_ATTRIBUTE_NAME = 'data-reactroot';
            var VALID_ATTRIBUTE_NAME_REGEX = new RegExp('^[' + ATTRIBUTE_NAME_START_CHAR + '][' + ATTRIBUTE_NAME_CHAR + ']*$');
            var hasOwnProperty = Object.prototype.hasOwnProperty;
            var illegalAttributeNameCache = {};
            var validatedAttributeNameCache = {};
            function isAttributeNameSafe(attributeName) {
              if (hasOwnProperty.call(validatedAttributeNameCache, attributeName)) {
                return true;
              }

              if (hasOwnProperty.call(illegalAttributeNameCache, attributeName)) {
                return false;
              }

              if (VALID_ATTRIBUTE_NAME_REGEX.test(attributeName)) {
                validatedAttributeNameCache[attributeName] = true;
                return true;
              }

              illegalAttributeNameCache[attributeName] = true;

              {
                error('Invalid attribute name: `%s`', attributeName);
              }

              return false;
            }
            function shouldIgnoreAttribute(name, propertyInfo, isCustomComponentTag) {
              if (propertyInfo !== null) {
                return propertyInfo.type === RESERVED;
              }

              if (isCustomComponentTag) {
                return false;
              }

              if (name.length > 2 && (name[0] === 'o' || name[0] === 'O') && (name[1] === 'n' || name[1] === 'N')) {
                return true;
              }

              return false;
            }
            function shouldRemoveAttributeWithWarning(name, value, propertyInfo, isCustomComponentTag) {
              if (propertyInfo !== null && propertyInfo.type === RESERVED) {
                return false;
              }

              switch (typeof value) {
                case 'function': // $FlowIssue symbol is perfectly valid here

                case 'symbol':
                  // eslint-disable-line
                  return true;

                case 'boolean':
                  {
                    if (isCustomComponentTag) {
                      return false;
                    }

                    if (propertyInfo !== null) {
                      return !propertyInfo.acceptsBooleans;
                    } else {
                      var prefix = name.toLowerCase().slice(0, 5);
                      return prefix !== 'data-' && prefix !== 'aria-';
                    }
                  }

                default:
                  return false;
              }
            }
            function shouldRemoveAttribute(name, value, propertyInfo, isCustomComponentTag) {
              if (value === null || typeof value === 'undefined') {
                return true;
              }

              if (shouldRemoveAttributeWithWarning(name, value, propertyInfo, isCustomComponentTag)) {
                return true;
              }

              if (isCustomComponentTag) {
                return false;
              }

              if (propertyInfo !== null) {

                switch (propertyInfo.type) {
                  case BOOLEAN:
                    return !value;

                  case OVERLOADED_BOOLEAN:
                    return value === false;

                  case NUMERIC:
                    return isNaN(value);

                  case POSITIVE_NUMERIC:
                    return isNaN(value) || value < 1;
                }
              }

              return false;
            }
            function getPropertyInfo(name) {
              return properties.hasOwnProperty(name) ? properties[name] : null;
            }

            function PropertyInfoRecord(name, type, mustUseProperty, attributeName, attributeNamespace, sanitizeURL, removeEmptyString) {
              this.acceptsBooleans = type === BOOLEANISH_STRING || type === BOOLEAN || type === OVERLOADED_BOOLEAN;
              this.attributeName = attributeName;
              this.attributeNamespace = attributeNamespace;
              this.mustUseProperty = mustUseProperty;
              this.propertyName = name;
              this.type = type;
              this.sanitizeURL = sanitizeURL;
              this.removeEmptyString = removeEmptyString;
            } // When adding attributes to this list, be sure to also add them to
            // the `possibleStandardNames` module to ensure casing and incorrect
            // name warnings.


            var properties = {}; // These props are reserved by React. They shouldn't be written to the DOM.

            var reservedProps = ['children', 'dangerouslySetInnerHTML', // TODO: This prevents the assignment of defaultValue to regular
            // elements (not just inputs). Now that ReactDOMInput assigns to the
            // defaultValue property -- do we need this?
            'defaultValue', 'defaultChecked', 'innerHTML', 'suppressContentEditableWarning', 'suppressHydrationWarning', 'style'];
            reservedProps.forEach(function (name) {
              properties[name] = new PropertyInfoRecord(name, RESERVED, false, // mustUseProperty
              name, // attributeName
              null, // attributeNamespace
              false, // sanitizeURL
              false);
            }); // A few React string attributes have a different name.
            // This is a mapping from React prop names to the attribute names.

            [['acceptCharset', 'accept-charset'], ['className', 'class'], ['htmlFor', 'for'], ['httpEquiv', 'http-equiv']].forEach(function (_ref) {
              var name = _ref[0],
                  attributeName = _ref[1];
              properties[name] = new PropertyInfoRecord(name, STRING, false, // mustUseProperty
              attributeName, // attributeName
              null, // attributeNamespace
              false, // sanitizeURL
              false);
            }); // These are "enumerated" HTML attributes that accept "true" and "false".
            // In React, we let users pass `true` and `false` even though technically
            // these aren't boolean attributes (they are coerced to strings).

            ['contentEditable', 'draggable', 'spellCheck', 'value'].forEach(function (name) {
              properties[name] = new PropertyInfoRecord(name, BOOLEANISH_STRING, false, // mustUseProperty
              name.toLowerCase(), // attributeName
              null, // attributeNamespace
              false, // sanitizeURL
              false);
            }); // These are "enumerated" SVG attributes that accept "true" and "false".
            // In React, we let users pass `true` and `false` even though technically
            // these aren't boolean attributes (they are coerced to strings).
            // Since these are SVG attributes, their attribute names are case-sensitive.

            ['autoReverse', 'externalResourcesRequired', 'focusable', 'preserveAlpha'].forEach(function (name) {
              properties[name] = new PropertyInfoRecord(name, BOOLEANISH_STRING, false, // mustUseProperty
              name, // attributeName
              null, // attributeNamespace
              false, // sanitizeURL
              false);
            }); // These are HTML boolean attributes.

            ['allowFullScreen', 'async', // Note: there is a special case that prevents it from being written to the DOM
            // on the client side because the browsers are inconsistent. Instead we call focus().
            'autoFocus', 'autoPlay', 'controls', 'default', 'defer', 'disabled', 'disablePictureInPicture', 'disableRemotePlayback', 'formNoValidate', 'hidden', 'loop', 'noModule', 'noValidate', 'open', 'playsInline', 'readOnly', 'required', 'reversed', 'scoped', 'seamless', // Microdata
            'itemScope'].forEach(function (name) {
              properties[name] = new PropertyInfoRecord(name, BOOLEAN, false, // mustUseProperty
              name.toLowerCase(), // attributeName
              null, // attributeNamespace
              false, // sanitizeURL
              false);
            }); // These are the few React props that we set as DOM properties
            // rather than attributes. These are all booleans.

            ['checked', // Note: `option.selected` is not updated if `select.multiple` is
            // disabled with `removeAttribute`. We have special logic for handling this.
            'multiple', 'muted', 'selected' // NOTE: if you add a camelCased prop to this list,
            // you'll need to set attributeName to name.toLowerCase()
            // instead in the assignment below.
            ].forEach(function (name) {
              properties[name] = new PropertyInfoRecord(name, BOOLEAN, true, // mustUseProperty
              name, // attributeName
              null, // attributeNamespace
              false, // sanitizeURL
              false);
            }); // These are HTML attributes that are "overloaded booleans": they behave like
            // booleans, but can also accept a string value.

            ['capture', 'download' // NOTE: if you add a camelCased prop to this list,
            // you'll need to set attributeName to name.toLowerCase()
            // instead in the assignment below.
            ].forEach(function (name) {
              properties[name] = new PropertyInfoRecord(name, OVERLOADED_BOOLEAN, false, // mustUseProperty
              name, // attributeName
              null, // attributeNamespace
              false, // sanitizeURL
              false);
            }); // These are HTML attributes that must be positive numbers.

            ['cols', 'rows', 'size', 'span' // NOTE: if you add a camelCased prop to this list,
            // you'll need to set attributeName to name.toLowerCase()
            // instead in the assignment below.
            ].forEach(function (name) {
              properties[name] = new PropertyInfoRecord(name, POSITIVE_NUMERIC, false, // mustUseProperty
              name, // attributeName
              null, // attributeNamespace
              false, // sanitizeURL
              false);
            }); // These are HTML attributes that must be numbers.

            ['rowSpan', 'start'].forEach(function (name) {
              properties[name] = new PropertyInfoRecord(name, NUMERIC, false, // mustUseProperty
              name.toLowerCase(), // attributeName
              null, // attributeNamespace
              false, // sanitizeURL
              false);
            });
            var CAMELIZE = /[\-\:]([a-z])/g;

            var capitalize = function (token) {
              return token[1].toUpperCase();
            }; // This is a list of all SVG attributes that need special casing, namespacing,
            // or boolean value assignment. Regular attributes that just accept strings
            // and have the same names are omitted, just like in the HTML attribute filter.
            // Some of these attributes can be hard to find. This list was created by
            // scraping the MDN documentation.


            ['accent-height', 'alignment-baseline', 'arabic-form', 'baseline-shift', 'cap-height', 'clip-path', 'clip-rule', 'color-interpolation', 'color-interpolation-filters', 'color-profile', 'color-rendering', 'dominant-baseline', 'enable-background', 'fill-opacity', 'fill-rule', 'flood-color', 'flood-opacity', 'font-family', 'font-size', 'font-size-adjust', 'font-stretch', 'font-style', 'font-variant', 'font-weight', 'glyph-name', 'glyph-orientation-horizontal', 'glyph-orientation-vertical', 'horiz-adv-x', 'horiz-origin-x', 'image-rendering', 'letter-spacing', 'lighting-color', 'marker-end', 'marker-mid', 'marker-start', 'overline-position', 'overline-thickness', 'paint-order', 'panose-1', 'pointer-events', 'rendering-intent', 'shape-rendering', 'stop-color', 'stop-opacity', 'strikethrough-position', 'strikethrough-thickness', 'stroke-dasharray', 'stroke-dashoffset', 'stroke-linecap', 'stroke-linejoin', 'stroke-miterlimit', 'stroke-opacity', 'stroke-width', 'text-anchor', 'text-decoration', 'text-rendering', 'underline-position', 'underline-thickness', 'unicode-bidi', 'unicode-range', 'units-per-em', 'v-alphabetic', 'v-hanging', 'v-ideographic', 'v-mathematical', 'vector-effect', 'vert-adv-y', 'vert-origin-x', 'vert-origin-y', 'word-spacing', 'writing-mode', 'xmlns:xlink', 'x-height' // NOTE: if you add a camelCased prop to this list,
            // you'll need to set attributeName to name.toLowerCase()
            // instead in the assignment below.
            ].forEach(function (attributeName) {
              var name = attributeName.replace(CAMELIZE, capitalize);
              properties[name] = new PropertyInfoRecord(name, STRING, false, // mustUseProperty
              attributeName, null, // attributeNamespace
              false, // sanitizeURL
              false);
            }); // String SVG attributes with the xlink namespace.

            ['xlink:actuate', 'xlink:arcrole', 'xlink:role', 'xlink:show', 'xlink:title', 'xlink:type' // NOTE: if you add a camelCased prop to this list,
            // you'll need to set attributeName to name.toLowerCase()
            // instead in the assignment below.
            ].forEach(function (attributeName) {
              var name = attributeName.replace(CAMELIZE, capitalize);
              properties[name] = new PropertyInfoRecord(name, STRING, false, // mustUseProperty
              attributeName, 'http://www.w3.org/1999/xlink', false, // sanitizeURL
              false);
            }); // String SVG attributes with the xml namespace.

            ['xml:base', 'xml:lang', 'xml:space' // NOTE: if you add a camelCased prop to this list,
            // you'll need to set attributeName to name.toLowerCase()
            // instead in the assignment below.
            ].forEach(function (attributeName) {
              var name = attributeName.replace(CAMELIZE, capitalize);
              properties[name] = new PropertyInfoRecord(name, STRING, false, // mustUseProperty
              attributeName, 'http://www.w3.org/XML/1998/namespace', false, // sanitizeURL
              false);
            }); // These attribute exists both in HTML and SVG.
            // The attribute name is case-sensitive in SVG so we can't just use
            // the React name like we do for attributes that exist only in HTML.

            ['tabIndex', 'crossOrigin'].forEach(function (attributeName) {
              properties[attributeName] = new PropertyInfoRecord(attributeName, STRING, false, // mustUseProperty
              attributeName.toLowerCase(), // attributeName
              null, // attributeNamespace
              false, // sanitizeURL
              false);
            }); // These attributes accept URLs. These must not allow javascript: URLS.
            // These will also need to accept Trusted Types object in the future.

            var xlinkHref = 'xlinkHref';
            properties[xlinkHref] = new PropertyInfoRecord('xlinkHref', STRING, false, // mustUseProperty
            'xlink:href', 'http://www.w3.org/1999/xlink', true, // sanitizeURL
            false);
            ['src', 'href', 'action', 'formAction'].forEach(function (attributeName) {
              properties[attributeName] = new PropertyInfoRecord(attributeName, STRING, false, // mustUseProperty
              attributeName.toLowerCase(), // attributeName
              null, // attributeNamespace
              true, // sanitizeURL
              true);
            });

            // and any newline or tab are filtered out as if they're not part of the URL.
            // https://url.spec.whatwg.org/#url-parsing
            // Tab or newline are defined as \r\n\t:
            // https://infra.spec.whatwg.org/#ascii-tab-or-newline
            // A C0 control is a code point in the range \u0000 NULL to \u001F
            // INFORMATION SEPARATOR ONE, inclusive:
            // https://infra.spec.whatwg.org/#c0-control-or-space

            /* eslint-disable max-len */

            var isJavaScriptProtocol = /^[\u0000-\u001F ]*j[\r\n\t]*a[\r\n\t]*v[\r\n\t]*a[\r\n\t]*s[\r\n\t]*c[\r\n\t]*r[\r\n\t]*i[\r\n\t]*p[\r\n\t]*t[\r\n\t]*\:/i;
            var didWarn = false;

            function sanitizeURL(url) {
              {
                if (!didWarn && isJavaScriptProtocol.test(url)) {
                  didWarn = true;

                  error('A future version of React will block javascript: URLs as a security precaution. ' + 'Use event handlers instead if you can. If you need to generate unsafe HTML try ' + 'using dangerouslySetInnerHTML instead. React was passed %s.', JSON.stringify(url));
                }
              }
            }

            /**
             * Get the value for a property on a node. Only used in DEV for SSR validation.
             * The "expected" argument is used as a hint of what the expected value is.
             * Some properties have multiple equivalent values.
             */
            function getValueForProperty(node, name, expected, propertyInfo) {
              {
                if (propertyInfo.mustUseProperty) {
                  var propertyName = propertyInfo.propertyName;
                  return node[propertyName];
                } else {
                  if ( propertyInfo.sanitizeURL) {
                    // If we haven't fully disabled javascript: URLs, and if
                    // the hydration is successful of a javascript: URL, we
                    // still want to warn on the client.
                    sanitizeURL('' + expected);
                  }

                  var attributeName = propertyInfo.attributeName;
                  var stringValue = null;

                  if (propertyInfo.type === OVERLOADED_BOOLEAN) {
                    if (node.hasAttribute(attributeName)) {
                      var value = node.getAttribute(attributeName);

                      if (value === '') {
                        return true;
                      }

                      if (shouldRemoveAttribute(name, expected, propertyInfo, false)) {
                        return value;
                      }

                      if (value === '' + expected) {
                        return expected;
                      }

                      return value;
                    }
                  } else if (node.hasAttribute(attributeName)) {
                    if (shouldRemoveAttribute(name, expected, propertyInfo, false)) {
                      // We had an attribute but shouldn't have had one, so read it
                      // for the error message.
                      return node.getAttribute(attributeName);
                    }

                    if (propertyInfo.type === BOOLEAN) {
                      // If this was a boolean, it doesn't matter what the value is
                      // the fact that we have it is the same as the expected.
                      return expected;
                    } // Even if this property uses a namespace we use getAttribute
                    // because we assume its namespaced name is the same as our config.
                    // To use getAttributeNS we need the local name which we don't have
                    // in our config atm.


                    stringValue = node.getAttribute(attributeName);
                  }

                  if (shouldRemoveAttribute(name, expected, propertyInfo, false)) {
                    return stringValue === null ? expected : stringValue;
                  } else if (stringValue === '' + expected) {
                    return expected;
                  } else {
                    return stringValue;
                  }
                }
              }
            }
            /**
             * Get the value for a attribute on a node. Only used in DEV for SSR validation.
             * The third argument is used as a hint of what the expected value is. Some
             * attributes have multiple equivalent values.
             */

            function getValueForAttribute(node, name, expected) {
              {
                if (!isAttributeNameSafe(name)) {
                  return;
                } // If the object is an opaque reference ID, it's expected that
                // the next prop is different than the server value, so just return
                // expected


                if (isOpaqueHydratingObject(expected)) {
                  return expected;
                }

                if (!node.hasAttribute(name)) {
                  return expected === undefined ? undefined : null;
                }

                var value = node.getAttribute(name);

                if (value === '' + expected) {
                  return expected;
                }

                return value;
              }
            }
            /**
             * Sets the value for a property on a node.
             *
             * @param {DOMElement} node
             * @param {string} name
             * @param {*} value
             */

            function setValueForProperty(node, name, value, isCustomComponentTag) {
              var propertyInfo = getPropertyInfo(name);

              if (shouldIgnoreAttribute(name, propertyInfo, isCustomComponentTag)) {
                return;
              }

              if (shouldRemoveAttribute(name, value, propertyInfo, isCustomComponentTag)) {
                value = null;
              } // If the prop isn't in the special list, treat it as a simple attribute.


              if (isCustomComponentTag || propertyInfo === null) {
                if (isAttributeNameSafe(name)) {
                  var _attributeName = name;

                  if (value === null) {
                    node.removeAttribute(_attributeName);
                  } else {
                    node.setAttribute(_attributeName,  '' + value);
                  }
                }

                return;
              }

              var mustUseProperty = propertyInfo.mustUseProperty;

              if (mustUseProperty) {
                var propertyName = propertyInfo.propertyName;

                if (value === null) {
                  var type = propertyInfo.type;
                  node[propertyName] = type === BOOLEAN ? false : '';
                } else {
                  // Contrary to `setAttribute`, object properties are properly
                  // `toString`ed by IE8/9.
                  node[propertyName] = value;
                }

                return;
              } // The rest are treated as attributes with special cases.


              var attributeName = propertyInfo.attributeName,
                  attributeNamespace = propertyInfo.attributeNamespace;

              if (value === null) {
                node.removeAttribute(attributeName);
              } else {
                var _type = propertyInfo.type;
                var attributeValue;

                if (_type === BOOLEAN || _type === OVERLOADED_BOOLEAN && value === true) {
                  // If attribute type is boolean, we know for sure it won't be an execution sink
                  // and we won't require Trusted Type here.
                  attributeValue = '';
                } else {
                  // `setAttribute` with objects becomes only `[object]` in IE8/9,
                  // ('' + value) makes it output the correct toString()-value.
                  {
                    attributeValue = '' + value;
                  }

                  if (propertyInfo.sanitizeURL) {
                    sanitizeURL(attributeValue.toString());
                  }
                }

                if (attributeNamespace) {
                  node.setAttributeNS(attributeNamespace, attributeName, attributeValue);
                } else {
                  node.setAttribute(attributeName, attributeValue);
                }
              }
            }

            // ATTENTION
            // When adding new symbols to this file,
            // Please consider also adding to 'react-devtools-shared/src/backend/ReactSymbols'
            // The Symbol used to tag the ReactElement-like types. If there is no native Symbol
            // nor polyfill, then a plain number is used for performance.
            var REACT_ELEMENT_TYPE = 0xeac7;
            var REACT_PORTAL_TYPE = 0xeaca;
            var REACT_FRAGMENT_TYPE = 0xeacb;
            var REACT_STRICT_MODE_TYPE = 0xeacc;
            var REACT_PROFILER_TYPE = 0xead2;
            var REACT_PROVIDER_TYPE = 0xeacd;
            var REACT_CONTEXT_TYPE = 0xeace;
            var REACT_FORWARD_REF_TYPE = 0xead0;
            var REACT_SUSPENSE_TYPE = 0xead1;
            var REACT_SUSPENSE_LIST_TYPE = 0xead8;
            var REACT_MEMO_TYPE = 0xead3;
            var REACT_LAZY_TYPE = 0xead4;
            var REACT_BLOCK_TYPE = 0xead9;
            var REACT_SCOPE_TYPE = 0xead7;
            var REACT_OPAQUE_ID_TYPE = 0xeae0;
            var REACT_DEBUG_TRACING_MODE_TYPE = 0xeae1;
            var REACT_OFFSCREEN_TYPE = 0xeae2;
            var REACT_LEGACY_HIDDEN_TYPE = 0xeae3;

            if (typeof Symbol === 'function' && Symbol.for) {
              var symbolFor = Symbol.for;
              REACT_ELEMENT_TYPE = symbolFor('react.element');
              REACT_PORTAL_TYPE = symbolFor('react.portal');
              REACT_FRAGMENT_TYPE = symbolFor('react.fragment');
              REACT_STRICT_MODE_TYPE = symbolFor('react.strict_mode');
              REACT_PROFILER_TYPE = symbolFor('react.profiler');
              REACT_PROVIDER_TYPE = symbolFor('react.provider');
              REACT_CONTEXT_TYPE = symbolFor('react.context');
              REACT_FORWARD_REF_TYPE = symbolFor('react.forward_ref');
              REACT_SUSPENSE_TYPE = symbolFor('react.suspense');
              REACT_SUSPENSE_LIST_TYPE = symbolFor('react.suspense_list');
              REACT_MEMO_TYPE = symbolFor('react.memo');
              REACT_LAZY_TYPE = symbolFor('react.lazy');
              REACT_BLOCK_TYPE = symbolFor('react.block');
              symbolFor('react.server.block');
              symbolFor('react.fundamental');
              REACT_SCOPE_TYPE = symbolFor('react.scope');
              REACT_OPAQUE_ID_TYPE = symbolFor('react.opaque.id');
              REACT_DEBUG_TRACING_MODE_TYPE = symbolFor('react.debug_trace_mode');
              REACT_OFFSCREEN_TYPE = symbolFor('react.offscreen');
              REACT_LEGACY_HIDDEN_TYPE = symbolFor('react.legacy_hidden');
            }

            var MAYBE_ITERATOR_SYMBOL = typeof Symbol === 'function' && Symbol.iterator;
            var FAUX_ITERATOR_SYMBOL = '@@iterator';
            function getIteratorFn(maybeIterable) {
              if (maybeIterable === null || typeof maybeIterable !== 'object') {
                return null;
              }

              var maybeIterator = MAYBE_ITERATOR_SYMBOL && maybeIterable[MAYBE_ITERATOR_SYMBOL] || maybeIterable[FAUX_ITERATOR_SYMBOL];

              if (typeof maybeIterator === 'function') {
                return maybeIterator;
              }

              return null;
            }

            // Helpers to patch console.logs to avoid logging during side-effect free
            // replaying on render function. This currently only patches the object
            // lazily which won't cover if the log function was extracted eagerly.
            // We could also eagerly patch the method.
            var disabledDepth = 0;
            var prevLog;
            var prevInfo;
            var prevWarn;
            var prevError;
            var prevGroup;
            var prevGroupCollapsed;
            var prevGroupEnd;

            function disabledLog() {}

            disabledLog.__reactDisabledLog = true;
            function disableLogs() {
              {
                if (disabledDepth === 0) {
                  /* eslint-disable react-internal/no-production-logging */
                  prevLog = console.log;
                  prevInfo = console.info;
                  prevWarn = console.warn;
                  prevError = console.error;
                  prevGroup = console.group;
                  prevGroupCollapsed = console.groupCollapsed;
                  prevGroupEnd = console.groupEnd; // https://github.com/facebook/react/issues/19099

                  var props = {
                    configurable: true,
                    enumerable: true,
                    value: disabledLog,
                    writable: true
                  }; // $FlowFixMe Flow thinks console is immutable.

                  Object.defineProperties(console, {
                    info: props,
                    log: props,
                    warn: props,
                    error: props,
                    group: props,
                    groupCollapsed: props,
                    groupEnd: props
                  });
                  /* eslint-enable react-internal/no-production-logging */
                }

                disabledDepth++;
              }
            }
            function reenableLogs() {
              {
                disabledDepth--;

                if (disabledDepth === 0) {
                  /* eslint-disable react-internal/no-production-logging */
                  var props = {
                    configurable: true,
                    enumerable: true,
                    writable: true
                  }; // $FlowFixMe Flow thinks console is immutable.

                  Object.defineProperties(console, {
                    log: _assign({}, props, {
                      value: prevLog
                    }),
                    info: _assign({}, props, {
                      value: prevInfo
                    }),
                    warn: _assign({}, props, {
                      value: prevWarn
                    }),
                    error: _assign({}, props, {
                      value: prevError
                    }),
                    group: _assign({}, props, {
                      value: prevGroup
                    }),
                    groupCollapsed: _assign({}, props, {
                      value: prevGroupCollapsed
                    }),
                    groupEnd: _assign({}, props, {
                      value: prevGroupEnd
                    })
                  });
                  /* eslint-enable react-internal/no-production-logging */
                }

                if (disabledDepth < 0) {
                  error('disabledDepth fell below zero. ' + 'This is a bug in React. Please file an issue.');
                }
              }
            }

            var ReactCurrentDispatcher = ReactSharedInternals.ReactCurrentDispatcher;
            var prefix;
            function describeBuiltInComponentFrame(name, source, ownerFn) {
              {
                if (prefix === undefined) {
                  // Extract the VM specific prefix used by each line.
                  try {
                    throw Error();
                  } catch (x) {
                    var match = x.stack.trim().match(/\n( *(at )?)/);
                    prefix = match && match[1] || '';
                  }
                } // We use the prefix to ensure our stacks line up with native stack frames.


                return '\n' + prefix + name;
              }
            }
            var reentry = false;
            var componentFrameCache;

            {
              var PossiblyWeakMap = typeof WeakMap === 'function' ? WeakMap : Map;
              componentFrameCache = new PossiblyWeakMap();
            }

            function describeNativeComponentFrame(fn, construct) {
              // If something asked for a stack inside a fake render, it should get ignored.
              if (!fn || reentry) {
                return '';
              }

              {
                var frame = componentFrameCache.get(fn);

                if (frame !== undefined) {
                  return frame;
                }
              }

              var control;
              reentry = true;
              var previousPrepareStackTrace = Error.prepareStackTrace; // $FlowFixMe It does accept undefined.

              Error.prepareStackTrace = undefined;
              var previousDispatcher;

              {
                previousDispatcher = ReactCurrentDispatcher.current; // Set the dispatcher in DEV because this might be call in the render function
                // for warnings.

                ReactCurrentDispatcher.current = null;
                disableLogs();
              }

              try {
                // This should throw.
                if (construct) {
                  // Something should be setting the props in the constructor.
                  var Fake = function () {
                    throw Error();
                  }; // $FlowFixMe


                  Object.defineProperty(Fake.prototype, 'props', {
                    set: function () {
                      // We use a throwing setter instead of frozen or non-writable props
                      // because that won't throw in a non-strict mode function.
                      throw Error();
                    }
                  });

                  if (typeof Reflect === 'object' && Reflect.construct) {
                    // We construct a different control for this case to include any extra
                    // frames added by the construct call.
                    try {
                      Reflect.construct(Fake, []);
                    } catch (x) {
                      control = x;
                    }

                    Reflect.construct(fn, [], Fake);
                  } else {
                    try {
                      Fake.call();
                    } catch (x) {
                      control = x;
                    }

                    fn.call(Fake.prototype);
                  }
                } else {
                  try {
                    throw Error();
                  } catch (x) {
                    control = x;
                  }

                  fn();
                }
              } catch (sample) {
                // This is inlined manually because closure doesn't do it for us.
                if (sample && control && typeof sample.stack === 'string') {
                  // This extracts the first frame from the sample that isn't also in the control.
                  // Skipping one frame that we assume is the frame that calls the two.
                  var sampleLines = sample.stack.split('\n');
                  var controlLines = control.stack.split('\n');
                  var s = sampleLines.length - 1;
                  var c = controlLines.length - 1;

                  while (s >= 1 && c >= 0 && sampleLines[s] !== controlLines[c]) {
                    // We expect at least one stack frame to be shared.
                    // Typically this will be the root most one. However, stack frames may be
                    // cut off due to maximum stack limits. In this case, one maybe cut off
                    // earlier than the other. We assume that the sample is longer or the same
                    // and there for cut off earlier. So we should find the root most frame in
                    // the sample somewhere in the control.
                    c--;
                  }

                  for (; s >= 1 && c >= 0; s--, c--) {
                    // Next we find the first one that isn't the same which should be the
                    // frame that called our sample function and the control.
                    if (sampleLines[s] !== controlLines[c]) {
                      // In V8, the first line is describing the message but other VMs don't.
                      // If we're about to return the first line, and the control is also on the same
                      // line, that's a pretty good indicator that our sample threw at same line as
                      // the control. I.e. before we entered the sample frame. So we ignore this result.
                      // This can happen if you passed a class to function component, or non-function.
                      if (s !== 1 || c !== 1) {
                        do {
                          s--;
                          c--; // We may still have similar intermediate frames from the construct call.
                          // The next one that isn't the same should be our match though.

                          if (c < 0 || sampleLines[s] !== controlLines[c]) {
                            // V8 adds a "new" prefix for native classes. Let's remove it to make it prettier.
                            var _frame = '\n' + sampleLines[s].replace(' at new ', ' at ');

                            {
                              if (typeof fn === 'function') {
                                componentFrameCache.set(fn, _frame);
                              }
                            } // Return the line we found.


                            return _frame;
                          }
                        } while (s >= 1 && c >= 0);
                      }

                      break;
                    }
                  }
                }
              } finally {
                reentry = false;

                {
                  ReactCurrentDispatcher.current = previousDispatcher;
                  reenableLogs();
                }

                Error.prepareStackTrace = previousPrepareStackTrace;
              } // Fallback to just using the name if we couldn't make it throw.


              var name = fn ? fn.displayName || fn.name : '';
              var syntheticFrame = name ? describeBuiltInComponentFrame(name) : '';

              {
                if (typeof fn === 'function') {
                  componentFrameCache.set(fn, syntheticFrame);
                }
              }

              return syntheticFrame;
            }

            function describeClassComponentFrame(ctor, source, ownerFn) {
              {
                return describeNativeComponentFrame(ctor, true);
              }
            }
            function describeFunctionComponentFrame(fn, source, ownerFn) {
              {
                return describeNativeComponentFrame(fn, false);
              }
            }

            function shouldConstruct(Component) {
              var prototype = Component.prototype;
              return !!(prototype && prototype.isReactComponent);
            }

            function describeUnknownElementTypeFrameInDEV(type, source, ownerFn) {

              if (type == null) {
                return '';
              }

              if (typeof type === 'function') {
                {
                  return describeNativeComponentFrame(type, shouldConstruct(type));
                }
              }

              if (typeof type === 'string') {
                return describeBuiltInComponentFrame(type);
              }

              switch (type) {
                case REACT_SUSPENSE_TYPE:
                  return describeBuiltInComponentFrame('Suspense');

                case REACT_SUSPENSE_LIST_TYPE:
                  return describeBuiltInComponentFrame('SuspenseList');
              }

              if (typeof type === 'object') {
                switch (type.$$typeof) {
                  case REACT_FORWARD_REF_TYPE:
                    return describeFunctionComponentFrame(type.render);

                  case REACT_MEMO_TYPE:
                    // Memo may contain any component type so we recursively resolve it.
                    return describeUnknownElementTypeFrameInDEV(type.type, source, ownerFn);

                  case REACT_BLOCK_TYPE:
                    return describeFunctionComponentFrame(type._render);

                  case REACT_LAZY_TYPE:
                    {
                      var lazyComponent = type;
                      var payload = lazyComponent._payload;
                      var init = lazyComponent._init;

                      try {
                        // Lazy may contain any component type so we recursively resolve it.
                        return describeUnknownElementTypeFrameInDEV(init(payload), source, ownerFn);
                      } catch (x) {}
                    }
                }
              }

              return '';
            }

            function describeFiber(fiber) {
              fiber._debugOwner ? fiber._debugOwner.type : null ;
              fiber._debugSource ;

              switch (fiber.tag) {
                case HostComponent:
                  return describeBuiltInComponentFrame(fiber.type);

                case LazyComponent:
                  return describeBuiltInComponentFrame('Lazy');

                case SuspenseComponent:
                  return describeBuiltInComponentFrame('Suspense');

                case SuspenseListComponent:
                  return describeBuiltInComponentFrame('SuspenseList');

                case FunctionComponent:
                case IndeterminateComponent:
                case SimpleMemoComponent:
                  return describeFunctionComponentFrame(fiber.type);

                case ForwardRef:
                  return describeFunctionComponentFrame(fiber.type.render);

                case Block:
                  return describeFunctionComponentFrame(fiber.type._render);

                case ClassComponent:
                  return describeClassComponentFrame(fiber.type);

                default:
                  return '';
              }
            }

            function getStackByFiberInDevAndProd(workInProgress) {
              try {
                var info = '';
                var node = workInProgress;

                do {
                  info += describeFiber(node);
                  node = node.return;
                } while (node);

                return info;
              } catch (x) {
                return '\nError generating stack: ' + x.message + '\n' + x.stack;
              }
            }

            function getWrappedName(outerType, innerType, wrapperName) {
              var functionName = innerType.displayName || innerType.name || '';
              return outerType.displayName || (functionName !== '' ? wrapperName + "(" + functionName + ")" : wrapperName);
            }

            function getContextName(type) {
              return type.displayName || 'Context';
            }

            function getComponentName(type) {
              if (type == null) {
                // Host root, text node or just invalid type.
                return null;
              }

              {
                if (typeof type.tag === 'number') {
                  error('Received an unexpected object in getComponentName(). ' + 'This is likely a bug in React. Please file an issue.');
                }
              }

              if (typeof type === 'function') {
                return type.displayName || type.name || null;
              }

              if (typeof type === 'string') {
                return type;
              }

              switch (type) {
                case REACT_FRAGMENT_TYPE:
                  return 'Fragment';

                case REACT_PORTAL_TYPE:
                  return 'Portal';

                case REACT_PROFILER_TYPE:
                  return 'Profiler';

                case REACT_STRICT_MODE_TYPE:
                  return 'StrictMode';

                case REACT_SUSPENSE_TYPE:
                  return 'Suspense';

                case REACT_SUSPENSE_LIST_TYPE:
                  return 'SuspenseList';
              }

              if (typeof type === 'object') {
                switch (type.$$typeof) {
                  case REACT_CONTEXT_TYPE:
                    var context = type;
                    return getContextName(context) + '.Consumer';

                  case REACT_PROVIDER_TYPE:
                    var provider = type;
                    return getContextName(provider._context) + '.Provider';

                  case REACT_FORWARD_REF_TYPE:
                    return getWrappedName(type, type.render, 'ForwardRef');

                  case REACT_MEMO_TYPE:
                    return getComponentName(type.type);

                  case REACT_BLOCK_TYPE:
                    return getComponentName(type._render);

                  case REACT_LAZY_TYPE:
                    {
                      var lazyComponent = type;
                      var payload = lazyComponent._payload;
                      var init = lazyComponent._init;

                      try {
                        return getComponentName(init(payload));
                      } catch (x) {
                        return null;
                      }
                    }
                }
              }

              return null;
            }

            var ReactDebugCurrentFrame = ReactSharedInternals.ReactDebugCurrentFrame;
            var current = null;
            var isRendering = false;
            function getCurrentFiberOwnerNameInDevOrNull() {
              {
                if (current === null) {
                  return null;
                }

                var owner = current._debugOwner;

                if (owner !== null && typeof owner !== 'undefined') {
                  return getComponentName(owner.type);
                }
              }

              return null;
            }

            function getCurrentFiberStackInDev() {
              {
                if (current === null) {
                  return '';
                } // Safe because if current fiber exists, we are reconciling,
                // and it is guaranteed to be the work-in-progress version.


                return getStackByFiberInDevAndProd(current);
              }
            }

            function resetCurrentFiber() {
              {
                ReactDebugCurrentFrame.getCurrentStack = null;
                current = null;
                isRendering = false;
              }
            }
            function setCurrentFiber(fiber) {
              {
                ReactDebugCurrentFrame.getCurrentStack = getCurrentFiberStackInDev;
                current = fiber;
                isRendering = false;
              }
            }
            function setIsRendering(rendering) {
              {
                isRendering = rendering;
              }
            }
            function getIsRendering() {
              {
                return isRendering;
              }
            }

            // Flow does not allow string concatenation of most non-string types. To work
            // around this limitation, we use an opaque type that can only be obtained by
            // passing the value through getToStringValue first.
            function toString(value) {
              return '' + value;
            }
            function getToStringValue(value) {
              switch (typeof value) {
                case 'boolean':
                case 'number':
                case 'object':
                case 'string':
                case 'undefined':
                  return value;

                default:
                  // function, symbol are assigned as empty strings
                  return '';
              }
            }

            var hasReadOnlyValue = {
              button: true,
              checkbox: true,
              image: true,
              hidden: true,
              radio: true,
              reset: true,
              submit: true
            };
            function checkControlledValueProps(tagName, props) {
              {
                if (!(hasReadOnlyValue[props.type] || props.onChange || props.onInput || props.readOnly || props.disabled || props.value == null)) {
                  error('You provided a `value` prop to a form field without an ' + '`onChange` handler. This will render a read-only field. If ' + 'the field should be mutable use `defaultValue`. Otherwise, ' + 'set either `onChange` or `readOnly`.');
                }

                if (!(props.onChange || props.readOnly || props.disabled || props.checked == null)) {
                  error('You provided a `checked` prop to a form field without an ' + '`onChange` handler. This will render a read-only field. If ' + 'the field should be mutable use `defaultChecked`. Otherwise, ' + 'set either `onChange` or `readOnly`.');
                }
              }
            }

            function isCheckable(elem) {
              var type = elem.type;
              var nodeName = elem.nodeName;
              return nodeName && nodeName.toLowerCase() === 'input' && (type === 'checkbox' || type === 'radio');
            }

            function getTracker(node) {
              return node._valueTracker;
            }

            function detachTracker(node) {
              node._valueTracker = null;
            }

            function getValueFromNode(node) {
              var value = '';

              if (!node) {
                return value;
              }

              if (isCheckable(node)) {
                value = node.checked ? 'true' : 'false';
              } else {
                value = node.value;
              }

              return value;
            }

            function trackValueOnNode(node) {
              var valueField = isCheckable(node) ? 'checked' : 'value';
              var descriptor = Object.getOwnPropertyDescriptor(node.constructor.prototype, valueField);
              var currentValue = '' + node[valueField]; // if someone has already defined a value or Safari, then bail
              // and don't track value will cause over reporting of changes,
              // but it's better then a hard failure
              // (needed for certain tests that spyOn input values and Safari)

              if (node.hasOwnProperty(valueField) || typeof descriptor === 'undefined' || typeof descriptor.get !== 'function' || typeof descriptor.set !== 'function') {
                return;
              }

              var get = descriptor.get,
                  set = descriptor.set;
              Object.defineProperty(node, valueField, {
                configurable: true,
                get: function () {
                  return get.call(this);
                },
                set: function (value) {
                  currentValue = '' + value;
                  set.call(this, value);
                }
              }); // We could've passed this the first time
              // but it triggers a bug in IE11 and Edge 14/15.
              // Calling defineProperty() again should be equivalent.
              // https://github.com/facebook/react/issues/11768

              Object.defineProperty(node, valueField, {
                enumerable: descriptor.enumerable
              });
              var tracker = {
                getValue: function () {
                  return currentValue;
                },
                setValue: function (value) {
                  currentValue = '' + value;
                },
                stopTracking: function () {
                  detachTracker(node);
                  delete node[valueField];
                }
              };
              return tracker;
            }

            function track(node) {
              if (getTracker(node)) {
                return;
              } // TODO: Once it's just Fiber we can move this to node._wrapperState


              node._valueTracker = trackValueOnNode(node);
            }
            function updateValueIfChanged(node) {
              if (!node) {
                return false;
              }

              var tracker = getTracker(node); // if there is no tracker at this point it's unlikely
              // that trying again will succeed

              if (!tracker) {
                return true;
              }

              var lastValue = tracker.getValue();
              var nextValue = getValueFromNode(node);

              if (nextValue !== lastValue) {
                tracker.setValue(nextValue);
                return true;
              }

              return false;
            }

            function getActiveElement(doc) {
              doc = doc || (typeof document !== 'undefined' ? document : undefined);

              if (typeof doc === 'undefined') {
                return null;
              }

              try {
                return doc.activeElement || doc.body;
              } catch (e) {
                return doc.body;
              }
            }

            var didWarnValueDefaultValue = false;
            var didWarnCheckedDefaultChecked = false;
            var didWarnControlledToUncontrolled = false;
            var didWarnUncontrolledToControlled = false;

            function isControlled(props) {
              var usesChecked = props.type === 'checkbox' || props.type === 'radio';
              return usesChecked ? props.checked != null : props.value != null;
            }
            /**
             * Implements an <input> host component that allows setting these optional
             * props: `checked`, `value`, `defaultChecked`, and `defaultValue`.
             *
             * If `checked` or `value` are not supplied (or null/undefined), user actions
             * that affect the checked state or value will trigger updates to the element.
             *
             * If they are supplied (and not null/undefined), the rendered element will not
             * trigger updates to the element. Instead, the props must change in order for
             * the rendered element to be updated.
             *
             * The rendered element will be initialized as unchecked (or `defaultChecked`)
             * with an empty value (or `defaultValue`).
             *
             * See http://www.w3.org/TR/2012/WD-html5-20121025/the-input-element.html
             */


            function getHostProps(element, props) {
              var node = element;
              var checked = props.checked;

              var hostProps = _assign({}, props, {
                defaultChecked: undefined,
                defaultValue: undefined,
                value: undefined,
                checked: checked != null ? checked : node._wrapperState.initialChecked
              });

              return hostProps;
            }
            function initWrapperState(element, props) {
              {
                checkControlledValueProps('input', props);

                if (props.checked !== undefined && props.defaultChecked !== undefined && !didWarnCheckedDefaultChecked) {
                  error('%s contains an input of type %s with both checked and defaultChecked props. ' + 'Input elements must be either controlled or uncontrolled ' + '(specify either the checked prop, or the defaultChecked prop, but not ' + 'both). Decide between using a controlled or uncontrolled input ' + 'element and remove one of these props. More info: ' + 'https://reactjs.org/link/controlled-components', getCurrentFiberOwnerNameInDevOrNull() || 'A component', props.type);

                  didWarnCheckedDefaultChecked = true;
                }

                if (props.value !== undefined && props.defaultValue !== undefined && !didWarnValueDefaultValue) {
                  error('%s contains an input of type %s with both value and defaultValue props. ' + 'Input elements must be either controlled or uncontrolled ' + '(specify either the value prop, or the defaultValue prop, but not ' + 'both). Decide between using a controlled or uncontrolled input ' + 'element and remove one of these props. More info: ' + 'https://reactjs.org/link/controlled-components', getCurrentFiberOwnerNameInDevOrNull() || 'A component', props.type);

                  didWarnValueDefaultValue = true;
                }
              }

              var node = element;
              var defaultValue = props.defaultValue == null ? '' : props.defaultValue;
              node._wrapperState = {
                initialChecked: props.checked != null ? props.checked : props.defaultChecked,
                initialValue: getToStringValue(props.value != null ? props.value : defaultValue),
                controlled: isControlled(props)
              };
            }
            function updateChecked(element, props) {
              var node = element;
              var checked = props.checked;

              if (checked != null) {
                setValueForProperty(node, 'checked', checked, false);
              }
            }
            function updateWrapper(element, props) {
              var node = element;

              {
                var controlled = isControlled(props);

                if (!node._wrapperState.controlled && controlled && !didWarnUncontrolledToControlled) {
                  error('A component is changing an uncontrolled input to be controlled. ' + 'This is likely caused by the value changing from undefined to ' + 'a defined value, which should not happen. ' + 'Decide between using a controlled or uncontrolled input ' + 'element for the lifetime of the component. More info: https://reactjs.org/link/controlled-components');

                  didWarnUncontrolledToControlled = true;
                }

                if (node._wrapperState.controlled && !controlled && !didWarnControlledToUncontrolled) {
                  error('A component is changing a controlled input to be uncontrolled. ' + 'This is likely caused by the value changing from a defined to ' + 'undefined, which should not happen. ' + 'Decide between using a controlled or uncontrolled input ' + 'element for the lifetime of the component. More info: https://reactjs.org/link/controlled-components');

                  didWarnControlledToUncontrolled = true;
                }
              }

              updateChecked(element, props);
              var value = getToStringValue(props.value);
              var type = props.type;

              if (value != null) {
                if (type === 'number') {
                  if (value === 0 && node.value === '' || // We explicitly want to coerce to number here if possible.
                  // eslint-disable-next-line
                  node.value != value) {
                    node.value = toString(value);
                  }
                } else if (node.value !== toString(value)) {
                  node.value = toString(value);
                }
              } else if (type === 'submit' || type === 'reset') {
                // Submit/reset inputs need the attribute removed completely to avoid
                // blank-text buttons.
                node.removeAttribute('value');
                return;
              }

              {
                // When syncing the value attribute, the value comes from a cascade of
                // properties:
                //  1. The value React property
                //  2. The defaultValue React property
                //  3. Otherwise there should be no change
                if (props.hasOwnProperty('value')) {
                  setDefaultValue(node, props.type, value);
                } else if (props.hasOwnProperty('defaultValue')) {
                  setDefaultValue(node, props.type, getToStringValue(props.defaultValue));
                }
              }

              {
                // When syncing the checked attribute, it only changes when it needs
                // to be removed, such as transitioning from a checkbox into a text input
                if (props.checked == null && props.defaultChecked != null) {
                  node.defaultChecked = !!props.defaultChecked;
                }
              }
            }
            function postMountWrapper(element, props, isHydrating) {
              var node = element; // Do not assign value if it is already set. This prevents user text input
              // from being lost during SSR hydration.

              if (props.hasOwnProperty('value') || props.hasOwnProperty('defaultValue')) {
                var type = props.type;
                var isButton = type === 'submit' || type === 'reset'; // Avoid setting value attribute on submit/reset inputs as it overrides the
                // default value provided by the browser. See: #12872

                if (isButton && (props.value === undefined || props.value === null)) {
                  return;
                }

                var initialValue = toString(node._wrapperState.initialValue); // Do not assign value if it is already set. This prevents user text input
                // from being lost during SSR hydration.

                if (!isHydrating) {
                  {
                    // When syncing the value attribute, the value property should use
                    // the wrapperState._initialValue property. This uses:
                    //
                    //   1. The value React property when present
                    //   2. The defaultValue React property when present
                    //   3. An empty string
                    if (initialValue !== node.value) {
                      node.value = initialValue;
                    }
                  }
                }

                {
                  // Otherwise, the value attribute is synchronized to the property,
                  // so we assign defaultValue to the same thing as the value property
                  // assignment step above.
                  node.defaultValue = initialValue;
                }
              } // Normally, we'd just do `node.checked = node.checked` upon initial mount, less this bug
              // this is needed to work around a chrome bug where setting defaultChecked
              // will sometimes influence the value of checked (even after detachment).
              // Reference: https://bugs.chromium.org/p/chromium/issues/detail?id=608416
              // We need to temporarily unset name to avoid disrupting radio button groups.


              var name = node.name;

              if (name !== '') {
                node.name = '';
              }

              {
                // When syncing the checked attribute, both the checked property and
                // attribute are assigned at the same time using defaultChecked. This uses:
                //
                //   1. The checked React property when present
                //   2. The defaultChecked React property when present
                //   3. Otherwise, false
                node.defaultChecked = !node.defaultChecked;
                node.defaultChecked = !!node._wrapperState.initialChecked;
              }

              if (name !== '') {
                node.name = name;
              }
            }
            function restoreControlledState(element, props) {
              var node = element;
              updateWrapper(node, props);
              updateNamedCousins(node, props);
            }

            function updateNamedCousins(rootNode, props) {
              var name = props.name;

              if (props.type === 'radio' && name != null) {
                var queryRoot = rootNode;

                while (queryRoot.parentNode) {
                  queryRoot = queryRoot.parentNode;
                } // If `rootNode.form` was non-null, then we could try `form.elements`,
                // but that sometimes behaves strangely in IE8. We could also try using
                // `form.getElementsByName`, but that will only return direct children
                // and won't include inputs that use the HTML5 `form=` attribute. Since
                // the input might not even be in a form. It might not even be in the
                // document. Let's just use the local `querySelectorAll` to ensure we don't
                // miss anything.


                var group = queryRoot.querySelectorAll('input[name=' + JSON.stringify('' + name) + '][type="radio"]');

                for (var i = 0; i < group.length; i++) {
                  var otherNode = group[i];

                  if (otherNode === rootNode || otherNode.form !== rootNode.form) {
                    continue;
                  } // This will throw if radio buttons rendered by different copies of React
                  // and the same name are rendered into the same form (same as #1939).
                  // That's probably okay; we don't support it just as we don't support
                  // mixing React radio buttons with non-React ones.


                  var otherProps = getFiberCurrentPropsFromNode(otherNode);

                  if (!otherProps) {
                    {
                      throw Error( "ReactDOMInput: Mixing React and non-React radio inputs with the same `name` is not supported." );
                    }
                  } // We need update the tracked value on the named cousin since the value
                  // was changed but the input saw no event or value set


                  updateValueIfChanged(otherNode); // If this is a controlled radio button group, forcing the input that
                  // was previously checked to update will cause it to be come re-checked
                  // as appropriate.

                  updateWrapper(otherNode, otherProps);
                }
              }
            } // In Chrome, assigning defaultValue to certain input types triggers input validation.
            // For number inputs, the display value loses trailing decimal points. For email inputs,
            // Chrome raises "The specified value <x> is not a valid email address".
            //
            // Here we check to see if the defaultValue has actually changed, avoiding these problems
            // when the user is inputting text
            //
            // https://github.com/facebook/react/issues/7253


            function setDefaultValue(node, type, value) {
              if ( // Focused number inputs synchronize on blur. See ChangeEventPlugin.js
              type !== 'number' || getActiveElement(node.ownerDocument) !== node) {
                if (value == null) {
                  node.defaultValue = toString(node._wrapperState.initialValue);
                } else if (node.defaultValue !== toString(value)) {
                  node.defaultValue = toString(value);
                }
              }
            }

            var didWarnSelectedSetOnOption = false;
            var didWarnInvalidChild = false;

            function flattenChildren(children) {
              var content = ''; // Flatten children. We'll warn if they are invalid
              // during validateProps() which runs for hydration too.
              // Note that this would throw on non-element objects.
              // Elements are stringified (which is normally irrelevant
              // but matters for <fbt>).

              React.Children.forEach(children, function (child) {
                if (child == null) {
                  return;
                }

                content += child; // Note: we don't warn about invalid children here.
                // Instead, this is done separately below so that
                // it happens during the hydration code path too.
              });
              return content;
            }
            /**
             * Implements an <option> host component that warns when `selected` is set.
             */


            function validateProps(element, props) {
              {
                // This mirrors the code path above, but runs for hydration too.
                // Warn about invalid children here so that client and hydration are consistent.
                // TODO: this seems like it could cause a DEV-only throw for hydration
                // if children contains a non-element object. We should try to avoid that.
                if (typeof props.children === 'object' && props.children !== null) {
                  React.Children.forEach(props.children, function (child) {
                    if (child == null) {
                      return;
                    }

                    if (typeof child === 'string' || typeof child === 'number') {
                      return;
                    }

                    if (typeof child.type !== 'string') {
                      return;
                    }

                    if (!didWarnInvalidChild) {
                      didWarnInvalidChild = true;

                      error('Only strings and numbers are supported as <option> children.');
                    }
                  });
                } // TODO: Remove support for `selected` in <option>.


                if (props.selected != null && !didWarnSelectedSetOnOption) {
                  error('Use the `defaultValue` or `value` props on <select> instead of ' + 'setting `selected` on <option>.');

                  didWarnSelectedSetOnOption = true;
                }
              }
            }
            function postMountWrapper$1(element, props) {
              // value="" should make a value attribute (#6219)
              if (props.value != null) {
                element.setAttribute('value', toString(getToStringValue(props.value)));
              }
            }
            function getHostProps$1(element, props) {
              var hostProps = _assign({
                children: undefined
              }, props);

              var content = flattenChildren(props.children);

              if (content) {
                hostProps.children = content;
              }

              return hostProps;
            }

            var didWarnValueDefaultValue$1;

            {
              didWarnValueDefaultValue$1 = false;
            }

            function getDeclarationErrorAddendum() {
              var ownerName = getCurrentFiberOwnerNameInDevOrNull();

              if (ownerName) {
                return '\n\nCheck the render method of `' + ownerName + '`.';
              }

              return '';
            }

            var valuePropNames = ['value', 'defaultValue'];
            /**
             * Validation function for `value` and `defaultValue`.
             */

            function checkSelectPropTypes(props) {
              {
                checkControlledValueProps('select', props);

                for (var i = 0; i < valuePropNames.length; i++) {
                  var propName = valuePropNames[i];

                  if (props[propName] == null) {
                    continue;
                  }

                  var isArray = Array.isArray(props[propName]);

                  if (props.multiple && !isArray) {
                    error('The `%s` prop supplied to <select> must be an array if ' + '`multiple` is true.%s', propName, getDeclarationErrorAddendum());
                  } else if (!props.multiple && isArray) {
                    error('The `%s` prop supplied to <select> must be a scalar ' + 'value if `multiple` is false.%s', propName, getDeclarationErrorAddendum());
                  }
                }
              }
            }

            function updateOptions(node, multiple, propValue, setDefaultSelected) {
              var options = node.options;

              if (multiple) {
                var selectedValues = propValue;
                var selectedValue = {};

                for (var i = 0; i < selectedValues.length; i++) {
                  // Prefix to avoid chaos with special keys.
                  selectedValue['$' + selectedValues[i]] = true;
                }

                for (var _i = 0; _i < options.length; _i++) {
                  var selected = selectedValue.hasOwnProperty('$' + options[_i].value);

                  if (options[_i].selected !== selected) {
                    options[_i].selected = selected;
                  }

                  if (selected && setDefaultSelected) {
                    options[_i].defaultSelected = true;
                  }
                }
              } else {
                // Do not set `select.value` as exact behavior isn't consistent across all
                // browsers for all cases.
                var _selectedValue = toString(getToStringValue(propValue));

                var defaultSelected = null;

                for (var _i2 = 0; _i2 < options.length; _i2++) {
                  if (options[_i2].value === _selectedValue) {
                    options[_i2].selected = true;

                    if (setDefaultSelected) {
                      options[_i2].defaultSelected = true;
                    }

                    return;
                  }

                  if (defaultSelected === null && !options[_i2].disabled) {
                    defaultSelected = options[_i2];
                  }
                }

                if (defaultSelected !== null) {
                  defaultSelected.selected = true;
                }
              }
            }
            /**
             * Implements a <select> host component that allows optionally setting the
             * props `value` and `defaultValue`. If `multiple` is false, the prop must be a
             * stringable. If `multiple` is true, the prop must be an array of stringables.
             *
             * If `value` is not supplied (or null/undefined), user actions that change the
             * selected option will trigger updates to the rendered options.
             *
             * If it is supplied (and not null/undefined), the rendered options will not
             * update in response to user actions. Instead, the `value` prop must change in
             * order for the rendered options to update.
             *
             * If `defaultValue` is provided, any options with the supplied values will be
             * selected.
             */


            function getHostProps$2(element, props) {
              return _assign({}, props, {
                value: undefined
              });
            }
            function initWrapperState$1(element, props) {
              var node = element;

              {
                checkSelectPropTypes(props);
              }

              node._wrapperState = {
                wasMultiple: !!props.multiple
              };

              {
                if (props.value !== undefined && props.defaultValue !== undefined && !didWarnValueDefaultValue$1) {
                  error('Select elements must be either controlled or uncontrolled ' + '(specify either the value prop, or the defaultValue prop, but not ' + 'both). Decide between using a controlled or uncontrolled select ' + 'element and remove one of these props. More info: ' + 'https://reactjs.org/link/controlled-components');

                  didWarnValueDefaultValue$1 = true;
                }
              }
            }
            function postMountWrapper$2(element, props) {
              var node = element;
              node.multiple = !!props.multiple;
              var value = props.value;

              if (value != null) {
                updateOptions(node, !!props.multiple, value, false);
              } else if (props.defaultValue != null) {
                updateOptions(node, !!props.multiple, props.defaultValue, true);
              }
            }
            function postUpdateWrapper(element, props) {
              var node = element;
              var wasMultiple = node._wrapperState.wasMultiple;
              node._wrapperState.wasMultiple = !!props.multiple;
              var value = props.value;

              if (value != null) {
                updateOptions(node, !!props.multiple, value, false);
              } else if (wasMultiple !== !!props.multiple) {
                // For simplicity, reapply `defaultValue` if `multiple` is toggled.
                if (props.defaultValue != null) {
                  updateOptions(node, !!props.multiple, props.defaultValue, true);
                } else {
                  // Revert the select back to its default unselected state.
                  updateOptions(node, !!props.multiple, props.multiple ? [] : '', false);
                }
              }
            }
            function restoreControlledState$1(element, props) {
              var node = element;
              var value = props.value;

              if (value != null) {
                updateOptions(node, !!props.multiple, value, false);
              }
            }

            var didWarnValDefaultVal = false;

            /**
             * Implements a <textarea> host component that allows setting `value`, and
             * `defaultValue`. This differs from the traditional DOM API because value is
             * usually set as PCDATA children.
             *
             * If `value` is not supplied (or null/undefined), user actions that affect the
             * value will trigger updates to the element.
             *
             * If `value` is supplied (and not null/undefined), the rendered element will
             * not trigger updates to the element. Instead, the `value` prop must change in
             * order for the rendered element to be updated.
             *
             * The rendered element will be initialized with an empty value, the prop
             * `defaultValue` if specified, or the children content (deprecated).
             */
            function getHostProps$3(element, props) {
              var node = element;

              if (!(props.dangerouslySetInnerHTML == null)) {
                {
                  throw Error( "`dangerouslySetInnerHTML` does not make sense on <textarea>." );
                }
              } // Always set children to the same thing. In IE9, the selection range will
              // get reset if `textContent` is mutated.  We could add a check in setTextContent
              // to only set the value if/when the value differs from the node value (which would
              // completely solve this IE9 bug), but Sebastian+Sophie seemed to like this
              // solution. The value can be a boolean or object so that's why it's forced
              // to be a string.


              var hostProps = _assign({}, props, {
                value: undefined,
                defaultValue: undefined,
                children: toString(node._wrapperState.initialValue)
              });

              return hostProps;
            }
            function initWrapperState$2(element, props) {
              var node = element;

              {
                checkControlledValueProps('textarea', props);

                if (props.value !== undefined && props.defaultValue !== undefined && !didWarnValDefaultVal) {
                  error('%s contains a textarea with both value and defaultValue props. ' + 'Textarea elements must be either controlled or uncontrolled ' + '(specify either the value prop, or the defaultValue prop, but not ' + 'both). Decide between using a controlled or uncontrolled textarea ' + 'and remove one of these props. More info: ' + 'https://reactjs.org/link/controlled-components', getCurrentFiberOwnerNameInDevOrNull() || 'A component');

                  didWarnValDefaultVal = true;
                }
              }

              var initialValue = props.value; // Only bother fetching default value if we're going to use it

              if (initialValue == null) {
                var children = props.children,
                    defaultValue = props.defaultValue;

                if (children != null) {
                  {
                    error('Use the `defaultValue` or `value` props instead of setting ' + 'children on <textarea>.');
                  }

                  {
                    if (!(defaultValue == null)) {
                      {
                        throw Error( "If you supply `defaultValue` on a <textarea>, do not pass children." );
                      }
                    }

                    if (Array.isArray(children)) {
                      if (!(children.length <= 1)) {
                        {
                          throw Error( "<textarea> can only have at most one child." );
                        }
                      }

                      children = children[0];
                    }

                    defaultValue = children;
                  }
                }

                if (defaultValue == null) {
                  defaultValue = '';
                }

                initialValue = defaultValue;
              }

              node._wrapperState = {
                initialValue: getToStringValue(initialValue)
              };
            }
            function updateWrapper$1(element, props) {
              var node = element;
              var value = getToStringValue(props.value);
              var defaultValue = getToStringValue(props.defaultValue);

              if (value != null) {
                // Cast `value` to a string to ensure the value is set correctly. While
                // browsers typically do this as necessary, jsdom doesn't.
                var newValue = toString(value); // To avoid side effects (such as losing text selection), only set value if changed

                if (newValue !== node.value) {
                  node.value = newValue;
                }

                if (props.defaultValue == null && node.defaultValue !== newValue) {
                  node.defaultValue = newValue;
                }
              }

              if (defaultValue != null) {
                node.defaultValue = toString(defaultValue);
              }
            }
            function postMountWrapper$3(element, props) {
              var node = element; // This is in postMount because we need access to the DOM node, which is not
              // available until after the component has mounted.

              var textContent = node.textContent; // Only set node.value if textContent is equal to the expected
              // initial value. In IE10/IE11 there is a bug where the placeholder attribute
              // will populate textContent as well.
              // https://developer.microsoft.com/microsoft-edge/platform/issues/101525/

              if (textContent === node._wrapperState.initialValue) {
                if (textContent !== '' && textContent !== null) {
                  node.value = textContent;
                }
              }
            }
            function restoreControlledState$2(element, props) {
              // DOM component is still mounted; update
              updateWrapper$1(element, props);
            }

            var HTML_NAMESPACE = 'http://www.w3.org/1999/xhtml';
            var MATH_NAMESPACE = 'http://www.w3.org/1998/Math/MathML';
            var SVG_NAMESPACE = 'http://www.w3.org/2000/svg';
            var Namespaces = {
              html: HTML_NAMESPACE,
              mathml: MATH_NAMESPACE,
              svg: SVG_NAMESPACE
            }; // Assumes there is no parent namespace.

            function getIntrinsicNamespace(type) {
              switch (type) {
                case 'svg':
                  return SVG_NAMESPACE;

                case 'math':
                  return MATH_NAMESPACE;

                default:
                  return HTML_NAMESPACE;
              }
            }
            function getChildNamespace(parentNamespace, type) {
              if (parentNamespace == null || parentNamespace === HTML_NAMESPACE) {
                // No (or default) parent namespace: potential entry point.
                return getIntrinsicNamespace(type);
              }

              if (parentNamespace === SVG_NAMESPACE && type === 'foreignObject') {
                // We're leaving SVG.
                return HTML_NAMESPACE;
              } // By default, pass namespace below.


              return parentNamespace;
            }

            /* globals MSApp */

            /**
             * Create a function which has 'unsafe' privileges (required by windows8 apps)
             */
            var createMicrosoftUnsafeLocalFunction = function (func) {
              if (typeof MSApp !== 'undefined' && MSApp.execUnsafeLocalFunction) {
                return function (arg0, arg1, arg2, arg3) {
                  MSApp.execUnsafeLocalFunction(function () {
                    return func(arg0, arg1, arg2, arg3);
                  });
                };
              } else {
                return func;
              }
            };

            var reusableSVGContainer;
            /**
             * Set the innerHTML property of a node
             *
             * @param {DOMElement} node
             * @param {string} html
             * @internal
             */

            var setInnerHTML = createMicrosoftUnsafeLocalFunction(function (node, html) {
              if (node.namespaceURI === Namespaces.svg) {

                if (!('innerHTML' in node)) {
                  // IE does not have innerHTML for SVG nodes, so instead we inject the
                  // new markup in a temp node and then move the child nodes across into
                  // the target node
                  reusableSVGContainer = reusableSVGContainer || document.createElement('div');
                  reusableSVGContainer.innerHTML = '<svg>' + html.valueOf().toString() + '</svg>';
                  var svgNode = reusableSVGContainer.firstChild;

                  while (node.firstChild) {
                    node.removeChild(node.firstChild);
                  }

                  while (svgNode.firstChild) {
                    node.appendChild(svgNode.firstChild);
                  }

                  return;
                }
              }

              node.innerHTML = html;
            });

            /**
             * HTML nodeType values that represent the type of the node
             */
            var ELEMENT_NODE = 1;
            var TEXT_NODE = 3;
            var COMMENT_NODE = 8;
            var DOCUMENT_NODE = 9;
            var DOCUMENT_FRAGMENT_NODE = 11;

            /**
             * Set the textContent property of a node. For text updates, it's faster
             * to set the `nodeValue` of the Text node directly instead of using
             * `.textContent` which will remove the existing node and create a new one.
             *
             * @param {DOMElement} node
             * @param {string} text
             * @internal
             */

            var setTextContent = function (node, text) {
              if (text) {
                var firstChild = node.firstChild;

                if (firstChild && firstChild === node.lastChild && firstChild.nodeType === TEXT_NODE) {
                  firstChild.nodeValue = text;
                  return;
                }
              }

              node.textContent = text;
            };

            // List derived from Gecko source code:
            // https://github.com/mozilla/gecko-dev/blob/4e638efc71/layout/style/test/property_database.js
            var shorthandToLonghand = {
              animation: ['animationDelay', 'animationDirection', 'animationDuration', 'animationFillMode', 'animationIterationCount', 'animationName', 'animationPlayState', 'animationTimingFunction'],
              background: ['backgroundAttachment', 'backgroundClip', 'backgroundColor', 'backgroundImage', 'backgroundOrigin', 'backgroundPositionX', 'backgroundPositionY', 'backgroundRepeat', 'backgroundSize'],
              backgroundPosition: ['backgroundPositionX', 'backgroundPositionY'],
              border: ['borderBottomColor', 'borderBottomStyle', 'borderBottomWidth', 'borderImageOutset', 'borderImageRepeat', 'borderImageSlice', 'borderImageSource', 'borderImageWidth', 'borderLeftColor', 'borderLeftStyle', 'borderLeftWidth', 'borderRightColor', 'borderRightStyle', 'borderRightWidth', 'borderTopColor', 'borderTopStyle', 'borderTopWidth'],
              borderBlockEnd: ['borderBlockEndColor', 'borderBlockEndStyle', 'borderBlockEndWidth'],
              borderBlockStart: ['borderBlockStartColor', 'borderBlockStartStyle', 'borderBlockStartWidth'],
              borderBottom: ['borderBottomColor', 'borderBottomStyle', 'borderBottomWidth'],
              borderColor: ['borderBottomColor', 'borderLeftColor', 'borderRightColor', 'borderTopColor'],
              borderImage: ['borderImageOutset', 'borderImageRepeat', 'borderImageSlice', 'borderImageSource', 'borderImageWidth'],
              borderInlineEnd: ['borderInlineEndColor', 'borderInlineEndStyle', 'borderInlineEndWidth'],
              borderInlineStart: ['borderInlineStartColor', 'borderInlineStartStyle', 'borderInlineStartWidth'],
              borderLeft: ['borderLeftColor', 'borderLeftStyle', 'borderLeftWidth'],
              borderRadius: ['borderBottomLeftRadius', 'borderBottomRightRadius', 'borderTopLeftRadius', 'borderTopRightRadius'],
              borderRight: ['borderRightColor', 'borderRightStyle', 'borderRightWidth'],
              borderStyle: ['borderBottomStyle', 'borderLeftStyle', 'borderRightStyle', 'borderTopStyle'],
              borderTop: ['borderTopColor', 'borderTopStyle', 'borderTopWidth'],
              borderWidth: ['borderBottomWidth', 'borderLeftWidth', 'borderRightWidth', 'borderTopWidth'],
              columnRule: ['columnRuleColor', 'columnRuleStyle', 'columnRuleWidth'],
              columns: ['columnCount', 'columnWidth'],
              flex: ['flexBasis', 'flexGrow', 'flexShrink'],
              flexFlow: ['flexDirection', 'flexWrap'],
              font: ['fontFamily', 'fontFeatureSettings', 'fontKerning', 'fontLanguageOverride', 'fontSize', 'fontSizeAdjust', 'fontStretch', 'fontStyle', 'fontVariant', 'fontVariantAlternates', 'fontVariantCaps', 'fontVariantEastAsian', 'fontVariantLigatures', 'fontVariantNumeric', 'fontVariantPosition', 'fontWeight', 'lineHeight'],
              fontVariant: ['fontVariantAlternates', 'fontVariantCaps', 'fontVariantEastAsian', 'fontVariantLigatures', 'fontVariantNumeric', 'fontVariantPosition'],
              gap: ['columnGap', 'rowGap'],
              grid: ['gridAutoColumns', 'gridAutoFlow', 'gridAutoRows', 'gridTemplateAreas', 'gridTemplateColumns', 'gridTemplateRows'],
              gridArea: ['gridColumnEnd', 'gridColumnStart', 'gridRowEnd', 'gridRowStart'],
              gridColumn: ['gridColumnEnd', 'gridColumnStart'],
              gridColumnGap: ['columnGap'],
              gridGap: ['columnGap', 'rowGap'],
              gridRow: ['gridRowEnd', 'gridRowStart'],
              gridRowGap: ['rowGap'],
              gridTemplate: ['gridTemplateAreas', 'gridTemplateColumns', 'gridTemplateRows'],
              listStyle: ['listStyleImage', 'listStylePosition', 'listStyleType'],
              margin: ['marginBottom', 'marginLeft', 'marginRight', 'marginTop'],
              marker: ['markerEnd', 'markerMid', 'markerStart'],
              mask: ['maskClip', 'maskComposite', 'maskImage', 'maskMode', 'maskOrigin', 'maskPositionX', 'maskPositionY', 'maskRepeat', 'maskSize'],
              maskPosition: ['maskPositionX', 'maskPositionY'],
              outline: ['outlineColor', 'outlineStyle', 'outlineWidth'],
              overflow: ['overflowX', 'overflowY'],
              padding: ['paddingBottom', 'paddingLeft', 'paddingRight', 'paddingTop'],
              placeContent: ['alignContent', 'justifyContent'],
              placeItems: ['alignItems', 'justifyItems'],
              placeSelf: ['alignSelf', 'justifySelf'],
              textDecoration: ['textDecorationColor', 'textDecorationLine', 'textDecorationStyle'],
              textEmphasis: ['textEmphasisColor', 'textEmphasisStyle'],
              transition: ['transitionDelay', 'transitionDuration', 'transitionProperty', 'transitionTimingFunction'],
              wordWrap: ['overflowWrap']
            };

            /**
             * CSS properties which accept numbers but are not in units of "px".
             */
            var isUnitlessNumber = {
              animationIterationCount: true,
              borderImageOutset: true,
              borderImageSlice: true,
              borderImageWidth: true,
              boxFlex: true,
              boxFlexGroup: true,
              boxOrdinalGroup: true,
              columnCount: true,
              columns: true,
              flex: true,
              flexGrow: true,
              flexPositive: true,
              flexShrink: true,
              flexNegative: true,
              flexOrder: true,
              gridArea: true,
              gridRow: true,
              gridRowEnd: true,
              gridRowSpan: true,
              gridRowStart: true,
              gridColumn: true,
              gridColumnEnd: true,
              gridColumnSpan: true,
              gridColumnStart: true,
              fontWeight: true,
              lineClamp: true,
              lineHeight: true,
              opacity: true,
              order: true,
              orphans: true,
              tabSize: true,
              widows: true,
              zIndex: true,
              zoom: true,
              // SVG-related properties
              fillOpacity: true,
              floodOpacity: true,
              stopOpacity: true,
              strokeDasharray: true,
              strokeDashoffset: true,
              strokeMiterlimit: true,
              strokeOpacity: true,
              strokeWidth: true
            };
            /**
             * @param {string} prefix vendor-specific prefix, eg: Webkit
             * @param {string} key style name, eg: transitionDuration
             * @return {string} style name prefixed with `prefix`, properly camelCased, eg:
             * WebkitTransitionDuration
             */

            function prefixKey(prefix, key) {
              return prefix + key.charAt(0).toUpperCase() + key.substring(1);
            }
            /**
             * Support style names that may come passed in prefixed by adding permutations
             * of vendor prefixes.
             */


            var prefixes = ['Webkit', 'ms', 'Moz', 'O']; // Using Object.keys here, or else the vanilla for-in loop makes IE8 go into an
            // infinite loop, because it iterates over the newly added props too.

            Object.keys(isUnitlessNumber).forEach(function (prop) {
              prefixes.forEach(function (prefix) {
                isUnitlessNumber[prefixKey(prefix, prop)] = isUnitlessNumber[prop];
              });
            });

            /**
             * Convert a value into the proper css writable value. The style name `name`
             * should be logical (no hyphens), as specified
             * in `CSSProperty.isUnitlessNumber`.
             *
             * @param {string} name CSS property name such as `topMargin`.
             * @param {*} value CSS property value such as `10px`.
             * @return {string} Normalized style value with dimensions applied.
             */

            function dangerousStyleValue(name, value, isCustomProperty) {
              // Note that we've removed escapeTextForBrowser() calls here since the
              // whole string will be escaped when the attribute is injected into
              // the markup. If you provide unsafe user data here they can inject
              // arbitrary CSS which may be problematic (I couldn't repro this):
              // https://www.owasp.org/index.php/XSS_Filter_Evasion_Cheat_Sheet
              // http://www.thespanner.co.uk/2007/11/26/ultimate-xss-css-injection/
              // This is not an XSS hole but instead a potential CSS injection issue
              // which has lead to a greater discussion about how we're going to
              // trust URLs moving forward. See #2115901
              var isEmpty = value == null || typeof value === 'boolean' || value === '';

              if (isEmpty) {
                return '';
              }

              if (!isCustomProperty && typeof value === 'number' && value !== 0 && !(isUnitlessNumber.hasOwnProperty(name) && isUnitlessNumber[name])) {
                return value + 'px'; // Presumes implicit 'px' suffix for unitless numbers
              }

              return ('' + value).trim();
            }

            var uppercasePattern = /([A-Z])/g;
            var msPattern = /^ms-/;
            /**
             * Hyphenates a camelcased CSS property name, for example:
             *
             *   > hyphenateStyleName('backgroundColor')
             *   < "background-color"
             *   > hyphenateStyleName('MozTransition')
             *   < "-moz-transition"
             *   > hyphenateStyleName('msTransition')
             *   < "-ms-transition"
             *
             * As Modernizr suggests (http://modernizr.com/docs/#prefixed), an `ms` prefix
             * is converted to `-ms-`.
             */

            function hyphenateStyleName(name) {
              return name.replace(uppercasePattern, '-$1').toLowerCase().replace(msPattern, '-ms-');
            }

            var warnValidStyle = function () {};

            {
              // 'msTransform' is correct, but the other prefixes should be capitalized
              var badVendoredStyleNamePattern = /^(?:webkit|moz|o)[A-Z]/;
              var msPattern$1 = /^-ms-/;
              var hyphenPattern = /-(.)/g; // style values shouldn't contain a semicolon

              var badStyleValueWithSemicolonPattern = /;\s*$/;
              var warnedStyleNames = {};
              var warnedStyleValues = {};
              var warnedForNaNValue = false;
              var warnedForInfinityValue = false;

              var camelize = function (string) {
                return string.replace(hyphenPattern, function (_, character) {
                  return character.toUpperCase();
                });
              };

              var warnHyphenatedStyleName = function (name) {
                if (warnedStyleNames.hasOwnProperty(name) && warnedStyleNames[name]) {
                  return;
                }

                warnedStyleNames[name] = true;

                error('Unsupported style property %s. Did you mean %s?', name, // As Andi Smith suggests
                // (http://www.andismith.com/blog/2012/02/modernizr-prefixed/), an `-ms` prefix
                // is converted to lowercase `ms`.
                camelize(name.replace(msPattern$1, 'ms-')));
              };

              var warnBadVendoredStyleName = function (name) {
                if (warnedStyleNames.hasOwnProperty(name) && warnedStyleNames[name]) {
                  return;
                }

                warnedStyleNames[name] = true;

                error('Unsupported vendor-prefixed style property %s. Did you mean %s?', name, name.charAt(0).toUpperCase() + name.slice(1));
              };

              var warnStyleValueWithSemicolon = function (name, value) {
                if (warnedStyleValues.hasOwnProperty(value) && warnedStyleValues[value]) {
                  return;
                }

                warnedStyleValues[value] = true;

                error("Style property values shouldn't contain a semicolon. " + 'Try "%s: %s" instead.', name, value.replace(badStyleValueWithSemicolonPattern, ''));
              };

              var warnStyleValueIsNaN = function (name, value) {
                if (warnedForNaNValue) {
                  return;
                }

                warnedForNaNValue = true;

                error('`NaN` is an invalid value for the `%s` css style property.', name);
              };

              var warnStyleValueIsInfinity = function (name, value) {
                if (warnedForInfinityValue) {
                  return;
                }

                warnedForInfinityValue = true;

                error('`Infinity` is an invalid value for the `%s` css style property.', name);
              };

              warnValidStyle = function (name, value) {
                if (name.indexOf('-') > -1) {
                  warnHyphenatedStyleName(name);
                } else if (badVendoredStyleNamePattern.test(name)) {
                  warnBadVendoredStyleName(name);
                } else if (badStyleValueWithSemicolonPattern.test(value)) {
                  warnStyleValueWithSemicolon(name, value);
                }

                if (typeof value === 'number') {
                  if (isNaN(value)) {
                    warnStyleValueIsNaN(name, value);
                  } else if (!isFinite(value)) {
                    warnStyleValueIsInfinity(name, value);
                  }
                }
              };
            }

            var warnValidStyle$1 = warnValidStyle;

            /**
             * Operations for dealing with CSS properties.
             */

            /**
             * This creates a string that is expected to be equivalent to the style
             * attribute generated by server-side rendering. It by-passes warnings and
             * security checks so it's not safe to use this value for anything other than
             * comparison. It is only used in DEV for SSR validation.
             */

            function createDangerousStringForStyles(styles) {
              {
                var serialized = '';
                var delimiter = '';

                for (var styleName in styles) {
                  if (!styles.hasOwnProperty(styleName)) {
                    continue;
                  }

                  var styleValue = styles[styleName];

                  if (styleValue != null) {
                    var isCustomProperty = styleName.indexOf('--') === 0;
                    serialized += delimiter + (isCustomProperty ? styleName : hyphenateStyleName(styleName)) + ':';
                    serialized += dangerousStyleValue(styleName, styleValue, isCustomProperty);
                    delimiter = ';';
                  }
                }

                return serialized || null;
              }
            }
            /**
             * Sets the value for multiple styles on a node.  If a value is specified as
             * '' (empty string), the corresponding style property will be unset.
             *
             * @param {DOMElement} node
             * @param {object} styles
             */

            function setValueForStyles(node, styles) {
              var style = node.style;

              for (var styleName in styles) {
                if (!styles.hasOwnProperty(styleName)) {
                  continue;
                }

                var isCustomProperty = styleName.indexOf('--') === 0;

                {
                  if (!isCustomProperty) {
                    warnValidStyle$1(styleName, styles[styleName]);
                  }
                }

                var styleValue = dangerousStyleValue(styleName, styles[styleName], isCustomProperty);

                if (styleName === 'float') {
                  styleName = 'cssFloat';
                }

                if (isCustomProperty) {
                  style.setProperty(styleName, styleValue);
                } else {
                  style[styleName] = styleValue;
                }
              }
            }

            function isValueEmpty(value) {
              return value == null || typeof value === 'boolean' || value === '';
            }
            /**
             * Given {color: 'red', overflow: 'hidden'} returns {
             *   color: 'color',
             *   overflowX: 'overflow',
             *   overflowY: 'overflow',
             * }. This can be read as "the overflowY property was set by the overflow
             * shorthand". That is, the values are the property that each was derived from.
             */


            function expandShorthandMap(styles) {
              var expanded = {};

              for (var key in styles) {
                var longhands = shorthandToLonghand[key] || [key];

                for (var i = 0; i < longhands.length; i++) {
                  expanded[longhands[i]] = key;
                }
              }

              return expanded;
            }
            /**
             * When mixing shorthand and longhand property names, we warn during updates if
             * we expect an incorrect result to occur. In particular, we warn for:
             *
             * Updating a shorthand property (longhand gets overwritten):
             *   {font: 'foo', fontVariant: 'bar'} -> {font: 'baz', fontVariant: 'bar'}
             *   becomes .style.font = 'baz'
             * Removing a shorthand property (longhand gets lost too):
             *   {font: 'foo', fontVariant: 'bar'} -> {fontVariant: 'bar'}
             *   becomes .style.font = ''
             * Removing a longhand property (should revert to shorthand; doesn't):
             *   {font: 'foo', fontVariant: 'bar'} -> {font: 'foo'}
             *   becomes .style.fontVariant = ''
             */


            function validateShorthandPropertyCollisionInDev(styleUpdates, nextStyles) {
              {
                if (!nextStyles) {
                  return;
                }

                var expandedUpdates = expandShorthandMap(styleUpdates);
                var expandedStyles = expandShorthandMap(nextStyles);
                var warnedAbout = {};

                for (var key in expandedUpdates) {
                  var originalKey = expandedUpdates[key];
                  var correctOriginalKey = expandedStyles[key];

                  if (correctOriginalKey && originalKey !== correctOriginalKey) {
                    var warningKey = originalKey + ',' + correctOriginalKey;

                    if (warnedAbout[warningKey]) {
                      continue;
                    }

                    warnedAbout[warningKey] = true;

                    error('%s a style property during rerender (%s) when a ' + 'conflicting property is set (%s) can lead to styling bugs. To ' + "avoid this, don't mix shorthand and non-shorthand properties " + 'for the same value; instead, replace the shorthand with ' + 'separate values.', isValueEmpty(styleUpdates[originalKey]) ? 'Removing' : 'Updating', originalKey, correctOriginalKey);
                  }
                }
              }
            }

            // For HTML, certain tags should omit their close tag. We keep a list for
            // those special-case tags.
            var omittedCloseTags = {
              area: true,
              base: true,
              br: true,
              col: true,
              embed: true,
              hr: true,
              img: true,
              input: true,
              keygen: true,
              link: true,
              meta: true,
              param: true,
              source: true,
              track: true,
              wbr: true // NOTE: menuitem's close tag should be omitted, but that causes problems.

            };

            // `omittedCloseTags` except that `menuitem` should still have its closing tag.

            var voidElementTags = _assign({
              menuitem: true
            }, omittedCloseTags);

            var HTML = '__html';

            function assertValidProps(tag, props) {
              if (!props) {
                return;
              } // Note the use of `==` which checks for null or undefined.


              if (voidElementTags[tag]) {
                if (!(props.children == null && props.dangerouslySetInnerHTML == null)) {
                  {
                    throw Error( tag + " is a void element tag and must neither have `children` nor use `dangerouslySetInnerHTML`." );
                  }
                }
              }

              if (props.dangerouslySetInnerHTML != null) {
                if (!(props.children == null)) {
                  {
                    throw Error( "Can only set one of `children` or `props.dangerouslySetInnerHTML`." );
                  }
                }

                if (!(typeof props.dangerouslySetInnerHTML === 'object' && HTML in props.dangerouslySetInnerHTML)) {
                  {
                    throw Error( "`props.dangerouslySetInnerHTML` must be in the form `{__html: ...}`. Please visit https://reactjs.org/link/dangerously-set-inner-html for more information." );
                  }
                }
              }

              {
                if (!props.suppressContentEditableWarning && props.contentEditable && props.children != null) {
                  error('A component is `contentEditable` and contains `children` managed by ' + 'React. It is now your responsibility to guarantee that none of ' + 'those nodes are unexpectedly modified or duplicated. This is ' + 'probably not intentional.');
                }
              }

              if (!(props.style == null || typeof props.style === 'object')) {
                {
                  throw Error( "The `style` prop expects a mapping from style properties to values, not a string. For example, style={{marginRight: spacing + 'em'}} when using JSX." );
                }
              }
            }

            function isCustomComponent(tagName, props) {
              if (tagName.indexOf('-') === -1) {
                return typeof props.is === 'string';
              }

              switch (tagName) {
                // These are reserved SVG and MathML elements.
                // We don't mind this list too much because we expect it to never grow.
                // The alternative is to track the namespace in a few places which is convoluted.
                // https://w3c.github.io/webcomponents/spec/custom/#custom-elements-core-concepts
                case 'annotation-xml':
                case 'color-profile':
                case 'font-face':
                case 'font-face-src':
                case 'font-face-uri':
                case 'font-face-format':
                case 'font-face-name':
                case 'missing-glyph':
                  return false;

                default:
                  return true;
              }
            }

            // When adding attributes to the HTML or SVG allowed attribute list, be sure to
            // also add them to this module to ensure casing and incorrect name
            // warnings.
            var possibleStandardNames = {
              // HTML
              accept: 'accept',
              acceptcharset: 'acceptCharset',
              'accept-charset': 'acceptCharset',
              accesskey: 'accessKey',
              action: 'action',
              allowfullscreen: 'allowFullScreen',
              alt: 'alt',
              as: 'as',
              async: 'async',
              autocapitalize: 'autoCapitalize',
              autocomplete: 'autoComplete',
              autocorrect: 'autoCorrect',
              autofocus: 'autoFocus',
              autoplay: 'autoPlay',
              autosave: 'autoSave',
              capture: 'capture',
              cellpadding: 'cellPadding',
              cellspacing: 'cellSpacing',
              challenge: 'challenge',
              charset: 'charSet',
              checked: 'checked',
              children: 'children',
              cite: 'cite',
              class: 'className',
              classid: 'classID',
              classname: 'className',
              cols: 'cols',
              colspan: 'colSpan',
              content: 'content',
              contenteditable: 'contentEditable',
              contextmenu: 'contextMenu',
              controls: 'controls',
              controlslist: 'controlsList',
              coords: 'coords',
              crossorigin: 'crossOrigin',
              dangerouslysetinnerhtml: 'dangerouslySetInnerHTML',
              data: 'data',
              datetime: 'dateTime',
              default: 'default',
              defaultchecked: 'defaultChecked',
              defaultvalue: 'defaultValue',
              defer: 'defer',
              dir: 'dir',
              disabled: 'disabled',
              disablepictureinpicture: 'disablePictureInPicture',
              disableremoteplayback: 'disableRemotePlayback',
              download: 'download',
              draggable: 'draggable',
              enctype: 'encType',
              enterkeyhint: 'enterKeyHint',
              for: 'htmlFor',
              form: 'form',
              formmethod: 'formMethod',
              formaction: 'formAction',
              formenctype: 'formEncType',
              formnovalidate: 'formNoValidate',
              formtarget: 'formTarget',
              frameborder: 'frameBorder',
              headers: 'headers',
              height: 'height',
              hidden: 'hidden',
              high: 'high',
              href: 'href',
              hreflang: 'hrefLang',
              htmlfor: 'htmlFor',
              httpequiv: 'httpEquiv',
              'http-equiv': 'httpEquiv',
              icon: 'icon',
              id: 'id',
              innerhtml: 'innerHTML',
              inputmode: 'inputMode',
              integrity: 'integrity',
              is: 'is',
              itemid: 'itemID',
              itemprop: 'itemProp',
              itemref: 'itemRef',
              itemscope: 'itemScope',
              itemtype: 'itemType',
              keyparams: 'keyParams',
              keytype: 'keyType',
              kind: 'kind',
              label: 'label',
              lang: 'lang',
              list: 'list',
              loop: 'loop',
              low: 'low',
              manifest: 'manifest',
              marginwidth: 'marginWidth',
              marginheight: 'marginHeight',
              max: 'max',
              maxlength: 'maxLength',
              media: 'media',
              mediagroup: 'mediaGroup',
              method: 'method',
              min: 'min',
              minlength: 'minLength',
              multiple: 'multiple',
              muted: 'muted',
              name: 'name',
              nomodule: 'noModule',
              nonce: 'nonce',
              novalidate: 'noValidate',
              open: 'open',
              optimum: 'optimum',
              pattern: 'pattern',
              placeholder: 'placeholder',
              playsinline: 'playsInline',
              poster: 'poster',
              preload: 'preload',
              profile: 'profile',
              radiogroup: 'radioGroup',
              readonly: 'readOnly',
              referrerpolicy: 'referrerPolicy',
              rel: 'rel',
              required: 'required',
              reversed: 'reversed',
              role: 'role',
              rows: 'rows',
              rowspan: 'rowSpan',
              sandbox: 'sandbox',
              scope: 'scope',
              scoped: 'scoped',
              scrolling: 'scrolling',
              seamless: 'seamless',
              selected: 'selected',
              shape: 'shape',
              size: 'size',
              sizes: 'sizes',
              span: 'span',
              spellcheck: 'spellCheck',
              src: 'src',
              srcdoc: 'srcDoc',
              srclang: 'srcLang',
              srcset: 'srcSet',
              start: 'start',
              step: 'step',
              style: 'style',
              summary: 'summary',
              tabindex: 'tabIndex',
              target: 'target',
              title: 'title',
              type: 'type',
              usemap: 'useMap',
              value: 'value',
              width: 'width',
              wmode: 'wmode',
              wrap: 'wrap',
              // SVG
              about: 'about',
              accentheight: 'accentHeight',
              'accent-height': 'accentHeight',
              accumulate: 'accumulate',
              additive: 'additive',
              alignmentbaseline: 'alignmentBaseline',
              'alignment-baseline': 'alignmentBaseline',
              allowreorder: 'allowReorder',
              alphabetic: 'alphabetic',
              amplitude: 'amplitude',
              arabicform: 'arabicForm',
              'arabic-form': 'arabicForm',
              ascent: 'ascent',
              attributename: 'attributeName',
              attributetype: 'attributeType',
              autoreverse: 'autoReverse',
              azimuth: 'azimuth',
              basefrequency: 'baseFrequency',
              baselineshift: 'baselineShift',
              'baseline-shift': 'baselineShift',
              baseprofile: 'baseProfile',
              bbox: 'bbox',
              begin: 'begin',
              bias: 'bias',
              by: 'by',
              calcmode: 'calcMode',
              capheight: 'capHeight',
              'cap-height': 'capHeight',
              clip: 'clip',
              clippath: 'clipPath',
              'clip-path': 'clipPath',
              clippathunits: 'clipPathUnits',
              cliprule: 'clipRule',
              'clip-rule': 'clipRule',
              color: 'color',
              colorinterpolation: 'colorInterpolation',
              'color-interpolation': 'colorInterpolation',
              colorinterpolationfilters: 'colorInterpolationFilters',
              'color-interpolation-filters': 'colorInterpolationFilters',
              colorprofile: 'colorProfile',
              'color-profile': 'colorProfile',
              colorrendering: 'colorRendering',
              'color-rendering': 'colorRendering',
              contentscripttype: 'contentScriptType',
              contentstyletype: 'contentStyleType',
              cursor: 'cursor',
              cx: 'cx',
              cy: 'cy',
              d: 'd',
              datatype: 'datatype',
              decelerate: 'decelerate',
              descent: 'descent',
              diffuseconstant: 'diffuseConstant',
              direction: 'direction',
              display: 'display',
              divisor: 'divisor',
              dominantbaseline: 'dominantBaseline',
              'dominant-baseline': 'dominantBaseline',
              dur: 'dur',
              dx: 'dx',
              dy: 'dy',
              edgemode: 'edgeMode',
              elevation: 'elevation',
              enablebackground: 'enableBackground',
              'enable-background': 'enableBackground',
              end: 'end',
              exponent: 'exponent',
              externalresourcesrequired: 'externalResourcesRequired',
              fill: 'fill',
              fillopacity: 'fillOpacity',
              'fill-opacity': 'fillOpacity',
              fillrule: 'fillRule',
              'fill-rule': 'fillRule',
              filter: 'filter',
              filterres: 'filterRes',
              filterunits: 'filterUnits',
              floodopacity: 'floodOpacity',
              'flood-opacity': 'floodOpacity',
              floodcolor: 'floodColor',
              'flood-color': 'floodColor',
              focusable: 'focusable',
              fontfamily: 'fontFamily',
              'font-family': 'fontFamily',
              fontsize: 'fontSize',
              'font-size': 'fontSize',
              fontsizeadjust: 'fontSizeAdjust',
              'font-size-adjust': 'fontSizeAdjust',
              fontstretch: 'fontStretch',
              'font-stretch': 'fontStretch',
              fontstyle: 'fontStyle',
              'font-style': 'fontStyle',
              fontvariant: 'fontVariant',
              'font-variant': 'fontVariant',
              fontweight: 'fontWeight',
              'font-weight': 'fontWeight',
              format: 'format',
              from: 'from',
              fx: 'fx',
              fy: 'fy',
              g1: 'g1',
              g2: 'g2',
              glyphname: 'glyphName',
              'glyph-name': 'glyphName',
              glyphorientationhorizontal: 'glyphOrientationHorizontal',
              'glyph-orientation-horizontal': 'glyphOrientationHorizontal',
              glyphorientationvertical: 'glyphOrientationVertical',
              'glyph-orientation-vertical': 'glyphOrientationVertical',
              glyphref: 'glyphRef',
              gradienttransform: 'gradientTransform',
              gradientunits: 'gradientUnits',
              hanging: 'hanging',
              horizadvx: 'horizAdvX',
              'horiz-adv-x': 'horizAdvX',
              horizoriginx: 'horizOriginX',
              'horiz-origin-x': 'horizOriginX',
              ideographic: 'ideographic',
              imagerendering: 'imageRendering',
              'image-rendering': 'imageRendering',
              in2: 'in2',
              in: 'in',
              inlist: 'inlist',
              intercept: 'intercept',
              k1: 'k1',
              k2: 'k2',
              k3: 'k3',
              k4: 'k4',
              k: 'k',
              kernelmatrix: 'kernelMatrix',
              kernelunitlength: 'kernelUnitLength',
              kerning: 'kerning',
              keypoints: 'keyPoints',
              keysplines: 'keySplines',
              keytimes: 'keyTimes',
              lengthadjust: 'lengthAdjust',
              letterspacing: 'letterSpacing',
              'letter-spacing': 'letterSpacing',
              lightingcolor: 'lightingColor',
              'lighting-color': 'lightingColor',
              limitingconeangle: 'limitingConeAngle',
              local: 'local',
              markerend: 'markerEnd',
              'marker-end': 'markerEnd',
              markerheight: 'markerHeight',
              markermid: 'markerMid',
              'marker-mid': 'markerMid',
              markerstart: 'markerStart',
              'marker-start': 'markerStart',
              markerunits: 'markerUnits',
              markerwidth: 'markerWidth',
              mask: 'mask',
              maskcontentunits: 'maskContentUnits',
              maskunits: 'maskUnits',
              mathematical: 'mathematical',
              mode: 'mode',
              numoctaves: 'numOctaves',
              offset: 'offset',
              opacity: 'opacity',
              operator: 'operator',
              order: 'order',
              orient: 'orient',
              orientation: 'orientation',
              origin: 'origin',
              overflow: 'overflow',
              overlineposition: 'overlinePosition',
              'overline-position': 'overlinePosition',
              overlinethickness: 'overlineThickness',
              'overline-thickness': 'overlineThickness',
              paintorder: 'paintOrder',
              'paint-order': 'paintOrder',
              panose1: 'panose1',
              'panose-1': 'panose1',
              pathlength: 'pathLength',
              patterncontentunits: 'patternContentUnits',
              patterntransform: 'patternTransform',
              patternunits: 'patternUnits',
              pointerevents: 'pointerEvents',
              'pointer-events': 'pointerEvents',
              points: 'points',
              pointsatx: 'pointsAtX',
              pointsaty: 'pointsAtY',
              pointsatz: 'pointsAtZ',
              prefix: 'prefix',
              preservealpha: 'preserveAlpha',
              preserveaspectratio: 'preserveAspectRatio',
              primitiveunits: 'primitiveUnits',
              property: 'property',
              r: 'r',
              radius: 'radius',
              refx: 'refX',
              refy: 'refY',
              renderingintent: 'renderingIntent',
              'rendering-intent': 'renderingIntent',
              repeatcount: 'repeatCount',
              repeatdur: 'repeatDur',
              requiredextensions: 'requiredExtensions',
              requiredfeatures: 'requiredFeatures',
              resource: 'resource',
              restart: 'restart',
              result: 'result',
              results: 'results',
              rotate: 'rotate',
              rx: 'rx',
              ry: 'ry',
              scale: 'scale',
              security: 'security',
              seed: 'seed',
              shaperendering: 'shapeRendering',
              'shape-rendering': 'shapeRendering',
              slope: 'slope',
              spacing: 'spacing',
              specularconstant: 'specularConstant',
              specularexponent: 'specularExponent',
              speed: 'speed',
              spreadmethod: 'spreadMethod',
              startoffset: 'startOffset',
              stddeviation: 'stdDeviation',
              stemh: 'stemh',
              stemv: 'stemv',
              stitchtiles: 'stitchTiles',
              stopcolor: 'stopColor',
              'stop-color': 'stopColor',
              stopopacity: 'stopOpacity',
              'stop-opacity': 'stopOpacity',
              strikethroughposition: 'strikethroughPosition',
              'strikethrough-position': 'strikethroughPosition',
              strikethroughthickness: 'strikethroughThickness',
              'strikethrough-thickness': 'strikethroughThickness',
              string: 'string',
              stroke: 'stroke',
              strokedasharray: 'strokeDasharray',
              'stroke-dasharray': 'strokeDasharray',
              strokedashoffset: 'strokeDashoffset',
              'stroke-dashoffset': 'strokeDashoffset',
              strokelinecap: 'strokeLinecap',
              'stroke-linecap': 'strokeLinecap',
              strokelinejoin: 'strokeLinejoin',
              'stroke-linejoin': 'strokeLinejoin',
              strokemiterlimit: 'strokeMiterlimit',
              'stroke-miterlimit': 'strokeMiterlimit',
              strokewidth: 'strokeWidth',
              'stroke-width': 'strokeWidth',
              strokeopacity: 'strokeOpacity',
              'stroke-opacity': 'strokeOpacity',
              suppresscontenteditablewarning: 'suppressContentEditableWarning',
              suppresshydrationwarning: 'suppressHydrationWarning',
              surfacescale: 'surfaceScale',
              systemlanguage: 'systemLanguage',
              tablevalues: 'tableValues',
              targetx: 'targetX',
              targety: 'targetY',
              textanchor: 'textAnchor',
              'text-anchor': 'textAnchor',
              textdecoration: 'textDecoration',
              'text-decoration': 'textDecoration',
              textlength: 'textLength',
              textrendering: 'textRendering',
              'text-rendering': 'textRendering',
              to: 'to',
              transform: 'transform',
              typeof: 'typeof',
              u1: 'u1',
              u2: 'u2',
              underlineposition: 'underlinePosition',
              'underline-position': 'underlinePosition',
              underlinethickness: 'underlineThickness',
              'underline-thickness': 'underlineThickness',
              unicode: 'unicode',
              unicodebidi: 'unicodeBidi',
              'unicode-bidi': 'unicodeBidi',
              unicoderange: 'unicodeRange',
              'unicode-range': 'unicodeRange',
              unitsperem: 'unitsPerEm',
              'units-per-em': 'unitsPerEm',
              unselectable: 'unselectable',
              valphabetic: 'vAlphabetic',
              'v-alphabetic': 'vAlphabetic',
              values: 'values',
              vectoreffect: 'vectorEffect',
              'vector-effect': 'vectorEffect',
              version: 'version',
              vertadvy: 'vertAdvY',
              'vert-adv-y': 'vertAdvY',
              vertoriginx: 'vertOriginX',
              'vert-origin-x': 'vertOriginX',
              vertoriginy: 'vertOriginY',
              'vert-origin-y': 'vertOriginY',
              vhanging: 'vHanging',
              'v-hanging': 'vHanging',
              videographic: 'vIdeographic',
              'v-ideographic': 'vIdeographic',
              viewbox: 'viewBox',
              viewtarget: 'viewTarget',
              visibility: 'visibility',
              vmathematical: 'vMathematical',
              'v-mathematical': 'vMathematical',
              vocab: 'vocab',
              widths: 'widths',
              wordspacing: 'wordSpacing',
              'word-spacing': 'wordSpacing',
              writingmode: 'writingMode',
              'writing-mode': 'writingMode',
              x1: 'x1',
              x2: 'x2',
              x: 'x',
              xchannelselector: 'xChannelSelector',
              xheight: 'xHeight',
              'x-height': 'xHeight',
              xlinkactuate: 'xlinkActuate',
              'xlink:actuate': 'xlinkActuate',
              xlinkarcrole: 'xlinkArcrole',
              'xlink:arcrole': 'xlinkArcrole',
              xlinkhref: 'xlinkHref',
              'xlink:href': 'xlinkHref',
              xlinkrole: 'xlinkRole',
              'xlink:role': 'xlinkRole',
              xlinkshow: 'xlinkShow',
              'xlink:show': 'xlinkShow',
              xlinktitle: 'xlinkTitle',
              'xlink:title': 'xlinkTitle',
              xlinktype: 'xlinkType',
              'xlink:type': 'xlinkType',
              xmlbase: 'xmlBase',
              'xml:base': 'xmlBase',
              xmllang: 'xmlLang',
              'xml:lang': 'xmlLang',
              xmlns: 'xmlns',
              'xml:space': 'xmlSpace',
              xmlnsxlink: 'xmlnsXlink',
              'xmlns:xlink': 'xmlnsXlink',
              xmlspace: 'xmlSpace',
              y1: 'y1',
              y2: 'y2',
              y: 'y',
              ychannelselector: 'yChannelSelector',
              z: 'z',
              zoomandpan: 'zoomAndPan'
            };

            var ariaProperties = {
              'aria-current': 0,
              // state
              'aria-details': 0,
              'aria-disabled': 0,
              // state
              'aria-hidden': 0,
              // state
              'aria-invalid': 0,
              // state
              'aria-keyshortcuts': 0,
              'aria-label': 0,
              'aria-roledescription': 0,
              // Widget Attributes
              'aria-autocomplete': 0,
              'aria-checked': 0,
              'aria-expanded': 0,
              'aria-haspopup': 0,
              'aria-level': 0,
              'aria-modal': 0,
              'aria-multiline': 0,
              'aria-multiselectable': 0,
              'aria-orientation': 0,
              'aria-placeholder': 0,
              'aria-pressed': 0,
              'aria-readonly': 0,
              'aria-required': 0,
              'aria-selected': 0,
              'aria-sort': 0,
              'aria-valuemax': 0,
              'aria-valuemin': 0,
              'aria-valuenow': 0,
              'aria-valuetext': 0,
              // Live Region Attributes
              'aria-atomic': 0,
              'aria-busy': 0,
              'aria-live': 0,
              'aria-relevant': 0,
              // Drag-and-Drop Attributes
              'aria-dropeffect': 0,
              'aria-grabbed': 0,
              // Relationship Attributes
              'aria-activedescendant': 0,
              'aria-colcount': 0,
              'aria-colindex': 0,
              'aria-colspan': 0,
              'aria-controls': 0,
              'aria-describedby': 0,
              'aria-errormessage': 0,
              'aria-flowto': 0,
              'aria-labelledby': 0,
              'aria-owns': 0,
              'aria-posinset': 0,
              'aria-rowcount': 0,
              'aria-rowindex': 0,
              'aria-rowspan': 0,
              'aria-setsize': 0
            };

            var warnedProperties = {};
            var rARIA = new RegExp('^(aria)-[' + ATTRIBUTE_NAME_CHAR + ']*$');
            var rARIACamel = new RegExp('^(aria)[A-Z][' + ATTRIBUTE_NAME_CHAR + ']*$');
            var hasOwnProperty$1 = Object.prototype.hasOwnProperty;

            function validateProperty(tagName, name) {
              {
                if (hasOwnProperty$1.call(warnedProperties, name) && warnedProperties[name]) {
                  return true;
                }

                if (rARIACamel.test(name)) {
                  var ariaName = 'aria-' + name.slice(4).toLowerCase();
                  var correctName = ariaProperties.hasOwnProperty(ariaName) ? ariaName : null; // If this is an aria-* attribute, but is not listed in the known DOM
                  // DOM properties, then it is an invalid aria-* attribute.

                  if (correctName == null) {
                    error('Invalid ARIA attribute `%s`. ARIA attributes follow the pattern aria-* and must be lowercase.', name);

                    warnedProperties[name] = true;
                    return true;
                  } // aria-* attributes should be lowercase; suggest the lowercase version.


                  if (name !== correctName) {
                    error('Invalid ARIA attribute `%s`. Did you mean `%s`?', name, correctName);

                    warnedProperties[name] = true;
                    return true;
                  }
                }

                if (rARIA.test(name)) {
                  var lowerCasedName = name.toLowerCase();
                  var standardName = ariaProperties.hasOwnProperty(lowerCasedName) ? lowerCasedName : null; // If this is an aria-* attribute, but is not listed in the known DOM
                  // DOM properties, then it is an invalid aria-* attribute.

                  if (standardName == null) {
                    warnedProperties[name] = true;
                    return false;
                  } // aria-* attributes should be lowercase; suggest the lowercase version.


                  if (name !== standardName) {
                    error('Unknown ARIA attribute `%s`. Did you mean `%s`?', name, standardName);

                    warnedProperties[name] = true;
                    return true;
                  }
                }
              }

              return true;
            }

            function warnInvalidARIAProps(type, props) {
              {
                var invalidProps = [];

                for (var key in props) {
                  var isValid = validateProperty(type, key);

                  if (!isValid) {
                    invalidProps.push(key);
                  }
                }

                var unknownPropString = invalidProps.map(function (prop) {
                  return '`' + prop + '`';
                }).join(', ');

                if (invalidProps.length === 1) {
                  error('Invalid aria prop %s on <%s> tag. ' + 'For details, see https://reactjs.org/link/invalid-aria-props', unknownPropString, type);
                } else if (invalidProps.length > 1) {
                  error('Invalid aria props %s on <%s> tag. ' + 'For details, see https://reactjs.org/link/invalid-aria-props', unknownPropString, type);
                }
              }
            }

            function validateProperties(type, props) {
              if (isCustomComponent(type, props)) {
                return;
              }

              warnInvalidARIAProps(type, props);
            }

            var didWarnValueNull = false;
            function validateProperties$1(type, props) {
              {
                if (type !== 'input' && type !== 'textarea' && type !== 'select') {
                  return;
                }

                if (props != null && props.value === null && !didWarnValueNull) {
                  didWarnValueNull = true;

                  if (type === 'select' && props.multiple) {
                    error('`value` prop on `%s` should not be null. ' + 'Consider using an empty array when `multiple` is set to `true` ' + 'to clear the component or `undefined` for uncontrolled components.', type);
                  } else {
                    error('`value` prop on `%s` should not be null. ' + 'Consider using an empty string to clear the component or `undefined` ' + 'for uncontrolled components.', type);
                  }
                }
              }
            }

            var validateProperty$1 = function () {};

            {
              var warnedProperties$1 = {};
              var _hasOwnProperty = Object.prototype.hasOwnProperty;
              var EVENT_NAME_REGEX = /^on./;
              var INVALID_EVENT_NAME_REGEX = /^on[^A-Z]/;
              var rARIA$1 = new RegExp('^(aria)-[' + ATTRIBUTE_NAME_CHAR + ']*$');
              var rARIACamel$1 = new RegExp('^(aria)[A-Z][' + ATTRIBUTE_NAME_CHAR + ']*$');

              validateProperty$1 = function (tagName, name, value, eventRegistry) {
                if (_hasOwnProperty.call(warnedProperties$1, name) && warnedProperties$1[name]) {
                  return true;
                }

                var lowerCasedName = name.toLowerCase();

                if (lowerCasedName === 'onfocusin' || lowerCasedName === 'onfocusout') {
                  error('React uses onFocus and onBlur instead of onFocusIn and onFocusOut. ' + 'All React events are normalized to bubble, so onFocusIn and onFocusOut ' + 'are not needed/supported by React.');

                  warnedProperties$1[name] = true;
                  return true;
                } // We can't rely on the event system being injected on the server.


                if (eventRegistry != null) {
                  var registrationNameDependencies = eventRegistry.registrationNameDependencies,
                      possibleRegistrationNames = eventRegistry.possibleRegistrationNames;

                  if (registrationNameDependencies.hasOwnProperty(name)) {
                    return true;
                  }

                  var registrationName = possibleRegistrationNames.hasOwnProperty(lowerCasedName) ? possibleRegistrationNames[lowerCasedName] : null;

                  if (registrationName != null) {
                    error('Invalid event handler property `%s`. Did you mean `%s`?', name, registrationName);

                    warnedProperties$1[name] = true;
                    return true;
                  }

                  if (EVENT_NAME_REGEX.test(name)) {
                    error('Unknown event handler property `%s`. It will be ignored.', name);

                    warnedProperties$1[name] = true;
                    return true;
                  }
                } else if (EVENT_NAME_REGEX.test(name)) {
                  // If no event plugins have been injected, we are in a server environment.
                  // So we can't tell if the event name is correct for sure, but we can filter
                  // out known bad ones like `onclick`. We can't suggest a specific replacement though.
                  if (INVALID_EVENT_NAME_REGEX.test(name)) {
                    error('Invalid event handler property `%s`. ' + 'React events use the camelCase naming convention, for example `onClick`.', name);
                  }

                  warnedProperties$1[name] = true;
                  return true;
                } // Let the ARIA attribute hook validate ARIA attributes


                if (rARIA$1.test(name) || rARIACamel$1.test(name)) {
                  return true;
                }

                if (lowerCasedName === 'innerhtml') {
                  error('Directly setting property `innerHTML` is not permitted. ' + 'For more information, lookup documentation on `dangerouslySetInnerHTML`.');

                  warnedProperties$1[name] = true;
                  return true;
                }

                if (lowerCasedName === 'aria') {
                  error('The `aria` attribute is reserved for future use in React. ' + 'Pass individual `aria-` attributes instead.');

                  warnedProperties$1[name] = true;
                  return true;
                }

                if (lowerCasedName === 'is' && value !== null && value !== undefined && typeof value !== 'string') {
                  error('Received a `%s` for a string attribute `is`. If this is expected, cast ' + 'the value to a string.', typeof value);

                  warnedProperties$1[name] = true;
                  return true;
                }

                if (typeof value === 'number' && isNaN(value)) {
                  error('Received NaN for the `%s` attribute. If this is expected, cast ' + 'the value to a string.', name);

                  warnedProperties$1[name] = true;
                  return true;
                }

                var propertyInfo = getPropertyInfo(name);
                var isReserved = propertyInfo !== null && propertyInfo.type === RESERVED; // Known attributes should match the casing specified in the property config.

                if (possibleStandardNames.hasOwnProperty(lowerCasedName)) {
                  var standardName = possibleStandardNames[lowerCasedName];

                  if (standardName !== name) {
                    error('Invalid DOM property `%s`. Did you mean `%s`?', name, standardName);

                    warnedProperties$1[name] = true;
                    return true;
                  }
                } else if (!isReserved && name !== lowerCasedName) {
                  // Unknown attributes should have lowercase casing since that's how they
                  // will be cased anyway with server rendering.
                  error('React does not recognize the `%s` prop on a DOM element. If you ' + 'intentionally want it to appear in the DOM as a custom ' + 'attribute, spell it as lowercase `%s` instead. ' + 'If you accidentally passed it from a parent component, remove ' + 'it from the DOM element.', name, lowerCasedName);

                  warnedProperties$1[name] = true;
                  return true;
                }

                if (typeof value === 'boolean' && shouldRemoveAttributeWithWarning(name, value, propertyInfo, false)) {
                  if (value) {
                    error('Received `%s` for a non-boolean attribute `%s`.\n\n' + 'If you want to write it to the DOM, pass a string instead: ' + '%s="%s" or %s={value.toString()}.', value, name, name, value, name);
                  } else {
                    error('Received `%s` for a non-boolean attribute `%s`.\n\n' + 'If you want to write it to the DOM, pass a string instead: ' + '%s="%s" or %s={value.toString()}.\n\n' + 'If you used to conditionally omit it with %s={condition && value}, ' + 'pass %s={condition ? value : undefined} instead.', value, name, name, value, name, name, name);
                  }

                  warnedProperties$1[name] = true;
                  return true;
                } // Now that we've validated casing, do not validate
                // data types for reserved props


                if (isReserved) {
                  return true;
                } // Warn when a known attribute is a bad type


                if (shouldRemoveAttributeWithWarning(name, value, propertyInfo, false)) {
                  warnedProperties$1[name] = true;
                  return false;
                } // Warn when passing the strings 'false' or 'true' into a boolean prop


                if ((value === 'false' || value === 'true') && propertyInfo !== null && propertyInfo.type === BOOLEAN) {
                  error('Received the string `%s` for the boolean attribute `%s`. ' + '%s ' + 'Did you mean %s={%s}?', value, name, value === 'false' ? 'The browser will interpret it as a truthy value.' : 'Although this works, it will not work as expected if you pass the string "false".', name, value);

                  warnedProperties$1[name] = true;
                  return true;
                }

                return true;
              };
            }

            var warnUnknownProperties = function (type, props, eventRegistry) {
              {
                var unknownProps = [];

                for (var key in props) {
                  var isValid = validateProperty$1(type, key, props[key], eventRegistry);

                  if (!isValid) {
                    unknownProps.push(key);
                  }
                }

                var unknownPropString = unknownProps.map(function (prop) {
                  return '`' + prop + '`';
                }).join(', ');

                if (unknownProps.length === 1) {
                  error('Invalid value for prop %s on <%s> tag. Either remove it from the element, ' + 'or pass a string or number value to keep it in the DOM. ' + 'For details, see https://reactjs.org/link/attribute-behavior ', unknownPropString, type);
                } else if (unknownProps.length > 1) {
                  error('Invalid values for props %s on <%s> tag. Either remove them from the element, ' + 'or pass a string or number value to keep them in the DOM. ' + 'For details, see https://reactjs.org/link/attribute-behavior ', unknownPropString, type);
                }
              }
            };

            function validateProperties$2(type, props, eventRegistry) {
              if (isCustomComponent(type, props)) {
                return;
              }

              warnUnknownProperties(type, props, eventRegistry);
            }

            var IS_EVENT_HANDLE_NON_MANAGED_NODE = 1;
            var IS_NON_DELEGATED = 1 << 1;
            var IS_CAPTURE_PHASE = 1 << 2;
            var IS_REPLAYED = 1 << 4;
            // set to LEGACY_FB_SUPPORT. LEGACY_FB_SUPPORT only gets set when
            // we call willDeferLaterForLegacyFBSupport, thus not bailing out
            // will result in endless cycles like an infinite loop.
            // We also don't want to defer during event replaying.

            var SHOULD_NOT_PROCESS_POLYFILL_EVENT_PLUGINS = IS_EVENT_HANDLE_NON_MANAGED_NODE | IS_NON_DELEGATED | IS_CAPTURE_PHASE;

            /**
             * Gets the target node from a native browser event by accounting for
             * inconsistencies in browser DOM APIs.
             *
             * @param {object} nativeEvent Native browser event.
             * @return {DOMEventTarget} Target node.
             */

            function getEventTarget(nativeEvent) {
              // Fallback to nativeEvent.srcElement for IE9
              // https://github.com/facebook/react/issues/12506
              var target = nativeEvent.target || nativeEvent.srcElement || window; // Normalize SVG <use> element events #4963

              if (target.correspondingUseElement) {
                target = target.correspondingUseElement;
              } // Safari may fire events on text nodes (Node.TEXT_NODE is 3).
              // @see http://www.quirksmode.org/js/events_properties.html


              return target.nodeType === TEXT_NODE ? target.parentNode : target;
            }

            var restoreImpl = null;
            var restoreTarget = null;
            var restoreQueue = null;

            function restoreStateOfTarget(target) {
              // We perform this translation at the end of the event loop so that we
              // always receive the correct fiber here
              var internalInstance = getInstanceFromNode(target);

              if (!internalInstance) {
                // Unmounted
                return;
              }

              if (!(typeof restoreImpl === 'function')) {
                {
                  throw Error( "setRestoreImplementation() needs to be called to handle a target for controlled events. This error is likely caused by a bug in React. Please file an issue." );
                }
              }

              var stateNode = internalInstance.stateNode; // Guard against Fiber being unmounted.

              if (stateNode) {
                var _props = getFiberCurrentPropsFromNode(stateNode);

                restoreImpl(internalInstance.stateNode, internalInstance.type, _props);
              }
            }

            function setRestoreImplementation(impl) {
              restoreImpl = impl;
            }
            function enqueueStateRestore(target) {
              if (restoreTarget) {
                if (restoreQueue) {
                  restoreQueue.push(target);
                } else {
                  restoreQueue = [target];
                }
              } else {
                restoreTarget = target;
              }
            }
            function needsStateRestore() {
              return restoreTarget !== null || restoreQueue !== null;
            }
            function restoreStateIfNeeded() {
              if (!restoreTarget) {
                return;
              }

              var target = restoreTarget;
              var queuedTargets = restoreQueue;
              restoreTarget = null;
              restoreQueue = null;
              restoreStateOfTarget(target);

              if (queuedTargets) {
                for (var i = 0; i < queuedTargets.length; i++) {
                  restoreStateOfTarget(queuedTargets[i]);
                }
              }
            }

            // the renderer. Such as when we're dispatching events or if third party
            // libraries need to call batchedUpdates. Eventually, this API will go away when
            // everything is batched by default. We'll then have a similar API to opt-out of
            // scheduled work and instead do synchronous work.
            // Defaults

            var batchedUpdatesImpl = function (fn, bookkeeping) {
              return fn(bookkeeping);
            };

            var discreteUpdatesImpl = function (fn, a, b, c, d) {
              return fn(a, b, c, d);
            };

            var flushDiscreteUpdatesImpl = function () {};

            var batchedEventUpdatesImpl = batchedUpdatesImpl;
            var isInsideEventHandler = false;
            var isBatchingEventUpdates = false;

            function finishEventHandler() {
              // Here we wait until all updates have propagated, which is important
              // when using controlled components within layers:
              // https://github.com/facebook/react/issues/1698
              // Then we restore state of any controlled component.
              var controlledComponentsHavePendingUpdates = needsStateRestore();

              if (controlledComponentsHavePendingUpdates) {
                // If a controlled event was fired, we may need to restore the state of
                // the DOM node back to the controlled value. This is necessary when React
                // bails out of the update without touching the DOM.
                flushDiscreteUpdatesImpl();
                restoreStateIfNeeded();
              }
            }

            function batchedUpdates(fn, bookkeeping) {
              if (isInsideEventHandler) {
                // If we are currently inside another batch, we need to wait until it
                // fully completes before restoring state.
                return fn(bookkeeping);
              }

              isInsideEventHandler = true;

              try {
                return batchedUpdatesImpl(fn, bookkeeping);
              } finally {
                isInsideEventHandler = false;
                finishEventHandler();
              }
            }
            function batchedEventUpdates(fn, a, b) {
              if (isBatchingEventUpdates) {
                // If we are currently inside another batch, we need to wait until it
                // fully completes before restoring state.
                return fn(a, b);
              }

              isBatchingEventUpdates = true;

              try {
                return batchedEventUpdatesImpl(fn, a, b);
              } finally {
                isBatchingEventUpdates = false;
                finishEventHandler();
              }
            }
            function discreteUpdates(fn, a, b, c, d) {
              var prevIsInsideEventHandler = isInsideEventHandler;
              isInsideEventHandler = true;

              try {
                return discreteUpdatesImpl(fn, a, b, c, d);
              } finally {
                isInsideEventHandler = prevIsInsideEventHandler;

                if (!isInsideEventHandler) {
                  finishEventHandler();
                }
              }
            }
            function flushDiscreteUpdatesIfNeeded(timeStamp) {
              {
                if (!isInsideEventHandler) {
                  flushDiscreteUpdatesImpl();
                }
              }
            }
            function setBatchingImplementation(_batchedUpdatesImpl, _discreteUpdatesImpl, _flushDiscreteUpdatesImpl, _batchedEventUpdatesImpl) {
              batchedUpdatesImpl = _batchedUpdatesImpl;
              discreteUpdatesImpl = _discreteUpdatesImpl;
              flushDiscreteUpdatesImpl = _flushDiscreteUpdatesImpl;
              batchedEventUpdatesImpl = _batchedEventUpdatesImpl;
            }

            function isInteractive(tag) {
              return tag === 'button' || tag === 'input' || tag === 'select' || tag === 'textarea';
            }

            function shouldPreventMouseEvent(name, type, props) {
              switch (name) {
                case 'onClick':
                case 'onClickCapture':
                case 'onDoubleClick':
                case 'onDoubleClickCapture':
                case 'onMouseDown':
                case 'onMouseDownCapture':
                case 'onMouseMove':
                case 'onMouseMoveCapture':
                case 'onMouseUp':
                case 'onMouseUpCapture':
                case 'onMouseEnter':
                  return !!(props.disabled && isInteractive(type));

                default:
                  return false;
              }
            }
            /**
             * @param {object} inst The instance, which is the source of events.
             * @param {string} registrationName Name of listener (e.g. `onClick`).
             * @return {?function} The stored callback.
             */


            function getListener(inst, registrationName) {
              var stateNode = inst.stateNode;

              if (stateNode === null) {
                // Work in progress (ex: onload events in incremental mode).
                return null;
              }

              var props = getFiberCurrentPropsFromNode(stateNode);

              if (props === null) {
                // Work in progress.
                return null;
              }

              var listener = props[registrationName];

              if (shouldPreventMouseEvent(registrationName, inst.type, props)) {
                return null;
              }

              if (!(!listener || typeof listener === 'function')) {
                {
                  throw Error( "Expected `" + registrationName + "` listener to be a function, instead got a value of `" + typeof listener + "` type." );
                }
              }

              return listener;
            }

            var passiveBrowserEventsSupported = false; // Check if browser support events with passive listeners
            // https://developer.mozilla.org/en-US/docs/Web/API/EventTarget/addEventListener#Safely_detecting_option_support

            if (canUseDOM) {
              try {
                var options = {}; // $FlowFixMe: Ignore Flow complaining about needing a value

                Object.defineProperty(options, 'passive', {
                  get: function () {
                    passiveBrowserEventsSupported = true;
                  }
                });
                window.addEventListener('test', options, options);
                window.removeEventListener('test', options, options);
              } catch (e) {
                passiveBrowserEventsSupported = false;
              }
            }

            function invokeGuardedCallbackProd(name, func, context, a, b, c, d, e, f) {
              var funcArgs = Array.prototype.slice.call(arguments, 3);

              try {
                func.apply(context, funcArgs);
              } catch (error) {
                this.onError(error);
              }
            }

            var invokeGuardedCallbackImpl = invokeGuardedCallbackProd;

            {
              // In DEV mode, we swap out invokeGuardedCallback for a special version
              // that plays more nicely with the browser's DevTools. The idea is to preserve
              // "Pause on exceptions" behavior. Because React wraps all user-provided
              // functions in invokeGuardedCallback, and the production version of
              // invokeGuardedCallback uses a try-catch, all user exceptions are treated
              // like caught exceptions, and the DevTools won't pause unless the developer
              // takes the extra step of enabling pause on caught exceptions. This is
              // unintuitive, though, because even though React has caught the error, from
              // the developer's perspective, the error is uncaught.
              //
              // To preserve the expected "Pause on exceptions" behavior, we don't use a
              // try-catch in DEV. Instead, we synchronously dispatch a fake event to a fake
              // DOM node, and call the user-provided callback from inside an event handler
              // for that fake event. If the callback throws, the error is "captured" using
              // a global event handler. But because the error happens in a different
              // event loop context, it does not interrupt the normal program flow.
              // Effectively, this gives us try-catch behavior without actually using
              // try-catch. Neat!
              // Check that the browser supports the APIs we need to implement our special
              // DEV version of invokeGuardedCallback
              if (typeof window !== 'undefined' && typeof window.dispatchEvent === 'function' && typeof document !== 'undefined' && typeof document.createEvent === 'function') {
                var fakeNode = document.createElement('react');

                invokeGuardedCallbackImpl = function invokeGuardedCallbackDev(name, func, context, a, b, c, d, e, f) {
                  // If document doesn't exist we know for sure we will crash in this method
                  // when we call document.createEvent(). However this can cause confusing
                  // errors: https://github.com/facebookincubator/create-react-app/issues/3482
                  // So we preemptively throw with a better message instead.
                  if (!(typeof document !== 'undefined')) {
                    {
                      throw Error( "The `document` global was defined when React was initialized, but is not defined anymore. This can happen in a test environment if a component schedules an update from an asynchronous callback, but the test has already finished running. To solve this, you can either unmount the component at the end of your test (and ensure that any asynchronous operations get canceled in `componentWillUnmount`), or you can change the test itself to be asynchronous." );
                    }
                  }

                  var evt = document.createEvent('Event');
                  var didCall = false; // Keeps track of whether the user-provided callback threw an error. We
                  // set this to true at the beginning, then set it to false right after
                  // calling the function. If the function errors, `didError` will never be
                  // set to false. This strategy works even if the browser is flaky and
                  // fails to call our global error handler, because it doesn't rely on
                  // the error event at all.

                  var didError = true; // Keeps track of the value of window.event so that we can reset it
                  // during the callback to let user code access window.event in the
                  // browsers that support it.

                  var windowEvent = window.event; // Keeps track of the descriptor of window.event to restore it after event
                  // dispatching: https://github.com/facebook/react/issues/13688

                  var windowEventDescriptor = Object.getOwnPropertyDescriptor(window, 'event');

                  function restoreAfterDispatch() {
                    // We immediately remove the callback from event listeners so that
                    // nested `invokeGuardedCallback` calls do not clash. Otherwise, a
                    // nested call would trigger the fake event handlers of any call higher
                    // in the stack.
                    fakeNode.removeEventListener(evtType, callCallback, false); // We check for window.hasOwnProperty('event') to prevent the
                    // window.event assignment in both IE <= 10 as they throw an error
                    // "Member not found" in strict mode, and in Firefox which does not
                    // support window.event.

                    if (typeof window.event !== 'undefined' && window.hasOwnProperty('event')) {
                      window.event = windowEvent;
                    }
                  } // Create an event handler for our fake event. We will synchronously
                  // dispatch our fake event using `dispatchEvent`. Inside the handler, we
                  // call the user-provided callback.


                  var funcArgs = Array.prototype.slice.call(arguments, 3);

                  function callCallback() {
                    didCall = true;
                    restoreAfterDispatch();
                    func.apply(context, funcArgs);
                    didError = false;
                  } // Create a global error event handler. We use this to capture the value
                  // that was thrown. It's possible that this error handler will fire more
                  // than once; for example, if non-React code also calls `dispatchEvent`
                  // and a handler for that event throws. We should be resilient to most of
                  // those cases. Even if our error event handler fires more than once, the
                  // last error event is always used. If the callback actually does error,
                  // we know that the last error event is the correct one, because it's not
                  // possible for anything else to have happened in between our callback
                  // erroring and the code that follows the `dispatchEvent` call below. If
                  // the callback doesn't error, but the error event was fired, we know to
                  // ignore it because `didError` will be false, as described above.


                  var error; // Use this to track whether the error event is ever called.

                  var didSetError = false;
                  var isCrossOriginError = false;

                  function handleWindowError(event) {
                    error = event.error;
                    didSetError = true;

                    if (error === null && event.colno === 0 && event.lineno === 0) {
                      isCrossOriginError = true;
                    }

                    if (event.defaultPrevented) {
                      // Some other error handler has prevented default.
                      // Browsers silence the error report if this happens.
                      // We'll remember this to later decide whether to log it or not.
                      if (error != null && typeof error === 'object') {
                        try {
                          error._suppressLogging = true;
                        } catch (inner) {// Ignore.
                        }
                      }
                    }
                  } // Create a fake event type.


                  var evtType = "react-" + (name ? name : 'invokeguardedcallback'); // Attach our event handlers

                  window.addEventListener('error', handleWindowError);
                  fakeNode.addEventListener(evtType, callCallback, false); // Synchronously dispatch our fake event. If the user-provided function
                  // errors, it will trigger our global error handler.

                  evt.initEvent(evtType, false, false);
                  fakeNode.dispatchEvent(evt);

                  if (windowEventDescriptor) {
                    Object.defineProperty(window, 'event', windowEventDescriptor);
                  }

                  if (didCall && didError) {
                    if (!didSetError) {
                      // The callback errored, but the error event never fired.
                      error = new Error('An error was thrown inside one of your components, but React ' + "doesn't know what it was. This is likely due to browser " + 'flakiness. React does its best to preserve the "Pause on ' + 'exceptions" behavior of the DevTools, which requires some ' + "DEV-mode only tricks. It's possible that these don't work in " + 'your browser. Try triggering the error in production mode, ' + 'or switching to a modern browser. If you suspect that this is ' + 'actually an issue with React, please file an issue.');
                    } else if (isCrossOriginError) {
                      error = new Error("A cross-origin error was thrown. React doesn't have access to " + 'the actual error object in development. ' + 'See https://reactjs.org/link/crossorigin-error for more information.');
                    }

                    this.onError(error);
                  } // Remove our event listeners


                  window.removeEventListener('error', handleWindowError);

                  if (!didCall) {
                    // Something went really wrong, and our event was not dispatched.
                    // https://github.com/facebook/react/issues/16734
                    // https://github.com/facebook/react/issues/16585
                    // Fall back to the production implementation.
                    restoreAfterDispatch();
                    return invokeGuardedCallbackProd.apply(this, arguments);
                  }
                };
              }
            }

            var invokeGuardedCallbackImpl$1 = invokeGuardedCallbackImpl;

            var hasError = false;
            var caughtError = null; // Used by event system to capture/rethrow the first error.

            var hasRethrowError = false;
            var rethrowError = null;
            var reporter = {
              onError: function (error) {
                hasError = true;
                caughtError = error;
              }
            };
            /**
             * Call a function while guarding against errors that happens within it.
             * Returns an error if it throws, otherwise null.
             *
             * In production, this is implemented using a try-catch. The reason we don't
             * use a try-catch directly is so that we can swap out a different
             * implementation in DEV mode.
             *
             * @param {String} name of the guard to use for logging or debugging
             * @param {Function} func The function to invoke
             * @param {*} context The context to use when calling the function
             * @param {...*} args Arguments for function
             */

            function invokeGuardedCallback(name, func, context, a, b, c, d, e, f) {
              hasError = false;
              caughtError = null;
              invokeGuardedCallbackImpl$1.apply(reporter, arguments);
            }
            /**
             * Same as invokeGuardedCallback, but instead of returning an error, it stores
             * it in a global so it can be rethrown by `rethrowCaughtError` later.
             * TODO: See if caughtError and rethrowError can be unified.
             *
             * @param {String} name of the guard to use for logging or debugging
             * @param {Function} func The function to invoke
             * @param {*} context The context to use when calling the function
             * @param {...*} args Arguments for function
             */

            function invokeGuardedCallbackAndCatchFirstError(name, func, context, a, b, c, d, e, f) {
              invokeGuardedCallback.apply(this, arguments);

              if (hasError) {
                var error = clearCaughtError();

                if (!hasRethrowError) {
                  hasRethrowError = true;
                  rethrowError = error;
                }
              }
            }
            /**
             * During execution of guarded functions we will capture the first error which
             * we will rethrow to be handled by the top level error handler.
             */

            function rethrowCaughtError() {
              if (hasRethrowError) {
                var error = rethrowError;
                hasRethrowError = false;
                rethrowError = null;
                throw error;
              }
            }
            function hasCaughtError() {
              return hasError;
            }
            function clearCaughtError() {
              if (hasError) {
                var error = caughtError;
                hasError = false;
                caughtError = null;
                return error;
              } else {
                {
                  {
                    throw Error( "clearCaughtError was called but no error was captured. This error is likely caused by a bug in React. Please file an issue." );
                  }
                }
              }
            }

            /**
             * `ReactInstanceMap` maintains a mapping from a public facing stateful
             * instance (key) and the internal representation (value). This allows public
             * methods to accept the user facing instance as an argument and map them back
             * to internal methods.
             *
             * Note that this module is currently shared and assumed to be stateless.
             * If this becomes an actual Map, that will break.
             */
            function get(key) {
              return key._reactInternals;
            }
            function has(key) {
              return key._reactInternals !== undefined;
            }
            function set(key, value) {
              key._reactInternals = value;
            }

            // Don't change these two values. They're used by React Dev Tools.
            var NoFlags =
            /*                      */
            0;
            var PerformedWork =
            /*                */
            1; // You can change the rest (and add more).

            var Placement =
            /*                    */
            2;
            var Update =
            /*                       */
            4;
            var PlacementAndUpdate =
            /*           */
            6;
            var Deletion =
            /*                     */
            8;
            var ContentReset =
            /*                 */
            16;
            var Callback =
            /*                     */
            32;
            var DidCapture =
            /*                   */
            64;
            var Ref =
            /*                          */
            128;
            var Snapshot =
            /*                     */
            256;
            var Passive =
            /*                      */
            512; // TODO (effects) Remove this bit once the new reconciler is synced to the old.

            var PassiveUnmountPendingDev =
            /*     */
            8192;
            var Hydrating =
            /*                    */
            1024;
            var HydratingAndUpdate =
            /*           */
            1028; // Passive & Update & Callback & Ref & Snapshot

            var LifecycleEffectMask =
            /*          */
            932; // Union of all host effects

            var HostEffectMask =
            /*               */
            2047; // These are not really side effects, but we still reuse this field.

            var Incomplete =
            /*                   */
            2048;
            var ShouldCapture =
            /*                */
            4096;
            var ForceUpdateForLegacySuspense =
            /* */
            16384; // Static tags describe aspects of a fiber that are not specific to a render,

            var ReactCurrentOwner = ReactSharedInternals.ReactCurrentOwner;
            function getNearestMountedFiber(fiber) {
              var node = fiber;
              var nearestMounted = fiber;

              if (!fiber.alternate) {
                // If there is no alternate, this might be a new tree that isn't inserted
                // yet. If it is, then it will have a pending insertion effect on it.
                var nextNode = node;

                do {
                  node = nextNode;

                  if ((node.flags & (Placement | Hydrating)) !== NoFlags) {
                    // This is an insertion or in-progress hydration. The nearest possible
                    // mounted fiber is the parent but we need to continue to figure out
                    // if that one is still mounted.
                    nearestMounted = node.return;
                  }

                  nextNode = node.return;
                } while (nextNode);
              } else {
                while (node.return) {
                  node = node.return;
                }
              }

              if (node.tag === HostRoot) {
                // TODO: Check if this was a nested HostRoot when used with
                // renderContainerIntoSubtree.
                return nearestMounted;
              } // If we didn't hit the root, that means that we're in an disconnected tree
              // that has been unmounted.


              return null;
            }
            function getSuspenseInstanceFromFiber(fiber) {
              if (fiber.tag === SuspenseComponent) {
                var suspenseState = fiber.memoizedState;

                if (suspenseState === null) {
                  var current = fiber.alternate;

                  if (current !== null) {
                    suspenseState = current.memoizedState;
                  }
                }

                if (suspenseState !== null) {
                  return suspenseState.dehydrated;
                }
              }

              return null;
            }
            function getContainerFromFiber(fiber) {
              return fiber.tag === HostRoot ? fiber.stateNode.containerInfo : null;
            }
            function isFiberMounted(fiber) {
              return getNearestMountedFiber(fiber) === fiber;
            }
            function isMounted(component) {
              {
                var owner = ReactCurrentOwner.current;

                if (owner !== null && owner.tag === ClassComponent) {
                  var ownerFiber = owner;
                  var instance = ownerFiber.stateNode;

                  if (!instance._warnedAboutRefsInRender) {
                    error('%s is accessing isMounted inside its render() function. ' + 'render() should be a pure function of props and state. It should ' + 'never access something that requires stale data from the previous ' + 'render, such as refs. Move this logic to componentDidMount and ' + 'componentDidUpdate instead.', getComponentName(ownerFiber.type) || 'A component');
                  }

                  instance._warnedAboutRefsInRender = true;
                }
              }

              var fiber = get(component);

              if (!fiber) {
                return false;
              }

              return getNearestMountedFiber(fiber) === fiber;
            }

            function assertIsMounted(fiber) {
              if (!(getNearestMountedFiber(fiber) === fiber)) {
                {
                  throw Error( "Unable to find node on an unmounted component." );
                }
              }
            }

            function findCurrentFiberUsingSlowPath(fiber) {
              var alternate = fiber.alternate;

              if (!alternate) {
                // If there is no alternate, then we only need to check if it is mounted.
                var nearestMounted = getNearestMountedFiber(fiber);

                if (!(nearestMounted !== null)) {
                  {
                    throw Error( "Unable to find node on an unmounted component." );
                  }
                }

                if (nearestMounted !== fiber) {
                  return null;
                }

                return fiber;
              } // If we have two possible branches, we'll walk backwards up to the root
              // to see what path the root points to. On the way we may hit one of the
              // special cases and we'll deal with them.


              var a = fiber;
              var b = alternate;

              while (true) {
                var parentA = a.return;

                if (parentA === null) {
                  // We're at the root.
                  break;
                }

                var parentB = parentA.alternate;

                if (parentB === null) {
                  // There is no alternate. This is an unusual case. Currently, it only
                  // happens when a Suspense component is hidden. An extra fragment fiber
                  // is inserted in between the Suspense fiber and its children. Skip
                  // over this extra fragment fiber and proceed to the next parent.
                  var nextParent = parentA.return;

                  if (nextParent !== null) {
                    a = b = nextParent;
                    continue;
                  } // If there's no parent, we're at the root.


                  break;
                } // If both copies of the parent fiber point to the same child, we can
                // assume that the child is current. This happens when we bailout on low
                // priority: the bailed out fiber's child reuses the current child.


                if (parentA.child === parentB.child) {
                  var child = parentA.child;

                  while (child) {
                    if (child === a) {
                      // We've determined that A is the current branch.
                      assertIsMounted(parentA);
                      return fiber;
                    }

                    if (child === b) {
                      // We've determined that B is the current branch.
                      assertIsMounted(parentA);
                      return alternate;
                    }

                    child = child.sibling;
                  } // We should never have an alternate for any mounting node. So the only
                  // way this could possibly happen is if this was unmounted, if at all.


                  {
                    {
                      throw Error( "Unable to find node on an unmounted component." );
                    }
                  }
                }

                if (a.return !== b.return) {
                  // The return pointer of A and the return pointer of B point to different
                  // fibers. We assume that return pointers never criss-cross, so A must
                  // belong to the child set of A.return, and B must belong to the child
                  // set of B.return.
                  a = parentA;
                  b = parentB;
                } else {
                  // The return pointers point to the same fiber. We'll have to use the
                  // default, slow path: scan the child sets of each parent alternate to see
                  // which child belongs to which set.
                  //
                  // Search parent A's child set
                  var didFindChild = false;
                  var _child = parentA.child;

                  while (_child) {
                    if (_child === a) {
                      didFindChild = true;
                      a = parentA;
                      b = parentB;
                      break;
                    }

                    if (_child === b) {
                      didFindChild = true;
                      b = parentA;
                      a = parentB;
                      break;
                    }

                    _child = _child.sibling;
                  }

                  if (!didFindChild) {
                    // Search parent B's child set
                    _child = parentB.child;

                    while (_child) {
                      if (_child === a) {
                        didFindChild = true;
                        a = parentB;
                        b = parentA;
                        break;
                      }

                      if (_child === b) {
                        didFindChild = true;
                        b = parentB;
                        a = parentA;
                        break;
                      }

                      _child = _child.sibling;
                    }

                    if (!didFindChild) {
                      {
                        throw Error( "Child was not found in either parent set. This indicates a bug in React related to the return pointer. Please file an issue." );
                      }
                    }
                  }
                }

                if (!(a.alternate === b)) {
                  {
                    throw Error( "Return fibers should always be each others' alternates. This error is likely caused by a bug in React. Please file an issue." );
                  }
                }
              } // If the root is not a host container, we're in a disconnected tree. I.e.
              // unmounted.


              if (!(a.tag === HostRoot)) {
                {
                  throw Error( "Unable to find node on an unmounted component." );
                }
              }

              if (a.stateNode.current === a) {
                // We've determined that A is the current branch.
                return fiber;
              } // Otherwise B has to be current branch.


              return alternate;
            }
            function findCurrentHostFiber(parent) {
              var currentParent = findCurrentFiberUsingSlowPath(parent);

              if (!currentParent) {
                return null;
              } // Next we'll drill down this component to find the first HostComponent/Text.


              var node = currentParent;

              while (true) {
                if (node.tag === HostComponent || node.tag === HostText) {
                  return node;
                } else if (node.child) {
                  node.child.return = node;
                  node = node.child;
                  continue;
                }

                if (node === currentParent) {
                  return null;
                }

                while (!node.sibling) {
                  if (!node.return || node.return === currentParent) {
                    return null;
                  }

                  node = node.return;
                }

                node.sibling.return = node.return;
                node = node.sibling;
              } // Flow needs the return null here, but ESLint complains about it.
              // eslint-disable-next-line no-unreachable


              return null;
            }
            function findCurrentHostFiberWithNoPortals(parent) {
              var currentParent = findCurrentFiberUsingSlowPath(parent);

              if (!currentParent) {
                return null;
              } // Next we'll drill down this component to find the first HostComponent/Text.


              var node = currentParent;

              while (true) {
                if (node.tag === HostComponent || node.tag === HostText || enableFundamentalAPI ) {
                  return node;
                } else if (node.child && node.tag !== HostPortal) {
                  node.child.return = node;
                  node = node.child;
                  continue;
                }

                if (node === currentParent) {
                  return null;
                }

                while (!node.sibling) {
                  if (!node.return || node.return === currentParent) {
                    return null;
                  }

                  node = node.return;
                }

                node.sibling.return = node.return;
                node = node.sibling;
              } // Flow needs the return null here, but ESLint complains about it.
              // eslint-disable-next-line no-unreachable


              return null;
            }
            function doesFiberContain(parentFiber, childFiber) {
              var node = childFiber;
              var parentFiberAlternate = parentFiber.alternate;

              while (node !== null) {
                if (node === parentFiber || node === parentFiberAlternate) {
                  return true;
                }

                node = node.return;
              }

              return false;
            }

            var attemptUserBlockingHydration;
            function setAttemptUserBlockingHydration(fn) {
              attemptUserBlockingHydration = fn;
            }
            var attemptContinuousHydration;
            function setAttemptContinuousHydration(fn) {
              attemptContinuousHydration = fn;
            }
            var attemptHydrationAtCurrentPriority;
            function setAttemptHydrationAtCurrentPriority(fn) {
              attemptHydrationAtCurrentPriority = fn;
            }
            var attemptHydrationAtPriority;
            function setAttemptHydrationAtPriority(fn) {
              attemptHydrationAtPriority = fn;
            } // TODO: Upgrade this definition once we're on a newer version of Flow that
            var hasScheduledReplayAttempt = false; // The queue of discrete events to be replayed.

            var queuedDiscreteEvents = []; // Indicates if any continuous event targets are non-null for early bailout.
            // if the last target was dehydrated.

            var queuedFocus = null;
            var queuedDrag = null;
            var queuedMouse = null; // For pointer events there can be one latest event per pointerId.

            var queuedPointers = new Map();
            var queuedPointerCaptures = new Map(); // We could consider replaying selectionchange and touchmoves too.

            var queuedExplicitHydrationTargets = [];
            function hasQueuedDiscreteEvents() {
              return queuedDiscreteEvents.length > 0;
            }
            var discreteReplayableEvents = ['mousedown', 'mouseup', 'touchcancel', 'touchend', 'touchstart', 'auxclick', 'dblclick', 'pointercancel', 'pointerdown', 'pointerup', 'dragend', 'dragstart', 'drop', 'compositionend', 'compositionstart', 'keydown', 'keypress', 'keyup', 'input', 'textInput', // Intentionally camelCase
            'copy', 'cut', 'paste', 'click', 'change', 'contextmenu', 'reset', 'submit'];
            function isReplayableDiscreteEvent(eventType) {
              return discreteReplayableEvents.indexOf(eventType) > -1;
            }

            function createQueuedReplayableEvent(blockedOn, domEventName, eventSystemFlags, targetContainer, nativeEvent) {
              return {
                blockedOn: blockedOn,
                domEventName: domEventName,
                eventSystemFlags: eventSystemFlags | IS_REPLAYED,
                nativeEvent: nativeEvent,
                targetContainers: [targetContainer]
              };
            }

            function queueDiscreteEvent(blockedOn, domEventName, eventSystemFlags, targetContainer, nativeEvent) {
              var queuedEvent = createQueuedReplayableEvent(blockedOn, domEventName, eventSystemFlags, targetContainer, nativeEvent);
              queuedDiscreteEvents.push(queuedEvent);
            } // Resets the replaying for this type of continuous event to no event.

            function clearIfContinuousEvent(domEventName, nativeEvent) {
              switch (domEventName) {
                case 'focusin':
                case 'focusout':
                  queuedFocus = null;
                  break;

                case 'dragenter':
                case 'dragleave':
                  queuedDrag = null;
                  break;

                case 'mouseover':
                case 'mouseout':
                  queuedMouse = null;
                  break;

                case 'pointerover':
                case 'pointerout':
                  {
                    var pointerId = nativeEvent.pointerId;
                    queuedPointers.delete(pointerId);
                    break;
                  }

                case 'gotpointercapture':
                case 'lostpointercapture':
                  {
                    var _pointerId = nativeEvent.pointerId;
                    queuedPointerCaptures.delete(_pointerId);
                    break;
                  }
              }
            }

            function accumulateOrCreateContinuousQueuedReplayableEvent(existingQueuedEvent, blockedOn, domEventName, eventSystemFlags, targetContainer, nativeEvent) {
              if (existingQueuedEvent === null || existingQueuedEvent.nativeEvent !== nativeEvent) {
                var queuedEvent = createQueuedReplayableEvent(blockedOn, domEventName, eventSystemFlags, targetContainer, nativeEvent);

                if (blockedOn !== null) {
                  var _fiber2 = getInstanceFromNode(blockedOn);

                  if (_fiber2 !== null) {
                    // Attempt to increase the priority of this target.
                    attemptContinuousHydration(_fiber2);
                  }
                }

                return queuedEvent;
              } // If we have already queued this exact event, then it's because
              // the different event systems have different DOM event listeners.
              // We can accumulate the flags, and the targetContainers, and
              // store a single event to be replayed.


              existingQueuedEvent.eventSystemFlags |= eventSystemFlags;
              var targetContainers = existingQueuedEvent.targetContainers;

              if (targetContainer !== null && targetContainers.indexOf(targetContainer) === -1) {
                targetContainers.push(targetContainer);
              }

              return existingQueuedEvent;
            }

            function queueIfContinuousEvent(blockedOn, domEventName, eventSystemFlags, targetContainer, nativeEvent) {
              // These set relatedTarget to null because the replayed event will be treated as if we
              // moved from outside the window (no target) onto the target once it hydrates.
              // Instead of mutating we could clone the event.
              switch (domEventName) {
                case 'focusin':
                  {
                    var focusEvent = nativeEvent;
                    queuedFocus = accumulateOrCreateContinuousQueuedReplayableEvent(queuedFocus, blockedOn, domEventName, eventSystemFlags, targetContainer, focusEvent);
                    return true;
                  }

                case 'dragenter':
                  {
                    var dragEvent = nativeEvent;
                    queuedDrag = accumulateOrCreateContinuousQueuedReplayableEvent(queuedDrag, blockedOn, domEventName, eventSystemFlags, targetContainer, dragEvent);
                    return true;
                  }

                case 'mouseover':
                  {
                    var mouseEvent = nativeEvent;
                    queuedMouse = accumulateOrCreateContinuousQueuedReplayableEvent(queuedMouse, blockedOn, domEventName, eventSystemFlags, targetContainer, mouseEvent);
                    return true;
                  }

                case 'pointerover':
                  {
                    var pointerEvent = nativeEvent;
                    var pointerId = pointerEvent.pointerId;
                    queuedPointers.set(pointerId, accumulateOrCreateContinuousQueuedReplayableEvent(queuedPointers.get(pointerId) || null, blockedOn, domEventName, eventSystemFlags, targetContainer, pointerEvent));
                    return true;
                  }

                case 'gotpointercapture':
                  {
                    var _pointerEvent = nativeEvent;
                    var _pointerId2 = _pointerEvent.pointerId;
                    queuedPointerCaptures.set(_pointerId2, accumulateOrCreateContinuousQueuedReplayableEvent(queuedPointerCaptures.get(_pointerId2) || null, blockedOn, domEventName, eventSystemFlags, targetContainer, _pointerEvent));
                    return true;
                  }
              }

              return false;
            } // Check if this target is unblocked. Returns true if it's unblocked.

            function attemptExplicitHydrationTarget(queuedTarget) {
              // TODO: This function shares a lot of logic with attemptToDispatchEvent.
              // Try to unify them. It's a bit tricky since it would require two return
              // values.
              var targetInst = getClosestInstanceFromNode(queuedTarget.target);

              if (targetInst !== null) {
                var nearestMounted = getNearestMountedFiber(targetInst);

                if (nearestMounted !== null) {
                  var tag = nearestMounted.tag;

                  if (tag === SuspenseComponent) {
                    var instance = getSuspenseInstanceFromFiber(nearestMounted);

                    if (instance !== null) {
                      // We're blocked on hydrating this boundary.
                      // Increase its priority.
                      queuedTarget.blockedOn = instance;
                      attemptHydrationAtPriority(queuedTarget.lanePriority, function () {
                        Scheduler.unstable_runWithPriority(queuedTarget.priority, function () {
                          attemptHydrationAtCurrentPriority(nearestMounted);
                        });
                      });
                      return;
                    }
                  } else if (tag === HostRoot) {
                    var root = nearestMounted.stateNode;

                    if (root.hydrate) {
                      queuedTarget.blockedOn = getContainerFromFiber(nearestMounted); // We don't currently have a way to increase the priority of
                      // a root other than sync.

                      return;
                    }
                  }
                }
              }

              queuedTarget.blockedOn = null;
            }

            function attemptReplayContinuousQueuedEvent(queuedEvent) {
              if (queuedEvent.blockedOn !== null) {
                return false;
              }

              var targetContainers = queuedEvent.targetContainers;

              while (targetContainers.length > 0) {
                var targetContainer = targetContainers[0];
                var nextBlockedOn = attemptToDispatchEvent(queuedEvent.domEventName, queuedEvent.eventSystemFlags, targetContainer, queuedEvent.nativeEvent);

                if (nextBlockedOn !== null) {
                  // We're still blocked. Try again later.
                  var _fiber3 = getInstanceFromNode(nextBlockedOn);

                  if (_fiber3 !== null) {
                    attemptContinuousHydration(_fiber3);
                  }

                  queuedEvent.blockedOn = nextBlockedOn;
                  return false;
                } // This target container was successfully dispatched. Try the next.


                targetContainers.shift();
              }

              return true;
            }

            function attemptReplayContinuousQueuedEventInMap(queuedEvent, key, map) {
              if (attemptReplayContinuousQueuedEvent(queuedEvent)) {
                map.delete(key);
              }
            }

            function replayUnblockedEvents() {
              hasScheduledReplayAttempt = false; // First replay discrete events.

              while (queuedDiscreteEvents.length > 0) {
                var nextDiscreteEvent = queuedDiscreteEvents[0];

                if (nextDiscreteEvent.blockedOn !== null) {
                  // We're still blocked.
                  // Increase the priority of this boundary to unblock
                  // the next discrete event.
                  var _fiber4 = getInstanceFromNode(nextDiscreteEvent.blockedOn);

                  if (_fiber4 !== null) {
                    attemptUserBlockingHydration(_fiber4);
                  }

                  break;
                }

                var targetContainers = nextDiscreteEvent.targetContainers;

                while (targetContainers.length > 0) {
                  var targetContainer = targetContainers[0];
                  var nextBlockedOn = attemptToDispatchEvent(nextDiscreteEvent.domEventName, nextDiscreteEvent.eventSystemFlags, targetContainer, nextDiscreteEvent.nativeEvent);

                  if (nextBlockedOn !== null) {
                    // We're still blocked. Try again later.
                    nextDiscreteEvent.blockedOn = nextBlockedOn;
                    break;
                  } // This target container was successfully dispatched. Try the next.


                  targetContainers.shift();
                }

                if (nextDiscreteEvent.blockedOn === null) {
                  // We've successfully replayed the first event. Let's try the next one.
                  queuedDiscreteEvents.shift();
                }
              } // Next replay any continuous events.


              if (queuedFocus !== null && attemptReplayContinuousQueuedEvent(queuedFocus)) {
                queuedFocus = null;
              }

              if (queuedDrag !== null && attemptReplayContinuousQueuedEvent(queuedDrag)) {
                queuedDrag = null;
              }

              if (queuedMouse !== null && attemptReplayContinuousQueuedEvent(queuedMouse)) {
                queuedMouse = null;
              }

              queuedPointers.forEach(attemptReplayContinuousQueuedEventInMap);
              queuedPointerCaptures.forEach(attemptReplayContinuousQueuedEventInMap);
            }

            function scheduleCallbackIfUnblocked(queuedEvent, unblocked) {
              if (queuedEvent.blockedOn === unblocked) {
                queuedEvent.blockedOn = null;

                if (!hasScheduledReplayAttempt) {
                  hasScheduledReplayAttempt = true; // Schedule a callback to attempt replaying as many events as are
                  // now unblocked. This first might not actually be unblocked yet.
                  // We could check it early to avoid scheduling an unnecessary callback.

                  Scheduler.unstable_scheduleCallback(Scheduler.unstable_NormalPriority, replayUnblockedEvents);
                }
              }
            }

            function retryIfBlockedOn(unblocked) {
              // Mark anything that was blocked on this as no longer blocked
              // and eligible for a replay.
              if (queuedDiscreteEvents.length > 0) {
                scheduleCallbackIfUnblocked(queuedDiscreteEvents[0], unblocked); // This is a exponential search for each boundary that commits. I think it's
                // worth it because we expect very few discrete events to queue up and once
                // we are actually fully unblocked it will be fast to replay them.

                for (var i = 1; i < queuedDiscreteEvents.length; i++) {
                  var queuedEvent = queuedDiscreteEvents[i];

                  if (queuedEvent.blockedOn === unblocked) {
                    queuedEvent.blockedOn = null;
                  }
                }
              }

              if (queuedFocus !== null) {
                scheduleCallbackIfUnblocked(queuedFocus, unblocked);
              }

              if (queuedDrag !== null) {
                scheduleCallbackIfUnblocked(queuedDrag, unblocked);
              }

              if (queuedMouse !== null) {
                scheduleCallbackIfUnblocked(queuedMouse, unblocked);
              }

              var unblock = function (queuedEvent) {
                return scheduleCallbackIfUnblocked(queuedEvent, unblocked);
              };

              queuedPointers.forEach(unblock);
              queuedPointerCaptures.forEach(unblock);

              for (var _i = 0; _i < queuedExplicitHydrationTargets.length; _i++) {
                var queuedTarget = queuedExplicitHydrationTargets[_i];

                if (queuedTarget.blockedOn === unblocked) {
                  queuedTarget.blockedOn = null;
                }
              }

              while (queuedExplicitHydrationTargets.length > 0) {
                var nextExplicitTarget = queuedExplicitHydrationTargets[0];

                if (nextExplicitTarget.blockedOn !== null) {
                  // We're still blocked.
                  break;
                } else {
                  attemptExplicitHydrationTarget(nextExplicitTarget);

                  if (nextExplicitTarget.blockedOn === null) {
                    // We're unblocked.
                    queuedExplicitHydrationTargets.shift();
                  }
                }
              }
            }

            var DiscreteEvent = 0;
            var UserBlockingEvent = 1;
            var ContinuousEvent = 2;

            /**
             * Generate a mapping of standard vendor prefixes using the defined style property and event name.
             *
             * @param {string} styleProp
             * @param {string} eventName
             * @returns {object}
             */

            function makePrefixMap(styleProp, eventName) {
              var prefixes = {};
              prefixes[styleProp.toLowerCase()] = eventName.toLowerCase();
              prefixes['Webkit' + styleProp] = 'webkit' + eventName;
              prefixes['Moz' + styleProp] = 'moz' + eventName;
              return prefixes;
            }
            /**
             * A list of event names to a configurable list of vendor prefixes.
             */


            var vendorPrefixes = {
              animationend: makePrefixMap('Animation', 'AnimationEnd'),
              animationiteration: makePrefixMap('Animation', 'AnimationIteration'),
              animationstart: makePrefixMap('Animation', 'AnimationStart'),
              transitionend: makePrefixMap('Transition', 'TransitionEnd')
            };
            /**
             * Event names that have already been detected and prefixed (if applicable).
             */

            var prefixedEventNames = {};
            /**
             * Element to check for prefixes on.
             */

            var style = {};
            /**
             * Bootstrap if a DOM exists.
             */

            if (canUseDOM) {
              style = document.createElement('div').style; // On some platforms, in particular some releases of Android 4.x,
              // the un-prefixed "animation" and "transition" properties are defined on the
              // style object but the events that fire will still be prefixed, so we need
              // to check if the un-prefixed events are usable, and if not remove them from the map.

              if (!('AnimationEvent' in window)) {
                delete vendorPrefixes.animationend.animation;
                delete vendorPrefixes.animationiteration.animation;
                delete vendorPrefixes.animationstart.animation;
              } // Same as above


              if (!('TransitionEvent' in window)) {
                delete vendorPrefixes.transitionend.transition;
              }
            }
            /**
             * Attempts to determine the correct vendor prefixed event name.
             *
             * @param {string} eventName
             * @returns {string}
             */


            function getVendorPrefixedEventName(eventName) {
              if (prefixedEventNames[eventName]) {
                return prefixedEventNames[eventName];
              } else if (!vendorPrefixes[eventName]) {
                return eventName;
              }

              var prefixMap = vendorPrefixes[eventName];

              for (var styleProp in prefixMap) {
                if (prefixMap.hasOwnProperty(styleProp) && styleProp in style) {
                  return prefixedEventNames[eventName] = prefixMap[styleProp];
                }
              }

              return eventName;
            }

            var ANIMATION_END = getVendorPrefixedEventName('animationend');
            var ANIMATION_ITERATION = getVendorPrefixedEventName('animationiteration');
            var ANIMATION_START = getVendorPrefixedEventName('animationstart');
            var TRANSITION_END = getVendorPrefixedEventName('transitionend');

            var topLevelEventsToReactNames = new Map();
            var eventPriorities = new Map(); // We store most of the events in this module in pairs of two strings so we can re-use
            // the code required to apply the same logic for event prioritization and that of the
            // SimpleEventPlugin. This complicates things slightly, but the aim is to reduce code
            // duplication (for which there would be quite a bit). For the events that are not needed
            // for the SimpleEventPlugin (otherDiscreteEvents) we process them separately as an
            // array of top level events.
            // Lastly, we ignore prettier so we can keep the formatting sane.
            // prettier-ignore

            var discreteEventPairsForSimpleEventPlugin = ['cancel', 'cancel', 'click', 'click', 'close', 'close', 'contextmenu', 'contextMenu', 'copy', 'copy', 'cut', 'cut', 'auxclick', 'auxClick', 'dblclick', 'doubleClick', // Careful!
            'dragend', 'dragEnd', 'dragstart', 'dragStart', 'drop', 'drop', 'focusin', 'focus', // Careful!
            'focusout', 'blur', // Careful!
            'input', 'input', 'invalid', 'invalid', 'keydown', 'keyDown', 'keypress', 'keyPress', 'keyup', 'keyUp', 'mousedown', 'mouseDown', 'mouseup', 'mouseUp', 'paste', 'paste', 'pause', 'pause', 'play', 'play', 'pointercancel', 'pointerCancel', 'pointerdown', 'pointerDown', 'pointerup', 'pointerUp', 'ratechange', 'rateChange', 'reset', 'reset', 'seeked', 'seeked', 'submit', 'submit', 'touchcancel', 'touchCancel', 'touchend', 'touchEnd', 'touchstart', 'touchStart', 'volumechange', 'volumeChange'];
            var otherDiscreteEvents = ['change', 'selectionchange', 'textInput', 'compositionstart', 'compositionend', 'compositionupdate'];


            var userBlockingPairsForSimpleEventPlugin = ['drag', 'drag', 'dragenter', 'dragEnter', 'dragexit', 'dragExit', 'dragleave', 'dragLeave', 'dragover', 'dragOver', 'mousemove', 'mouseMove', 'mouseout', 'mouseOut', 'mouseover', 'mouseOver', 'pointermove', 'pointerMove', 'pointerout', 'pointerOut', 'pointerover', 'pointerOver', 'scroll', 'scroll', 'toggle', 'toggle', 'touchmove', 'touchMove', 'wheel', 'wheel']; // prettier-ignore

            var continuousPairsForSimpleEventPlugin = ['abort', 'abort', ANIMATION_END, 'animationEnd', ANIMATION_ITERATION, 'animationIteration', ANIMATION_START, 'animationStart', 'canplay', 'canPlay', 'canplaythrough', 'canPlayThrough', 'durationchange', 'durationChange', 'emptied', 'emptied', 'encrypted', 'encrypted', 'ended', 'ended', 'error', 'error', 'gotpointercapture', 'gotPointerCapture', 'load', 'load', 'loadeddata', 'loadedData', 'loadedmetadata', 'loadedMetadata', 'loadstart', 'loadStart', 'lostpointercapture', 'lostPointerCapture', 'playing', 'playing', 'progress', 'progress', 'seeking', 'seeking', 'stalled', 'stalled', 'suspend', 'suspend', 'timeupdate', 'timeUpdate', TRANSITION_END, 'transitionEnd', 'waiting', 'waiting'];
            /**
             * Turns
             * ['abort', ...]
             *
             * into
             *
             * topLevelEventsToReactNames = new Map([
             *   ['abort', 'onAbort'],
             * ]);
             *
             * and registers them.
             */

            function registerSimplePluginEventsAndSetTheirPriorities(eventTypes, priority) {
              // As the event types are in pairs of two, we need to iterate
              // through in twos. The events are in pairs of two to save code
              // and improve init perf of processing this array, as it will
              // result in far fewer object allocations and property accesses
              // if we only use three arrays to process all the categories of
              // instead of tuples.
              for (var i = 0; i < eventTypes.length; i += 2) {
                var topEvent = eventTypes[i];
                var event = eventTypes[i + 1];
                var capitalizedEvent = event[0].toUpperCase() + event.slice(1);
                var reactName = 'on' + capitalizedEvent;
                eventPriorities.set(topEvent, priority);
                topLevelEventsToReactNames.set(topEvent, reactName);
                registerTwoPhaseEvent(reactName, [topEvent]);
              }
            }

            function setEventPriorities(eventTypes, priority) {
              for (var i = 0; i < eventTypes.length; i++) {
                eventPriorities.set(eventTypes[i], priority);
              }
            }

            function getEventPriorityForPluginSystem(domEventName) {
              var priority = eventPriorities.get(domEventName); // Default to a ContinuousEvent. Note: we might
              // want to warn if we can't detect the priority
              // for the event.

              return priority === undefined ? ContinuousEvent : priority;
            }
            function registerSimpleEvents() {
              registerSimplePluginEventsAndSetTheirPriorities(discreteEventPairsForSimpleEventPlugin, DiscreteEvent);
              registerSimplePluginEventsAndSetTheirPriorities(userBlockingPairsForSimpleEventPlugin, UserBlockingEvent);
              registerSimplePluginEventsAndSetTheirPriorities(continuousPairsForSimpleEventPlugin, ContinuousEvent);
              setEventPriorities(otherDiscreteEvents, DiscreteEvent);
            }

            var Scheduler_now = Scheduler.unstable_now;

            {
              // Provide explicit error message when production+profiling bundle of e.g.
              // react-dom is used with production (non-profiling) bundle of
              // scheduler/tracing
              if (!(tracing$1.__interactionsRef != null && tracing$1.__interactionsRef.current != null)) {
                {
                  throw Error( "It is not supported to run the profiling version of a renderer (for example, `react-dom/profiling`) without also replacing the `scheduler/tracing` module with `scheduler/tracing-profiling`. Your bundler might have a setting for aliasing both modules. Learn more at https://reactjs.org/link/profiling" );
                }
              }
            }
            // ascending numbers so we can compare them like numbers. They start at 90 to
            // avoid clashing with Scheduler's priorities.

            var ImmediatePriority = 99;
            var UserBlockingPriority = 98;
            var NormalPriority = 97;
            var LowPriority = 96;
            var IdlePriority = 95; // NoPriority is the absence of priority. Also React-only.

            var NoPriority = 90;
            Scheduler_now(); // If the initial timestamp is reasonably small, use Scheduler's `now` directly.

            var SyncLanePriority = 15;
            var SyncBatchedLanePriority = 14;
            var InputDiscreteHydrationLanePriority = 13;
            var InputDiscreteLanePriority = 12;
            var InputContinuousHydrationLanePriority = 11;
            var InputContinuousLanePriority = 10;
            var DefaultHydrationLanePriority = 9;
            var DefaultLanePriority = 8;
            var TransitionHydrationPriority = 7;
            var TransitionPriority = 6;
            var RetryLanePriority = 5;
            var SelectiveHydrationLanePriority = 4;
            var IdleHydrationLanePriority = 3;
            var IdleLanePriority = 2;
            var OffscreenLanePriority = 1;
            var NoLanePriority = 0;
            var TotalLanes = 31;
            var NoLanes =
            /*                        */
            0;
            var NoLane =
            /*                          */
            0;
            var SyncLane =
            /*                        */
            1;
            var SyncBatchedLane =
            /*                 */
            2;
            var InputDiscreteHydrationLane =
            /*      */
            4;
            var InputDiscreteLanes =
            /*                    */
            24;
            var InputContinuousHydrationLane =
            /*           */
            32;
            var InputContinuousLanes =
            /*                  */
            192;
            var DefaultHydrationLane =
            /*            */
            256;
            var DefaultLanes =
            /*                   */
            3584;
            var TransitionHydrationLane =
            /*                */
            4096;
            var TransitionLanes =
            /*                       */
            4186112;
            var RetryLanes =
            /*                            */
            62914560;
            var SomeRetryLane =
            /*                  */
            33554432;
            var SelectiveHydrationLane =
            /*          */
            67108864;
            var NonIdleLanes =
            /*                                 */
            134217727;
            var IdleHydrationLane =
            /*               */
            134217728;
            var IdleLanes =
            /*                             */
            805306368;
            var OffscreenLane =
            /*                   */
            1073741824;
            var NoTimestamp = -1;
            function setCurrentUpdateLanePriority(newLanePriority) {
            } // "Registers" used to "return" multiple values
            // Used by getHighestPriorityLanes and getNextLanes:

            var return_highestLanePriority = DefaultLanePriority;

            function getHighestPriorityLanes(lanes) {
              if ((SyncLane & lanes) !== NoLanes) {
                return_highestLanePriority = SyncLanePriority;
                return SyncLane;
              }

              if ((SyncBatchedLane & lanes) !== NoLanes) {
                return_highestLanePriority = SyncBatchedLanePriority;
                return SyncBatchedLane;
              }

              if ((InputDiscreteHydrationLane & lanes) !== NoLanes) {
                return_highestLanePriority = InputDiscreteHydrationLanePriority;
                return InputDiscreteHydrationLane;
              }

              var inputDiscreteLanes = InputDiscreteLanes & lanes;

              if (inputDiscreteLanes !== NoLanes) {
                return_highestLanePriority = InputDiscreteLanePriority;
                return inputDiscreteLanes;
              }

              if ((lanes & InputContinuousHydrationLane) !== NoLanes) {
                return_highestLanePriority = InputContinuousHydrationLanePriority;
                return InputContinuousHydrationLane;
              }

              var inputContinuousLanes = InputContinuousLanes & lanes;

              if (inputContinuousLanes !== NoLanes) {
                return_highestLanePriority = InputContinuousLanePriority;
                return inputContinuousLanes;
              }

              if ((lanes & DefaultHydrationLane) !== NoLanes) {
                return_highestLanePriority = DefaultHydrationLanePriority;
                return DefaultHydrationLane;
              }

              var defaultLanes = DefaultLanes & lanes;

              if (defaultLanes !== NoLanes) {
                return_highestLanePriority = DefaultLanePriority;
                return defaultLanes;
              }

              if ((lanes & TransitionHydrationLane) !== NoLanes) {
                return_highestLanePriority = TransitionHydrationPriority;
                return TransitionHydrationLane;
              }

              var transitionLanes = TransitionLanes & lanes;

              if (transitionLanes !== NoLanes) {
                return_highestLanePriority = TransitionPriority;
                return transitionLanes;
              }

              var retryLanes = RetryLanes & lanes;

              if (retryLanes !== NoLanes) {
                return_highestLanePriority = RetryLanePriority;
                return retryLanes;
              }

              if (lanes & SelectiveHydrationLane) {
                return_highestLanePriority = SelectiveHydrationLanePriority;
                return SelectiveHydrationLane;
              }

              if ((lanes & IdleHydrationLane) !== NoLanes) {
                return_highestLanePriority = IdleHydrationLanePriority;
                return IdleHydrationLane;
              }

              var idleLanes = IdleLanes & lanes;

              if (idleLanes !== NoLanes) {
                return_highestLanePriority = IdleLanePriority;
                return idleLanes;
              }

              if ((OffscreenLane & lanes) !== NoLanes) {
                return_highestLanePriority = OffscreenLanePriority;
                return OffscreenLane;
              }

              {
                error('Should have found matching lanes. This is a bug in React.');
              } // This shouldn't be reachable, but as a fallback, return the entire bitmask.


              return_highestLanePriority = DefaultLanePriority;
              return lanes;
            }

            function schedulerPriorityToLanePriority(schedulerPriorityLevel) {
              switch (schedulerPriorityLevel) {
                case ImmediatePriority:
                  return SyncLanePriority;

                case UserBlockingPriority:
                  return InputContinuousLanePriority;

                case NormalPriority:
                case LowPriority:
                  // TODO: Handle LowSchedulerPriority, somehow. Maybe the same lane as hydration.
                  return DefaultLanePriority;

                case IdlePriority:
                  return IdleLanePriority;

                default:
                  return NoLanePriority;
              }
            }
            function lanePriorityToSchedulerPriority(lanePriority) {
              switch (lanePriority) {
                case SyncLanePriority:
                case SyncBatchedLanePriority:
                  return ImmediatePriority;

                case InputDiscreteHydrationLanePriority:
                case InputDiscreteLanePriority:
                case InputContinuousHydrationLanePriority:
                case InputContinuousLanePriority:
                  return UserBlockingPriority;

                case DefaultHydrationLanePriority:
                case DefaultLanePriority:
                case TransitionHydrationPriority:
                case TransitionPriority:
                case SelectiveHydrationLanePriority:
                case RetryLanePriority:
                  return NormalPriority;

                case IdleHydrationLanePriority:
                case IdleLanePriority:
                case OffscreenLanePriority:
                  return IdlePriority;

                case NoLanePriority:
                  return NoPriority;

                default:
                  {
                    {
                      throw Error( "Invalid update priority: " + lanePriority + ". This is a bug in React." );
                    }
                  }

              }
            }
            function getNextLanes(root, wipLanes) {
              // Early bailout if there's no pending work left.
              var pendingLanes = root.pendingLanes;

              if (pendingLanes === NoLanes) {
                return_highestLanePriority = NoLanePriority;
                return NoLanes;
              }

              var nextLanes = NoLanes;
              var nextLanePriority = NoLanePriority;
              var expiredLanes = root.expiredLanes;
              var suspendedLanes = root.suspendedLanes;
              var pingedLanes = root.pingedLanes; // Check if any work has expired.

              if (expiredLanes !== NoLanes) {
                nextLanes = expiredLanes;
                nextLanePriority = return_highestLanePriority = SyncLanePriority;
              } else {
                // Do not work on any idle work until all the non-idle work has finished,
                // even if the work is suspended.
                var nonIdlePendingLanes = pendingLanes & NonIdleLanes;

                if (nonIdlePendingLanes !== NoLanes) {
                  var nonIdleUnblockedLanes = nonIdlePendingLanes & ~suspendedLanes;

                  if (nonIdleUnblockedLanes !== NoLanes) {
                    nextLanes = getHighestPriorityLanes(nonIdleUnblockedLanes);
                    nextLanePriority = return_highestLanePriority;
                  } else {
                    var nonIdlePingedLanes = nonIdlePendingLanes & pingedLanes;

                    if (nonIdlePingedLanes !== NoLanes) {
                      nextLanes = getHighestPriorityLanes(nonIdlePingedLanes);
                      nextLanePriority = return_highestLanePriority;
                    }
                  }
                } else {
                  // The only remaining work is Idle.
                  var unblockedLanes = pendingLanes & ~suspendedLanes;

                  if (unblockedLanes !== NoLanes) {
                    nextLanes = getHighestPriorityLanes(unblockedLanes);
                    nextLanePriority = return_highestLanePriority;
                  } else {
                    if (pingedLanes !== NoLanes) {
                      nextLanes = getHighestPriorityLanes(pingedLanes);
                      nextLanePriority = return_highestLanePriority;
                    }
                  }
                }
              }

              if (nextLanes === NoLanes) {
                // This should only be reachable if we're suspended
                // TODO: Consider warning in this path if a fallback timer is not scheduled.
                return NoLanes;
              } // If there are higher priority lanes, we'll include them even if they
              // are suspended.


              nextLanes = pendingLanes & getEqualOrHigherPriorityLanes(nextLanes); // If we're already in the middle of a render, switching lanes will interrupt
              // it and we'll lose our progress. We should only do this if the new lanes are
              // higher priority.

              if (wipLanes !== NoLanes && wipLanes !== nextLanes && // If we already suspended with a delay, then interrupting is fine. Don't
              // bother waiting until the root is complete.
              (wipLanes & suspendedLanes) === NoLanes) {
                getHighestPriorityLanes(wipLanes);
                var wipLanePriority = return_highestLanePriority;

                if (nextLanePriority <= wipLanePriority) {
                  return wipLanes;
                } else {
                  return_highestLanePriority = nextLanePriority;
                }
              } // Check for entangled lanes and add them to the batch.
              //
              // A lane is said to be entangled with another when it's not allowed to render
              // in a batch that does not also include the other lane. Typically we do this
              // when multiple updates have the same source, and we only want to respond to
              // the most recent event from that source.
              //
              // Note that we apply entanglements *after* checking for partial work above.
              // This means that if a lane is entangled during an interleaved event while
              // it's already rendering, we won't interrupt it. This is intentional, since
              // entanglement is usually "best effort": we'll try our best to render the
              // lanes in the same batch, but it's not worth throwing out partially
              // completed work in order to do it.
              //
              // For those exceptions where entanglement is semantically important, like
              // useMutableSource, we should ensure that there is no partial work at the
              // time we apply the entanglement.


              var entangledLanes = root.entangledLanes;

              if (entangledLanes !== NoLanes) {
                var entanglements = root.entanglements;
                var lanes = nextLanes & entangledLanes;

                while (lanes > 0) {
                  var index = pickArbitraryLaneIndex(lanes);
                  var lane = 1 << index;
                  nextLanes |= entanglements[index];
                  lanes &= ~lane;
                }
              }

              return nextLanes;
            }
            function getMostRecentEventTime(root, lanes) {
              var eventTimes = root.eventTimes;
              var mostRecentEventTime = NoTimestamp;

              while (lanes > 0) {
                var index = pickArbitraryLaneIndex(lanes);
                var lane = 1 << index;
                var eventTime = eventTimes[index];

                if (eventTime > mostRecentEventTime) {
                  mostRecentEventTime = eventTime;
                }

                lanes &= ~lane;
              }

              return mostRecentEventTime;
            }

            function computeExpirationTime(lane, currentTime) {
              // TODO: Expiration heuristic is constant per lane, so could use a map.
              getHighestPriorityLanes(lane);
              var priority = return_highestLanePriority;

              if (priority >= InputContinuousLanePriority) {
                // User interactions should expire slightly more quickly.
                //
                // NOTE: This is set to the corresponding constant as in Scheduler.js. When
                // we made it larger, a product metric in www regressed, suggesting there's
                // a user interaction that's being starved by a series of synchronous
                // updates. If that theory is correct, the proper solution is to fix the
                // starvation. However, this scenario supports the idea that expiration
                // times are an important safeguard when starvation does happen.
                //
                // Also note that, in the case of user input specifically, this will soon no
                // longer be an issue because we plan to make user input synchronous by
                // default (until you enter `startTransition`, of course.)
                //
                // If weren't planning to make these updates synchronous soon anyway, I
                // would probably make this number a configurable parameter.
                return currentTime + 250;
              } else if (priority >= TransitionPriority) {
                return currentTime + 5000;
              } else {
                // Anything idle priority or lower should never expire.
                return NoTimestamp;
              }
            }

            function markStarvedLanesAsExpired(root, currentTime) {
              // TODO: This gets called every time we yield. We can optimize by storing
              // the earliest expiration time on the root. Then use that to quickly bail out
              // of this function.
              var pendingLanes = root.pendingLanes;
              var suspendedLanes = root.suspendedLanes;
              var pingedLanes = root.pingedLanes;
              var expirationTimes = root.expirationTimes; // Iterate through the pending lanes and check if we've reached their
              // expiration time. If so, we'll assume the update is being starved and mark
              // it as expired to force it to finish.

              var lanes = pendingLanes;

              while (lanes > 0) {
                var index = pickArbitraryLaneIndex(lanes);
                var lane = 1 << index;
                var expirationTime = expirationTimes[index];

                if (expirationTime === NoTimestamp) {
                  // Found a pending lane with no expiration time. If it's not suspended, or
                  // if it's pinged, assume it's CPU-bound. Compute a new expiration time
                  // using the current time.
                  if ((lane & suspendedLanes) === NoLanes || (lane & pingedLanes) !== NoLanes) {
                    // Assumes timestamps are monotonically increasing.
                    expirationTimes[index] = computeExpirationTime(lane, currentTime);
                  }
                } else if (expirationTime <= currentTime) {
                  // This lane expired
                  root.expiredLanes |= lane;
                }

                lanes &= ~lane;
              }
            } // This returns the highest priority pending lanes regardless of whether they
            function getLanesToRetrySynchronouslyOnError(root) {
              var everythingButOffscreen = root.pendingLanes & ~OffscreenLane;

              if (everythingButOffscreen !== NoLanes) {
                return everythingButOffscreen;
              }

              if (everythingButOffscreen & OffscreenLane) {
                return OffscreenLane;
              }

              return NoLanes;
            }
            function returnNextLanesPriority() {
              return return_highestLanePriority;
            }
            function includesNonIdleWork(lanes) {
              return (lanes & NonIdleLanes) !== NoLanes;
            }
            function includesOnlyRetries(lanes) {
              return (lanes & RetryLanes) === lanes;
            }
            function includesOnlyTransitions(lanes) {
              return (lanes & TransitionLanes) === lanes;
            } // To ensure consistency across multiple updates in the same event, this should
            // be a pure function, so that it always returns the same lane for given inputs.

            function findUpdateLane(lanePriority, wipLanes) {
              switch (lanePriority) {
                case NoLanePriority:
                  break;

                case SyncLanePriority:
                  return SyncLane;

                case SyncBatchedLanePriority:
                  return SyncBatchedLane;

                case InputDiscreteLanePriority:
                  {
                    var _lane = pickArbitraryLane(InputDiscreteLanes & ~wipLanes);

                    if (_lane === NoLane) {
                      // Shift to the next priority level
                      return findUpdateLane(InputContinuousLanePriority, wipLanes);
                    }

                    return _lane;
                  }

                case InputContinuousLanePriority:
                  {
                    var _lane2 = pickArbitraryLane(InputContinuousLanes & ~wipLanes);

                    if (_lane2 === NoLane) {
                      // Shift to the next priority level
                      return findUpdateLane(DefaultLanePriority, wipLanes);
                    }

                    return _lane2;
                  }

                case DefaultLanePriority:
                  {
                    var _lane3 = pickArbitraryLane(DefaultLanes & ~wipLanes);

                    if (_lane3 === NoLane) {
                      // If all the default lanes are already being worked on, look for a
                      // lane in the transition range.
                      _lane3 = pickArbitraryLane(TransitionLanes & ~wipLanes);

                      if (_lane3 === NoLane) {
                        // All the transition lanes are taken, too. This should be very
                        // rare, but as a last resort, pick a default lane. This will have
                        // the effect of interrupting the current work-in-progress render.
                        _lane3 = pickArbitraryLane(DefaultLanes);
                      }
                    }

                    return _lane3;
                  }

                case TransitionPriority: // Should be handled by findTransitionLane instead

                case RetryLanePriority:
                  // Should be handled by findRetryLane instead
                  break;

                case IdleLanePriority:
                  var lane = pickArbitraryLane(IdleLanes & ~wipLanes);

                  if (lane === NoLane) {
                    lane = pickArbitraryLane(IdleLanes);
                  }

                  return lane;
              }

              {
                {
                  throw Error( "Invalid update priority: " + lanePriority + ". This is a bug in React." );
                }
              }
            } // To ensure consistency across multiple updates in the same event, this should
            // be pure function, so that it always returns the same lane for given inputs.

            function findTransitionLane(wipLanes, pendingLanes) {
              // First look for lanes that are completely unclaimed, i.e. have no
              // pending work.
              var lane = pickArbitraryLane(TransitionLanes & ~pendingLanes);

              if (lane === NoLane) {
                // If all lanes have pending work, look for a lane that isn't currently
                // being worked on.
                lane = pickArbitraryLane(TransitionLanes & ~wipLanes);

                if (lane === NoLane) {
                  // If everything is being worked on, pick any lane. This has the
                  // effect of interrupting the current work-in-progress.
                  lane = pickArbitraryLane(TransitionLanes);
                }
              }

              return lane;
            } // To ensure consistency across multiple updates in the same event, this should
            // be pure function, so that it always returns the same lane for given inputs.

            function findRetryLane(wipLanes) {
              // This is a fork of `findUpdateLane` designed specifically for Suspense
              // "retries" — a special update that attempts to flip a Suspense boundary
              // from its placeholder state to its primary/resolved state.
              var lane = pickArbitraryLane(RetryLanes & ~wipLanes);

              if (lane === NoLane) {
                lane = pickArbitraryLane(RetryLanes);
              }

              return lane;
            }

            function getHighestPriorityLane(lanes) {
              return lanes & -lanes;
            }

            function getLowestPriorityLane(lanes) {
              // This finds the most significant non-zero bit.
              var index = 31 - clz32(lanes);
              return index < 0 ? NoLanes : 1 << index;
            }

            function getEqualOrHigherPriorityLanes(lanes) {
              return (getLowestPriorityLane(lanes) << 1) - 1;
            }

            function pickArbitraryLane(lanes) {
              // This wrapper function gets inlined. Only exists so to communicate that it
              // doesn't matter which bit is selected; you can pick any bit without
              // affecting the algorithms where its used. Here I'm using
              // getHighestPriorityLane because it requires the fewest operations.
              return getHighestPriorityLane(lanes);
            }

            function pickArbitraryLaneIndex(lanes) {
              return 31 - clz32(lanes);
            }

            function laneToIndex(lane) {
              return pickArbitraryLaneIndex(lane);
            }

            function includesSomeLane(a, b) {
              return (a & b) !== NoLanes;
            }
            function isSubsetOfLanes(set, subset) {
              return (set & subset) === subset;
            }
            function mergeLanes(a, b) {
              return a | b;
            }
            function removeLanes(set, subset) {
              return set & ~subset;
            } // Seems redundant, but it changes the type from a single lane (used for
            // updates) to a group of lanes (used for flushing work).

            function laneToLanes(lane) {
              return lane;
            }
            function higherPriorityLane(a, b) {
              // This works because the bit ranges decrease in priority as you go left.
              return a !== NoLane && a < b ? a : b;
            }
            function createLaneMap(initial) {
              // Intentionally pushing one by one.
              // https://v8.dev/blog/elements-kinds#avoid-creating-holes
              var laneMap = [];

              for (var i = 0; i < TotalLanes; i++) {
                laneMap.push(initial);
              }

              return laneMap;
            }
            function markRootUpdated(root, updateLane, eventTime) {
              root.pendingLanes |= updateLane; // TODO: Theoretically, any update to any lane can unblock any other lane. But
              // it's not practical to try every single possible combination. We need a
              // heuristic to decide which lanes to attempt to render, and in which batches.
              // For now, we use the same heuristic as in the old ExpirationTimes model:
              // retry any lane at equal or lower priority, but don't try updates at higher
              // priority without also including the lower priority updates. This works well
              // when considering updates across different priority levels, but isn't
              // sufficient for updates within the same priority, since we want to treat
              // those updates as parallel.
              // Unsuspend any update at equal or lower priority.

              var higherPriorityLanes = updateLane - 1; // Turns 0b1000 into 0b0111

              root.suspendedLanes &= higherPriorityLanes;
              root.pingedLanes &= higherPriorityLanes;
              var eventTimes = root.eventTimes;
              var index = laneToIndex(updateLane); // We can always overwrite an existing timestamp because we prefer the most
              // recent event, and we assume time is monotonically increasing.

              eventTimes[index] = eventTime;
            }
            function markRootSuspended(root, suspendedLanes) {
              root.suspendedLanes |= suspendedLanes;
              root.pingedLanes &= ~suspendedLanes; // The suspended lanes are no longer CPU-bound. Clear their expiration times.

              var expirationTimes = root.expirationTimes;
              var lanes = suspendedLanes;

              while (lanes > 0) {
                var index = pickArbitraryLaneIndex(lanes);
                var lane = 1 << index;
                expirationTimes[index] = NoTimestamp;
                lanes &= ~lane;
              }
            }
            function markRootPinged(root, pingedLanes, eventTime) {
              root.pingedLanes |= root.suspendedLanes & pingedLanes;
            }
            function markDiscreteUpdatesExpired(root) {
              root.expiredLanes |= InputDiscreteLanes & root.pendingLanes;
            }
            function hasDiscreteLanes(lanes) {
              return (lanes & InputDiscreteLanes) !== NoLanes;
            }
            function markRootMutableRead(root, updateLane) {
              root.mutableReadLanes |= updateLane & root.pendingLanes;
            }
            function markRootFinished(root, remainingLanes) {
              var noLongerPendingLanes = root.pendingLanes & ~remainingLanes;
              root.pendingLanes = remainingLanes; // Let's try everything again

              root.suspendedLanes = 0;
              root.pingedLanes = 0;
              root.expiredLanes &= remainingLanes;
              root.mutableReadLanes &= remainingLanes;
              root.entangledLanes &= remainingLanes;
              var entanglements = root.entanglements;
              var eventTimes = root.eventTimes;
              var expirationTimes = root.expirationTimes; // Clear the lanes that no longer have pending work

              var lanes = noLongerPendingLanes;

              while (lanes > 0) {
                var index = pickArbitraryLaneIndex(lanes);
                var lane = 1 << index;
                entanglements[index] = NoLanes;
                eventTimes[index] = NoTimestamp;
                expirationTimes[index] = NoTimestamp;
                lanes &= ~lane;
              }
            }
            function markRootEntangled(root, entangledLanes) {
              root.entangledLanes |= entangledLanes;
              var entanglements = root.entanglements;
              var lanes = entangledLanes;

              while (lanes > 0) {
                var index = pickArbitraryLaneIndex(lanes);
                var lane = 1 << index;
                entanglements[index] |= entangledLanes;
                lanes &= ~lane;
              }
            }
            var clz32 = Math.clz32 ? Math.clz32 : clz32Fallback; // Count leading zeros. Only used on lanes, so assume input is an integer.
            // Based on:
            // https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Math/clz32

            var log = Math.log;
            var LN2 = Math.LN2;

            function clz32Fallback(lanes) {
              if (lanes === 0) {
                return 32;
              }

              return 31 - (log(lanes) / LN2 | 0) | 0;
            }

            // Intentionally not named imports because Rollup would use dynamic dispatch for
            var UserBlockingPriority$1 = Scheduler.unstable_UserBlockingPriority,
                runWithPriority = Scheduler.unstable_runWithPriority; // TODO: can we stop exporting these?

            var _enabled = true; // This is exported in FB builds for use by legacy FB layer infra.
            // We'd like to remove this but it's not clear if this is safe.

            function setEnabled(enabled) {
              _enabled = !!enabled;
            }
            function isEnabled() {
              return _enabled;
            }
            function createEventListenerWrapperWithPriority(targetContainer, domEventName, eventSystemFlags) {
              var eventPriority = getEventPriorityForPluginSystem(domEventName);
              var listenerWrapper;

              switch (eventPriority) {
                case DiscreteEvent:
                  listenerWrapper = dispatchDiscreteEvent;
                  break;

                case UserBlockingEvent:
                  listenerWrapper = dispatchUserBlockingUpdate;
                  break;

                case ContinuousEvent:
                default:
                  listenerWrapper = dispatchEvent;
                  break;
              }

              return listenerWrapper.bind(null, domEventName, eventSystemFlags, targetContainer);
            }

            function dispatchDiscreteEvent(domEventName, eventSystemFlags, container, nativeEvent) {
              {
                flushDiscreteUpdatesIfNeeded(nativeEvent.timeStamp);
              }

              discreteUpdates(dispatchEvent, domEventName, eventSystemFlags, container, nativeEvent);
            }

            function dispatchUserBlockingUpdate(domEventName, eventSystemFlags, container, nativeEvent) {
              {
                runWithPriority(UserBlockingPriority$1, dispatchEvent.bind(null, domEventName, eventSystemFlags, container, nativeEvent));
              }
            }

            function dispatchEvent(domEventName, eventSystemFlags, targetContainer, nativeEvent) {
              if (!_enabled) {
                return;
              }

              var allowReplay = true;

              {
                // TODO: replaying capture phase events is currently broken
                // because we used to do it during top-level native bubble handlers
                // but now we use different bubble and capture handlers.
                // In eager mode, we attach capture listeners early, so we need
                // to filter them out until we fix the logic to handle them correctly.
                // This could've been outside the flag but I put it inside to reduce risk.
                allowReplay = (eventSystemFlags & IS_CAPTURE_PHASE) === 0;
              }

              if (allowReplay && hasQueuedDiscreteEvents() && isReplayableDiscreteEvent(domEventName)) {
                // If we already have a queue of discrete events, and this is another discrete
                // event, then we can't dispatch it regardless of its target, since they
                // need to dispatch in order.
                queueDiscreteEvent(null, // Flags that we're not actually blocked on anything as far as we know.
                domEventName, eventSystemFlags, targetContainer, nativeEvent);
                return;
              }

              var blockedOn = attemptToDispatchEvent(domEventName, eventSystemFlags, targetContainer, nativeEvent);

              if (blockedOn === null) {
                // We successfully dispatched this event.
                if (allowReplay) {
                  clearIfContinuousEvent(domEventName, nativeEvent);
                }

                return;
              }

              if (allowReplay) {
                if (isReplayableDiscreteEvent(domEventName)) {
                  // This this to be replayed later once the target is available.
                  queueDiscreteEvent(blockedOn, domEventName, eventSystemFlags, targetContainer, nativeEvent);
                  return;
                }

                if (queueIfContinuousEvent(blockedOn, domEventName, eventSystemFlags, targetContainer, nativeEvent)) {
                  return;
                } // We need to clear only if we didn't queue because
                // queueing is accummulative.


                clearIfContinuousEvent(domEventName, nativeEvent);
              } // This is not replayable so we'll invoke it but without a target,
              // in case the event system needs to trace it.


              dispatchEventForPluginEventSystem(domEventName, eventSystemFlags, nativeEvent, null, targetContainer);
            } // Attempt dispatching an event. Returns a SuspenseInstance or Container if it's blocked.

            function attemptToDispatchEvent(domEventName, eventSystemFlags, targetContainer, nativeEvent) {
              // TODO: Warn if _enabled is false.
              var nativeEventTarget = getEventTarget(nativeEvent);
              var targetInst = getClosestInstanceFromNode(nativeEventTarget);

              if (targetInst !== null) {
                var nearestMounted = getNearestMountedFiber(targetInst);

                if (nearestMounted === null) {
                  // This tree has been unmounted already. Dispatch without a target.
                  targetInst = null;
                } else {
                  var tag = nearestMounted.tag;

                  if (tag === SuspenseComponent) {
                    var instance = getSuspenseInstanceFromFiber(nearestMounted);

                    if (instance !== null) {
                      // Queue the event to be replayed later. Abort dispatching since we
                      // don't want this event dispatched twice through the event system.
                      // TODO: If this is the first discrete event in the queue. Schedule an increased
                      // priority for this boundary.
                      return instance;
                    } // This shouldn't happen, something went wrong but to avoid blocking
                    // the whole system, dispatch the event without a target.
                    // TODO: Warn.


                    targetInst = null;
                  } else if (tag === HostRoot) {
                    var root = nearestMounted.stateNode;

                    if (root.hydrate) {
                      // If this happens during a replay something went wrong and it might block
                      // the whole system.
                      return getContainerFromFiber(nearestMounted);
                    }

                    targetInst = null;
                  } else if (nearestMounted !== targetInst) {
                    // If we get an event (ex: img onload) before committing that
                    // component's mount, ignore it for now (that is, treat it as if it was an
                    // event on a non-React tree). We might also consider queueing events and
                    // dispatching them after the mount.
                    targetInst = null;
                  }
                }
              }

              dispatchEventForPluginEventSystem(domEventName, eventSystemFlags, nativeEvent, targetInst, targetContainer); // We're not blocked on anything.

              return null;
            }

            function addEventBubbleListener(target, eventType, listener) {
              target.addEventListener(eventType, listener, false);
              return listener;
            }
            function addEventCaptureListener(target, eventType, listener) {
              target.addEventListener(eventType, listener, true);
              return listener;
            }
            function addEventCaptureListenerWithPassiveFlag(target, eventType, listener, passive) {
              target.addEventListener(eventType, listener, {
                capture: true,
                passive: passive
              });
              return listener;
            }
            function addEventBubbleListenerWithPassiveFlag(target, eventType, listener, passive) {
              target.addEventListener(eventType, listener, {
                passive: passive
              });
              return listener;
            }

            /**
             * These variables store information about text content of a target node,
             * allowing comparison of content before and after a given event.
             *
             * Identify the node where selection currently begins, then observe
             * both its text content and its current position in the DOM. Since the
             * browser may natively replace the target node during composition, we can
             * use its position to find its replacement.
             *
             *
             */
            var root = null;
            var startText = null;
            var fallbackText = null;
            function initialize(nativeEventTarget) {
              root = nativeEventTarget;
              startText = getText();
              return true;
            }
            function reset() {
              root = null;
              startText = null;
              fallbackText = null;
            }
            function getData() {
              if (fallbackText) {
                return fallbackText;
              }

              var start;
              var startValue = startText;
              var startLength = startValue.length;
              var end;
              var endValue = getText();
              var endLength = endValue.length;

              for (start = 0; start < startLength; start++) {
                if (startValue[start] !== endValue[start]) {
                  break;
                }
              }

              var minEnd = startLength - start;

              for (end = 1; end <= minEnd; end++) {
                if (startValue[startLength - end] !== endValue[endLength - end]) {
                  break;
                }
              }

              var sliceTail = end > 1 ? 1 - end : undefined;
              fallbackText = endValue.slice(start, sliceTail);
              return fallbackText;
            }
            function getText() {
              if ('value' in root) {
                return root.value;
              }

              return root.textContent;
            }

            /**
             * `charCode` represents the actual "character code" and is safe to use with
             * `String.fromCharCode`. As such, only keys that correspond to printable
             * characters produce a valid `charCode`, the only exception to this is Enter.
             * The Tab-key is considered non-printable and does not have a `charCode`,
             * presumably because it does not produce a tab-character in browsers.
             *
             * @param {object} nativeEvent Native browser event.
             * @return {number} Normalized `charCode` property.
             */
            function getEventCharCode(nativeEvent) {
              var charCode;
              var keyCode = nativeEvent.keyCode;

              if ('charCode' in nativeEvent) {
                charCode = nativeEvent.charCode; // FF does not set `charCode` for the Enter-key, check against `keyCode`.

                if (charCode === 0 && keyCode === 13) {
                  charCode = 13;
                }
              } else {
                // IE8 does not implement `charCode`, but `keyCode` has the correct value.
                charCode = keyCode;
              } // IE and Edge (on Windows) and Chrome / Safari (on Windows and Linux)
              // report Enter as charCode 10 when ctrl is pressed.


              if (charCode === 10) {
                charCode = 13;
              } // Some non-printable keys are reported in `charCode`/`keyCode`, discard them.
              // Must not discard the (non-)printable Enter-key.


              if (charCode >= 32 || charCode === 13) {
                return charCode;
              }

              return 0;
            }

            function functionThatReturnsTrue() {
              return true;
            }

            function functionThatReturnsFalse() {
              return false;
            } // This is intentionally a factory so that we have different returned constructors.
            // If we had a single constructor, it would be megamorphic and engines would deopt.


            function createSyntheticEvent(Interface) {
              /**
               * Synthetic events are dispatched by event plugins, typically in response to a
               * top-level event delegation handler.
               *
               * These systems should generally use pooling to reduce the frequency of garbage
               * collection. The system should check `isPersistent` to determine whether the
               * event should be released into the pool after being dispatched. Users that
               * need a persisted event should invoke `persist`.
               *
               * Synthetic events (and subclasses) implement the DOM Level 3 Events API by
               * normalizing browser quirks. Subclasses do not necessarily have to implement a
               * DOM interface; custom application-specific events can also subclass this.
               */
              function SyntheticBaseEvent(reactName, reactEventType, targetInst, nativeEvent, nativeEventTarget) {
                this._reactName = reactName;
                this._targetInst = targetInst;
                this.type = reactEventType;
                this.nativeEvent = nativeEvent;
                this.target = nativeEventTarget;
                this.currentTarget = null;

                for (var _propName in Interface) {
                  if (!Interface.hasOwnProperty(_propName)) {
                    continue;
                  }

                  var normalize = Interface[_propName];

                  if (normalize) {
                    this[_propName] = normalize(nativeEvent);
                  } else {
                    this[_propName] = nativeEvent[_propName];
                  }
                }

                var defaultPrevented = nativeEvent.defaultPrevented != null ? nativeEvent.defaultPrevented : nativeEvent.returnValue === false;

                if (defaultPrevented) {
                  this.isDefaultPrevented = functionThatReturnsTrue;
                } else {
                  this.isDefaultPrevented = functionThatReturnsFalse;
                }

                this.isPropagationStopped = functionThatReturnsFalse;
                return this;
              }

              _assign(SyntheticBaseEvent.prototype, {
                preventDefault: function () {
                  this.defaultPrevented = true;
                  var event = this.nativeEvent;

                  if (!event) {
                    return;
                  }

                  if (event.preventDefault) {
                    event.preventDefault(); // $FlowFixMe - flow is not aware of `unknown` in IE
                  } else if (typeof event.returnValue !== 'unknown') {
                    event.returnValue = false;
                  }

                  this.isDefaultPrevented = functionThatReturnsTrue;
                },
                stopPropagation: function () {
                  var event = this.nativeEvent;

                  if (!event) {
                    return;
                  }

                  if (event.stopPropagation) {
                    event.stopPropagation(); // $FlowFixMe - flow is not aware of `unknown` in IE
                  } else if (typeof event.cancelBubble !== 'unknown') {
                    // The ChangeEventPlugin registers a "propertychange" event for
                    // IE. This event does not support bubbling or cancelling, and
                    // any references to cancelBubble throw "Member not found".  A
                    // typeof check of "unknown" circumvents this issue (and is also
                    // IE specific).
                    event.cancelBubble = true;
                  }

                  this.isPropagationStopped = functionThatReturnsTrue;
                },

                /**
                 * We release all dispatched `SyntheticEvent`s after each event loop, adding
                 * them back into the pool. This allows a way to hold onto a reference that
                 * won't be added back into the pool.
                 */
                persist: function () {// Modern event system doesn't use pooling.
                },

                /**
                 * Checks if this event should be released back into the pool.
                 *
                 * @return {boolean} True if this should not be released, false otherwise.
                 */
                isPersistent: functionThatReturnsTrue
              });

              return SyntheticBaseEvent;
            }
            /**
             * @interface Event
             * @see http://www.w3.org/TR/DOM-Level-3-Events/
             */


            var EventInterface = {
              eventPhase: 0,
              bubbles: 0,
              cancelable: 0,
              timeStamp: function (event) {
                return event.timeStamp || Date.now();
              },
              defaultPrevented: 0,
              isTrusted: 0
            };
            var SyntheticEvent = createSyntheticEvent(EventInterface);

            var UIEventInterface = _assign({}, EventInterface, {
              view: 0,
              detail: 0
            });

            var SyntheticUIEvent = createSyntheticEvent(UIEventInterface);
            var lastMovementX;
            var lastMovementY;
            var lastMouseEvent;

            function updateMouseMovementPolyfillState(event) {
              if (event !== lastMouseEvent) {
                if (lastMouseEvent && event.type === 'mousemove') {
                  lastMovementX = event.screenX - lastMouseEvent.screenX;
                  lastMovementY = event.screenY - lastMouseEvent.screenY;
                } else {
                  lastMovementX = 0;
                  lastMovementY = 0;
                }

                lastMouseEvent = event;
              }
            }
            /**
             * @interface MouseEvent
             * @see http://www.w3.org/TR/DOM-Level-3-Events/
             */


            var MouseEventInterface = _assign({}, UIEventInterface, {
              screenX: 0,
              screenY: 0,
              clientX: 0,
              clientY: 0,
              pageX: 0,
              pageY: 0,
              ctrlKey: 0,
              shiftKey: 0,
              altKey: 0,
              metaKey: 0,
              getModifierState: getEventModifierState,
              button: 0,
              buttons: 0,
              relatedTarget: function (event) {
                if (event.relatedTarget === undefined) return event.fromElement === event.srcElement ? event.toElement : event.fromElement;
                return event.relatedTarget;
              },
              movementX: function (event) {
                if ('movementX' in event) {
                  return event.movementX;
                }

                updateMouseMovementPolyfillState(event);
                return lastMovementX;
              },
              movementY: function (event) {
                if ('movementY' in event) {
                  return event.movementY;
                } // Don't need to call updateMouseMovementPolyfillState() here
                // because it's guaranteed to have already run when movementX
                // was copied.


                return lastMovementY;
              }
            });

            var SyntheticMouseEvent = createSyntheticEvent(MouseEventInterface);
            /**
             * @interface DragEvent
             * @see http://www.w3.org/TR/DOM-Level-3-Events/
             */

            var DragEventInterface = _assign({}, MouseEventInterface, {
              dataTransfer: 0
            });

            var SyntheticDragEvent = createSyntheticEvent(DragEventInterface);
            /**
             * @interface FocusEvent
             * @see http://www.w3.org/TR/DOM-Level-3-Events/
             */

            var FocusEventInterface = _assign({}, UIEventInterface, {
              relatedTarget: 0
            });

            var SyntheticFocusEvent = createSyntheticEvent(FocusEventInterface);
            /**
             * @interface Event
             * @see http://www.w3.org/TR/css3-animations/#AnimationEvent-interface
             * @see https://developer.mozilla.org/en-US/docs/Web/API/AnimationEvent
             */

            var AnimationEventInterface = _assign({}, EventInterface, {
              animationName: 0,
              elapsedTime: 0,
              pseudoElement: 0
            });

            var SyntheticAnimationEvent = createSyntheticEvent(AnimationEventInterface);
            /**
             * @interface Event
             * @see http://www.w3.org/TR/clipboard-apis/
             */

            var ClipboardEventInterface = _assign({}, EventInterface, {
              clipboardData: function (event) {
                return 'clipboardData' in event ? event.clipboardData : window.clipboardData;
              }
            });

            var SyntheticClipboardEvent = createSyntheticEvent(ClipboardEventInterface);
            /**
             * @interface Event
             * @see http://www.w3.org/TR/DOM-Level-3-Events/#events-compositionevents
             */

            var CompositionEventInterface = _assign({}, EventInterface, {
              data: 0
            });

            var SyntheticCompositionEvent = createSyntheticEvent(CompositionEventInterface);
            /**
             * @interface Event
             * @see http://www.w3.org/TR/2013/WD-DOM-Level-3-Events-20131105
             *      /#events-inputevents
             */
            // Happens to share the same list for now.

            var SyntheticInputEvent = SyntheticCompositionEvent;
            /**
             * Normalization of deprecated HTML5 `key` values
             * @see https://developer.mozilla.org/en-US/docs/Web/API/KeyboardEvent#Key_names
             */

            var normalizeKey = {
              Esc: 'Escape',
              Spacebar: ' ',
              Left: 'ArrowLeft',
              Up: 'ArrowUp',
              Right: 'ArrowRight',
              Down: 'ArrowDown',
              Del: 'Delete',
              Win: 'OS',
              Menu: 'ContextMenu',
              Apps: 'ContextMenu',
              Scroll: 'ScrollLock',
              MozPrintableKey: 'Unidentified'
            };
            /**
             * Translation from legacy `keyCode` to HTML5 `key`
             * Only special keys supported, all others depend on keyboard layout or browser
             * @see https://developer.mozilla.org/en-US/docs/Web/API/KeyboardEvent#Key_names
             */

            var translateToKey = {
              '8': 'Backspace',
              '9': 'Tab',
              '12': 'Clear',
              '13': 'Enter',
              '16': 'Shift',
              '17': 'Control',
              '18': 'Alt',
              '19': 'Pause',
              '20': 'CapsLock',
              '27': 'Escape',
              '32': ' ',
              '33': 'PageUp',
              '34': 'PageDown',
              '35': 'End',
              '36': 'Home',
              '37': 'ArrowLeft',
              '38': 'ArrowUp',
              '39': 'ArrowRight',
              '40': 'ArrowDown',
              '45': 'Insert',
              '46': 'Delete',
              '112': 'F1',
              '113': 'F2',
              '114': 'F3',
              '115': 'F4',
              '116': 'F5',
              '117': 'F6',
              '118': 'F7',
              '119': 'F8',
              '120': 'F9',
              '121': 'F10',
              '122': 'F11',
              '123': 'F12',
              '144': 'NumLock',
              '145': 'ScrollLock',
              '224': 'Meta'
            };
            /**
             * @param {object} nativeEvent Native browser event.
             * @return {string} Normalized `key` property.
             */

            function getEventKey(nativeEvent) {
              if (nativeEvent.key) {
                // Normalize inconsistent values reported by browsers due to
                // implementations of a working draft specification.
                // FireFox implements `key` but returns `MozPrintableKey` for all
                // printable characters (normalized to `Unidentified`), ignore it.
                var key = normalizeKey[nativeEvent.key] || nativeEvent.key;

                if (key !== 'Unidentified') {
                  return key;
                }
              } // Browser does not implement `key`, polyfill as much of it as we can.


              if (nativeEvent.type === 'keypress') {
                var charCode = getEventCharCode(nativeEvent); // The enter-key is technically both printable and non-printable and can
                // thus be captured by `keypress`, no other non-printable key should.

                return charCode === 13 ? 'Enter' : String.fromCharCode(charCode);
              }

              if (nativeEvent.type === 'keydown' || nativeEvent.type === 'keyup') {
                // While user keyboard layout determines the actual meaning of each
                // `keyCode` value, almost all function keys have a universal value.
                return translateToKey[nativeEvent.keyCode] || 'Unidentified';
              }

              return '';
            }
            /**
             * Translation from modifier key to the associated property in the event.
             * @see http://www.w3.org/TR/DOM-Level-3-Events/#keys-Modifiers
             */


            var modifierKeyToProp = {
              Alt: 'altKey',
              Control: 'ctrlKey',
              Meta: 'metaKey',
              Shift: 'shiftKey'
            }; // Older browsers (Safari <= 10, iOS Safari <= 10.2) do not support
            // getModifierState. If getModifierState is not supported, we map it to a set of
            // modifier keys exposed by the event. In this case, Lock-keys are not supported.

            function modifierStateGetter(keyArg) {
              var syntheticEvent = this;
              var nativeEvent = syntheticEvent.nativeEvent;

              if (nativeEvent.getModifierState) {
                return nativeEvent.getModifierState(keyArg);
              }

              var keyProp = modifierKeyToProp[keyArg];
              return keyProp ? !!nativeEvent[keyProp] : false;
            }

            function getEventModifierState(nativeEvent) {
              return modifierStateGetter;
            }
            /**
             * @interface KeyboardEvent
             * @see http://www.w3.org/TR/DOM-Level-3-Events/
             */


            var KeyboardEventInterface = _assign({}, UIEventInterface, {
              key: getEventKey,
              code: 0,
              location: 0,
              ctrlKey: 0,
              shiftKey: 0,
              altKey: 0,
              metaKey: 0,
              repeat: 0,
              locale: 0,
              getModifierState: getEventModifierState,
              // Legacy Interface
              charCode: function (event) {
                // `charCode` is the result of a KeyPress event and represents the value of
                // the actual printable character.
                // KeyPress is deprecated, but its replacement is not yet final and not
                // implemented in any major browser. Only KeyPress has charCode.
                if (event.type === 'keypress') {
                  return getEventCharCode(event);
                }

                return 0;
              },
              keyCode: function (event) {
                // `keyCode` is the result of a KeyDown/Up event and represents the value of
                // physical keyboard key.
                // The actual meaning of the value depends on the users' keyboard layout
                // which cannot be detected. Assuming that it is a US keyboard layout
                // provides a surprisingly accurate mapping for US and European users.
                // Due to this, it is left to the user to implement at this time.
                if (event.type === 'keydown' || event.type === 'keyup') {
                  return event.keyCode;
                }

                return 0;
              },
              which: function (event) {
                // `which` is an alias for either `keyCode` or `charCode` depending on the
                // type of the event.
                if (event.type === 'keypress') {
                  return getEventCharCode(event);
                }

                if (event.type === 'keydown' || event.type === 'keyup') {
                  return event.keyCode;
                }

                return 0;
              }
            });

            var SyntheticKeyboardEvent = createSyntheticEvent(KeyboardEventInterface);
            /**
             * @interface PointerEvent
             * @see http://www.w3.org/TR/pointerevents/
             */

            var PointerEventInterface = _assign({}, MouseEventInterface, {
              pointerId: 0,
              width: 0,
              height: 0,
              pressure: 0,
              tangentialPressure: 0,
              tiltX: 0,
              tiltY: 0,
              twist: 0,
              pointerType: 0,
              isPrimary: 0
            });

            var SyntheticPointerEvent = createSyntheticEvent(PointerEventInterface);
            /**
             * @interface TouchEvent
             * @see http://www.w3.org/TR/touch-events/
             */

            var TouchEventInterface = _assign({}, UIEventInterface, {
              touches: 0,
              targetTouches: 0,
              changedTouches: 0,
              altKey: 0,
              metaKey: 0,
              ctrlKey: 0,
              shiftKey: 0,
              getModifierState: getEventModifierState
            });

            var SyntheticTouchEvent = createSyntheticEvent(TouchEventInterface);
            /**
             * @interface Event
             * @see http://www.w3.org/TR/2009/WD-css3-transitions-20090320/#transition-events-
             * @see https://developer.mozilla.org/en-US/docs/Web/API/TransitionEvent
             */

            var TransitionEventInterface = _assign({}, EventInterface, {
              propertyName: 0,
              elapsedTime: 0,
              pseudoElement: 0
            });

            var SyntheticTransitionEvent = createSyntheticEvent(TransitionEventInterface);
            /**
             * @interface WheelEvent
             * @see http://www.w3.org/TR/DOM-Level-3-Events/
             */

            var WheelEventInterface = _assign({}, MouseEventInterface, {
              deltaX: function (event) {
                return 'deltaX' in event ? event.deltaX : // Fallback to `wheelDeltaX` for Webkit and normalize (right is positive).
                'wheelDeltaX' in event ? -event.wheelDeltaX : 0;
              },
              deltaY: function (event) {
                return 'deltaY' in event ? event.deltaY : // Fallback to `wheelDeltaY` for Webkit and normalize (down is positive).
                'wheelDeltaY' in event ? -event.wheelDeltaY : // Fallback to `wheelDelta` for IE<9 and normalize (down is positive).
                'wheelDelta' in event ? -event.wheelDelta : 0;
              },
              deltaZ: 0,
              // Browsers without "deltaMode" is reporting in raw wheel delta where one
              // notch on the scroll is always +/- 120, roughly equivalent to pixels.
              // A good approximation of DOM_DELTA_LINE (1) is 5% of viewport size or
              // ~40 pixels, for DOM_DELTA_SCREEN (2) it is 87.5% of viewport size.
              deltaMode: 0
            });

            var SyntheticWheelEvent = createSyntheticEvent(WheelEventInterface);

            var END_KEYCODES = [9, 13, 27, 32]; // Tab, Return, Esc, Space

            var START_KEYCODE = 229;
            var canUseCompositionEvent = canUseDOM && 'CompositionEvent' in window;
            var documentMode = null;

            if (canUseDOM && 'documentMode' in document) {
              documentMode = document.documentMode;
            } // Webkit offers a very useful `textInput` event that can be used to
            // directly represent `beforeInput`. The IE `textinput` event is not as
            // useful, so we don't use it.


            var canUseTextInputEvent = canUseDOM && 'TextEvent' in window && !documentMode; // In IE9+, we have access to composition events, but the data supplied
            // by the native compositionend event may be incorrect. Japanese ideographic
            // spaces, for instance (\u3000) are not recorded correctly.

            var useFallbackCompositionData = canUseDOM && (!canUseCompositionEvent || documentMode && documentMode > 8 && documentMode <= 11);
            var SPACEBAR_CODE = 32;
            var SPACEBAR_CHAR = String.fromCharCode(SPACEBAR_CODE);

            function registerEvents() {
              registerTwoPhaseEvent('onBeforeInput', ['compositionend', 'keypress', 'textInput', 'paste']);
              registerTwoPhaseEvent('onCompositionEnd', ['compositionend', 'focusout', 'keydown', 'keypress', 'keyup', 'mousedown']);
              registerTwoPhaseEvent('onCompositionStart', ['compositionstart', 'focusout', 'keydown', 'keypress', 'keyup', 'mousedown']);
              registerTwoPhaseEvent('onCompositionUpdate', ['compositionupdate', 'focusout', 'keydown', 'keypress', 'keyup', 'mousedown']);
            } // Track whether we've ever handled a keypress on the space key.


            var hasSpaceKeypress = false;
            /**
             * Return whether a native keypress event is assumed to be a command.
             * This is required because Firefox fires `keypress` events for key commands
             * (cut, copy, select-all, etc.) even though no character is inserted.
             */

            function isKeypressCommand(nativeEvent) {
              return (nativeEvent.ctrlKey || nativeEvent.altKey || nativeEvent.metaKey) && // ctrlKey && altKey is equivalent to AltGr, and is not a command.
              !(nativeEvent.ctrlKey && nativeEvent.altKey);
            }
            /**
             * Translate native top level events into event types.
             */


            function getCompositionEventType(domEventName) {
              switch (domEventName) {
                case 'compositionstart':
                  return 'onCompositionStart';

                case 'compositionend':
                  return 'onCompositionEnd';

                case 'compositionupdate':
                  return 'onCompositionUpdate';
              }
            }
            /**
             * Does our fallback best-guess model think this event signifies that
             * composition has begun?
             */


            function isFallbackCompositionStart(domEventName, nativeEvent) {
              return domEventName === 'keydown' && nativeEvent.keyCode === START_KEYCODE;
            }
            /**
             * Does our fallback mode think that this event is the end of composition?
             */


            function isFallbackCompositionEnd(domEventName, nativeEvent) {
              switch (domEventName) {
                case 'keyup':
                  // Command keys insert or clear IME input.
                  return END_KEYCODES.indexOf(nativeEvent.keyCode) !== -1;

                case 'keydown':
                  // Expect IME keyCode on each keydown. If we get any other
                  // code we must have exited earlier.
                  return nativeEvent.keyCode !== START_KEYCODE;

                case 'keypress':
                case 'mousedown':
                case 'focusout':
                  // Events are not possible without cancelling IME.
                  return true;

                default:
                  return false;
              }
            }
            /**
             * Google Input Tools provides composition data via a CustomEvent,
             * with the `data` property populated in the `detail` object. If this
             * is available on the event object, use it. If not, this is a plain
             * composition event and we have nothing special to extract.
             *
             * @param {object} nativeEvent
             * @return {?string}
             */


            function getDataFromCustomEvent(nativeEvent) {
              var detail = nativeEvent.detail;

              if (typeof detail === 'object' && 'data' in detail) {
                return detail.data;
              }

              return null;
            }
            /**
             * Check if a composition event was triggered by Korean IME.
             * Our fallback mode does not work well with IE's Korean IME,
             * so just use native composition events when Korean IME is used.
             * Although CompositionEvent.locale property is deprecated,
             * it is available in IE, where our fallback mode is enabled.
             *
             * @param {object} nativeEvent
             * @return {boolean}
             */


            function isUsingKoreanIME(nativeEvent) {
              return nativeEvent.locale === 'ko';
            } // Track the current IME composition status, if any.


            var isComposing = false;
            /**
             * @return {?object} A SyntheticCompositionEvent.
             */

            function extractCompositionEvent(dispatchQueue, domEventName, targetInst, nativeEvent, nativeEventTarget) {
              var eventType;
              var fallbackData;

              if (canUseCompositionEvent) {
                eventType = getCompositionEventType(domEventName);
              } else if (!isComposing) {
                if (isFallbackCompositionStart(domEventName, nativeEvent)) {
                  eventType = 'onCompositionStart';
                }
              } else if (isFallbackCompositionEnd(domEventName, nativeEvent)) {
                eventType = 'onCompositionEnd';
              }

              if (!eventType) {
                return null;
              }

              if (useFallbackCompositionData && !isUsingKoreanIME(nativeEvent)) {
                // The current composition is stored statically and must not be
                // overwritten while composition continues.
                if (!isComposing && eventType === 'onCompositionStart') {
                  isComposing = initialize(nativeEventTarget);
                } else if (eventType === 'onCompositionEnd') {
                  if (isComposing) {
                    fallbackData = getData();
                  }
                }
              }

              var listeners = accumulateTwoPhaseListeners(targetInst, eventType);

              if (listeners.length > 0) {
                var event = new SyntheticCompositionEvent(eventType, domEventName, null, nativeEvent, nativeEventTarget);
                dispatchQueue.push({
                  event: event,
                  listeners: listeners
                });

                if (fallbackData) {
                  // Inject data generated from fallback path into the synthetic event.
                  // This matches the property of native CompositionEventInterface.
                  event.data = fallbackData;
                } else {
                  var customData = getDataFromCustomEvent(nativeEvent);

                  if (customData !== null) {
                    event.data = customData;
                  }
                }
              }
            }

            function getNativeBeforeInputChars(domEventName, nativeEvent) {
              switch (domEventName) {
                case 'compositionend':
                  return getDataFromCustomEvent(nativeEvent);

                case 'keypress':
                  /**
                   * If native `textInput` events are available, our goal is to make
                   * use of them. However, there is a special case: the spacebar key.
                   * In Webkit, preventing default on a spacebar `textInput` event
                   * cancels character insertion, but it *also* causes the browser
                   * to fall back to its default spacebar behavior of scrolling the
                   * page.
                   *
                   * Tracking at:
                   * https://code.google.com/p/chromium/issues/detail?id=355103
                   *
                   * To avoid this issue, use the keypress event as if no `textInput`
                   * event is available.
                   */
                  var which = nativeEvent.which;

                  if (which !== SPACEBAR_CODE) {
                    return null;
                  }

                  hasSpaceKeypress = true;
                  return SPACEBAR_CHAR;

                case 'textInput':
                  // Record the characters to be added to the DOM.
                  var chars = nativeEvent.data; // If it's a spacebar character, assume that we have already handled
                  // it at the keypress level and bail immediately. Android Chrome
                  // doesn't give us keycodes, so we need to ignore it.

                  if (chars === SPACEBAR_CHAR && hasSpaceKeypress) {
                    return null;
                  }

                  return chars;

                default:
                  // For other native event types, do nothing.
                  return null;
              }
            }
            /**
             * For browsers that do not provide the `textInput` event, extract the
             * appropriate string to use for SyntheticInputEvent.
             */


            function getFallbackBeforeInputChars(domEventName, nativeEvent) {
              // If we are currently composing (IME) and using a fallback to do so,
              // try to extract the composed characters from the fallback object.
              // If composition event is available, we extract a string only at
              // compositionevent, otherwise extract it at fallback events.
              if (isComposing) {
                if (domEventName === 'compositionend' || !canUseCompositionEvent && isFallbackCompositionEnd(domEventName, nativeEvent)) {
                  var chars = getData();
                  reset();
                  isComposing = false;
                  return chars;
                }

                return null;
              }

              switch (domEventName) {
                case 'paste':
                  // If a paste event occurs after a keypress, throw out the input
                  // chars. Paste events should not lead to BeforeInput events.
                  return null;

                case 'keypress':
                  /**
                   * As of v27, Firefox may fire keypress events even when no character
                   * will be inserted. A few possibilities:
                   *
                   * - `which` is `0`. Arrow keys, Esc key, etc.
                   *
                   * - `which` is the pressed key code, but no char is available.
                   *   Ex: 'AltGr + d` in Polish. There is no modified character for
                   *   this key combination and no character is inserted into the
                   *   document, but FF fires the keypress for char code `100` anyway.
                   *   No `input` event will occur.
                   *
                   * - `which` is the pressed key code, but a command combination is
                   *   being used. Ex: `Cmd+C`. No character is inserted, and no
                   *   `input` event will occur.
                   */
                  if (!isKeypressCommand(nativeEvent)) {
                    // IE fires the `keypress` event when a user types an emoji via
                    // Touch keyboard of Windows.  In such a case, the `char` property
                    // holds an emoji character like `\uD83D\uDE0A`.  Because its length
                    // is 2, the property `which` does not represent an emoji correctly.
                    // In such a case, we directly return the `char` property instead of
                    // using `which`.
                    if (nativeEvent.char && nativeEvent.char.length > 1) {
                      return nativeEvent.char;
                    } else if (nativeEvent.which) {
                      return String.fromCharCode(nativeEvent.which);
                    }
                  }

                  return null;

                case 'compositionend':
                  return useFallbackCompositionData && !isUsingKoreanIME(nativeEvent) ? null : nativeEvent.data;

                default:
                  return null;
              }
            }
            /**
             * Extract a SyntheticInputEvent for `beforeInput`, based on either native
             * `textInput` or fallback behavior.
             *
             * @return {?object} A SyntheticInputEvent.
             */


            function extractBeforeInputEvent(dispatchQueue, domEventName, targetInst, nativeEvent, nativeEventTarget) {
              var chars;

              if (canUseTextInputEvent) {
                chars = getNativeBeforeInputChars(domEventName, nativeEvent);
              } else {
                chars = getFallbackBeforeInputChars(domEventName, nativeEvent);
              } // If no characters are being inserted, no BeforeInput event should
              // be fired.


              if (!chars) {
                return null;
              }

              var listeners = accumulateTwoPhaseListeners(targetInst, 'onBeforeInput');

              if (listeners.length > 0) {
                var event = new SyntheticInputEvent('onBeforeInput', 'beforeinput', null, nativeEvent, nativeEventTarget);
                dispatchQueue.push({
                  event: event,
                  listeners: listeners
                });
                event.data = chars;
              }
            }
            /**
             * Create an `onBeforeInput` event to match
             * http://www.w3.org/TR/2013/WD-DOM-Level-3-Events-20131105/#events-inputevents.
             *
             * This event plugin is based on the native `textInput` event
             * available in Chrome, Safari, Opera, and IE. This event fires after
             * `onKeyPress` and `onCompositionEnd`, but before `onInput`.
             *
             * `beforeInput` is spec'd but not implemented in any browsers, and
             * the `input` event does not provide any useful information about what has
             * actually been added, contrary to the spec. Thus, `textInput` is the best
             * available event to identify the characters that have actually been inserted
             * into the target node.
             *
             * This plugin is also responsible for emitting `composition` events, thus
             * allowing us to share composition fallback code for both `beforeInput` and
             * `composition` event types.
             */


            function extractEvents(dispatchQueue, domEventName, targetInst, nativeEvent, nativeEventTarget, eventSystemFlags, targetContainer) {
              extractCompositionEvent(dispatchQueue, domEventName, targetInst, nativeEvent, nativeEventTarget);
              extractBeforeInputEvent(dispatchQueue, domEventName, targetInst, nativeEvent, nativeEventTarget);
            }

            /**
             * @see http://www.whatwg.org/specs/web-apps/current-work/multipage/the-input-element.html#input-type-attr-summary
             */
            var supportedInputTypes = {
              color: true,
              date: true,
              datetime: true,
              'datetime-local': true,
              email: true,
              month: true,
              number: true,
              password: true,
              range: true,
              search: true,
              tel: true,
              text: true,
              time: true,
              url: true,
              week: true
            };

            function isTextInputElement(elem) {
              var nodeName = elem && elem.nodeName && elem.nodeName.toLowerCase();

              if (nodeName === 'input') {
                return !!supportedInputTypes[elem.type];
              }

              if (nodeName === 'textarea') {
                return true;
              }

              return false;
            }

            /**
             * Checks if an event is supported in the current execution environment.
             *
             * NOTE: This will not work correctly for non-generic events such as `change`,
             * `reset`, `load`, `error`, and `select`.
             *
             * Borrows from Modernizr.
             *
             * @param {string} eventNameSuffix Event name, e.g. "click".
             * @return {boolean} True if the event is supported.
             * @internal
             * @license Modernizr 3.0.0pre (Custom Build) | MIT
             */

            function isEventSupported(eventNameSuffix) {
              if (!canUseDOM) {
                return false;
              }

              var eventName = 'on' + eventNameSuffix;
              var isSupported = (eventName in document);

              if (!isSupported) {
                var element = document.createElement('div');
                element.setAttribute(eventName, 'return;');
                isSupported = typeof element[eventName] === 'function';
              }

              return isSupported;
            }

            function registerEvents$1() {
              registerTwoPhaseEvent('onChange', ['change', 'click', 'focusin', 'focusout', 'input', 'keydown', 'keyup', 'selectionchange']);
            }

            function createAndAccumulateChangeEvent(dispatchQueue, inst, nativeEvent, target) {
              // Flag this event loop as needing state restore.
              enqueueStateRestore(target);
              var listeners = accumulateTwoPhaseListeners(inst, 'onChange');

              if (listeners.length > 0) {
                var event = new SyntheticEvent('onChange', 'change', null, nativeEvent, target);
                dispatchQueue.push({
                  event: event,
                  listeners: listeners
                });
              }
            }
            /**
             * For IE shims
             */


            var activeElement = null;
            var activeElementInst = null;
            /**
             * SECTION: handle `change` event
             */

            function shouldUseChangeEvent(elem) {
              var nodeName = elem.nodeName && elem.nodeName.toLowerCase();
              return nodeName === 'select' || nodeName === 'input' && elem.type === 'file';
            }

            function manualDispatchChangeEvent(nativeEvent) {
              var dispatchQueue = [];
              createAndAccumulateChangeEvent(dispatchQueue, activeElementInst, nativeEvent, getEventTarget(nativeEvent)); // If change and propertychange bubbled, we'd just bind to it like all the
              // other events and have it go through ReactBrowserEventEmitter. Since it
              // doesn't, we manually listen for the events and so we have to enqueue and
              // process the abstract event manually.
              //
              // Batching is necessary here in order to ensure that all event handlers run
              // before the next rerender (including event handlers attached to ancestor
              // elements instead of directly on the input). Without this, controlled
              // components don't work properly in conjunction with event bubbling because
              // the component is rerendered and the value reverted before all the event
              // handlers can run. See https://github.com/facebook/react/issues/708.

              batchedUpdates(runEventInBatch, dispatchQueue);
            }

            function runEventInBatch(dispatchQueue) {
              processDispatchQueue(dispatchQueue, 0);
            }

            function getInstIfValueChanged(targetInst) {
              var targetNode = getNodeFromInstance(targetInst);

              if (updateValueIfChanged(targetNode)) {
                return targetInst;
              }
            }

            function getTargetInstForChangeEvent(domEventName, targetInst) {
              if (domEventName === 'change') {
                return targetInst;
              }
            }
            /**
             * SECTION: handle `input` event
             */


            var isInputEventSupported = false;

            if (canUseDOM) {
              // IE9 claims to support the input event but fails to trigger it when
              // deleting text, so we ignore its input events.
              isInputEventSupported = isEventSupported('input') && (!document.documentMode || document.documentMode > 9);
            }
            /**
             * (For IE <=9) Starts tracking propertychange events on the passed-in element
             * and override the value property so that we can distinguish user events from
             * value changes in JS.
             */


            function startWatchingForValueChange(target, targetInst) {
              activeElement = target;
              activeElementInst = targetInst;
              activeElement.attachEvent('onpropertychange', handlePropertyChange);
            }
            /**
             * (For IE <=9) Removes the event listeners from the currently-tracked element,
             * if any exists.
             */


            function stopWatchingForValueChange() {
              if (!activeElement) {
                return;
              }

              activeElement.detachEvent('onpropertychange', handlePropertyChange);
              activeElement = null;
              activeElementInst = null;
            }
            /**
             * (For IE <=9) Handles a propertychange event, sending a `change` event if
             * the value of the active element has changed.
             */


            function handlePropertyChange(nativeEvent) {
              if (nativeEvent.propertyName !== 'value') {
                return;
              }

              if (getInstIfValueChanged(activeElementInst)) {
                manualDispatchChangeEvent(nativeEvent);
              }
            }

            function handleEventsForInputEventPolyfill(domEventName, target, targetInst) {
              if (domEventName === 'focusin') {
                // In IE9, propertychange fires for most input events but is buggy and
                // doesn't fire when text is deleted, but conveniently, selectionchange
                // appears to fire in all of the remaining cases so we catch those and
                // forward the event if the value has changed
                // In either case, we don't want to call the event handler if the value
                // is changed from JS so we redefine a setter for `.value` that updates
                // our activeElementValue variable, allowing us to ignore those changes
                //
                // stopWatching() should be a noop here but we call it just in case we
                // missed a blur event somehow.
                stopWatchingForValueChange();
                startWatchingForValueChange(target, targetInst);
              } else if (domEventName === 'focusout') {
                stopWatchingForValueChange();
              }
            } // For IE8 and IE9.


            function getTargetInstForInputEventPolyfill(domEventName, targetInst) {
              if (domEventName === 'selectionchange' || domEventName === 'keyup' || domEventName === 'keydown') {
                // On the selectionchange event, the target is just document which isn't
                // helpful for us so just check activeElement instead.
                //
                // 99% of the time, keydown and keyup aren't necessary. IE8 fails to fire
                // propertychange on the first input event after setting `value` from a
                // script and fires only keydown, keypress, keyup. Catching keyup usually
                // gets it and catching keydown lets us fire an event for the first
                // keystroke if user does a key repeat (it'll be a little delayed: right
                // before the second keystroke). Other input methods (e.g., paste) seem to
                // fire selectionchange normally.
                return getInstIfValueChanged(activeElementInst);
              }
            }
            /**
             * SECTION: handle `click` event
             */


            function shouldUseClickEvent(elem) {
              // Use the `click` event to detect changes to checkbox and radio inputs.
              // This approach works across all browsers, whereas `change` does not fire
              // until `blur` in IE8.
              var nodeName = elem.nodeName;
              return nodeName && nodeName.toLowerCase() === 'input' && (elem.type === 'checkbox' || elem.type === 'radio');
            }

            function getTargetInstForClickEvent(domEventName, targetInst) {
              if (domEventName === 'click') {
                return getInstIfValueChanged(targetInst);
              }
            }

            function getTargetInstForInputOrChangeEvent(domEventName, targetInst) {
              if (domEventName === 'input' || domEventName === 'change') {
                return getInstIfValueChanged(targetInst);
              }
            }

            function handleControlledInputBlur(node) {
              var state = node._wrapperState;

              if (!state || !state.controlled || node.type !== 'number') {
                return;
              }

              {
                // If controlled, assign the value attribute to the current value on blur
                setDefaultValue(node, 'number', node.value);
              }
            }
            /**
             * This plugin creates an `onChange` event that normalizes change events
             * across form elements. This event fires at a time when it's possible to
             * change the element's value without seeing a flicker.
             *
             * Supported elements are:
             * - input (see `isTextInputElement`)
             * - textarea
             * - select
             */


            function extractEvents$1(dispatchQueue, domEventName, targetInst, nativeEvent, nativeEventTarget, eventSystemFlags, targetContainer) {
              var targetNode = targetInst ? getNodeFromInstance(targetInst) : window;
              var getTargetInstFunc, handleEventFunc;

              if (shouldUseChangeEvent(targetNode)) {
                getTargetInstFunc = getTargetInstForChangeEvent;
              } else if (isTextInputElement(targetNode)) {
                if (isInputEventSupported) {
                  getTargetInstFunc = getTargetInstForInputOrChangeEvent;
                } else {
                  getTargetInstFunc = getTargetInstForInputEventPolyfill;
                  handleEventFunc = handleEventsForInputEventPolyfill;
                }
              } else if (shouldUseClickEvent(targetNode)) {
                getTargetInstFunc = getTargetInstForClickEvent;
              }

              if (getTargetInstFunc) {
                var inst = getTargetInstFunc(domEventName, targetInst);

                if (inst) {
                  createAndAccumulateChangeEvent(dispatchQueue, inst, nativeEvent, nativeEventTarget);
                  return;
                }
              }

              if (handleEventFunc) {
                handleEventFunc(domEventName, targetNode, targetInst);
              } // When blurring, set the value attribute for number inputs


              if (domEventName === 'focusout') {
                handleControlledInputBlur(targetNode);
              }
            }

            function registerEvents$2() {
              registerDirectEvent('onMouseEnter', ['mouseout', 'mouseover']);
              registerDirectEvent('onMouseLeave', ['mouseout', 'mouseover']);
              registerDirectEvent('onPointerEnter', ['pointerout', 'pointerover']);
              registerDirectEvent('onPointerLeave', ['pointerout', 'pointerover']);
            }
            /**
             * For almost every interaction we care about, there will be both a top-level
             * `mouseover` and `mouseout` event that occurs. Only use `mouseout` so that
             * we do not extract duplicate events. However, moving the mouse into the
             * browser from outside will not fire a `mouseout` event. In this case, we use
             * the `mouseover` top-level event.
             */


            function extractEvents$2(dispatchQueue, domEventName, targetInst, nativeEvent, nativeEventTarget, eventSystemFlags, targetContainer) {
              var isOverEvent = domEventName === 'mouseover' || domEventName === 'pointerover';
              var isOutEvent = domEventName === 'mouseout' || domEventName === 'pointerout';

              if (isOverEvent && (eventSystemFlags & IS_REPLAYED) === 0) {
                // If this is an over event with a target, we might have already dispatched
                // the event in the out event of the other target. If this is replayed,
                // then it's because we couldn't dispatch against this target previously
                // so we have to do it now instead.
                var related = nativeEvent.relatedTarget || nativeEvent.fromElement;

                if (related) {
                  // If the related node is managed by React, we can assume that we have
                  // already dispatched the corresponding events during its mouseout.
                  if (getClosestInstanceFromNode(related) || isContainerMarkedAsRoot(related)) {
                    return;
                  }
                }
              }

              if (!isOutEvent && !isOverEvent) {
                // Must not be a mouse or pointer in or out - ignoring.
                return;
              }

              var win; // TODO: why is this nullable in the types but we read from it?

              if (nativeEventTarget.window === nativeEventTarget) {
                // `nativeEventTarget` is probably a window object.
                win = nativeEventTarget;
              } else {
                // TODO: Figure out why `ownerDocument` is sometimes undefined in IE8.
                var doc = nativeEventTarget.ownerDocument;

                if (doc) {
                  win = doc.defaultView || doc.parentWindow;
                } else {
                  win = window;
                }
              }

              var from;
              var to;

              if (isOutEvent) {
                var _related = nativeEvent.relatedTarget || nativeEvent.toElement;

                from = targetInst;
                to = _related ? getClosestInstanceFromNode(_related) : null;

                if (to !== null) {
                  var nearestMounted = getNearestMountedFiber(to);

                  if (to !== nearestMounted || to.tag !== HostComponent && to.tag !== HostText) {
                    to = null;
                  }
                }
              } else {
                // Moving to a node from outside the window.
                from = null;
                to = targetInst;
              }

              if (from === to) {
                // Nothing pertains to our managed components.
                return;
              }

              var SyntheticEventCtor = SyntheticMouseEvent;
              var leaveEventType = 'onMouseLeave';
              var enterEventType = 'onMouseEnter';
              var eventTypePrefix = 'mouse';

              if (domEventName === 'pointerout' || domEventName === 'pointerover') {
                SyntheticEventCtor = SyntheticPointerEvent;
                leaveEventType = 'onPointerLeave';
                enterEventType = 'onPointerEnter';
                eventTypePrefix = 'pointer';
              }

              var fromNode = from == null ? win : getNodeFromInstance(from);
              var toNode = to == null ? win : getNodeFromInstance(to);
              var leave = new SyntheticEventCtor(leaveEventType, eventTypePrefix + 'leave', from, nativeEvent, nativeEventTarget);
              leave.target = fromNode;
              leave.relatedTarget = toNode;
              var enter = null; // We should only process this nativeEvent if we are processing
              // the first ancestor. Next time, we will ignore the event.

              var nativeTargetInst = getClosestInstanceFromNode(nativeEventTarget);

              if (nativeTargetInst === targetInst) {
                var enterEvent = new SyntheticEventCtor(enterEventType, eventTypePrefix + 'enter', to, nativeEvent, nativeEventTarget);
                enterEvent.target = toNode;
                enterEvent.relatedTarget = fromNode;
                enter = enterEvent;
              }

              accumulateEnterLeaveTwoPhaseListeners(dispatchQueue, leave, enter, from, to);
            }

            /**
             * inlined Object.is polyfill to avoid requiring consumers ship their own
             * https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object/is
             */
            function is(x, y) {
              return x === y && (x !== 0 || 1 / x === 1 / y) || x !== x && y !== y // eslint-disable-line no-self-compare
              ;
            }

            var objectIs = typeof Object.is === 'function' ? Object.is : is;

            var hasOwnProperty$2 = Object.prototype.hasOwnProperty;
            /**
             * Performs equality by iterating through keys on an object and returning false
             * when any key has values which are not strictly equal between the arguments.
             * Returns true when the values of all keys are strictly equal.
             */

            function shallowEqual(objA, objB) {
              if (objectIs(objA, objB)) {
                return true;
              }

              if (typeof objA !== 'object' || objA === null || typeof objB !== 'object' || objB === null) {
                return false;
              }

              var keysA = Object.keys(objA);
              var keysB = Object.keys(objB);

              if (keysA.length !== keysB.length) {
                return false;
              } // Test for A's keys different from B.


              for (var i = 0; i < keysA.length; i++) {
                if (!hasOwnProperty$2.call(objB, keysA[i]) || !objectIs(objA[keysA[i]], objB[keysA[i]])) {
                  return false;
                }
              }

              return true;
            }

            /**
             * Given any node return the first leaf node without children.
             *
             * @param {DOMElement|DOMTextNode} node
             * @return {DOMElement|DOMTextNode}
             */

            function getLeafNode(node) {
              while (node && node.firstChild) {
                node = node.firstChild;
              }

              return node;
            }
            /**
             * Get the next sibling within a container. This will walk up the
             * DOM if a node's siblings have been exhausted.
             *
             * @param {DOMElement|DOMTextNode} node
             * @return {?DOMElement|DOMTextNode}
             */


            function getSiblingNode(node) {
              while (node) {
                if (node.nextSibling) {
                  return node.nextSibling;
                }

                node = node.parentNode;
              }
            }
            /**
             * Get object describing the nodes which contain characters at offset.
             *
             * @param {DOMElement|DOMTextNode} root
             * @param {number} offset
             * @return {?object}
             */


            function getNodeForCharacterOffset(root, offset) {
              var node = getLeafNode(root);
              var nodeStart = 0;
              var nodeEnd = 0;

              while (node) {
                if (node.nodeType === TEXT_NODE) {
                  nodeEnd = nodeStart + node.textContent.length;

                  if (nodeStart <= offset && nodeEnd >= offset) {
                    return {
                      node: node,
                      offset: offset - nodeStart
                    };
                  }

                  nodeStart = nodeEnd;
                }

                node = getLeafNode(getSiblingNode(node));
              }
            }

            /**
             * @param {DOMElement} outerNode
             * @return {?object}
             */

            function getOffsets(outerNode) {
              var ownerDocument = outerNode.ownerDocument;
              var win = ownerDocument && ownerDocument.defaultView || window;
              var selection = win.getSelection && win.getSelection();

              if (!selection || selection.rangeCount === 0) {
                return null;
              }

              var anchorNode = selection.anchorNode,
                  anchorOffset = selection.anchorOffset,
                  focusNode = selection.focusNode,
                  focusOffset = selection.focusOffset; // In Firefox, anchorNode and focusNode can be "anonymous divs", e.g. the
              // up/down buttons on an <input type="number">. Anonymous divs do not seem to
              // expose properties, triggering a "Permission denied error" if any of its
              // properties are accessed. The only seemingly possible way to avoid erroring
              // is to access a property that typically works for non-anonymous divs and
              // catch any error that may otherwise arise. See
              // https://bugzilla.mozilla.org/show_bug.cgi?id=208427

              try {
                /* eslint-disable no-unused-expressions */
                anchorNode.nodeType;
                focusNode.nodeType;
                /* eslint-enable no-unused-expressions */
              } catch (e) {
                return null;
              }

              return getModernOffsetsFromPoints(outerNode, anchorNode, anchorOffset, focusNode, focusOffset);
            }
            /**
             * Returns {start, end} where `start` is the character/codepoint index of
             * (anchorNode, anchorOffset) within the textContent of `outerNode`, and
             * `end` is the index of (focusNode, focusOffset).
             *
             * Returns null if you pass in garbage input but we should probably just crash.
             *
             * Exported only for testing.
             */

            function getModernOffsetsFromPoints(outerNode, anchorNode, anchorOffset, focusNode, focusOffset) {
              var length = 0;
              var start = -1;
              var end = -1;
              var indexWithinAnchor = 0;
              var indexWithinFocus = 0;
              var node = outerNode;
              var parentNode = null;

              outer: while (true) {
                var next = null;

                while (true) {
                  if (node === anchorNode && (anchorOffset === 0 || node.nodeType === TEXT_NODE)) {
                    start = length + anchorOffset;
                  }

                  if (node === focusNode && (focusOffset === 0 || node.nodeType === TEXT_NODE)) {
                    end = length + focusOffset;
                  }

                  if (node.nodeType === TEXT_NODE) {
                    length += node.nodeValue.length;
                  }

                  if ((next = node.firstChild) === null) {
                    break;
                  } // Moving from `node` to its first child `next`.


                  parentNode = node;
                  node = next;
                }

                while (true) {
                  if (node === outerNode) {
                    // If `outerNode` has children, this is always the second time visiting
                    // it. If it has no children, this is still the first loop, and the only
                    // valid selection is anchorNode and focusNode both equal to this node
                    // and both offsets 0, in which case we will have handled above.
                    break outer;
                  }

                  if (parentNode === anchorNode && ++indexWithinAnchor === anchorOffset) {
                    start = length;
                  }

                  if (parentNode === focusNode && ++indexWithinFocus === focusOffset) {
                    end = length;
                  }

                  if ((next = node.nextSibling) !== null) {
                    break;
                  }

                  node = parentNode;
                  parentNode = node.parentNode;
                } // Moving from `node` to its next sibling `next`.


                node = next;
              }

              if (start === -1 || end === -1) {
                // This should never happen. (Would happen if the anchor/focus nodes aren't
                // actually inside the passed-in node.)
                return null;
              }

              return {
                start: start,
                end: end
              };
            }
            /**
             * In modern non-IE browsers, we can support both forward and backward
             * selections.
             *
             * Note: IE10+ supports the Selection object, but it does not support
             * the `extend` method, which means that even in modern IE, it's not possible
             * to programmatically create a backward selection. Thus, for all IE
             * versions, we use the old IE API to create our selections.
             *
             * @param {DOMElement|DOMTextNode} node
             * @param {object} offsets
             */

            function setOffsets(node, offsets) {
              var doc = node.ownerDocument || document;
              var win = doc && doc.defaultView || window; // Edge fails with "Object expected" in some scenarios.
              // (For instance: TinyMCE editor used in a list component that supports pasting to add more,
              // fails when pasting 100+ items)

              if (!win.getSelection) {
                return;
              }

              var selection = win.getSelection();
              var length = node.textContent.length;
              var start = Math.min(offsets.start, length);
              var end = offsets.end === undefined ? start : Math.min(offsets.end, length); // IE 11 uses modern selection, but doesn't support the extend method.
              // Flip backward selections, so we can set with a single range.

              if (!selection.extend && start > end) {
                var temp = end;
                end = start;
                start = temp;
              }

              var startMarker = getNodeForCharacterOffset(node, start);
              var endMarker = getNodeForCharacterOffset(node, end);

              if (startMarker && endMarker) {
                if (selection.rangeCount === 1 && selection.anchorNode === startMarker.node && selection.anchorOffset === startMarker.offset && selection.focusNode === endMarker.node && selection.focusOffset === endMarker.offset) {
                  return;
                }

                var range = doc.createRange();
                range.setStart(startMarker.node, startMarker.offset);
                selection.removeAllRanges();

                if (start > end) {
                  selection.addRange(range);
                  selection.extend(endMarker.node, endMarker.offset);
                } else {
                  range.setEnd(endMarker.node, endMarker.offset);
                  selection.addRange(range);
                }
              }
            }

            function isTextNode(node) {
              return node && node.nodeType === TEXT_NODE;
            }

            function containsNode(outerNode, innerNode) {
              if (!outerNode || !innerNode) {
                return false;
              } else if (outerNode === innerNode) {
                return true;
              } else if (isTextNode(outerNode)) {
                return false;
              } else if (isTextNode(innerNode)) {
                return containsNode(outerNode, innerNode.parentNode);
              } else if ('contains' in outerNode) {
                return outerNode.contains(innerNode);
              } else if (outerNode.compareDocumentPosition) {
                return !!(outerNode.compareDocumentPosition(innerNode) & 16);
              } else {
                return false;
              }
            }

            function isInDocument(node) {
              return node && node.ownerDocument && containsNode(node.ownerDocument.documentElement, node);
            }

            function isSameOriginFrame(iframe) {
              try {
                // Accessing the contentDocument of a HTMLIframeElement can cause the browser
                // to throw, e.g. if it has a cross-origin src attribute.
                // Safari will show an error in the console when the access results in "Blocked a frame with origin". e.g:
                // iframe.contentDocument.defaultView;
                // A safety way is to access one of the cross origin properties: Window or Location
                // Which might result in "SecurityError" DOM Exception and it is compatible to Safari.
                // https://html.spec.whatwg.org/multipage/browsers.html#integration-with-idl
                return typeof iframe.contentWindow.location.href === 'string';
              } catch (err) {
                return false;
              }
            }

            function getActiveElementDeep() {
              var win = window;
              var element = getActiveElement();

              while (element instanceof win.HTMLIFrameElement) {
                if (isSameOriginFrame(element)) {
                  win = element.contentWindow;
                } else {
                  return element;
                }

                element = getActiveElement(win.document);
              }

              return element;
            }
            /**
             * @ReactInputSelection: React input selection module. Based on Selection.js,
             * but modified to be suitable for react and has a couple of bug fixes (doesn't
             * assume buttons have range selections allowed).
             * Input selection module for React.
             */

            /**
             * @hasSelectionCapabilities: we get the element types that support selection
             * from https://html.spec.whatwg.org/#do-not-apply, looking at `selectionStart`
             * and `selectionEnd` rows.
             */


            function hasSelectionCapabilities(elem) {
              var nodeName = elem && elem.nodeName && elem.nodeName.toLowerCase();
              return nodeName && (nodeName === 'input' && (elem.type === 'text' || elem.type === 'search' || elem.type === 'tel' || elem.type === 'url' || elem.type === 'password') || nodeName === 'textarea' || elem.contentEditable === 'true');
            }
            function getSelectionInformation() {
              var focusedElem = getActiveElementDeep();
              return {
                focusedElem: focusedElem,
                selectionRange: hasSelectionCapabilities(focusedElem) ? getSelection(focusedElem) : null
              };
            }
            /**
             * @restoreSelection: If any selection information was potentially lost,
             * restore it. This is useful when performing operations that could remove dom
             * nodes and place them back in, resulting in focus being lost.
             */

            function restoreSelection(priorSelectionInformation) {
              var curFocusedElem = getActiveElementDeep();
              var priorFocusedElem = priorSelectionInformation.focusedElem;
              var priorSelectionRange = priorSelectionInformation.selectionRange;

              if (curFocusedElem !== priorFocusedElem && isInDocument(priorFocusedElem)) {
                if (priorSelectionRange !== null && hasSelectionCapabilities(priorFocusedElem)) {
                  setSelection(priorFocusedElem, priorSelectionRange);
                } // Focusing a node can change the scroll position, which is undesirable


                var ancestors = [];
                var ancestor = priorFocusedElem;

                while (ancestor = ancestor.parentNode) {
                  if (ancestor.nodeType === ELEMENT_NODE) {
                    ancestors.push({
                      element: ancestor,
                      left: ancestor.scrollLeft,
                      top: ancestor.scrollTop
                    });
                  }
                }

                if (typeof priorFocusedElem.focus === 'function') {
                  priorFocusedElem.focus();
                }

                for (var i = 0; i < ancestors.length; i++) {
                  var info = ancestors[i];
                  info.element.scrollLeft = info.left;
                  info.element.scrollTop = info.top;
                }
              }
            }
            /**
             * @getSelection: Gets the selection bounds of a focused textarea, input or
             * contentEditable node.
             * -@input: Look up selection bounds of this input
             * -@return {start: selectionStart, end: selectionEnd}
             */

            function getSelection(input) {
              var selection;

              if ('selectionStart' in input) {
                // Modern browser with input or textarea.
                selection = {
                  start: input.selectionStart,
                  end: input.selectionEnd
                };
              } else {
                // Content editable or old IE textarea.
                selection = getOffsets(input);
              }

              return selection || {
                start: 0,
                end: 0
              };
            }
            /**
             * @setSelection: Sets the selection bounds of a textarea or input and focuses
             * the input.
             * -@input     Set selection bounds of this input or textarea
             * -@offsets   Object of same form that is returned from get*
             */

            function setSelection(input, offsets) {
              var start = offsets.start;
              var end = offsets.end;

              if (end === undefined) {
                end = start;
              }

              if ('selectionStart' in input) {
                input.selectionStart = start;
                input.selectionEnd = Math.min(end, input.value.length);
              } else {
                setOffsets(input, offsets);
              }
            }

            var skipSelectionChangeEvent = canUseDOM && 'documentMode' in document && document.documentMode <= 11;

            function registerEvents$3() {
              registerTwoPhaseEvent('onSelect', ['focusout', 'contextmenu', 'dragend', 'focusin', 'keydown', 'keyup', 'mousedown', 'mouseup', 'selectionchange']);
            }

            var activeElement$1 = null;
            var activeElementInst$1 = null;
            var lastSelection = null;
            var mouseDown = false;
            /**
             * Get an object which is a unique representation of the current selection.
             *
             * The return value will not be consistent across nodes or browsers, but
             * two identical selections on the same node will return identical objects.
             */

            function getSelection$1(node) {
              if ('selectionStart' in node && hasSelectionCapabilities(node)) {
                return {
                  start: node.selectionStart,
                  end: node.selectionEnd
                };
              } else {
                var win = node.ownerDocument && node.ownerDocument.defaultView || window;
                var selection = win.getSelection();
                return {
                  anchorNode: selection.anchorNode,
                  anchorOffset: selection.anchorOffset,
                  focusNode: selection.focusNode,
                  focusOffset: selection.focusOffset
                };
              }
            }
            /**
             * Get document associated with the event target.
             */


            function getEventTargetDocument(eventTarget) {
              return eventTarget.window === eventTarget ? eventTarget.document : eventTarget.nodeType === DOCUMENT_NODE ? eventTarget : eventTarget.ownerDocument;
            }
            /**
             * Poll selection to see whether it's changed.
             *
             * @param {object} nativeEvent
             * @param {object} nativeEventTarget
             * @return {?SyntheticEvent}
             */


            function constructSelectEvent(dispatchQueue, nativeEvent, nativeEventTarget) {
              // Ensure we have the right element, and that the user is not dragging a
              // selection (this matches native `select` event behavior). In HTML5, select
              // fires only on input and textarea thus if there's no focused element we
              // won't dispatch.
              var doc = getEventTargetDocument(nativeEventTarget);

              if (mouseDown || activeElement$1 == null || activeElement$1 !== getActiveElement(doc)) {
                return;
              } // Only fire when selection has actually changed.


              var currentSelection = getSelection$1(activeElement$1);

              if (!lastSelection || !shallowEqual(lastSelection, currentSelection)) {
                lastSelection = currentSelection;
                var listeners = accumulateTwoPhaseListeners(activeElementInst$1, 'onSelect');

                if (listeners.length > 0) {
                  var event = new SyntheticEvent('onSelect', 'select', null, nativeEvent, nativeEventTarget);
                  dispatchQueue.push({
                    event: event,
                    listeners: listeners
                  });
                  event.target = activeElement$1;
                }
              }
            }
            /**
             * This plugin creates an `onSelect` event that normalizes select events
             * across form elements.
             *
             * Supported elements are:
             * - input (see `isTextInputElement`)
             * - textarea
             * - contentEditable
             *
             * This differs from native browser implementations in the following ways:
             * - Fires on contentEditable fields as well as inputs.
             * - Fires for collapsed selection.
             * - Fires after user input.
             */


            function extractEvents$3(dispatchQueue, domEventName, targetInst, nativeEvent, nativeEventTarget, eventSystemFlags, targetContainer) {

              var targetNode = targetInst ? getNodeFromInstance(targetInst) : window;

              switch (domEventName) {
                // Track the input node that has focus.
                case 'focusin':
                  if (isTextInputElement(targetNode) || targetNode.contentEditable === 'true') {
                    activeElement$1 = targetNode;
                    activeElementInst$1 = targetInst;
                    lastSelection = null;
                  }

                  break;

                case 'focusout':
                  activeElement$1 = null;
                  activeElementInst$1 = null;
                  lastSelection = null;
                  break;
                // Don't fire the event while the user is dragging. This matches the
                // semantics of the native select event.

                case 'mousedown':
                  mouseDown = true;
                  break;

                case 'contextmenu':
                case 'mouseup':
                case 'dragend':
                  mouseDown = false;
                  constructSelectEvent(dispatchQueue, nativeEvent, nativeEventTarget);
                  break;
                // Chrome and IE fire non-standard event when selection is changed (and
                // sometimes when it hasn't). IE's event fires out of order with respect
                // to key and input events on deletion, so we discard it.
                //
                // Firefox doesn't support selectionchange, so check selection status
                // after each key entry. The selection changes after keydown and before
                // keyup, but we check on keydown as well in the case of holding down a
                // key, when multiple keydown events are fired but only one keyup is.
                // This is also our approach for IE handling, for the reason above.

                case 'selectionchange':
                  if (skipSelectionChangeEvent) {
                    break;
                  }

                // falls through

                case 'keydown':
                case 'keyup':
                  constructSelectEvent(dispatchQueue, nativeEvent, nativeEventTarget);
              }
            }

            function extractEvents$4(dispatchQueue, domEventName, targetInst, nativeEvent, nativeEventTarget, eventSystemFlags, targetContainer) {
              var reactName = topLevelEventsToReactNames.get(domEventName);

              if (reactName === undefined) {
                return;
              }

              var SyntheticEventCtor = SyntheticEvent;
              var reactEventType = domEventName;

              switch (domEventName) {
                case 'keypress':
                  // Firefox creates a keypress event for function keys too. This removes
                  // the unwanted keypress events. Enter is however both printable and
                  // non-printable. One would expect Tab to be as well (but it isn't).
                  if (getEventCharCode(nativeEvent) === 0) {
                    return;
                  }

                /* falls through */

                case 'keydown':
                case 'keyup':
                  SyntheticEventCtor = SyntheticKeyboardEvent;
                  break;

                case 'focusin':
                  reactEventType = 'focus';
                  SyntheticEventCtor = SyntheticFocusEvent;
                  break;

                case 'focusout':
                  reactEventType = 'blur';
                  SyntheticEventCtor = SyntheticFocusEvent;
                  break;

                case 'beforeblur':
                case 'afterblur':
                  SyntheticEventCtor = SyntheticFocusEvent;
                  break;

                case 'click':
                  // Firefox creates a click event on right mouse clicks. This removes the
                  // unwanted click events.
                  if (nativeEvent.button === 2) {
                    return;
                  }

                /* falls through */

                case 'auxclick':
                case 'dblclick':
                case 'mousedown':
                case 'mousemove':
                case 'mouseup': // TODO: Disabled elements should not respond to mouse events

                /* falls through */

                case 'mouseout':
                case 'mouseover':
                case 'contextmenu':
                  SyntheticEventCtor = SyntheticMouseEvent;
                  break;

                case 'drag':
                case 'dragend':
                case 'dragenter':
                case 'dragexit':
                case 'dragleave':
                case 'dragover':
                case 'dragstart':
                case 'drop':
                  SyntheticEventCtor = SyntheticDragEvent;
                  break;

                case 'touchcancel':
                case 'touchend':
                case 'touchmove':
                case 'touchstart':
                  SyntheticEventCtor = SyntheticTouchEvent;
                  break;

                case ANIMATION_END:
                case ANIMATION_ITERATION:
                case ANIMATION_START:
                  SyntheticEventCtor = SyntheticAnimationEvent;
                  break;

                case TRANSITION_END:
                  SyntheticEventCtor = SyntheticTransitionEvent;
                  break;

                case 'scroll':
                  SyntheticEventCtor = SyntheticUIEvent;
                  break;

                case 'wheel':
                  SyntheticEventCtor = SyntheticWheelEvent;
                  break;

                case 'copy':
                case 'cut':
                case 'paste':
                  SyntheticEventCtor = SyntheticClipboardEvent;
                  break;

                case 'gotpointercapture':
                case 'lostpointercapture':
                case 'pointercancel':
                case 'pointerdown':
                case 'pointermove':
                case 'pointerout':
                case 'pointerover':
                case 'pointerup':
                  SyntheticEventCtor = SyntheticPointerEvent;
                  break;
              }

              var inCapturePhase = (eventSystemFlags & IS_CAPTURE_PHASE) !== 0;

              {
                // Some events don't bubble in the browser.
                // In the past, React has always bubbled them, but this can be surprising.
                // We're going to try aligning closer to the browser behavior by not bubbling
                // them in React either. We'll start by not bubbling onScroll, and then expand.
                var accumulateTargetOnly = !inCapturePhase && // TODO: ideally, we'd eventually add all events from
                // nonDelegatedEvents list in DOMPluginEventSystem.
                // Then we can remove this special list.
                // This is a breaking change that can wait until React 18.
                domEventName === 'scroll';

                var _listeners = accumulateSinglePhaseListeners(targetInst, reactName, nativeEvent.type, inCapturePhase, accumulateTargetOnly);

                if (_listeners.length > 0) {
                  // Intentionally create event lazily.
                  var _event = new SyntheticEventCtor(reactName, reactEventType, null, nativeEvent, nativeEventTarget);

                  dispatchQueue.push({
                    event: _event,
                    listeners: _listeners
                  });
                }
              }
            }

            // TODO: remove top-level side effect.
            registerSimpleEvents();
            registerEvents$2();
            registerEvents$1();
            registerEvents$3();
            registerEvents();

            function extractEvents$5(dispatchQueue, domEventName, targetInst, nativeEvent, nativeEventTarget, eventSystemFlags, targetContainer) {
              // TODO: we should remove the concept of a "SimpleEventPlugin".
              // This is the basic functionality of the event system. All
              // the other plugins are essentially polyfills. So the plugin
              // should probably be inlined somewhere and have its logic
              // be core the to event system. This would potentially allow
              // us to ship builds of React without the polyfilled plugins below.
              extractEvents$4(dispatchQueue, domEventName, targetInst, nativeEvent, nativeEventTarget, eventSystemFlags);
              var shouldProcessPolyfillPlugins = (eventSystemFlags & SHOULD_NOT_PROCESS_POLYFILL_EVENT_PLUGINS) === 0; // We don't process these events unless we are in the
              // event's native "bubble" phase, which means that we're
              // not in the capture phase. That's because we emulate
              // the capture phase here still. This is a trade-off,
              // because in an ideal world we would not emulate and use
              // the phases properly, like we do with the SimpleEvent
              // plugin. However, the plugins below either expect
              // emulation (EnterLeave) or use state localized to that
              // plugin (BeforeInput, Change, Select). The state in
              // these modules complicates things, as you'll essentially
              // get the case where the capture phase event might change
              // state, only for the following bubble event to come in
              // later and not trigger anything as the state now
              // invalidates the heuristics of the event plugin. We
              // could alter all these plugins to work in such ways, but
              // that might cause other unknown side-effects that we
              // can't forsee right now.

              if (shouldProcessPolyfillPlugins) {
                extractEvents$2(dispatchQueue, domEventName, targetInst, nativeEvent, nativeEventTarget, eventSystemFlags);
                extractEvents$1(dispatchQueue, domEventName, targetInst, nativeEvent, nativeEventTarget);
                extractEvents$3(dispatchQueue, domEventName, targetInst, nativeEvent, nativeEventTarget);
                extractEvents(dispatchQueue, domEventName, targetInst, nativeEvent, nativeEventTarget);
              }
            } // List of events that need to be individually attached to media elements.


            var mediaEventTypes = ['abort', 'canplay', 'canplaythrough', 'durationchange', 'emptied', 'encrypted', 'ended', 'error', 'loadeddata', 'loadedmetadata', 'loadstart', 'pause', 'play', 'playing', 'progress', 'ratechange', 'seeked', 'seeking', 'stalled', 'suspend', 'timeupdate', 'volumechange', 'waiting']; // We should not delegate these events to the container, but rather
            // set them on the actual target element itself. This is primarily
            // because these events do not consistently bubble in the DOM.

            var nonDelegatedEvents = new Set(['cancel', 'close', 'invalid', 'load', 'scroll', 'toggle'].concat(mediaEventTypes));

            function executeDispatch(event, listener, currentTarget) {
              var type = event.type || 'unknown-event';
              event.currentTarget = currentTarget;
              invokeGuardedCallbackAndCatchFirstError(type, listener, undefined, event);
              event.currentTarget = null;
            }

            function processDispatchQueueItemsInOrder(event, dispatchListeners, inCapturePhase) {
              var previousInstance;

              if (inCapturePhase) {
                for (var i = dispatchListeners.length - 1; i >= 0; i--) {
                  var _dispatchListeners$i = dispatchListeners[i],
                      instance = _dispatchListeners$i.instance,
                      currentTarget = _dispatchListeners$i.currentTarget,
                      listener = _dispatchListeners$i.listener;

                  if (instance !== previousInstance && event.isPropagationStopped()) {
                    return;
                  }

                  executeDispatch(event, listener, currentTarget);
                  previousInstance = instance;
                }
              } else {
                for (var _i = 0; _i < dispatchListeners.length; _i++) {
                  var _dispatchListeners$_i = dispatchListeners[_i],
                      _instance = _dispatchListeners$_i.instance,
                      _currentTarget = _dispatchListeners$_i.currentTarget,
                      _listener = _dispatchListeners$_i.listener;

                  if (_instance !== previousInstance && event.isPropagationStopped()) {
                    return;
                  }

                  executeDispatch(event, _listener, _currentTarget);
                  previousInstance = _instance;
                }
              }
            }

            function processDispatchQueue(dispatchQueue, eventSystemFlags) {
              var inCapturePhase = (eventSystemFlags & IS_CAPTURE_PHASE) !== 0;

              for (var i = 0; i < dispatchQueue.length; i++) {
                var _dispatchQueue$i = dispatchQueue[i],
                    event = _dispatchQueue$i.event,
                    listeners = _dispatchQueue$i.listeners;
                processDispatchQueueItemsInOrder(event, listeners, inCapturePhase); //  event system doesn't use pooling.
              } // This would be a good time to rethrow if any of the event handlers threw.


              rethrowCaughtError();
            }

            function dispatchEventsForPlugins(domEventName, eventSystemFlags, nativeEvent, targetInst, targetContainer) {
              var nativeEventTarget = getEventTarget(nativeEvent);
              var dispatchQueue = [];
              extractEvents$5(dispatchQueue, domEventName, targetInst, nativeEvent, nativeEventTarget, eventSystemFlags);
              processDispatchQueue(dispatchQueue, eventSystemFlags);
            }

            function listenToNonDelegatedEvent(domEventName, targetElement) {
              var isCapturePhaseListener = false;
              var listenerSet = getEventListenerSet(targetElement);
              var listenerSetKey = getListenerSetKey(domEventName, isCapturePhaseListener);

              if (!listenerSet.has(listenerSetKey)) {
                addTrappedEventListener(targetElement, domEventName, IS_NON_DELEGATED, isCapturePhaseListener);
                listenerSet.add(listenerSetKey);
              }
            }
            var listeningMarker = '_reactListening' + Math.random().toString(36).slice(2);
            function listenToAllSupportedEvents(rootContainerElement) {
              {
                if (rootContainerElement[listeningMarker]) {
                  // Performance optimization: don't iterate through events
                  // for the same portal container or root node more than once.
                  // TODO: once we remove the flag, we may be able to also
                  // remove some of the bookkeeping maps used for laziness.
                  return;
                }

                rootContainerElement[listeningMarker] = true;
                allNativeEvents.forEach(function (domEventName) {
                  if (!nonDelegatedEvents.has(domEventName)) {
                    listenToNativeEvent(domEventName, false, rootContainerElement, null);
                  }

                  listenToNativeEvent(domEventName, true, rootContainerElement, null);
                });
              }
            }
            function listenToNativeEvent(domEventName, isCapturePhaseListener, rootContainerElement, targetElement) {
              var eventSystemFlags = arguments.length > 4 && arguments[4] !== undefined ? arguments[4] : 0;
              var target = rootContainerElement; // selectionchange needs to be attached to the document
              // otherwise it won't capture incoming events that are only
              // triggered on the document directly.

              if (domEventName === 'selectionchange' && rootContainerElement.nodeType !== DOCUMENT_NODE) {
                target = rootContainerElement.ownerDocument;
              } // If the event can be delegated (or is capture phase), we can
              // register it to the root container. Otherwise, we should
              // register the event to the target element and mark it as
              // a non-delegated event.


              if (targetElement !== null && !isCapturePhaseListener && nonDelegatedEvents.has(domEventName)) {
                // For all non-delegated events, apart from scroll, we attach
                // their event listeners to the respective elements that their
                // events fire on. That means we can skip this step, as event
                // listener has already been added previously. However, we
                // special case the scroll event because the reality is that any
                // element can scroll.
                // TODO: ideally, we'd eventually apply the same logic to all
                // events from the nonDelegatedEvents list. Then we can remove
                // this special case and use the same logic for all events.
                if (domEventName !== 'scroll') {
                  return;
                }

                eventSystemFlags |= IS_NON_DELEGATED;
                target = targetElement;
              }

              var listenerSet = getEventListenerSet(target);
              var listenerSetKey = getListenerSetKey(domEventName, isCapturePhaseListener); // If the listener entry is empty or we should upgrade, then
              // we need to trap an event listener onto the target.

              if (!listenerSet.has(listenerSetKey)) {
                if (isCapturePhaseListener) {
                  eventSystemFlags |= IS_CAPTURE_PHASE;
                }

                addTrappedEventListener(target, domEventName, eventSystemFlags, isCapturePhaseListener);
                listenerSet.add(listenerSetKey);
              }
            }

            function addTrappedEventListener(targetContainer, domEventName, eventSystemFlags, isCapturePhaseListener, isDeferredListenerForLegacyFBSupport) {
              var listener = createEventListenerWrapperWithPriority(targetContainer, domEventName, eventSystemFlags); // If passive option is not supported, then the event will be
              // active and not passive.

              var isPassiveListener = undefined;

              if (passiveBrowserEventsSupported) {
                // Browsers introduced an intervention, making these events
                // passive by default on document. React doesn't bind them
                // to document anymore, but changing this now would undo
                // the performance wins from the change. So we emulate
                // the existing behavior manually on the roots now.
                // https://github.com/facebook/react/issues/19651
                if (domEventName === 'touchstart' || domEventName === 'touchmove' || domEventName === 'wheel') {
                  isPassiveListener = true;
                }
              }

              targetContainer =  targetContainer;


              if (isCapturePhaseListener) {
                if (isPassiveListener !== undefined) {
                  addEventCaptureListenerWithPassiveFlag(targetContainer, domEventName, listener, isPassiveListener);
                } else {
                  addEventCaptureListener(targetContainer, domEventName, listener);
                }
              } else {
                if (isPassiveListener !== undefined) {
                  addEventBubbleListenerWithPassiveFlag(targetContainer, domEventName, listener, isPassiveListener);
                } else {
                  addEventBubbleListener(targetContainer, domEventName, listener);
                }
              }
            }

            function isMatchingRootContainer(grandContainer, targetContainer) {
              return grandContainer === targetContainer || grandContainer.nodeType === COMMENT_NODE && grandContainer.parentNode === targetContainer;
            }

            function dispatchEventForPluginEventSystem(domEventName, eventSystemFlags, nativeEvent, targetInst, targetContainer) {
              var ancestorInst = targetInst;

              if ((eventSystemFlags & IS_EVENT_HANDLE_NON_MANAGED_NODE) === 0 && (eventSystemFlags & IS_NON_DELEGATED) === 0) {
                var targetContainerNode = targetContainer; // If we are using the legacy FB support flag, we

                if (targetInst !== null) {
                  // The below logic attempts to work out if we need to change
                  // the target fiber to a different ancestor. We had similar logic
                  // in the legacy event system, except the big difference between
                  // systems is that the modern event system now has an event listener
                  // attached to each React Root and React Portal Root. Together,
                  // the DOM nodes representing these roots are the "rootContainer".
                  // To figure out which ancestor instance we should use, we traverse
                  // up the fiber tree from the target instance and attempt to find
                  // root boundaries that match that of our current "rootContainer".
                  // If we find that "rootContainer", we find the parent fiber
                  // sub-tree for that root and make that our ancestor instance.
                  var node = targetInst;

                  mainLoop: while (true) {
                    if (node === null) {
                      return;
                    }

                    var nodeTag = node.tag;

                    if (nodeTag === HostRoot || nodeTag === HostPortal) {
                      var container = node.stateNode.containerInfo;

                      if (isMatchingRootContainer(container, targetContainerNode)) {
                        break;
                      }

                      if (nodeTag === HostPortal) {
                        // The target is a portal, but it's not the rootContainer we're looking for.
                        // Normally portals handle their own events all the way down to the root.
                        // So we should be able to stop now. However, we don't know if this portal
                        // was part of *our* root.
                        var grandNode = node.return;

                        while (grandNode !== null) {
                          var grandTag = grandNode.tag;

                          if (grandTag === HostRoot || grandTag === HostPortal) {
                            var grandContainer = grandNode.stateNode.containerInfo;

                            if (isMatchingRootContainer(grandContainer, targetContainerNode)) {
                              // This is the rootContainer we're looking for and we found it as
                              // a parent of the Portal. That means we can ignore it because the
                              // Portal will bubble through to us.
                              return;
                            }
                          }

                          grandNode = grandNode.return;
                        }
                      } // Now we need to find it's corresponding host fiber in the other
                      // tree. To do this we can use getClosestInstanceFromNode, but we
                      // need to validate that the fiber is a host instance, otherwise
                      // we need to traverse up through the DOM till we find the correct
                      // node that is from the other tree.


                      while (container !== null) {
                        var parentNode = getClosestInstanceFromNode(container);

                        if (parentNode === null) {
                          return;
                        }

                        var parentTag = parentNode.tag;

                        if (parentTag === HostComponent || parentTag === HostText) {
                          node = ancestorInst = parentNode;
                          continue mainLoop;
                        }

                        container = container.parentNode;
                      }
                    }

                    node = node.return;
                  }
                }
              }

              batchedEventUpdates(function () {
                return dispatchEventsForPlugins(domEventName, eventSystemFlags, nativeEvent, ancestorInst);
              });
            }

            function createDispatchListener(instance, listener, currentTarget) {
              return {
                instance: instance,
                listener: listener,
                currentTarget: currentTarget
              };
            }

            function accumulateSinglePhaseListeners(targetFiber, reactName, nativeEventType, inCapturePhase, accumulateTargetOnly) {
              var captureName = reactName !== null ? reactName + 'Capture' : null;
              var reactEventName = inCapturePhase ? captureName : reactName;
              var listeners = [];
              var instance = targetFiber;
              var lastHostComponent = null; // Accumulate all instances and listeners via the target -> root path.

              while (instance !== null) {
                var _instance2 = instance,
                    stateNode = _instance2.stateNode,
                    tag = _instance2.tag; // Handle listeners that are on HostComponents (i.e. <div>)

                if (tag === HostComponent && stateNode !== null) {
                  lastHostComponent = stateNode; // createEventHandle listeners


                  if (reactEventName !== null) {
                    var listener = getListener(instance, reactEventName);

                    if (listener != null) {
                      listeners.push(createDispatchListener(instance, listener, lastHostComponent));
                    }
                  }
                } // If we are only accumulating events for the target, then we don't
                // continue to propagate through the React fiber tree to find other
                // listeners.


                if (accumulateTargetOnly) {
                  break;
                }

                instance = instance.return;
              }

              return listeners;
            } // We should only use this function for:
            // - BeforeInputEventPlugin
            // - ChangeEventPlugin
            // - SelectEventPlugin
            // This is because we only process these plugins
            // in the bubble phase, so we need to accumulate two
            // phase event listeners (via emulation).

            function accumulateTwoPhaseListeners(targetFiber, reactName) {
              var captureName = reactName + 'Capture';
              var listeners = [];
              var instance = targetFiber; // Accumulate all instances and listeners via the target -> root path.

              while (instance !== null) {
                var _instance3 = instance,
                    stateNode = _instance3.stateNode,
                    tag = _instance3.tag; // Handle listeners that are on HostComponents (i.e. <div>)

                if (tag === HostComponent && stateNode !== null) {
                  var currentTarget = stateNode;
                  var captureListener = getListener(instance, captureName);

                  if (captureListener != null) {
                    listeners.unshift(createDispatchListener(instance, captureListener, currentTarget));
                  }

                  var bubbleListener = getListener(instance, reactName);

                  if (bubbleListener != null) {
                    listeners.push(createDispatchListener(instance, bubbleListener, currentTarget));
                  }
                }

                instance = instance.return;
              }

              return listeners;
            }

            function getParent(inst) {
              if (inst === null) {
                return null;
              }

              do {
                inst = inst.return; // TODO: If this is a HostRoot we might want to bail out.
                // That is depending on if we want nested subtrees (layers) to bubble
                // events to their parent. We could also go through parentNode on the
                // host node but that wouldn't work for React Native and doesn't let us
                // do the portal feature.
              } while (inst && inst.tag !== HostComponent);

              if (inst) {
                return inst;
              }

              return null;
            }
            /**
             * Return the lowest common ancestor of A and B, or null if they are in
             * different trees.
             */


            function getLowestCommonAncestor(instA, instB) {
              var nodeA = instA;
              var nodeB = instB;
              var depthA = 0;

              for (var tempA = nodeA; tempA; tempA = getParent(tempA)) {
                depthA++;
              }

              var depthB = 0;

              for (var tempB = nodeB; tempB; tempB = getParent(tempB)) {
                depthB++;
              } // If A is deeper, crawl up.


              while (depthA - depthB > 0) {
                nodeA = getParent(nodeA);
                depthA--;
              } // If B is deeper, crawl up.


              while (depthB - depthA > 0) {
                nodeB = getParent(nodeB);
                depthB--;
              } // Walk in lockstep until we find a match.


              var depth = depthA;

              while (depth--) {
                if (nodeA === nodeB || nodeB !== null && nodeA === nodeB.alternate) {
                  return nodeA;
                }

                nodeA = getParent(nodeA);
                nodeB = getParent(nodeB);
              }

              return null;
            }

            function accumulateEnterLeaveListenersForEvent(dispatchQueue, event, target, common, inCapturePhase) {
              var registrationName = event._reactName;
              var listeners = [];
              var instance = target;

              while (instance !== null) {
                if (instance === common) {
                  break;
                }

                var _instance4 = instance,
                    alternate = _instance4.alternate,
                    stateNode = _instance4.stateNode,
                    tag = _instance4.tag;

                if (alternate !== null && alternate === common) {
                  break;
                }

                if (tag === HostComponent && stateNode !== null) {
                  var currentTarget = stateNode;

                  if (inCapturePhase) {
                    var captureListener = getListener(instance, registrationName);

                    if (captureListener != null) {
                      listeners.unshift(createDispatchListener(instance, captureListener, currentTarget));
                    }
                  } else if (!inCapturePhase) {
                    var bubbleListener = getListener(instance, registrationName);

                    if (bubbleListener != null) {
                      listeners.push(createDispatchListener(instance, bubbleListener, currentTarget));
                    }
                  }
                }

                instance = instance.return;
              }

              if (listeners.length !== 0) {
                dispatchQueue.push({
                  event: event,
                  listeners: listeners
                });
              }
            } // We should only use this function for:
            // - EnterLeaveEventPlugin
            // This is because we only process this plugin
            // in the bubble phase, so we need to accumulate two
            // phase event listeners.


            function accumulateEnterLeaveTwoPhaseListeners(dispatchQueue, leaveEvent, enterEvent, from, to) {
              var common = from && to ? getLowestCommonAncestor(from, to) : null;

              if (from !== null) {
                accumulateEnterLeaveListenersForEvent(dispatchQueue, leaveEvent, from, common, false);
              }

              if (to !== null && enterEvent !== null) {
                accumulateEnterLeaveListenersForEvent(dispatchQueue, enterEvent, to, common, true);
              }
            }
            function getListenerSetKey(domEventName, capture) {
              return domEventName + "__" + (capture ? 'capture' : 'bubble');
            }

            var didWarnInvalidHydration = false;
            var DANGEROUSLY_SET_INNER_HTML = 'dangerouslySetInnerHTML';
            var SUPPRESS_CONTENT_EDITABLE_WARNING = 'suppressContentEditableWarning';
            var SUPPRESS_HYDRATION_WARNING = 'suppressHydrationWarning';
            var AUTOFOCUS = 'autoFocus';
            var CHILDREN = 'children';
            var STYLE = 'style';
            var HTML$1 = '__html';
            var HTML_NAMESPACE$1 = Namespaces.html;
            var warnedUnknownTags;
            var suppressHydrationWarning;
            var validatePropertiesInDevelopment;
            var warnForTextDifference;
            var warnForPropDifference;
            var warnForExtraAttributes;
            var warnForInvalidEventListener;
            var canDiffStyleForHydrationWarning;
            var normalizeMarkupForTextOrAttribute;
            var normalizeHTML;

            {
              warnedUnknownTags = {
                // There are working polyfills for <dialog>. Let people use it.
                dialog: true,
                // Electron ships a custom <webview> tag to display external web content in
                // an isolated frame and process.
                // This tag is not present in non Electron environments such as JSDom which
                // is often used for testing purposes.
                // @see https://electronjs.org/docs/api/webview-tag
                webview: true
              };

              validatePropertiesInDevelopment = function (type, props) {
                validateProperties(type, props);
                validateProperties$1(type, props);
                validateProperties$2(type, props, {
                  registrationNameDependencies: registrationNameDependencies,
                  possibleRegistrationNames: possibleRegistrationNames
                });
              }; // IE 11 parses & normalizes the style attribute as opposed to other
              // browsers. It adds spaces and sorts the properties in some
              // non-alphabetical order. Handling that would require sorting CSS
              // properties in the client & server versions or applying
              // `expectedStyle` to a temporary DOM node to read its `style` attribute
              // normalized. Since it only affects IE, we're skipping style warnings
              // in that browser completely in favor of doing all that work.
              // See https://github.com/facebook/react/issues/11807


              canDiffStyleForHydrationWarning = canUseDOM && !document.documentMode; // HTML parsing normalizes CR and CRLF to LF.
              // It also can turn \u0000 into \uFFFD inside attributes.
              // https://www.w3.org/TR/html5/single-page.html#preprocessing-the-input-stream
              // If we have a mismatch, it might be caused by that.
              // We will still patch up in this case but not fire the warning.

              var NORMALIZE_NEWLINES_REGEX = /\r\n?/g;
              var NORMALIZE_NULL_AND_REPLACEMENT_REGEX = /\u0000|\uFFFD/g;

              normalizeMarkupForTextOrAttribute = function (markup) {
                var markupString = typeof markup === 'string' ? markup : '' + markup;
                return markupString.replace(NORMALIZE_NEWLINES_REGEX, '\n').replace(NORMALIZE_NULL_AND_REPLACEMENT_REGEX, '');
              };

              warnForTextDifference = function (serverText, clientText) {
                if (didWarnInvalidHydration) {
                  return;
                }

                var normalizedClientText = normalizeMarkupForTextOrAttribute(clientText);
                var normalizedServerText = normalizeMarkupForTextOrAttribute(serverText);

                if (normalizedServerText === normalizedClientText) {
                  return;
                }

                didWarnInvalidHydration = true;

                error('Text content did not match. Server: "%s" Client: "%s"', normalizedServerText, normalizedClientText);
              };

              warnForPropDifference = function (propName, serverValue, clientValue) {
                if (didWarnInvalidHydration) {
                  return;
                }

                var normalizedClientValue = normalizeMarkupForTextOrAttribute(clientValue);
                var normalizedServerValue = normalizeMarkupForTextOrAttribute(serverValue);

                if (normalizedServerValue === normalizedClientValue) {
                  return;
                }

                didWarnInvalidHydration = true;

                error('Prop `%s` did not match. Server: %s Client: %s', propName, JSON.stringify(normalizedServerValue), JSON.stringify(normalizedClientValue));
              };

              warnForExtraAttributes = function (attributeNames) {
                if (didWarnInvalidHydration) {
                  return;
                }

                didWarnInvalidHydration = true;
                var names = [];
                attributeNames.forEach(function (name) {
                  names.push(name);
                });

                error('Extra attributes from the server: %s', names);
              };

              warnForInvalidEventListener = function (registrationName, listener) {
                if (listener === false) {
                  error('Expected `%s` listener to be a function, instead got `false`.\n\n' + 'If you used to conditionally omit it with %s={condition && value}, ' + 'pass %s={condition ? value : undefined} instead.', registrationName, registrationName, registrationName);
                } else {
                  error('Expected `%s` listener to be a function, instead got a value of `%s` type.', registrationName, typeof listener);
                }
              }; // Parse the HTML and read it back to normalize the HTML string so that it
              // can be used for comparison.


              normalizeHTML = function (parent, html) {
                // We could have created a separate document here to avoid
                // re-initializing custom elements if they exist. But this breaks
                // how <noscript> is being handled. So we use the same document.
                // See the discussion in https://github.com/facebook/react/pull/11157.
                var testElement = parent.namespaceURI === HTML_NAMESPACE$1 ? parent.ownerDocument.createElement(parent.tagName) : parent.ownerDocument.createElementNS(parent.namespaceURI, parent.tagName);
                testElement.innerHTML = html;
                return testElement.innerHTML;
              };
            }

            function getOwnerDocumentFromRootContainer(rootContainerElement) {
              return rootContainerElement.nodeType === DOCUMENT_NODE ? rootContainerElement : rootContainerElement.ownerDocument;
            }

            function noop() {}

            function trapClickOnNonInteractiveElement(node) {
              // Mobile Safari does not fire properly bubble click events on
              // non-interactive elements, which means delegated click listeners do not
              // fire. The workaround for this bug involves attaching an empty click
              // listener on the target node.
              // https://www.quirksmode.org/blog/archives/2010/09/click_event_del.html
              // Just set it using the onclick property so that we don't have to manage any
              // bookkeeping for it. Not sure if we need to clear it when the listener is
              // removed.
              // TODO: Only do this for the relevant Safaris maybe?
              node.onclick = noop;
            }

            function setInitialDOMProperties(tag, domElement, rootContainerElement, nextProps, isCustomComponentTag) {
              for (var propKey in nextProps) {
                if (!nextProps.hasOwnProperty(propKey)) {
                  continue;
                }

                var nextProp = nextProps[propKey];

                if (propKey === STYLE) {
                  {
                    if (nextProp) {
                      // Freeze the next style object so that we can assume it won't be
                      // mutated. We have already warned for this in the past.
                      Object.freeze(nextProp);
                    }
                  } // Relies on `updateStylesByID` not mutating `styleUpdates`.


                  setValueForStyles(domElement, nextProp);
                } else if (propKey === DANGEROUSLY_SET_INNER_HTML) {
                  var nextHtml = nextProp ? nextProp[HTML$1] : undefined;

                  if (nextHtml != null) {
                    setInnerHTML(domElement, nextHtml);
                  }
                } else if (propKey === CHILDREN) {
                  if (typeof nextProp === 'string') {
                    // Avoid setting initial textContent when the text is empty. In IE11 setting
                    // textContent on a <textarea> will cause the placeholder to not
                    // show within the <textarea> until it has been focused and blurred again.
                    // https://github.com/facebook/react/issues/6731#issuecomment-254874553
                    var canSetTextContent = tag !== 'textarea' || nextProp !== '';

                    if (canSetTextContent) {
                      setTextContent(domElement, nextProp);
                    }
                  } else if (typeof nextProp === 'number') {
                    setTextContent(domElement, '' + nextProp);
                  }
                } else if (propKey === SUPPRESS_CONTENT_EDITABLE_WARNING || propKey === SUPPRESS_HYDRATION_WARNING) ; else if (propKey === AUTOFOCUS) ; else if (registrationNameDependencies.hasOwnProperty(propKey)) {
                  if (nextProp != null) {
                    if ( typeof nextProp !== 'function') {
                      warnForInvalidEventListener(propKey, nextProp);
                    }

                    if (propKey === 'onScroll') {
                      listenToNonDelegatedEvent('scroll', domElement);
                    }
                  }
                } else if (nextProp != null) {
                  setValueForProperty(domElement, propKey, nextProp, isCustomComponentTag);
                }
              }
            }

            function updateDOMProperties(domElement, updatePayload, wasCustomComponentTag, isCustomComponentTag) {
              // TODO: Handle wasCustomComponentTag
              for (var i = 0; i < updatePayload.length; i += 2) {
                var propKey = updatePayload[i];
                var propValue = updatePayload[i + 1];

                if (propKey === STYLE) {
                  setValueForStyles(domElement, propValue);
                } else if (propKey === DANGEROUSLY_SET_INNER_HTML) {
                  setInnerHTML(domElement, propValue);
                } else if (propKey === CHILDREN) {
                  setTextContent(domElement, propValue);
                } else {
                  setValueForProperty(domElement, propKey, propValue, isCustomComponentTag);
                }
              }
            }

            function createElement(type, props, rootContainerElement, parentNamespace) {
              var isCustomComponentTag; // We create tags in the namespace of their parent container, except HTML
              // tags get no namespace.

              var ownerDocument = getOwnerDocumentFromRootContainer(rootContainerElement);
              var domElement;
              var namespaceURI = parentNamespace;

              if (namespaceURI === HTML_NAMESPACE$1) {
                namespaceURI = getIntrinsicNamespace(type);
              }

              if (namespaceURI === HTML_NAMESPACE$1) {
                {
                  isCustomComponentTag = isCustomComponent(type, props); // Should this check be gated by parent namespace? Not sure we want to
                  // allow <SVG> or <mATH>.

                  if (!isCustomComponentTag && type !== type.toLowerCase()) {
                    error('<%s /> is using incorrect casing. ' + 'Use PascalCase for React components, ' + 'or lowercase for HTML elements.', type);
                  }
                }

                if (type === 'script') {
                  // Create the script via .innerHTML so its "parser-inserted" flag is
                  // set to true and it does not execute
                  var div = ownerDocument.createElement('div');

                  div.innerHTML = '<script><' + '/script>'; // eslint-disable-line
                  // This is guaranteed to yield a script element.

                  var firstChild = div.firstChild;
                  domElement = div.removeChild(firstChild);
                } else if (typeof props.is === 'string') {
                  // $FlowIssue `createElement` should be updated for Web Components
                  domElement = ownerDocument.createElement(type, {
                    is: props.is
                  });
                } else {
                  // Separate else branch instead of using `props.is || undefined` above because of a Firefox bug.
                  // See discussion in https://github.com/facebook/react/pull/6896
                  // and discussion in https://bugzilla.mozilla.org/show_bug.cgi?id=1276240
                  domElement = ownerDocument.createElement(type); // Normally attributes are assigned in `setInitialDOMProperties`, however the `multiple` and `size`
                  // attributes on `select`s needs to be added before `option`s are inserted.
                  // This prevents:
                  // - a bug where the `select` does not scroll to the correct option because singular
                  //  `select` elements automatically pick the first item #13222
                  // - a bug where the `select` set the first item as selected despite the `size` attribute #14239
                  // See https://github.com/facebook/react/issues/13222
                  // and https://github.com/facebook/react/issues/14239

                  if (type === 'select') {
                    var node = domElement;

                    if (props.multiple) {
                      node.multiple = true;
                    } else if (props.size) {
                      // Setting a size greater than 1 causes a select to behave like `multiple=true`, where
                      // it is possible that no option is selected.
                      //
                      // This is only necessary when a select in "single selection mode".
                      node.size = props.size;
                    }
                  }
                }
              } else {
                domElement = ownerDocument.createElementNS(namespaceURI, type);
              }

              {
                if (namespaceURI === HTML_NAMESPACE$1) {
                  if (!isCustomComponentTag && Object.prototype.toString.call(domElement) === '[object HTMLUnknownElement]' && !Object.prototype.hasOwnProperty.call(warnedUnknownTags, type)) {
                    warnedUnknownTags[type] = true;

                    error('The tag <%s> is unrecognized in this browser. ' + 'If you meant to render a React component, start its name with ' + 'an uppercase letter.', type);
                  }
                }
              }

              return domElement;
            }
            function createTextNode(text, rootContainerElement) {
              return getOwnerDocumentFromRootContainer(rootContainerElement).createTextNode(text);
            }
            function setInitialProperties(domElement, tag, rawProps, rootContainerElement) {
              var isCustomComponentTag = isCustomComponent(tag, rawProps);

              {
                validatePropertiesInDevelopment(tag, rawProps);
              } // TODO: Make sure that we check isMounted before firing any of these events.


              var props;

              switch (tag) {
                case 'dialog':
                  listenToNonDelegatedEvent('cancel', domElement);
                  listenToNonDelegatedEvent('close', domElement);
                  props = rawProps;
                  break;

                case 'iframe':
                case 'object':
                case 'embed':
                  // We listen to this event in case to ensure emulated bubble
                  // listeners still fire for the load event.
                  listenToNonDelegatedEvent('load', domElement);
                  props = rawProps;
                  break;

                case 'video':
                case 'audio':
                  // We listen to these events in case to ensure emulated bubble
                  // listeners still fire for all the media events.
                  for (var i = 0; i < mediaEventTypes.length; i++) {
                    listenToNonDelegatedEvent(mediaEventTypes[i], domElement);
                  }

                  props = rawProps;
                  break;

                case 'source':
                  // We listen to this event in case to ensure emulated bubble
                  // listeners still fire for the error event.
                  listenToNonDelegatedEvent('error', domElement);
                  props = rawProps;
                  break;

                case 'img':
                case 'image':
                case 'link':
                  // We listen to these events in case to ensure emulated bubble
                  // listeners still fire for error and load events.
                  listenToNonDelegatedEvent('error', domElement);
                  listenToNonDelegatedEvent('load', domElement);
                  props = rawProps;
                  break;

                case 'details':
                  // We listen to this event in case to ensure emulated bubble
                  // listeners still fire for the toggle event.
                  listenToNonDelegatedEvent('toggle', domElement);
                  props = rawProps;
                  break;

                case 'input':
                  initWrapperState(domElement, rawProps);
                  props = getHostProps(domElement, rawProps); // We listen to this event in case to ensure emulated bubble
                  // listeners still fire for the invalid event.

                  listenToNonDelegatedEvent('invalid', domElement);

                  break;

                case 'option':
                  validateProps(domElement, rawProps);
                  props = getHostProps$1(domElement, rawProps);
                  break;

                case 'select':
                  initWrapperState$1(domElement, rawProps);
                  props = getHostProps$2(domElement, rawProps); // We listen to this event in case to ensure emulated bubble
                  // listeners still fire for the invalid event.

                  listenToNonDelegatedEvent('invalid', domElement);

                  break;

                case 'textarea':
                  initWrapperState$2(domElement, rawProps);
                  props = getHostProps$3(domElement, rawProps); // We listen to this event in case to ensure emulated bubble
                  // listeners still fire for the invalid event.

                  listenToNonDelegatedEvent('invalid', domElement);

                  break;

                default:
                  props = rawProps;
              }

              assertValidProps(tag, props);
              setInitialDOMProperties(tag, domElement, rootContainerElement, props, isCustomComponentTag);

              switch (tag) {
                case 'input':
                  // TODO: Make sure we check if this is still unmounted or do any clean
                  // up necessary since we never stop tracking anymore.
                  track(domElement);
                  postMountWrapper(domElement, rawProps, false);
                  break;

                case 'textarea':
                  // TODO: Make sure we check if this is still unmounted or do any clean
                  // up necessary since we never stop tracking anymore.
                  track(domElement);
                  postMountWrapper$3(domElement);
                  break;

                case 'option':
                  postMountWrapper$1(domElement, rawProps);
                  break;

                case 'select':
                  postMountWrapper$2(domElement, rawProps);
                  break;

                default:
                  if (typeof props.onClick === 'function') {
                    // TODO: This cast may not be sound for SVG, MathML or custom elements.
                    trapClickOnNonInteractiveElement(domElement);
                  }

                  break;
              }
            } // Calculate the diff between the two objects.

            function diffProperties(domElement, tag, lastRawProps, nextRawProps, rootContainerElement) {
              {
                validatePropertiesInDevelopment(tag, nextRawProps);
              }

              var updatePayload = null;
              var lastProps;
              var nextProps;

              switch (tag) {
                case 'input':
                  lastProps = getHostProps(domElement, lastRawProps);
                  nextProps = getHostProps(domElement, nextRawProps);
                  updatePayload = [];
                  break;

                case 'option':
                  lastProps = getHostProps$1(domElement, lastRawProps);
                  nextProps = getHostProps$1(domElement, nextRawProps);
                  updatePayload = [];
                  break;

                case 'select':
                  lastProps = getHostProps$2(domElement, lastRawProps);
                  nextProps = getHostProps$2(domElement, nextRawProps);
                  updatePayload = [];
                  break;

                case 'textarea':
                  lastProps = getHostProps$3(domElement, lastRawProps);
                  nextProps = getHostProps$3(domElement, nextRawProps);
                  updatePayload = [];
                  break;

                default:
                  lastProps = lastRawProps;
                  nextProps = nextRawProps;

                  if (typeof lastProps.onClick !== 'function' && typeof nextProps.onClick === 'function') {
                    // TODO: This cast may not be sound for SVG, MathML or custom elements.
                    trapClickOnNonInteractiveElement(domElement);
                  }

                  break;
              }

              assertValidProps(tag, nextProps);
              var propKey;
              var styleName;
              var styleUpdates = null;

              for (propKey in lastProps) {
                if (nextProps.hasOwnProperty(propKey) || !lastProps.hasOwnProperty(propKey) || lastProps[propKey] == null) {
                  continue;
                }

                if (propKey === STYLE) {
                  var lastStyle = lastProps[propKey];

                  for (styleName in lastStyle) {
                    if (lastStyle.hasOwnProperty(styleName)) {
                      if (!styleUpdates) {
                        styleUpdates = {};
                      }

                      styleUpdates[styleName] = '';
                    }
                  }
                } else if (propKey === DANGEROUSLY_SET_INNER_HTML || propKey === CHILDREN) ; else if (propKey === SUPPRESS_CONTENT_EDITABLE_WARNING || propKey === SUPPRESS_HYDRATION_WARNING) ; else if (propKey === AUTOFOCUS) ; else if (registrationNameDependencies.hasOwnProperty(propKey)) {
                  // This is a special case. If any listener updates we need to ensure
                  // that the "current" fiber pointer gets updated so we need a commit
                  // to update this element.
                  if (!updatePayload) {
                    updatePayload = [];
                  }
                } else {
                  // For all other deleted properties we add it to the queue. We use
                  // the allowed property list in the commit phase instead.
                  (updatePayload = updatePayload || []).push(propKey, null);
                }
              }

              for (propKey in nextProps) {
                var nextProp = nextProps[propKey];
                var lastProp = lastProps != null ? lastProps[propKey] : undefined;

                if (!nextProps.hasOwnProperty(propKey) || nextProp === lastProp || nextProp == null && lastProp == null) {
                  continue;
                }

                if (propKey === STYLE) {
                  {
                    if (nextProp) {
                      // Freeze the next style object so that we can assume it won't be
                      // mutated. We have already warned for this in the past.
                      Object.freeze(nextProp);
                    }
                  }

                  if (lastProp) {
                    // Unset styles on `lastProp` but not on `nextProp`.
                    for (styleName in lastProp) {
                      if (lastProp.hasOwnProperty(styleName) && (!nextProp || !nextProp.hasOwnProperty(styleName))) {
                        if (!styleUpdates) {
                          styleUpdates = {};
                        }

                        styleUpdates[styleName] = '';
                      }
                    } // Update styles that changed since `lastProp`.


                    for (styleName in nextProp) {
                      if (nextProp.hasOwnProperty(styleName) && lastProp[styleName] !== nextProp[styleName]) {
                        if (!styleUpdates) {
                          styleUpdates = {};
                        }

                        styleUpdates[styleName] = nextProp[styleName];
                      }
                    }
                  } else {
                    // Relies on `updateStylesByID` not mutating `styleUpdates`.
                    if (!styleUpdates) {
                      if (!updatePayload) {
                        updatePayload = [];
                      }

                      updatePayload.push(propKey, styleUpdates);
                    }

                    styleUpdates = nextProp;
                  }
                } else if (propKey === DANGEROUSLY_SET_INNER_HTML) {
                  var nextHtml = nextProp ? nextProp[HTML$1] : undefined;
                  var lastHtml = lastProp ? lastProp[HTML$1] : undefined;

                  if (nextHtml != null) {
                    if (lastHtml !== nextHtml) {
                      (updatePayload = updatePayload || []).push(propKey, nextHtml);
                    }
                  }
                } else if (propKey === CHILDREN) {
                  if (typeof nextProp === 'string' || typeof nextProp === 'number') {
                    (updatePayload = updatePayload || []).push(propKey, '' + nextProp);
                  }
                } else if (propKey === SUPPRESS_CONTENT_EDITABLE_WARNING || propKey === SUPPRESS_HYDRATION_WARNING) ; else if (registrationNameDependencies.hasOwnProperty(propKey)) {
                  if (nextProp != null) {
                    // We eagerly listen to this even though we haven't committed yet.
                    if ( typeof nextProp !== 'function') {
                      warnForInvalidEventListener(propKey, nextProp);
                    }

                    if (propKey === 'onScroll') {
                      listenToNonDelegatedEvent('scroll', domElement);
                    }
                  }

                  if (!updatePayload && lastProp !== nextProp) {
                    // This is a special case. If any listener updates we need to ensure
                    // that the "current" props pointer gets updated so we need a commit
                    // to update this element.
                    updatePayload = [];
                  }
                } else if (typeof nextProp === 'object' && nextProp !== null && nextProp.$$typeof === REACT_OPAQUE_ID_TYPE) {
                  // If we encounter useOpaqueReference's opaque object, this means we are hydrating.
                  // In this case, call the opaque object's toString function which generates a new client
                  // ID so client and server IDs match and throws to rerender.
                  nextProp.toString();
                } else {
                  // For any other property we always add it to the queue and then we
                  // filter it out using the allowed property list during the commit.
                  (updatePayload = updatePayload || []).push(propKey, nextProp);
                }
              }

              if (styleUpdates) {
                {
                  validateShorthandPropertyCollisionInDev(styleUpdates, nextProps[STYLE]);
                }

                (updatePayload = updatePayload || []).push(STYLE, styleUpdates);
              }

              return updatePayload;
            } // Apply the diff.

            function updateProperties(domElement, updatePayload, tag, lastRawProps, nextRawProps) {
              // Update checked *before* name.
              // In the middle of an update, it is possible to have multiple checked.
              // When a checked radio tries to change name, browser makes another radio's checked false.
              if (tag === 'input' && nextRawProps.type === 'radio' && nextRawProps.name != null) {
                updateChecked(domElement, nextRawProps);
              }

              var wasCustomComponentTag = isCustomComponent(tag, lastRawProps);
              var isCustomComponentTag = isCustomComponent(tag, nextRawProps); // Apply the diff.

              updateDOMProperties(domElement, updatePayload, wasCustomComponentTag, isCustomComponentTag); // TODO: Ensure that an update gets scheduled if any of the special props
              // changed.

              switch (tag) {
                case 'input':
                  // Update the wrapper around inputs *after* updating props. This has to
                  // happen after `updateDOMProperties`. Otherwise HTML5 input validations
                  // raise warnings and prevent the new value from being assigned.
                  updateWrapper(domElement, nextRawProps);
                  break;

                case 'textarea':
                  updateWrapper$1(domElement, nextRawProps);
                  break;

                case 'select':
                  // <select> value update needs to occur after <option> children
                  // reconciliation
                  postUpdateWrapper(domElement, nextRawProps);
                  break;
              }
            }

            function getPossibleStandardName(propName) {
              {
                var lowerCasedName = propName.toLowerCase();

                if (!possibleStandardNames.hasOwnProperty(lowerCasedName)) {
                  return null;
                }

                return possibleStandardNames[lowerCasedName] || null;
              }
            }

            function diffHydratedProperties(domElement, tag, rawProps, parentNamespace, rootContainerElement) {
              var isCustomComponentTag;
              var extraAttributeNames;

              {
                suppressHydrationWarning = rawProps[SUPPRESS_HYDRATION_WARNING] === true;
                isCustomComponentTag = isCustomComponent(tag, rawProps);
                validatePropertiesInDevelopment(tag, rawProps);
              } // TODO: Make sure that we check isMounted before firing any of these events.


              switch (tag) {
                case 'dialog':
                  listenToNonDelegatedEvent('cancel', domElement);
                  listenToNonDelegatedEvent('close', domElement);
                  break;

                case 'iframe':
                case 'object':
                case 'embed':
                  // We listen to this event in case to ensure emulated bubble
                  // listeners still fire for the load event.
                  listenToNonDelegatedEvent('load', domElement);
                  break;

                case 'video':
                case 'audio':
                  // We listen to these events in case to ensure emulated bubble
                  // listeners still fire for all the media events.
                  for (var i = 0; i < mediaEventTypes.length; i++) {
                    listenToNonDelegatedEvent(mediaEventTypes[i], domElement);
                  }

                  break;

                case 'source':
                  // We listen to this event in case to ensure emulated bubble
                  // listeners still fire for the error event.
                  listenToNonDelegatedEvent('error', domElement);
                  break;

                case 'img':
                case 'image':
                case 'link':
                  // We listen to these events in case to ensure emulated bubble
                  // listeners still fire for error and load events.
                  listenToNonDelegatedEvent('error', domElement);
                  listenToNonDelegatedEvent('load', domElement);
                  break;

                case 'details':
                  // We listen to this event in case to ensure emulated bubble
                  // listeners still fire for the toggle event.
                  listenToNonDelegatedEvent('toggle', domElement);
                  break;

                case 'input':
                  initWrapperState(domElement, rawProps); // We listen to this event in case to ensure emulated bubble
                  // listeners still fire for the invalid event.

                  listenToNonDelegatedEvent('invalid', domElement);

                  break;

                case 'option':
                  validateProps(domElement, rawProps);
                  break;

                case 'select':
                  initWrapperState$1(domElement, rawProps); // We listen to this event in case to ensure emulated bubble
                  // listeners still fire for the invalid event.

                  listenToNonDelegatedEvent('invalid', domElement);

                  break;

                case 'textarea':
                  initWrapperState$2(domElement, rawProps); // We listen to this event in case to ensure emulated bubble
                  // listeners still fire for the invalid event.

                  listenToNonDelegatedEvent('invalid', domElement);

                  break;
              }

              assertValidProps(tag, rawProps);

              {
                extraAttributeNames = new Set();
                var attributes = domElement.attributes;

                for (var _i = 0; _i < attributes.length; _i++) {
                  var name = attributes[_i].name.toLowerCase();

                  switch (name) {
                    // Built-in SSR attribute is allowed
                    case 'data-reactroot':
                      break;
                    // Controlled attributes are not validated
                    // TODO: Only ignore them on controlled tags.

                    case 'value':
                      break;

                    case 'checked':
                      break;

                    case 'selected':
                      break;

                    default:
                      // Intentionally use the original name.
                      // See discussion in https://github.com/facebook/react/pull/10676.
                      extraAttributeNames.add(attributes[_i].name);
                  }
                }
              }

              var updatePayload = null;

              for (var propKey in rawProps) {
                if (!rawProps.hasOwnProperty(propKey)) {
                  continue;
                }

                var nextProp = rawProps[propKey];

                if (propKey === CHILDREN) {
                  // For text content children we compare against textContent. This
                  // might match additional HTML that is hidden when we read it using
                  // textContent. E.g. "foo" will match "f<span>oo</span>" but that still
                  // satisfies our requirement. Our requirement is not to produce perfect
                  // HTML and attributes. Ideally we should preserve structure but it's
                  // ok not to if the visible content is still enough to indicate what
                  // even listeners these nodes might be wired up to.
                  // TODO: Warn if there is more than a single textNode as a child.
                  // TODO: Should we use domElement.firstChild.nodeValue to compare?
                  if (typeof nextProp === 'string') {
                    if (domElement.textContent !== nextProp) {
                      if ( !suppressHydrationWarning) {
                        warnForTextDifference(domElement.textContent, nextProp);
                      }

                      updatePayload = [CHILDREN, nextProp];
                    }
                  } else if (typeof nextProp === 'number') {
                    if (domElement.textContent !== '' + nextProp) {
                      if ( !suppressHydrationWarning) {
                        warnForTextDifference(domElement.textContent, nextProp);
                      }

                      updatePayload = [CHILDREN, '' + nextProp];
                    }
                  }
                } else if (registrationNameDependencies.hasOwnProperty(propKey)) {
                  if (nextProp != null) {
                    if ( typeof nextProp !== 'function') {
                      warnForInvalidEventListener(propKey, nextProp);
                    }

                    if (propKey === 'onScroll') {
                      listenToNonDelegatedEvent('scroll', domElement);
                    }
                  }
                } else if ( // Convince Flow we've calculated it (it's DEV-only in this method.)
                typeof isCustomComponentTag === 'boolean') {
                  // Validate that the properties correspond to their expected values.
                  var serverValue = void 0;
                  var propertyInfo = getPropertyInfo(propKey);

                  if (suppressHydrationWarning) ; else if (propKey === SUPPRESS_CONTENT_EDITABLE_WARNING || propKey === SUPPRESS_HYDRATION_WARNING || // Controlled attributes are not validated
                  // TODO: Only ignore them on controlled tags.
                  propKey === 'value' || propKey === 'checked' || propKey === 'selected') ; else if (propKey === DANGEROUSLY_SET_INNER_HTML) {
                    var serverHTML = domElement.innerHTML;
                    var nextHtml = nextProp ? nextProp[HTML$1] : undefined;

                    if (nextHtml != null) {
                      var expectedHTML = normalizeHTML(domElement, nextHtml);

                      if (expectedHTML !== serverHTML) {
                        warnForPropDifference(propKey, serverHTML, expectedHTML);
                      }
                    }
                  } else if (propKey === STYLE) {
                    // $FlowFixMe - Should be inferred as not undefined.
                    extraAttributeNames.delete(propKey);

                    if (canDiffStyleForHydrationWarning) {
                      var expectedStyle = createDangerousStringForStyles(nextProp);
                      serverValue = domElement.getAttribute('style');

                      if (expectedStyle !== serverValue) {
                        warnForPropDifference(propKey, serverValue, expectedStyle);
                      }
                    }
                  } else if (isCustomComponentTag) {
                    // $FlowFixMe - Should be inferred as not undefined.
                    extraAttributeNames.delete(propKey.toLowerCase());
                    serverValue = getValueForAttribute(domElement, propKey, nextProp);

                    if (nextProp !== serverValue) {
                      warnForPropDifference(propKey, serverValue, nextProp);
                    }
                  } else if (!shouldIgnoreAttribute(propKey, propertyInfo, isCustomComponentTag) && !shouldRemoveAttribute(propKey, nextProp, propertyInfo, isCustomComponentTag)) {
                    var isMismatchDueToBadCasing = false;

                    if (propertyInfo !== null) {
                      // $FlowFixMe - Should be inferred as not undefined.
                      extraAttributeNames.delete(propertyInfo.attributeName);
                      serverValue = getValueForProperty(domElement, propKey, nextProp, propertyInfo);
                    } else {
                      var ownNamespace = parentNamespace;

                      if (ownNamespace === HTML_NAMESPACE$1) {
                        ownNamespace = getIntrinsicNamespace(tag);
                      }

                      if (ownNamespace === HTML_NAMESPACE$1) {
                        // $FlowFixMe - Should be inferred as not undefined.
                        extraAttributeNames.delete(propKey.toLowerCase());
                      } else {
                        var standardName = getPossibleStandardName(propKey);

                        if (standardName !== null && standardName !== propKey) {
                          // If an SVG prop is supplied with bad casing, it will
                          // be successfully parsed from HTML, but will produce a mismatch
                          // (and would be incorrectly rendered on the client).
                          // However, we already warn about bad casing elsewhere.
                          // So we'll skip the misleading extra mismatch warning in this case.
                          isMismatchDueToBadCasing = true; // $FlowFixMe - Should be inferred as not undefined.

                          extraAttributeNames.delete(standardName);
                        } // $FlowFixMe - Should be inferred as not undefined.


                        extraAttributeNames.delete(propKey);
                      }

                      serverValue = getValueForAttribute(domElement, propKey, nextProp);
                    }

                    if (nextProp !== serverValue && !isMismatchDueToBadCasing) {
                      warnForPropDifference(propKey, serverValue, nextProp);
                    }
                  }
                }
              }

              {
                // $FlowFixMe - Should be inferred as not undefined.
                if (extraAttributeNames.size > 0 && !suppressHydrationWarning) {
                  // $FlowFixMe - Should be inferred as not undefined.
                  warnForExtraAttributes(extraAttributeNames);
                }
              }

              switch (tag) {
                case 'input':
                  // TODO: Make sure we check if this is still unmounted or do any clean
                  // up necessary since we never stop tracking anymore.
                  track(domElement);
                  postMountWrapper(domElement, rawProps, true);
                  break;

                case 'textarea':
                  // TODO: Make sure we check if this is still unmounted or do any clean
                  // up necessary since we never stop tracking anymore.
                  track(domElement);
                  postMountWrapper$3(domElement);
                  break;

                case 'select':
                case 'option':
                  // For input and textarea we current always set the value property at
                  // post mount to force it to diverge from attributes. However, for
                  // option and select we don't quite do the same thing and select
                  // is not resilient to the DOM state changing so we don't do that here.
                  // TODO: Consider not doing this for input and textarea.
                  break;

                default:
                  if (typeof rawProps.onClick === 'function') {
                    // TODO: This cast may not be sound for SVG, MathML or custom elements.
                    trapClickOnNonInteractiveElement(domElement);
                  }

                  break;
              }

              return updatePayload;
            }
            function diffHydratedText(textNode, text) {
              var isDifferent = textNode.nodeValue !== text;
              return isDifferent;
            }
            function warnForUnmatchedText(textNode, text) {
              {
                warnForTextDifference(textNode.nodeValue, text);
              }
            }
            function warnForDeletedHydratableElement(parentNode, child) {
              {
                if (didWarnInvalidHydration) {
                  return;
                }

                didWarnInvalidHydration = true;

                error('Did not expect server HTML to contain a <%s> in <%s>.', child.nodeName.toLowerCase(), parentNode.nodeName.toLowerCase());
              }
            }
            function warnForDeletedHydratableText(parentNode, child) {
              {
                if (didWarnInvalidHydration) {
                  return;
                }

                didWarnInvalidHydration = true;

                error('Did not expect server HTML to contain the text node "%s" in <%s>.', child.nodeValue, parentNode.nodeName.toLowerCase());
              }
            }
            function warnForInsertedHydratedElement(parentNode, tag, props) {
              {
                if (didWarnInvalidHydration) {
                  return;
                }

                didWarnInvalidHydration = true;

                error('Expected server HTML to contain a matching <%s> in <%s>.', tag, parentNode.nodeName.toLowerCase());
              }
            }
            function warnForInsertedHydratedText(parentNode, text) {
              {
                if (text === '') {
                  // We expect to insert empty text nodes since they're not represented in
                  // the HTML.
                  // TODO: Remove this special case if we can just avoid inserting empty
                  // text nodes.
                  return;
                }

                if (didWarnInvalidHydration) {
                  return;
                }

                didWarnInvalidHydration = true;

                error('Expected server HTML to contain a matching text node for "%s" in <%s>.', text, parentNode.nodeName.toLowerCase());
              }
            }
            function restoreControlledState$3(domElement, tag, props) {
              switch (tag) {
                case 'input':
                  restoreControlledState(domElement, props);
                  return;

                case 'textarea':
                  restoreControlledState$2(domElement, props);
                  return;

                case 'select':
                  restoreControlledState$1(domElement, props);
                  return;
              }
            }

            var validateDOMNesting = function () {};

            var updatedAncestorInfo = function () {};

            {
              // This validation code was written based on the HTML5 parsing spec:
              // https://html.spec.whatwg.org/multipage/syntax.html#has-an-element-in-scope
              //
              // Note: this does not catch all invalid nesting, nor does it try to (as it's
              // not clear what practical benefit doing so provides); instead, we warn only
              // for cases where the parser will give a parse tree differing from what React
              // intended. For example, <b><div></div></b> is invalid but we don't warn
              // because it still parses correctly; we do warn for other cases like nested
              // <p> tags where the beginning of the second element implicitly closes the
              // first, causing a confusing mess.
              // https://html.spec.whatwg.org/multipage/syntax.html#special
              var specialTags = ['address', 'applet', 'area', 'article', 'aside', 'base', 'basefont', 'bgsound', 'blockquote', 'body', 'br', 'button', 'caption', 'center', 'col', 'colgroup', 'dd', 'details', 'dir', 'div', 'dl', 'dt', 'embed', 'fieldset', 'figcaption', 'figure', 'footer', 'form', 'frame', 'frameset', 'h1', 'h2', 'h3', 'h4', 'h5', 'h6', 'head', 'header', 'hgroup', 'hr', 'html', 'iframe', 'img', 'input', 'isindex', 'li', 'link', 'listing', 'main', 'marquee', 'menu', 'menuitem', 'meta', 'nav', 'noembed', 'noframes', 'noscript', 'object', 'ol', 'p', 'param', 'plaintext', 'pre', 'script', 'section', 'select', 'source', 'style', 'summary', 'table', 'tbody', 'td', 'template', 'textarea', 'tfoot', 'th', 'thead', 'title', 'tr', 'track', 'ul', 'wbr', 'xmp']; // https://html.spec.whatwg.org/multipage/syntax.html#has-an-element-in-scope

              var inScopeTags = ['applet', 'caption', 'html', 'table', 'td', 'th', 'marquee', 'object', 'template', // https://html.spec.whatwg.org/multipage/syntax.html#html-integration-point
              // TODO: Distinguish by namespace here -- for <title>, including it here
              // errs on the side of fewer warnings
              'foreignObject', 'desc', 'title']; // https://html.spec.whatwg.org/multipage/syntax.html#has-an-element-in-button-scope

              var buttonScopeTags = inScopeTags.concat(['button']); // https://html.spec.whatwg.org/multipage/syntax.html#generate-implied-end-tags

              var impliedEndTags = ['dd', 'dt', 'li', 'option', 'optgroup', 'p', 'rp', 'rt'];
              var emptyAncestorInfo = {
                current: null,
                formTag: null,
                aTagInScope: null,
                buttonTagInScope: null,
                nobrTagInScope: null,
                pTagInButtonScope: null,
                listItemTagAutoclosing: null,
                dlItemTagAutoclosing: null
              };

              updatedAncestorInfo = function (oldInfo, tag) {
                var ancestorInfo = _assign({}, oldInfo || emptyAncestorInfo);

                var info = {
                  tag: tag
                };

                if (inScopeTags.indexOf(tag) !== -1) {
                  ancestorInfo.aTagInScope = null;
                  ancestorInfo.buttonTagInScope = null;
                  ancestorInfo.nobrTagInScope = null;
                }

                if (buttonScopeTags.indexOf(tag) !== -1) {
                  ancestorInfo.pTagInButtonScope = null;
                } // See rules for 'li', 'dd', 'dt' start tags in
                // https://html.spec.whatwg.org/multipage/syntax.html#parsing-main-inbody


                if (specialTags.indexOf(tag) !== -1 && tag !== 'address' && tag !== 'div' && tag !== 'p') {
                  ancestorInfo.listItemTagAutoclosing = null;
                  ancestorInfo.dlItemTagAutoclosing = null;
                }

                ancestorInfo.current = info;

                if (tag === 'form') {
                  ancestorInfo.formTag = info;
                }

                if (tag === 'a') {
                  ancestorInfo.aTagInScope = info;
                }

                if (tag === 'button') {
                  ancestorInfo.buttonTagInScope = info;
                }

                if (tag === 'nobr') {
                  ancestorInfo.nobrTagInScope = info;
                }

                if (tag === 'p') {
                  ancestorInfo.pTagInButtonScope = info;
                }

                if (tag === 'li') {
                  ancestorInfo.listItemTagAutoclosing = info;
                }

                if (tag === 'dd' || tag === 'dt') {
                  ancestorInfo.dlItemTagAutoclosing = info;
                }

                return ancestorInfo;
              };
              /**
               * Returns whether
               */


              var isTagValidWithParent = function (tag, parentTag) {
                // First, let's check if we're in an unusual parsing mode...
                switch (parentTag) {
                  // https://html.spec.whatwg.org/multipage/syntax.html#parsing-main-inselect
                  case 'select':
                    return tag === 'option' || tag === 'optgroup' || tag === '#text';

                  case 'optgroup':
                    return tag === 'option' || tag === '#text';
                  // Strictly speaking, seeing an <option> doesn't mean we're in a <select>
                  // but

                  case 'option':
                    return tag === '#text';
                  // https://html.spec.whatwg.org/multipage/syntax.html#parsing-main-intd
                  // https://html.spec.whatwg.org/multipage/syntax.html#parsing-main-incaption
                  // No special behavior since these rules fall back to "in body" mode for
                  // all except special table nodes which cause bad parsing behavior anyway.
                  // https://html.spec.whatwg.org/multipage/syntax.html#parsing-main-intr

                  case 'tr':
                    return tag === 'th' || tag === 'td' || tag === 'style' || tag === 'script' || tag === 'template';
                  // https://html.spec.whatwg.org/multipage/syntax.html#parsing-main-intbody

                  case 'tbody':
                  case 'thead':
                  case 'tfoot':
                    return tag === 'tr' || tag === 'style' || tag === 'script' || tag === 'template';
                  // https://html.spec.whatwg.org/multipage/syntax.html#parsing-main-incolgroup

                  case 'colgroup':
                    return tag === 'col' || tag === 'template';
                  // https://html.spec.whatwg.org/multipage/syntax.html#parsing-main-intable

                  case 'table':
                    return tag === 'caption' || tag === 'colgroup' || tag === 'tbody' || tag === 'tfoot' || tag === 'thead' || tag === 'style' || tag === 'script' || tag === 'template';
                  // https://html.spec.whatwg.org/multipage/syntax.html#parsing-main-inhead

                  case 'head':
                    return tag === 'base' || tag === 'basefont' || tag === 'bgsound' || tag === 'link' || tag === 'meta' || tag === 'title' || tag === 'noscript' || tag === 'noframes' || tag === 'style' || tag === 'script' || tag === 'template';
                  // https://html.spec.whatwg.org/multipage/semantics.html#the-html-element

                  case 'html':
                    return tag === 'head' || tag === 'body' || tag === 'frameset';

                  case 'frameset':
                    return tag === 'frame';

                  case '#document':
                    return tag === 'html';
                } // Probably in the "in body" parsing mode, so we outlaw only tag combos
                // where the parsing rules cause implicit opens or closes to be added.
                // https://html.spec.whatwg.org/multipage/syntax.html#parsing-main-inbody


                switch (tag) {
                  case 'h1':
                  case 'h2':
                  case 'h3':
                  case 'h4':
                  case 'h5':
                  case 'h6':
                    return parentTag !== 'h1' && parentTag !== 'h2' && parentTag !== 'h3' && parentTag !== 'h4' && parentTag !== 'h5' && parentTag !== 'h6';

                  case 'rp':
                  case 'rt':
                    return impliedEndTags.indexOf(parentTag) === -1;

                  case 'body':
                  case 'caption':
                  case 'col':
                  case 'colgroup':
                  case 'frameset':
                  case 'frame':
                  case 'head':
                  case 'html':
                  case 'tbody':
                  case 'td':
                  case 'tfoot':
                  case 'th':
                  case 'thead':
                  case 'tr':
                    // These tags are only valid with a few parents that have special child
                    // parsing rules -- if we're down here, then none of those matched and
                    // so we allow it only if we don't know what the parent is, as all other
                    // cases are invalid.
                    return parentTag == null;
                }

                return true;
              };
              /**
               * Returns whether
               */


              var findInvalidAncestorForTag = function (tag, ancestorInfo) {
                switch (tag) {
                  case 'address':
                  case 'article':
                  case 'aside':
                  case 'blockquote':
                  case 'center':
                  case 'details':
                  case 'dialog':
                  case 'dir':
                  case 'div':
                  case 'dl':
                  case 'fieldset':
                  case 'figcaption':
                  case 'figure':
                  case 'footer':
                  case 'header':
                  case 'hgroup':
                  case 'main':
                  case 'menu':
                  case 'nav':
                  case 'ol':
                  case 'p':
                  case 'section':
                  case 'summary':
                  case 'ul':
                  case 'pre':
                  case 'listing':
                  case 'table':
                  case 'hr':
                  case 'xmp':
                  case 'h1':
                  case 'h2':
                  case 'h3':
                  case 'h4':
                  case 'h5':
                  case 'h6':
                    return ancestorInfo.pTagInButtonScope;

                  case 'form':
                    return ancestorInfo.formTag || ancestorInfo.pTagInButtonScope;

                  case 'li':
                    return ancestorInfo.listItemTagAutoclosing;

                  case 'dd':
                  case 'dt':
                    return ancestorInfo.dlItemTagAutoclosing;

                  case 'button':
                    return ancestorInfo.buttonTagInScope;

                  case 'a':
                    // Spec says something about storing a list of markers, but it sounds
                    // equivalent to this check.
                    return ancestorInfo.aTagInScope;

                  case 'nobr':
                    return ancestorInfo.nobrTagInScope;
                }

                return null;
              };

              var didWarn$1 = {};

              validateDOMNesting = function (childTag, childText, ancestorInfo) {
                ancestorInfo = ancestorInfo || emptyAncestorInfo;
                var parentInfo = ancestorInfo.current;
                var parentTag = parentInfo && parentInfo.tag;

                if (childText != null) {
                  if (childTag != null) {
                    error('validateDOMNesting: when childText is passed, childTag should be null');
                  }

                  childTag = '#text';
                }

                var invalidParent = isTagValidWithParent(childTag, parentTag) ? null : parentInfo;
                var invalidAncestor = invalidParent ? null : findInvalidAncestorForTag(childTag, ancestorInfo);
                var invalidParentOrAncestor = invalidParent || invalidAncestor;

                if (!invalidParentOrAncestor) {
                  return;
                }

                var ancestorTag = invalidParentOrAncestor.tag;
                var warnKey = !!invalidParent + '|' + childTag + '|' + ancestorTag;

                if (didWarn$1[warnKey]) {
                  return;
                }

                didWarn$1[warnKey] = true;
                var tagDisplayName = childTag;
                var whitespaceInfo = '';

                if (childTag === '#text') {
                  if (/\S/.test(childText)) {
                    tagDisplayName = 'Text nodes';
                  } else {
                    tagDisplayName = 'Whitespace text nodes';
                    whitespaceInfo = " Make sure you don't have any extra whitespace between tags on " + 'each line of your source code.';
                  }
                } else {
                  tagDisplayName = '<' + childTag + '>';
                }

                if (invalidParent) {
                  var info = '';

                  if (ancestorTag === 'table' && childTag === 'tr') {
                    info += ' Add a <tbody>, <thead> or <tfoot> to your code to match the DOM tree generated by ' + 'the browser.';
                  }

                  error('validateDOMNesting(...): %s cannot appear as a child of <%s>.%s%s', tagDisplayName, ancestorTag, whitespaceInfo, info);
                } else {
                  error('validateDOMNesting(...): %s cannot appear as a descendant of ' + '<%s>.', tagDisplayName, ancestorTag);
                }
              };
            }

            var SUPPRESS_HYDRATION_WARNING$1;

            {
              SUPPRESS_HYDRATION_WARNING$1 = 'suppressHydrationWarning';
            }

            var SUSPENSE_START_DATA = '$';
            var SUSPENSE_END_DATA = '/$';
            var SUSPENSE_PENDING_START_DATA = '$?';
            var SUSPENSE_FALLBACK_START_DATA = '$!';
            var STYLE$1 = 'style';
            var eventsEnabled = null;
            var selectionInformation = null;

            function shouldAutoFocusHostComponent(type, props) {
              switch (type) {
                case 'button':
                case 'input':
                case 'select':
                case 'textarea':
                  return !!props.autoFocus;
              }

              return false;
            }
            function getRootHostContext(rootContainerInstance) {
              var type;
              var namespace;
              var nodeType = rootContainerInstance.nodeType;

              switch (nodeType) {
                case DOCUMENT_NODE:
                case DOCUMENT_FRAGMENT_NODE:
                  {
                    type = nodeType === DOCUMENT_NODE ? '#document' : '#fragment';
                    var root = rootContainerInstance.documentElement;
                    namespace = root ? root.namespaceURI : getChildNamespace(null, '');
                    break;
                  }

                default:
                  {
                    var container = nodeType === COMMENT_NODE ? rootContainerInstance.parentNode : rootContainerInstance;
                    var ownNamespace = container.namespaceURI || null;
                    type = container.tagName;
                    namespace = getChildNamespace(ownNamespace, type);
                    break;
                  }
              }

              {
                var validatedTag = type.toLowerCase();
                var ancestorInfo = updatedAncestorInfo(null, validatedTag);
                return {
                  namespace: namespace,
                  ancestorInfo: ancestorInfo
                };
              }
            }
            function getChildHostContext(parentHostContext, type, rootContainerInstance) {
              {
                var parentHostContextDev = parentHostContext;
                var namespace = getChildNamespace(parentHostContextDev.namespace, type);
                var ancestorInfo = updatedAncestorInfo(parentHostContextDev.ancestorInfo, type);
                return {
                  namespace: namespace,
                  ancestorInfo: ancestorInfo
                };
              }
            }
            function getPublicInstance(instance) {
              return instance;
            }
            function prepareForCommit(containerInfo) {
              eventsEnabled = isEnabled();
              selectionInformation = getSelectionInformation();
              var activeInstance = null;

              setEnabled(false);
              return activeInstance;
            }
            function resetAfterCommit(containerInfo) {
              restoreSelection(selectionInformation);
              setEnabled(eventsEnabled);
              eventsEnabled = null;
              selectionInformation = null;
            }
            function createInstance(type, props, rootContainerInstance, hostContext, internalInstanceHandle) {
              var parentNamespace;

              {
                // TODO: take namespace into account when validating.
                var hostContextDev = hostContext;
                validateDOMNesting(type, null, hostContextDev.ancestorInfo);

                if (typeof props.children === 'string' || typeof props.children === 'number') {
                  var string = '' + props.children;
                  var ownAncestorInfo = updatedAncestorInfo(hostContextDev.ancestorInfo, type);
                  validateDOMNesting(null, string, ownAncestorInfo);
                }

                parentNamespace = hostContextDev.namespace;
              }

              var domElement = createElement(type, props, rootContainerInstance, parentNamespace);
              precacheFiberNode(internalInstanceHandle, domElement);
              updateFiberProps(domElement, props);
              return domElement;
            }
            function appendInitialChild(parentInstance, child) {
              parentInstance.appendChild(child);
            }
            function finalizeInitialChildren(domElement, type, props, rootContainerInstance, hostContext) {
              setInitialProperties(domElement, type, props, rootContainerInstance);
              return shouldAutoFocusHostComponent(type, props);
            }
            function prepareUpdate(domElement, type, oldProps, newProps, rootContainerInstance, hostContext) {
              {
                var hostContextDev = hostContext;

                if (typeof newProps.children !== typeof oldProps.children && (typeof newProps.children === 'string' || typeof newProps.children === 'number')) {
                  var string = '' + newProps.children;
                  var ownAncestorInfo = updatedAncestorInfo(hostContextDev.ancestorInfo, type);
                  validateDOMNesting(null, string, ownAncestorInfo);
                }
              }

              return diffProperties(domElement, type, oldProps, newProps);
            }
            function shouldSetTextContent(type, props) {
              return type === 'textarea' || type === 'option' || type === 'noscript' || typeof props.children === 'string' || typeof props.children === 'number' || typeof props.dangerouslySetInnerHTML === 'object' && props.dangerouslySetInnerHTML !== null && props.dangerouslySetInnerHTML.__html != null;
            }
            function createTextInstance(text, rootContainerInstance, hostContext, internalInstanceHandle) {
              {
                var hostContextDev = hostContext;
                validateDOMNesting(null, text, hostContextDev.ancestorInfo);
              }

              var textNode = createTextNode(text, rootContainerInstance);
              precacheFiberNode(internalInstanceHandle, textNode);
              return textNode;
            }
            // if a component just imports ReactDOM (e.g. for findDOMNode).
            // Some environments might not have setTimeout or clearTimeout.

            var scheduleTimeout = typeof setTimeout === 'function' ? setTimeout : undefined;
            var cancelTimeout = typeof clearTimeout === 'function' ? clearTimeout : undefined;
            var noTimeout = -1; // -------------------
            function commitMount(domElement, type, newProps, internalInstanceHandle) {
              // Despite the naming that might imply otherwise, this method only
              // fires if there is an `Update` effect scheduled during mounting.
              // This happens if `finalizeInitialChildren` returns `true` (which it
              // does to implement the `autoFocus` attribute on the client). But
              // there are also other cases when this might happen (such as patching
              // up text content during hydration mismatch). So we'll check this again.
              if (shouldAutoFocusHostComponent(type, newProps)) {
                domElement.focus();
              }
            }
            function commitUpdate(domElement, updatePayload, type, oldProps, newProps, internalInstanceHandle) {
              // Update the props handle so that we know which props are the ones with
              // with current event handlers.
              updateFiberProps(domElement, newProps); // Apply the diff to the DOM node.

              updateProperties(domElement, updatePayload, type, oldProps, newProps);
            }
            function resetTextContent(domElement) {
              setTextContent(domElement, '');
            }
            function commitTextUpdate(textInstance, oldText, newText) {
              textInstance.nodeValue = newText;
            }
            function appendChild(parentInstance, child) {
              parentInstance.appendChild(child);
            }
            function appendChildToContainer(container, child) {
              var parentNode;

              if (container.nodeType === COMMENT_NODE) {
                parentNode = container.parentNode;
                parentNode.insertBefore(child, container);
              } else {
                parentNode = container;
                parentNode.appendChild(child);
              } // This container might be used for a portal.
              // If something inside a portal is clicked, that click should bubble
              // through the React tree. However, on Mobile Safari the click would
              // never bubble through the *DOM* tree unless an ancestor with onclick
              // event exists. So we wouldn't see it and dispatch it.
              // This is why we ensure that non React root containers have inline onclick
              // defined.
              // https://github.com/facebook/react/issues/11918


              var reactRootContainer = container._reactRootContainer;

              if ((reactRootContainer === null || reactRootContainer === undefined) && parentNode.onclick === null) {
                // TODO: This cast may not be sound for SVG, MathML or custom elements.
                trapClickOnNonInteractiveElement(parentNode);
              }
            }
            function insertBefore(parentInstance, child, beforeChild) {
              parentInstance.insertBefore(child, beforeChild);
            }
            function insertInContainerBefore(container, child, beforeChild) {
              if (container.nodeType === COMMENT_NODE) {
                container.parentNode.insertBefore(child, beforeChild);
              } else {
                container.insertBefore(child, beforeChild);
              }
            }

            function removeChild(parentInstance, child) {
              parentInstance.removeChild(child);
            }
            function removeChildFromContainer(container, child) {
              if (container.nodeType === COMMENT_NODE) {
                container.parentNode.removeChild(child);
              } else {
                container.removeChild(child);
              }
            }
            function hideInstance(instance) {
              // TODO: Does this work for all element types? What about MathML? Should we
              // pass host context to this method?
              instance = instance;
              var style = instance.style;

              if (typeof style.setProperty === 'function') {
                style.setProperty('display', 'none', 'important');
              } else {
                style.display = 'none';
              }
            }
            function hideTextInstance(textInstance) {
              textInstance.nodeValue = '';
            }
            function unhideInstance(instance, props) {
              instance = instance;
              var styleProp = props[STYLE$1];
              var display = styleProp !== undefined && styleProp !== null && styleProp.hasOwnProperty('display') ? styleProp.display : null;
              instance.style.display = dangerousStyleValue('display', display);
            }
            function unhideTextInstance(textInstance, text) {
              textInstance.nodeValue = text;
            }
            function clearContainer(container) {
              if (container.nodeType === ELEMENT_NODE) {
                container.textContent = '';
              } else if (container.nodeType === DOCUMENT_NODE) {
                var body = container.body;

                if (body != null) {
                  body.textContent = '';
                }
              }
            } // -------------------
            function canHydrateInstance(instance, type, props) {
              if (instance.nodeType !== ELEMENT_NODE || type.toLowerCase() !== instance.nodeName.toLowerCase()) {
                return null;
              } // This has now been refined to an element node.


              return instance;
            }
            function canHydrateTextInstance(instance, text) {
              if (text === '' || instance.nodeType !== TEXT_NODE) {
                // Empty strings are not parsed by HTML so there won't be a correct match here.
                return null;
              } // This has now been refined to a text node.


              return instance;
            }
            function isSuspenseInstancePending(instance) {
              return instance.data === SUSPENSE_PENDING_START_DATA;
            }
            function isSuspenseInstanceFallback(instance) {
              return instance.data === SUSPENSE_FALLBACK_START_DATA;
            }

            function getNextHydratable(node) {
              // Skip non-hydratable nodes.
              for (; node != null; node = node.nextSibling) {
                var nodeType = node.nodeType;

                if (nodeType === ELEMENT_NODE || nodeType === TEXT_NODE) {
                  break;
                }
              }

              return node;
            }

            function getNextHydratableSibling(instance) {
              return getNextHydratable(instance.nextSibling);
            }
            function getFirstHydratableChild(parentInstance) {
              return getNextHydratable(parentInstance.firstChild);
            }
            function hydrateInstance(instance, type, props, rootContainerInstance, hostContext, internalInstanceHandle) {
              precacheFiberNode(internalInstanceHandle, instance); // TODO: Possibly defer this until the commit phase where all the events
              // get attached.

              updateFiberProps(instance, props);
              var parentNamespace;

              {
                var hostContextDev = hostContext;
                parentNamespace = hostContextDev.namespace;
              }

              return diffHydratedProperties(instance, type, props, parentNamespace);
            }
            function hydrateTextInstance(textInstance, text, internalInstanceHandle) {
              precacheFiberNode(internalInstanceHandle, textInstance);
              return diffHydratedText(textInstance, text);
            }
            function getNextHydratableInstanceAfterSuspenseInstance(suspenseInstance) {
              var node = suspenseInstance.nextSibling; // Skip past all nodes within this suspense boundary.
              // There might be nested nodes so we need to keep track of how
              // deep we are and only break out when we're back on top.

              var depth = 0;

              while (node) {
                if (node.nodeType === COMMENT_NODE) {
                  var data = node.data;

                  if (data === SUSPENSE_END_DATA) {
                    if (depth === 0) {
                      return getNextHydratableSibling(node);
                    } else {
                      depth--;
                    }
                  } else if (data === SUSPENSE_START_DATA || data === SUSPENSE_FALLBACK_START_DATA || data === SUSPENSE_PENDING_START_DATA) {
                    depth++;
                  }
                }

                node = node.nextSibling;
              } // TODO: Warn, we didn't find the end comment boundary.


              return null;
            } // Returns the SuspenseInstance if this node is a direct child of a
            // SuspenseInstance. I.e. if its previous sibling is a Comment with
            // SUSPENSE_x_START_DATA. Otherwise, null.

            function getParentSuspenseInstance(targetInstance) {
              var node = targetInstance.previousSibling; // Skip past all nodes within this suspense boundary.
              // There might be nested nodes so we need to keep track of how
              // deep we are and only break out when we're back on top.

              var depth = 0;

              while (node) {
                if (node.nodeType === COMMENT_NODE) {
                  var data = node.data;

                  if (data === SUSPENSE_START_DATA || data === SUSPENSE_FALLBACK_START_DATA || data === SUSPENSE_PENDING_START_DATA) {
                    if (depth === 0) {
                      return node;
                    } else {
                      depth--;
                    }
                  } else if (data === SUSPENSE_END_DATA) {
                    depth++;
                  }
                }

                node = node.previousSibling;
              }

              return null;
            }
            function commitHydratedContainer(container) {
              // Retry if any event replaying was blocked on this.
              retryIfBlockedOn(container);
            }
            function commitHydratedSuspenseInstance(suspenseInstance) {
              // Retry if any event replaying was blocked on this.
              retryIfBlockedOn(suspenseInstance);
            }
            function didNotMatchHydratedContainerTextInstance(parentContainer, textInstance, text) {
              {
                warnForUnmatchedText(textInstance, text);
              }
            }
            function didNotMatchHydratedTextInstance(parentType, parentProps, parentInstance, textInstance, text) {
              if ( parentProps[SUPPRESS_HYDRATION_WARNING$1] !== true) {
                warnForUnmatchedText(textInstance, text);
              }
            }
            function didNotHydrateContainerInstance(parentContainer, instance) {
              {
                if (instance.nodeType === ELEMENT_NODE) {
                  warnForDeletedHydratableElement(parentContainer, instance);
                } else if (instance.nodeType === COMMENT_NODE) ; else {
                  warnForDeletedHydratableText(parentContainer, instance);
                }
              }
            }
            function didNotHydrateInstance(parentType, parentProps, parentInstance, instance) {
              if ( parentProps[SUPPRESS_HYDRATION_WARNING$1] !== true) {
                if (instance.nodeType === ELEMENT_NODE) {
                  warnForDeletedHydratableElement(parentInstance, instance);
                } else if (instance.nodeType === COMMENT_NODE) ; else {
                  warnForDeletedHydratableText(parentInstance, instance);
                }
              }
            }
            function didNotFindHydratableContainerInstance(parentContainer, type, props) {
              {
                warnForInsertedHydratedElement(parentContainer, type);
              }
            }
            function didNotFindHydratableContainerTextInstance(parentContainer, text) {
              {
                warnForInsertedHydratedText(parentContainer, text);
              }
            }
            function didNotFindHydratableInstance(parentType, parentProps, parentInstance, type, props) {
              if ( parentProps[SUPPRESS_HYDRATION_WARNING$1] !== true) {
                warnForInsertedHydratedElement(parentInstance, type);
              }
            }
            function didNotFindHydratableTextInstance(parentType, parentProps, parentInstance, text) {
              if ( parentProps[SUPPRESS_HYDRATION_WARNING$1] !== true) {
                warnForInsertedHydratedText(parentInstance, text);
              }
            }
            function didNotFindHydratableSuspenseInstance(parentType, parentProps, parentInstance) {
              if ( parentProps[SUPPRESS_HYDRATION_WARNING$1] !== true) ;
            }
            var clientId = 0;
            function makeClientIdInDEV(warnOnAccessInDEV) {
              var id = 'r:' + (clientId++).toString(36);
              return {
                toString: function () {
                  warnOnAccessInDEV();
                  return id;
                },
                valueOf: function () {
                  warnOnAccessInDEV();
                  return id;
                }
              };
            }
            function isOpaqueHydratingObject(value) {
              return value !== null && typeof value === 'object' && value.$$typeof === REACT_OPAQUE_ID_TYPE;
            }
            function makeOpaqueHydratingObject(attemptToReadValue) {
              return {
                $$typeof: REACT_OPAQUE_ID_TYPE,
                toString: attemptToReadValue,
                valueOf: attemptToReadValue
              };
            }
            function preparePortalMount(portalInstance) {
              {
                listenToAllSupportedEvents(portalInstance);
              }
            }

            var randomKey = Math.random().toString(36).slice(2);
            var internalInstanceKey = '__reactFiber$' + randomKey;
            var internalPropsKey = '__reactProps$' + randomKey;
            var internalContainerInstanceKey = '__reactContainer$' + randomKey;
            var internalEventHandlersKey = '__reactEvents$' + randomKey;
            function precacheFiberNode(hostInst, node) {
              node[internalInstanceKey] = hostInst;
            }
            function markContainerAsRoot(hostRoot, node) {
              node[internalContainerInstanceKey] = hostRoot;
            }
            function unmarkContainerAsRoot(node) {
              node[internalContainerInstanceKey] = null;
            }
            function isContainerMarkedAsRoot(node) {
              return !!node[internalContainerInstanceKey];
            } // Given a DOM node, return the closest HostComponent or HostText fiber ancestor.
            // If the target node is part of a hydrated or not yet rendered subtree, then
            // this may also return a SuspenseComponent or HostRoot to indicate that.
            // Conceptually the HostRoot fiber is a child of the Container node. So if you
            // pass the Container node as the targetNode, you will not actually get the
            // HostRoot back. To get to the HostRoot, you need to pass a child of it.
            // The same thing applies to Suspense boundaries.

            function getClosestInstanceFromNode(targetNode) {
              var targetInst = targetNode[internalInstanceKey];

              if (targetInst) {
                // Don't return HostRoot or SuspenseComponent here.
                return targetInst;
              } // If the direct event target isn't a React owned DOM node, we need to look
              // to see if one of its parents is a React owned DOM node.


              var parentNode = targetNode.parentNode;

              while (parentNode) {
                // We'll check if this is a container root that could include
                // React nodes in the future. We need to check this first because
                // if we're a child of a dehydrated container, we need to first
                // find that inner container before moving on to finding the parent
                // instance. Note that we don't check this field on  the targetNode
                // itself because the fibers are conceptually between the container
                // node and the first child. It isn't surrounding the container node.
                // If it's not a container, we check if it's an instance.
                targetInst = parentNode[internalContainerInstanceKey] || parentNode[internalInstanceKey];

                if (targetInst) {
                  // Since this wasn't the direct target of the event, we might have
                  // stepped past dehydrated DOM nodes to get here. However they could
                  // also have been non-React nodes. We need to answer which one.
                  // If we the instance doesn't have any children, then there can't be
                  // a nested suspense boundary within it. So we can use this as a fast
                  // bailout. Most of the time, when people add non-React children to
                  // the tree, it is using a ref to a child-less DOM node.
                  // Normally we'd only need to check one of the fibers because if it
                  // has ever gone from having children to deleting them or vice versa
                  // it would have deleted the dehydrated boundary nested inside already.
                  // However, since the HostRoot starts out with an alternate it might
                  // have one on the alternate so we need to check in case this was a
                  // root.
                  var alternate = targetInst.alternate;

                  if (targetInst.child !== null || alternate !== null && alternate.child !== null) {
                    // Next we need to figure out if the node that skipped past is
                    // nested within a dehydrated boundary and if so, which one.
                    var suspenseInstance = getParentSuspenseInstance(targetNode);

                    while (suspenseInstance !== null) {
                      // We found a suspense instance. That means that we haven't
                      // hydrated it yet. Even though we leave the comments in the
                      // DOM after hydrating, and there are boundaries in the DOM
                      // that could already be hydrated, we wouldn't have found them
                      // through this pass since if the target is hydrated it would
                      // have had an internalInstanceKey on it.
                      // Let's get the fiber associated with the SuspenseComponent
                      // as the deepest instance.
                      var targetSuspenseInst = suspenseInstance[internalInstanceKey];

                      if (targetSuspenseInst) {
                        return targetSuspenseInst;
                      } // If we don't find a Fiber on the comment, it might be because
                      // we haven't gotten to hydrate it yet. There might still be a
                      // parent boundary that hasn't above this one so we need to find
                      // the outer most that is known.


                      suspenseInstance = getParentSuspenseInstance(suspenseInstance); // If we don't find one, then that should mean that the parent
                      // host component also hasn't hydrated yet. We can return it
                      // below since it will bail out on the isMounted check later.
                    }
                  }

                  return targetInst;
                }

                targetNode = parentNode;
                parentNode = targetNode.parentNode;
              }

              return null;
            }
            /**
             * Given a DOM node, return the ReactDOMComponent or ReactDOMTextComponent
             * instance, or null if the node was not rendered by this React.
             */

            function getInstanceFromNode(node) {
              var inst = node[internalInstanceKey] || node[internalContainerInstanceKey];

              if (inst) {
                if (inst.tag === HostComponent || inst.tag === HostText || inst.tag === SuspenseComponent || inst.tag === HostRoot) {
                  return inst;
                } else {
                  return null;
                }
              }

              return null;
            }
            /**
             * Given a ReactDOMComponent or ReactDOMTextComponent, return the corresponding
             * DOM node.
             */

            function getNodeFromInstance(inst) {
              if (inst.tag === HostComponent || inst.tag === HostText) {
                // In Fiber this, is just the state node right now. We assume it will be
                // a host component or host text.
                return inst.stateNode;
              } // Without this first invariant, passing a non-DOM-component triggers the next
              // invariant for a missing parent, which is super confusing.


              {
                {
                  throw Error( "getNodeFromInstance: Invalid argument." );
                }
              }
            }
            function getFiberCurrentPropsFromNode(node) {
              return node[internalPropsKey] || null;
            }
            function updateFiberProps(node, props) {
              node[internalPropsKey] = props;
            }
            function getEventListenerSet(node) {
              var elementListenerSet = node[internalEventHandlersKey];

              if (elementListenerSet === undefined) {
                elementListenerSet = node[internalEventHandlersKey] = new Set();
              }

              return elementListenerSet;
            }

            var loggedTypeFailures = {};
            var ReactDebugCurrentFrame$1 = ReactSharedInternals.ReactDebugCurrentFrame;

            function setCurrentlyValidatingElement(element) {
              {
                if (element) {
                  var owner = element._owner;
                  var stack = describeUnknownElementTypeFrameInDEV(element.type, element._source, owner ? owner.type : null);
                  ReactDebugCurrentFrame$1.setExtraStackFrame(stack);
                } else {
                  ReactDebugCurrentFrame$1.setExtraStackFrame(null);
                }
              }
            }

            function checkPropTypes(typeSpecs, values, location, componentName, element) {
              {
                // $FlowFixMe This is okay but Flow doesn't know it.
                var has = Function.call.bind(Object.prototype.hasOwnProperty);

                for (var typeSpecName in typeSpecs) {
                  if (has(typeSpecs, typeSpecName)) {
                    var error$1 = void 0; // Prop type validation may throw. In case they do, we don't want to
                    // fail the render phase where it didn't fail before. So we log it.
                    // After these have been cleaned up, we'll let them throw.

                    try {
                      // This is intentionally an invariant that gets caught. It's the same
                      // behavior as without this statement except with a better message.
                      if (typeof typeSpecs[typeSpecName] !== 'function') {
                        var err = Error((componentName || 'React class') + ': ' + location + ' type `' + typeSpecName + '` is invalid; ' + 'it must be a function, usually from the `prop-types` package, but received `' + typeof typeSpecs[typeSpecName] + '`.' + 'This often happens because of typos such as `PropTypes.function` instead of `PropTypes.func`.');
                        err.name = 'Invariant Violation';
                        throw err;
                      }

                      error$1 = typeSpecs[typeSpecName](values, typeSpecName, componentName, location, null, 'SECRET_DO_NOT_PASS_THIS_OR_YOU_WILL_BE_FIRED');
                    } catch (ex) {
                      error$1 = ex;
                    }

                    if (error$1 && !(error$1 instanceof Error)) {
                      setCurrentlyValidatingElement(element);

                      error('%s: type specification of %s' + ' `%s` is invalid; the type checker ' + 'function must return `null` or an `Error` but returned a %s. ' + 'You may have forgotten to pass an argument to the type checker ' + 'creator (arrayOf, instanceOf, objectOf, oneOf, oneOfType, and ' + 'shape all require an argument).', componentName || 'React class', location, typeSpecName, typeof error$1);

                      setCurrentlyValidatingElement(null);
                    }

                    if (error$1 instanceof Error && !(error$1.message in loggedTypeFailures)) {
                      // Only monitor this failure once because there tends to be a lot of the
                      // same error.
                      loggedTypeFailures[error$1.message] = true;
                      setCurrentlyValidatingElement(element);

                      error('Failed %s type: %s', location, error$1.message);

                      setCurrentlyValidatingElement(null);
                    }
                  }
                }
              }
            }

            var valueStack = [];
            var fiberStack;

            {
              fiberStack = [];
            }

            var index = -1;

            function createCursor(defaultValue) {
              return {
                current: defaultValue
              };
            }

            function pop(cursor, fiber) {
              if (index < 0) {
                {
                  error('Unexpected pop.');
                }

                return;
              }

              {
                if (fiber !== fiberStack[index]) {
                  error('Unexpected Fiber popped.');
                }
              }

              cursor.current = valueStack[index];
              valueStack[index] = null;

              {
                fiberStack[index] = null;
              }

              index--;
            }

            function push(cursor, value, fiber) {
              index++;
              valueStack[index] = cursor.current;

              {
                fiberStack[index] = fiber;
              }

              cursor.current = value;
            }

            var warnedAboutMissingGetChildContext;

            {
              warnedAboutMissingGetChildContext = {};
            }

            var emptyContextObject = {};

            {
              Object.freeze(emptyContextObject);
            } // A cursor to the current merged context object on the stack.


            var contextStackCursor = createCursor(emptyContextObject); // A cursor to a boolean indicating whether the context has changed.

            var didPerformWorkStackCursor = createCursor(false); // Keep track of the previous context object that was on the stack.
            // We use this to get access to the parent context after we have already
            // pushed the next context provider, and now need to merge their contexts.

            var previousContext = emptyContextObject;

            function getUnmaskedContext(workInProgress, Component, didPushOwnContextIfProvider) {
              {
                if (didPushOwnContextIfProvider && isContextProvider(Component)) {
                  // If the fiber is a context provider itself, when we read its context
                  // we may have already pushed its own child context on the stack. A context
                  // provider should not "see" its own child context. Therefore we read the
                  // previous (parent) context instead for a context provider.
                  return previousContext;
                }

                return contextStackCursor.current;
              }
            }

            function cacheContext(workInProgress, unmaskedContext, maskedContext) {
              {
                var instance = workInProgress.stateNode;
                instance.__reactInternalMemoizedUnmaskedChildContext = unmaskedContext;
                instance.__reactInternalMemoizedMaskedChildContext = maskedContext;
              }
            }

            function getMaskedContext(workInProgress, unmaskedContext) {
              {
                var type = workInProgress.type;
                var contextTypes = type.contextTypes;

                if (!contextTypes) {
                  return emptyContextObject;
                } // Avoid recreating masked context unless unmasked context has changed.
                // Failing to do this will result in unnecessary calls to componentWillReceiveProps.
                // This may trigger infinite loops if componentWillReceiveProps calls setState.


                var instance = workInProgress.stateNode;

                if (instance && instance.__reactInternalMemoizedUnmaskedChildContext === unmaskedContext) {
                  return instance.__reactInternalMemoizedMaskedChildContext;
                }

                var context = {};

                for (var key in contextTypes) {
                  context[key] = unmaskedContext[key];
                }

                {
                  var name = getComponentName(type) || 'Unknown';
                  checkPropTypes(contextTypes, context, 'context', name);
                } // Cache unmasked context so we can avoid recreating masked context unless necessary.
                // Context is created before the class component is instantiated so check for instance.


                if (instance) {
                  cacheContext(workInProgress, unmaskedContext, context);
                }

                return context;
              }
            }

            function hasContextChanged() {
              {
                return didPerformWorkStackCursor.current;
              }
            }

            function isContextProvider(type) {
              {
                var childContextTypes = type.childContextTypes;
                return childContextTypes !== null && childContextTypes !== undefined;
              }
            }

            function popContext(fiber) {
              {
                pop(didPerformWorkStackCursor, fiber);
                pop(contextStackCursor, fiber);
              }
            }

            function popTopLevelContextObject(fiber) {
              {
                pop(didPerformWorkStackCursor, fiber);
                pop(contextStackCursor, fiber);
              }
            }

            function pushTopLevelContextObject(fiber, context, didChange) {
              {
                if (!(contextStackCursor.current === emptyContextObject)) {
                  {
                    throw Error( "Unexpected context found on stack. This error is likely caused by a bug in React. Please file an issue." );
                  }
                }

                push(contextStackCursor, context, fiber);
                push(didPerformWorkStackCursor, didChange, fiber);
              }
            }

            function processChildContext(fiber, type, parentContext) {
              {
                var instance = fiber.stateNode;
                var childContextTypes = type.childContextTypes; // TODO (bvaughn) Replace this behavior with an invariant() in the future.
                // It has only been added in Fiber to match the (unintentional) behavior in Stack.

                if (typeof instance.getChildContext !== 'function') {
                  {
                    var componentName = getComponentName(type) || 'Unknown';

                    if (!warnedAboutMissingGetChildContext[componentName]) {
                      warnedAboutMissingGetChildContext[componentName] = true;

                      error('%s.childContextTypes is specified but there is no getChildContext() method ' + 'on the instance. You can either define getChildContext() on %s or remove ' + 'childContextTypes from it.', componentName, componentName);
                    }
                  }

                  return parentContext;
                }

                var childContext = instance.getChildContext();

                for (var contextKey in childContext) {
                  if (!(contextKey in childContextTypes)) {
                    {
                      throw Error( (getComponentName(type) || 'Unknown') + ".getChildContext(): key \"" + contextKey + "\" is not defined in childContextTypes." );
                    }
                  }
                }

                {
                  var name = getComponentName(type) || 'Unknown';
                  checkPropTypes(childContextTypes, childContext, 'child context', name);
                }

                return _assign({}, parentContext, childContext);
              }
            }

            function pushContextProvider(workInProgress) {
              {
                var instance = workInProgress.stateNode; // We push the context as early as possible to ensure stack integrity.
                // If the instance does not exist yet, we will push null at first,
                // and replace it on the stack later when invalidating the context.

                var memoizedMergedChildContext = instance && instance.__reactInternalMemoizedMergedChildContext || emptyContextObject; // Remember the parent context so we can merge with it later.
                // Inherit the parent's did-perform-work value to avoid inadvertently blocking updates.

                previousContext = contextStackCursor.current;
                push(contextStackCursor, memoizedMergedChildContext, workInProgress);
                push(didPerformWorkStackCursor, didPerformWorkStackCursor.current, workInProgress);
                return true;
              }
            }

            function invalidateContextProvider(workInProgress, type, didChange) {
              {
                var instance = workInProgress.stateNode;

                if (!instance) {
                  {
                    throw Error( "Expected to have an instance by this point. This error is likely caused by a bug in React. Please file an issue." );
                  }
                }

                if (didChange) {
                  // Merge parent and own context.
                  // Skip this if we're not updating due to sCU.
                  // This avoids unnecessarily recomputing memoized values.
                  var mergedContext = processChildContext(workInProgress, type, previousContext);
                  instance.__reactInternalMemoizedMergedChildContext = mergedContext; // Replace the old (or empty) context with the new one.
                  // It is important to unwind the context in the reverse order.

                  pop(didPerformWorkStackCursor, workInProgress);
                  pop(contextStackCursor, workInProgress); // Now push the new context and mark that it has changed.

                  push(contextStackCursor, mergedContext, workInProgress);
                  push(didPerformWorkStackCursor, didChange, workInProgress);
                } else {
                  pop(didPerformWorkStackCursor, workInProgress);
                  push(didPerformWorkStackCursor, didChange, workInProgress);
                }
              }
            }

            function findCurrentUnmaskedContext(fiber) {
              {
                // Currently this is only used with renderSubtreeIntoContainer; not sure if it
                // makes sense elsewhere
                if (!(isFiberMounted(fiber) && fiber.tag === ClassComponent)) {
                  {
                    throw Error( "Expected subtree parent to be a mounted class component. This error is likely caused by a bug in React. Please file an issue." );
                  }
                }

                var node = fiber;

                do {
                  switch (node.tag) {
                    case HostRoot:
                      return node.stateNode.context;

                    case ClassComponent:
                      {
                        var Component = node.type;

                        if (isContextProvider(Component)) {
                          return node.stateNode.__reactInternalMemoizedMergedChildContext;
                        }

                        break;
                      }
                  }

                  node = node.return;
                } while (node !== null);

                {
                  {
                    throw Error( "Found unexpected detached subtree parent. This error is likely caused by a bug in React. Please file an issue." );
                  }
                }
              }
            }

            var LegacyRoot = 0;
            var BlockingRoot = 1;
            var ConcurrentRoot = 2;

            var rendererID = null;
            var injectedHook = null;
            var hasLoggedError = false;
            var isDevToolsPresent = typeof __REACT_DEVTOOLS_GLOBAL_HOOK__ !== 'undefined';
            function injectInternals(internals) {
              if (typeof __REACT_DEVTOOLS_GLOBAL_HOOK__ === 'undefined') {
                // No DevTools
                return false;
              }

              var hook = __REACT_DEVTOOLS_GLOBAL_HOOK__;

              if (hook.isDisabled) {
                // This isn't a real property on the hook, but it can be set to opt out
                // of DevTools integration and associated warnings and logs.
                // https://github.com/facebook/react/issues/3877
                return true;
              }

              if (!hook.supportsFiber) {
                {
                  error('The installed version of React DevTools is too old and will not work ' + 'with the current version of React. Please update React DevTools. ' + 'https://reactjs.org/link/react-devtools');
                } // DevTools exists, even though it doesn't support Fiber.


                return true;
              }

              try {
                rendererID = hook.inject(internals); // We have successfully injected, so now it is safe to set up hooks.

                injectedHook = hook;
              } catch (err) {
                // Catch all errors because it is unsafe to throw during initialization.
                {
                  error('React instrumentation encountered an error: %s.', err);
                }
              } // DevTools exists


              return true;
            }
            function onScheduleRoot(root, children) {
              {
                if (injectedHook && typeof injectedHook.onScheduleFiberRoot === 'function') {
                  try {
                    injectedHook.onScheduleFiberRoot(rendererID, root, children);
                  } catch (err) {
                    if ( !hasLoggedError) {
                      hasLoggedError = true;

                      error('React instrumentation encountered an error: %s', err);
                    }
                  }
                }
              }
            }
            function onCommitRoot(root, priorityLevel) {
              if (injectedHook && typeof injectedHook.onCommitFiberRoot === 'function') {
                try {
                  var didError = (root.current.flags & DidCapture) === DidCapture;

                  if (enableProfilerTimer) {
                    injectedHook.onCommitFiberRoot(rendererID, root, priorityLevel, didError);
                  }
                } catch (err) {
                  {
                    if (!hasLoggedError) {
                      hasLoggedError = true;

                      error('React instrumentation encountered an error: %s', err);
                    }
                  }
                }
              }
            }
            function onCommitUnmount(fiber) {
              if (injectedHook && typeof injectedHook.onCommitFiberUnmount === 'function') {
                try {
                  injectedHook.onCommitFiberUnmount(rendererID, fiber);
                } catch (err) {
                  {
                    if (!hasLoggedError) {
                      hasLoggedError = true;

                      error('React instrumentation encountered an error: %s', err);
                    }
                  }
                }
              }
            }

            var Scheduler_runWithPriority = Scheduler.unstable_runWithPriority,
                Scheduler_scheduleCallback = Scheduler.unstable_scheduleCallback,
                Scheduler_cancelCallback = Scheduler.unstable_cancelCallback,
                Scheduler_shouldYield = Scheduler.unstable_shouldYield,
                Scheduler_requestPaint = Scheduler.unstable_requestPaint,
                Scheduler_now$1 = Scheduler.unstable_now,
                Scheduler_getCurrentPriorityLevel = Scheduler.unstable_getCurrentPriorityLevel,
                Scheduler_ImmediatePriority = Scheduler.unstable_ImmediatePriority,
                Scheduler_UserBlockingPriority = Scheduler.unstable_UserBlockingPriority,
                Scheduler_NormalPriority = Scheduler.unstable_NormalPriority,
                Scheduler_LowPriority = Scheduler.unstable_LowPriority,
                Scheduler_IdlePriority = Scheduler.unstable_IdlePriority;

            {
              // Provide explicit error message when production+profiling bundle of e.g.
              // react-dom is used with production (non-profiling) bundle of
              // scheduler/tracing
              if (!(tracing$1.__interactionsRef != null && tracing$1.__interactionsRef.current != null)) {
                {
                  throw Error( "It is not supported to run the profiling version of a renderer (for example, `react-dom/profiling`) without also replacing the `scheduler/tracing` module with `scheduler/tracing-profiling`. Your bundler might have a setting for aliasing both modules. Learn more at https://reactjs.org/link/profiling" );
                }
              }
            }

            var fakeCallbackNode = {}; // Except for NoPriority, these correspond to Scheduler priorities. We use
            // ascending numbers so we can compare them like numbers. They start at 90 to
            // avoid clashing with Scheduler's priorities.

            var ImmediatePriority$1 = 99;
            var UserBlockingPriority$2 = 98;
            var NormalPriority$1 = 97;
            var LowPriority$1 = 96;
            var IdlePriority$1 = 95; // NoPriority is the absence of priority. Also React-only.

            var NoPriority$1 = 90;
            var shouldYield = Scheduler_shouldYield;
            var requestPaint = // Fall back gracefully if we're running an older version of Scheduler.
            Scheduler_requestPaint !== undefined ? Scheduler_requestPaint : function () {};
            var syncQueue = null;
            var immediateQueueCallbackNode = null;
            var isFlushingSyncQueue = false;
            var initialTimeMs$1 = Scheduler_now$1(); // If the initial timestamp is reasonably small, use Scheduler's `now` directly.
            // This will be the case for modern browsers that support `performance.now`. In
            // older browsers, Scheduler falls back to `Date.now`, which returns a Unix
            // timestamp. In that case, subtract the module initialization time to simulate
            // the behavior of performance.now and keep our times small enough to fit
            // within 32 bits.
            // TODO: Consider lifting this into Scheduler.

            var now = initialTimeMs$1 < 10000 ? Scheduler_now$1 : function () {
              return Scheduler_now$1() - initialTimeMs$1;
            };
            function getCurrentPriorityLevel() {
              switch (Scheduler_getCurrentPriorityLevel()) {
                case Scheduler_ImmediatePriority:
                  return ImmediatePriority$1;

                case Scheduler_UserBlockingPriority:
                  return UserBlockingPriority$2;

                case Scheduler_NormalPriority:
                  return NormalPriority$1;

                case Scheduler_LowPriority:
                  return LowPriority$1;

                case Scheduler_IdlePriority:
                  return IdlePriority$1;

                default:
                  {
                    {
                      throw Error( "Unknown priority level." );
                    }
                  }

              }
            }

            function reactPriorityToSchedulerPriority(reactPriorityLevel) {
              switch (reactPriorityLevel) {
                case ImmediatePriority$1:
                  return Scheduler_ImmediatePriority;

                case UserBlockingPriority$2:
                  return Scheduler_UserBlockingPriority;

                case NormalPriority$1:
                  return Scheduler_NormalPriority;

                case LowPriority$1:
                  return Scheduler_LowPriority;

                case IdlePriority$1:
                  return Scheduler_IdlePriority;

                default:
                  {
                    {
                      throw Error( "Unknown priority level." );
                    }
                  }

              }
            }

            function runWithPriority$1(reactPriorityLevel, fn) {
              var priorityLevel = reactPriorityToSchedulerPriority(reactPriorityLevel);
              return Scheduler_runWithPriority(priorityLevel, fn);
            }
            function scheduleCallback(reactPriorityLevel, callback, options) {
              var priorityLevel = reactPriorityToSchedulerPriority(reactPriorityLevel);
              return Scheduler_scheduleCallback(priorityLevel, callback, options);
            }
            function scheduleSyncCallback(callback) {
              // Push this callback into an internal queue. We'll flush these either in
              // the next tick, or earlier if something calls `flushSyncCallbackQueue`.
              if (syncQueue === null) {
                syncQueue = [callback]; // Flush the queue in the next tick, at the earliest.

                immediateQueueCallbackNode = Scheduler_scheduleCallback(Scheduler_ImmediatePriority, flushSyncCallbackQueueImpl);
              } else {
                // Push onto existing queue. Don't need to schedule a callback because
                // we already scheduled one when we created the queue.
                syncQueue.push(callback);
              }

              return fakeCallbackNode;
            }
            function cancelCallback(callbackNode) {
              if (callbackNode !== fakeCallbackNode) {
                Scheduler_cancelCallback(callbackNode);
              }
            }
            function flushSyncCallbackQueue() {
              if (immediateQueueCallbackNode !== null) {
                var node = immediateQueueCallbackNode;
                immediateQueueCallbackNode = null;
                Scheduler_cancelCallback(node);
              }

              flushSyncCallbackQueueImpl();
            }

            function flushSyncCallbackQueueImpl() {
              if (!isFlushingSyncQueue && syncQueue !== null) {
                // Prevent re-entrancy.
                isFlushingSyncQueue = true;
                var i = 0;

                {
                  try {
                    var _isSync2 = true;
                    var _queue = syncQueue;
                    runWithPriority$1(ImmediatePriority$1, function () {
                      for (; i < _queue.length; i++) {
                        var callback = _queue[i];

                        do {
                          callback = callback(_isSync2);
                        } while (callback !== null);
                      }
                    });
                    syncQueue = null;
                  } catch (error) {
                    // If something throws, leave the remaining callbacks on the queue.
                    if (syncQueue !== null) {
                      syncQueue = syncQueue.slice(i + 1);
                    } // Resume flushing in the next tick


                    Scheduler_scheduleCallback(Scheduler_ImmediatePriority, flushSyncCallbackQueue);
                    throw error;
                  } finally {
                    isFlushingSyncQueue = false;
                  }
                }
              }
            }

            // TODO: this is special because it gets imported during build.
            var ReactVersion = '17.0.2';

            var NoMode = 0;
            var StrictMode = 1; // TODO: Remove BlockingMode and ConcurrentMode by reading from the root
            // tag instead

            var BlockingMode = 2;
            var ConcurrentMode = 4;
            var ProfileMode = 8;
            var DebugTracingMode = 16;

            var ReactCurrentBatchConfig = ReactSharedInternals.ReactCurrentBatchConfig;
            var NoTransition = 0;
            function requestCurrentTransition() {
              return ReactCurrentBatchConfig.transition;
            }

            var ReactStrictModeWarnings = {
              recordUnsafeLifecycleWarnings: function (fiber, instance) {},
              flushPendingUnsafeLifecycleWarnings: function () {},
              recordLegacyContextWarning: function (fiber, instance) {},
              flushLegacyContextWarning: function () {},
              discardPendingWarnings: function () {}
            };

            {
              var findStrictRoot = function (fiber) {
                var maybeStrictRoot = null;
                var node = fiber;

                while (node !== null) {
                  if (node.mode & StrictMode) {
                    maybeStrictRoot = node;
                  }

                  node = node.return;
                }

                return maybeStrictRoot;
              };

              var setToSortedString = function (set) {
                var array = [];
                set.forEach(function (value) {
                  array.push(value);
                });
                return array.sort().join(', ');
              };

              var pendingComponentWillMountWarnings = [];
              var pendingUNSAFE_ComponentWillMountWarnings = [];
              var pendingComponentWillReceivePropsWarnings = [];
              var pendingUNSAFE_ComponentWillReceivePropsWarnings = [];
              var pendingComponentWillUpdateWarnings = [];
              var pendingUNSAFE_ComponentWillUpdateWarnings = []; // Tracks components we have already warned about.

              var didWarnAboutUnsafeLifecycles = new Set();

              ReactStrictModeWarnings.recordUnsafeLifecycleWarnings = function (fiber, instance) {
                // Dedup strategy: Warn once per component.
                if (didWarnAboutUnsafeLifecycles.has(fiber.type)) {
                  return;
                }

                if (typeof instance.componentWillMount === 'function' && // Don't warn about react-lifecycles-compat polyfilled components.
                instance.componentWillMount.__suppressDeprecationWarning !== true) {
                  pendingComponentWillMountWarnings.push(fiber);
                }

                if (fiber.mode & StrictMode && typeof instance.UNSAFE_componentWillMount === 'function') {
                  pendingUNSAFE_ComponentWillMountWarnings.push(fiber);
                }

                if (typeof instance.componentWillReceiveProps === 'function' && instance.componentWillReceiveProps.__suppressDeprecationWarning !== true) {
                  pendingComponentWillReceivePropsWarnings.push(fiber);
                }

                if (fiber.mode & StrictMode && typeof instance.UNSAFE_componentWillReceiveProps === 'function') {
                  pendingUNSAFE_ComponentWillReceivePropsWarnings.push(fiber);
                }

                if (typeof instance.componentWillUpdate === 'function' && instance.componentWillUpdate.__suppressDeprecationWarning !== true) {
                  pendingComponentWillUpdateWarnings.push(fiber);
                }

                if (fiber.mode & StrictMode && typeof instance.UNSAFE_componentWillUpdate === 'function') {
                  pendingUNSAFE_ComponentWillUpdateWarnings.push(fiber);
                }
              };

              ReactStrictModeWarnings.flushPendingUnsafeLifecycleWarnings = function () {
                // We do an initial pass to gather component names
                var componentWillMountUniqueNames = new Set();

                if (pendingComponentWillMountWarnings.length > 0) {
                  pendingComponentWillMountWarnings.forEach(function (fiber) {
                    componentWillMountUniqueNames.add(getComponentName(fiber.type) || 'Component');
                    didWarnAboutUnsafeLifecycles.add(fiber.type);
                  });
                  pendingComponentWillMountWarnings = [];
                }

                var UNSAFE_componentWillMountUniqueNames = new Set();

                if (pendingUNSAFE_ComponentWillMountWarnings.length > 0) {
                  pendingUNSAFE_ComponentWillMountWarnings.forEach(function (fiber) {
                    UNSAFE_componentWillMountUniqueNames.add(getComponentName(fiber.type) || 'Component');
                    didWarnAboutUnsafeLifecycles.add(fiber.type);
                  });
                  pendingUNSAFE_ComponentWillMountWarnings = [];
                }

                var componentWillReceivePropsUniqueNames = new Set();

                if (pendingComponentWillReceivePropsWarnings.length > 0) {
                  pendingComponentWillReceivePropsWarnings.forEach(function (fiber) {
                    componentWillReceivePropsUniqueNames.add(getComponentName(fiber.type) || 'Component');
                    didWarnAboutUnsafeLifecycles.add(fiber.type);
                  });
                  pendingComponentWillReceivePropsWarnings = [];
                }

                var UNSAFE_componentWillReceivePropsUniqueNames = new Set();

                if (pendingUNSAFE_ComponentWillReceivePropsWarnings.length > 0) {
                  pendingUNSAFE_ComponentWillReceivePropsWarnings.forEach(function (fiber) {
                    UNSAFE_componentWillReceivePropsUniqueNames.add(getComponentName(fiber.type) || 'Component');
                    didWarnAboutUnsafeLifecycles.add(fiber.type);
                  });
                  pendingUNSAFE_ComponentWillReceivePropsWarnings = [];
                }

                var componentWillUpdateUniqueNames = new Set();

                if (pendingComponentWillUpdateWarnings.length > 0) {
                  pendingComponentWillUpdateWarnings.forEach(function (fiber) {
                    componentWillUpdateUniqueNames.add(getComponentName(fiber.type) || 'Component');
                    didWarnAboutUnsafeLifecycles.add(fiber.type);
                  });
                  pendingComponentWillUpdateWarnings = [];
                }

                var UNSAFE_componentWillUpdateUniqueNames = new Set();

                if (pendingUNSAFE_ComponentWillUpdateWarnings.length > 0) {
                  pendingUNSAFE_ComponentWillUpdateWarnings.forEach(function (fiber) {
                    UNSAFE_componentWillUpdateUniqueNames.add(getComponentName(fiber.type) || 'Component');
                    didWarnAboutUnsafeLifecycles.add(fiber.type);
                  });
                  pendingUNSAFE_ComponentWillUpdateWarnings = [];
                } // Finally, we flush all the warnings
                // UNSAFE_ ones before the deprecated ones, since they'll be 'louder'


                if (UNSAFE_componentWillMountUniqueNames.size > 0) {
                  var sortedNames = setToSortedString(UNSAFE_componentWillMountUniqueNames);

                  error('Using UNSAFE_componentWillMount in strict mode is not recommended and may indicate bugs in your code. ' + 'See https://reactjs.org/link/unsafe-component-lifecycles for details.\n\n' + '* Move code with side effects to componentDidMount, and set initial state in the constructor.\n' + '\nPlease update the following components: %s', sortedNames);
                }

                if (UNSAFE_componentWillReceivePropsUniqueNames.size > 0) {
                  var _sortedNames = setToSortedString(UNSAFE_componentWillReceivePropsUniqueNames);

                  error('Using UNSAFE_componentWillReceiveProps in strict mode is not recommended ' + 'and may indicate bugs in your code. ' + 'See https://reactjs.org/link/unsafe-component-lifecycles for details.\n\n' + '* Move data fetching code or side effects to componentDidUpdate.\n' + "* If you're updating state whenever props change, " + 'refactor your code to use memoization techniques or move it to ' + 'static getDerivedStateFromProps. Learn more at: https://reactjs.org/link/derived-state\n' + '\nPlease update the following components: %s', _sortedNames);
                }

                if (UNSAFE_componentWillUpdateUniqueNames.size > 0) {
                  var _sortedNames2 = setToSortedString(UNSAFE_componentWillUpdateUniqueNames);

                  error('Using UNSAFE_componentWillUpdate in strict mode is not recommended ' + 'and may indicate bugs in your code. ' + 'See https://reactjs.org/link/unsafe-component-lifecycles for details.\n\n' + '* Move data fetching code or side effects to componentDidUpdate.\n' + '\nPlease update the following components: %s', _sortedNames2);
                }

                if (componentWillMountUniqueNames.size > 0) {
                  var _sortedNames3 = setToSortedString(componentWillMountUniqueNames);

                  warn('componentWillMount has been renamed, and is not recommended for use. ' + 'See https://reactjs.org/link/unsafe-component-lifecycles for details.\n\n' + '* Move code with side effects to componentDidMount, and set initial state in the constructor.\n' + '* Rename componentWillMount to UNSAFE_componentWillMount to suppress ' + 'this warning in non-strict mode. In React 18.x, only the UNSAFE_ name will work. ' + 'To rename all deprecated lifecycles to their new names, you can run ' + '`npx react-codemod rename-unsafe-lifecycles` in your project source folder.\n' + '\nPlease update the following components: %s', _sortedNames3);
                }

                if (componentWillReceivePropsUniqueNames.size > 0) {
                  var _sortedNames4 = setToSortedString(componentWillReceivePropsUniqueNames);

                  warn('componentWillReceiveProps has been renamed, and is not recommended for use. ' + 'See https://reactjs.org/link/unsafe-component-lifecycles for details.\n\n' + '* Move data fetching code or side effects to componentDidUpdate.\n' + "* If you're updating state whenever props change, refactor your " + 'code to use memoization techniques or move it to ' + 'static getDerivedStateFromProps. Learn more at: https://reactjs.org/link/derived-state\n' + '* Rename componentWillReceiveProps to UNSAFE_componentWillReceiveProps to suppress ' + 'this warning in non-strict mode. In React 18.x, only the UNSAFE_ name will work. ' + 'To rename all deprecated lifecycles to their new names, you can run ' + '`npx react-codemod rename-unsafe-lifecycles` in your project source folder.\n' + '\nPlease update the following components: %s', _sortedNames4);
                }

                if (componentWillUpdateUniqueNames.size > 0) {
                  var _sortedNames5 = setToSortedString(componentWillUpdateUniqueNames);

                  warn('componentWillUpdate has been renamed, and is not recommended for use. ' + 'See https://reactjs.org/link/unsafe-component-lifecycles for details.\n\n' + '* Move data fetching code or side effects to componentDidUpdate.\n' + '* Rename componentWillUpdate to UNSAFE_componentWillUpdate to suppress ' + 'this warning in non-strict mode. In React 18.x, only the UNSAFE_ name will work. ' + 'To rename all deprecated lifecycles to their new names, you can run ' + '`npx react-codemod rename-unsafe-lifecycles` in your project source folder.\n' + '\nPlease update the following components: %s', _sortedNames5);
                }
              };

              var pendingLegacyContextWarning = new Map(); // Tracks components we have already warned about.

              var didWarnAboutLegacyContext = new Set();

              ReactStrictModeWarnings.recordLegacyContextWarning = function (fiber, instance) {
                var strictRoot = findStrictRoot(fiber);

                if (strictRoot === null) {
                  error('Expected to find a StrictMode component in a strict mode tree. ' + 'This error is likely caused by a bug in React. Please file an issue.');

                  return;
                } // Dedup strategy: Warn once per component.


                if (didWarnAboutLegacyContext.has(fiber.type)) {
                  return;
                }

                var warningsForRoot = pendingLegacyContextWarning.get(strictRoot);

                if (fiber.type.contextTypes != null || fiber.type.childContextTypes != null || instance !== null && typeof instance.getChildContext === 'function') {
                  if (warningsForRoot === undefined) {
                    warningsForRoot = [];
                    pendingLegacyContextWarning.set(strictRoot, warningsForRoot);
                  }

                  warningsForRoot.push(fiber);
                }
              };

              ReactStrictModeWarnings.flushLegacyContextWarning = function () {
                pendingLegacyContextWarning.forEach(function (fiberArray, strictRoot) {
                  if (fiberArray.length === 0) {
                    return;
                  }

                  var firstFiber = fiberArray[0];
                  var uniqueNames = new Set();
                  fiberArray.forEach(function (fiber) {
                    uniqueNames.add(getComponentName(fiber.type) || 'Component');
                    didWarnAboutLegacyContext.add(fiber.type);
                  });
                  var sortedNames = setToSortedString(uniqueNames);

                  try {
                    setCurrentFiber(firstFiber);

                    error('Legacy context API has been detected within a strict-mode tree.' + '\n\nThe old API will be supported in all 16.x releases, but applications ' + 'using it should migrate to the new version.' + '\n\nPlease update the following components: %s' + '\n\nLearn more about this warning here: https://reactjs.org/link/legacy-context', sortedNames);
                  } finally {
                    resetCurrentFiber();
                  }
                });
              };

              ReactStrictModeWarnings.discardPendingWarnings = function () {
                pendingComponentWillMountWarnings = [];
                pendingUNSAFE_ComponentWillMountWarnings = [];
                pendingComponentWillReceivePropsWarnings = [];
                pendingUNSAFE_ComponentWillReceivePropsWarnings = [];
                pendingComponentWillUpdateWarnings = [];
                pendingUNSAFE_ComponentWillUpdateWarnings = [];
                pendingLegacyContextWarning = new Map();
              };
            }

            function resolveDefaultProps(Component, baseProps) {
              if (Component && Component.defaultProps) {
                // Resolve default props. Taken from ReactElement
                var props = _assign({}, baseProps);

                var defaultProps = Component.defaultProps;

                for (var propName in defaultProps) {
                  if (props[propName] === undefined) {
                    props[propName] = defaultProps[propName];
                  }
                }

                return props;
              }

              return baseProps;
            }

            // Max 31 bit integer. The max integer size in V8 for 32-bit systems.
            // Math.pow(2, 30) - 1
            // 0b111111111111111111111111111111
            var MAX_SIGNED_31_BIT_INT = 1073741823;

            var valueCursor = createCursor(null);
            var rendererSigil;

            {
              // Use this to detect multiple renderers using the same context
              rendererSigil = {};
            }

            var currentlyRenderingFiber = null;
            var lastContextDependency = null;
            var lastContextWithAllBitsObserved = null;
            var isDisallowedContextReadInDEV = false;
            function resetContextDependencies() {
              // This is called right before React yields execution, to ensure `readContext`
              // cannot be called outside the render phase.
              currentlyRenderingFiber = null;
              lastContextDependency = null;
              lastContextWithAllBitsObserved = null;

              {
                isDisallowedContextReadInDEV = false;
              }
            }
            function enterDisallowedContextReadInDEV() {
              {
                isDisallowedContextReadInDEV = true;
              }
            }
            function exitDisallowedContextReadInDEV() {
              {
                isDisallowedContextReadInDEV = false;
              }
            }
            function pushProvider(providerFiber, nextValue) {
              var context = providerFiber.type._context;

              {
                push(valueCursor, context._currentValue, providerFiber);
                context._currentValue = nextValue;

                {
                  if (context._currentRenderer !== undefined && context._currentRenderer !== null && context._currentRenderer !== rendererSigil) {
                    error('Detected multiple renderers concurrently rendering the ' + 'same context provider. This is currently unsupported.');
                  }

                  context._currentRenderer = rendererSigil;
                }
              }
            }
            function popProvider(providerFiber) {
              var currentValue = valueCursor.current;
              pop(valueCursor, providerFiber);
              var context = providerFiber.type._context;

              {
                context._currentValue = currentValue;
              }
            }
            function calculateChangedBits(context, newValue, oldValue) {
              if (objectIs(oldValue, newValue)) {
                // No change
                return 0;
              } else {
                var changedBits = typeof context._calculateChangedBits === 'function' ? context._calculateChangedBits(oldValue, newValue) : MAX_SIGNED_31_BIT_INT;

                {
                  if ((changedBits & MAX_SIGNED_31_BIT_INT) !== changedBits) {
                    error('calculateChangedBits: Expected the return value to be a ' + '31-bit integer. Instead received: %s', changedBits);
                  }
                }

                return changedBits | 0;
              }
            }
            function scheduleWorkOnParentPath(parent, renderLanes) {
              // Update the child lanes of all the ancestors, including the alternates.
              var node = parent;

              while (node !== null) {
                var alternate = node.alternate;

                if (!isSubsetOfLanes(node.childLanes, renderLanes)) {
                  node.childLanes = mergeLanes(node.childLanes, renderLanes);

                  if (alternate !== null) {
                    alternate.childLanes = mergeLanes(alternate.childLanes, renderLanes);
                  }
                } else if (alternate !== null && !isSubsetOfLanes(alternate.childLanes, renderLanes)) {
                  alternate.childLanes = mergeLanes(alternate.childLanes, renderLanes);
                } else {
                  // Neither alternate was updated, which means the rest of the
                  // ancestor path already has sufficient priority.
                  break;
                }

                node = node.return;
              }
            }
            function propagateContextChange(workInProgress, context, changedBits, renderLanes) {
              var fiber = workInProgress.child;

              if (fiber !== null) {
                // Set the return pointer of the child to the work-in-progress fiber.
                fiber.return = workInProgress;
              }

              while (fiber !== null) {
                var nextFiber = void 0; // Visit this fiber.

                var list = fiber.dependencies;

                if (list !== null) {
                  nextFiber = fiber.child;
                  var dependency = list.firstContext;

                  while (dependency !== null) {
                    // Check if the context matches.
                    if (dependency.context === context && (dependency.observedBits & changedBits) !== 0) {
                      // Match! Schedule an update on this fiber.
                      if (fiber.tag === ClassComponent) {
                        // Schedule a force update on the work-in-progress.
                        var update = createUpdate(NoTimestamp, pickArbitraryLane(renderLanes));
                        update.tag = ForceUpdate; // TODO: Because we don't have a work-in-progress, this will add the
                        // update to the current fiber, too, which means it will persist even if
                        // this render is thrown away. Since it's a race condition, not sure it's
                        // worth fixing.

                        enqueueUpdate(fiber, update);
                      }

                      fiber.lanes = mergeLanes(fiber.lanes, renderLanes);
                      var alternate = fiber.alternate;

                      if (alternate !== null) {
                        alternate.lanes = mergeLanes(alternate.lanes, renderLanes);
                      }

                      scheduleWorkOnParentPath(fiber.return, renderLanes); // Mark the updated lanes on the list, too.

                      list.lanes = mergeLanes(list.lanes, renderLanes); // Since we already found a match, we can stop traversing the
                      // dependency list.

                      break;
                    }

                    dependency = dependency.next;
                  }
                } else if (fiber.tag === ContextProvider) {
                  // Don't scan deeper if this is a matching provider
                  nextFiber = fiber.type === workInProgress.type ? null : fiber.child;
                } else {
                  // Traverse down.
                  nextFiber = fiber.child;
                }

                if (nextFiber !== null) {
                  // Set the return pointer of the child to the work-in-progress fiber.
                  nextFiber.return = fiber;
                } else {
                  // No child. Traverse to next sibling.
                  nextFiber = fiber;

                  while (nextFiber !== null) {
                    if (nextFiber === workInProgress) {
                      // We're back to the root of this subtree. Exit.
                      nextFiber = null;
                      break;
                    }

                    var sibling = nextFiber.sibling;

                    if (sibling !== null) {
                      // Set the return pointer of the sibling to the work-in-progress fiber.
                      sibling.return = nextFiber.return;
                      nextFiber = sibling;
                      break;
                    } // No more siblings. Traverse up.


                    nextFiber = nextFiber.return;
                  }
                }

                fiber = nextFiber;
              }
            }
            function prepareToReadContext(workInProgress, renderLanes) {
              currentlyRenderingFiber = workInProgress;
              lastContextDependency = null;
              lastContextWithAllBitsObserved = null;
              var dependencies = workInProgress.dependencies;

              if (dependencies !== null) {
                var firstContext = dependencies.firstContext;

                if (firstContext !== null) {
                  if (includesSomeLane(dependencies.lanes, renderLanes)) {
                    // Context list has a pending update. Mark that this fiber performed work.
                    markWorkInProgressReceivedUpdate();
                  } // Reset the work-in-progress list


                  dependencies.firstContext = null;
                }
              }
            }
            function readContext(context, observedBits) {
              {
                // This warning would fire if you read context inside a Hook like useMemo.
                // Unlike the class check below, it's not enforced in production for perf.
                if (isDisallowedContextReadInDEV) {
                  error('Context can only be read while React is rendering. ' + 'In classes, you can read it in the render method or getDerivedStateFromProps. ' + 'In function components, you can read it directly in the function body, but not ' + 'inside Hooks like useReducer() or useMemo().');
                }
              }

              if (lastContextWithAllBitsObserved === context) ; else if (observedBits === false || observedBits === 0) ; else {
                var resolvedObservedBits; // Avoid deopting on observable arguments or heterogeneous types.

                if (typeof observedBits !== 'number' || observedBits === MAX_SIGNED_31_BIT_INT) {
                  // Observe all updates.
                  lastContextWithAllBitsObserved = context;
                  resolvedObservedBits = MAX_SIGNED_31_BIT_INT;
                } else {
                  resolvedObservedBits = observedBits;
                }

                var contextItem = {
                  context: context,
                  observedBits: resolvedObservedBits,
                  next: null
                };

                if (lastContextDependency === null) {
                  if (!(currentlyRenderingFiber !== null)) {
                    {
                      throw Error( "Context can only be read while React is rendering. In classes, you can read it in the render method or getDerivedStateFromProps. In function components, you can read it directly in the function body, but not inside Hooks like useReducer() or useMemo()." );
                    }
                  } // This is the first dependency for this component. Create a new list.


                  lastContextDependency = contextItem;
                  currentlyRenderingFiber.dependencies = {
                    lanes: NoLanes,
                    firstContext: contextItem,
                    responders: null
                  };
                } else {
                  // Append a new context item.
                  lastContextDependency = lastContextDependency.next = contextItem;
                }
              }

              return  context._currentValue ;
            }

            var UpdateState = 0;
            var ReplaceState = 1;
            var ForceUpdate = 2;
            var CaptureUpdate = 3; // Global state that is reset at the beginning of calling `processUpdateQueue`.
            // It should only be read right after calling `processUpdateQueue`, via
            // `checkHasForceUpdateAfterProcessing`.

            var hasForceUpdate = false;
            var didWarnUpdateInsideUpdate;
            var currentlyProcessingQueue;

            {
              didWarnUpdateInsideUpdate = false;
              currentlyProcessingQueue = null;
            }

            function initializeUpdateQueue(fiber) {
              var queue = {
                baseState: fiber.memoizedState,
                firstBaseUpdate: null,
                lastBaseUpdate: null,
                shared: {
                  pending: null
                },
                effects: null
              };
              fiber.updateQueue = queue;
            }
            function cloneUpdateQueue(current, workInProgress) {
              // Clone the update queue from current. Unless it's already a clone.
              var queue = workInProgress.updateQueue;
              var currentQueue = current.updateQueue;

              if (queue === currentQueue) {
                var clone = {
                  baseState: currentQueue.baseState,
                  firstBaseUpdate: currentQueue.firstBaseUpdate,
                  lastBaseUpdate: currentQueue.lastBaseUpdate,
                  shared: currentQueue.shared,
                  effects: currentQueue.effects
                };
                workInProgress.updateQueue = clone;
              }
            }
            function createUpdate(eventTime, lane) {
              var update = {
                eventTime: eventTime,
                lane: lane,
                tag: UpdateState,
                payload: null,
                callback: null,
                next: null
              };
              return update;
            }
            function enqueueUpdate(fiber, update) {
              var updateQueue = fiber.updateQueue;

              if (updateQueue === null) {
                // Only occurs if the fiber has been unmounted.
                return;
              }

              var sharedQueue = updateQueue.shared;
              var pending = sharedQueue.pending;

              if (pending === null) {
                // This is the first update. Create a circular list.
                update.next = update;
              } else {
                update.next = pending.next;
                pending.next = update;
              }

              sharedQueue.pending = update;

              {
                if (currentlyProcessingQueue === sharedQueue && !didWarnUpdateInsideUpdate) {
                  error('An update (setState, replaceState, or forceUpdate) was scheduled ' + 'from inside an update function. Update functions should be pure, ' + 'with zero side-effects. Consider using componentDidUpdate or a ' + 'callback.');

                  didWarnUpdateInsideUpdate = true;
                }
              }
            }
            function enqueueCapturedUpdate(workInProgress, capturedUpdate) {
              // Captured updates are updates that are thrown by a child during the render
              // phase. They should be discarded if the render is aborted. Therefore,
              // we should only put them on the work-in-progress queue, not the current one.
              var queue = workInProgress.updateQueue; // Check if the work-in-progress queue is a clone.

              var current = workInProgress.alternate;

              if (current !== null) {
                var currentQueue = current.updateQueue;

                if (queue === currentQueue) {
                  // The work-in-progress queue is the same as current. This happens when
                  // we bail out on a parent fiber that then captures an error thrown by
                  // a child. Since we want to append the update only to the work-in
                  // -progress queue, we need to clone the updates. We usually clone during
                  // processUpdateQueue, but that didn't happen in this case because we
                  // skipped over the parent when we bailed out.
                  var newFirst = null;
                  var newLast = null;
                  var firstBaseUpdate = queue.firstBaseUpdate;

                  if (firstBaseUpdate !== null) {
                    // Loop through the updates and clone them.
                    var update = firstBaseUpdate;

                    do {
                      var clone = {
                        eventTime: update.eventTime,
                        lane: update.lane,
                        tag: update.tag,
                        payload: update.payload,
                        callback: update.callback,
                        next: null
                      };

                      if (newLast === null) {
                        newFirst = newLast = clone;
                      } else {
                        newLast.next = clone;
                        newLast = clone;
                      }

                      update = update.next;
                    } while (update !== null); // Append the captured update the end of the cloned list.


                    if (newLast === null) {
                      newFirst = newLast = capturedUpdate;
                    } else {
                      newLast.next = capturedUpdate;
                      newLast = capturedUpdate;
                    }
                  } else {
                    // There are no base updates.
                    newFirst = newLast = capturedUpdate;
                  }

                  queue = {
                    baseState: currentQueue.baseState,
                    firstBaseUpdate: newFirst,
                    lastBaseUpdate: newLast,
                    shared: currentQueue.shared,
                    effects: currentQueue.effects
                  };
                  workInProgress.updateQueue = queue;
                  return;
                }
              } // Append the update to the end of the list.


              var lastBaseUpdate = queue.lastBaseUpdate;

              if (lastBaseUpdate === null) {
                queue.firstBaseUpdate = capturedUpdate;
              } else {
                lastBaseUpdate.next = capturedUpdate;
              }

              queue.lastBaseUpdate = capturedUpdate;
            }

            function getStateFromUpdate(workInProgress, queue, update, prevState, nextProps, instance) {
              switch (update.tag) {
                case ReplaceState:
                  {
                    var payload = update.payload;

                    if (typeof payload === 'function') {
                      // Updater function
                      {
                        enterDisallowedContextReadInDEV();
                      }

                      var nextState = payload.call(instance, prevState, nextProps);

                      {
                        if ( workInProgress.mode & StrictMode) {
                          disableLogs();

                          try {
                            payload.call(instance, prevState, nextProps);
                          } finally {
                            reenableLogs();
                          }
                        }

                        exitDisallowedContextReadInDEV();
                      }

                      return nextState;
                    } // State object


                    return payload;
                  }

                case CaptureUpdate:
                  {
                    workInProgress.flags = workInProgress.flags & ~ShouldCapture | DidCapture;
                  }
                // Intentional fallthrough

                case UpdateState:
                  {
                    var _payload = update.payload;
                    var partialState;

                    if (typeof _payload === 'function') {
                      // Updater function
                      {
                        enterDisallowedContextReadInDEV();
                      }

                      partialState = _payload.call(instance, prevState, nextProps);

                      {
                        if ( workInProgress.mode & StrictMode) {
                          disableLogs();

                          try {
                            _payload.call(instance, prevState, nextProps);
                          } finally {
                            reenableLogs();
                          }
                        }

                        exitDisallowedContextReadInDEV();
                      }
                    } else {
                      // Partial state object
                      partialState = _payload;
                    }

                    if (partialState === null || partialState === undefined) {
                      // Null and undefined are treated as no-ops.
                      return prevState;
                    } // Merge the partial state and the previous state.


                    return _assign({}, prevState, partialState);
                  }

                case ForceUpdate:
                  {
                    hasForceUpdate = true;
                    return prevState;
                  }
              }

              return prevState;
            }

            function processUpdateQueue(workInProgress, props, instance, renderLanes) {
              // This is always non-null on a ClassComponent or HostRoot
              var queue = workInProgress.updateQueue;
              hasForceUpdate = false;

              {
                currentlyProcessingQueue = queue.shared;
              }

              var firstBaseUpdate = queue.firstBaseUpdate;
              var lastBaseUpdate = queue.lastBaseUpdate; // Check if there are pending updates. If so, transfer them to the base queue.

              var pendingQueue = queue.shared.pending;

              if (pendingQueue !== null) {
                queue.shared.pending = null; // The pending queue is circular. Disconnect the pointer between first
                // and last so that it's non-circular.

                var lastPendingUpdate = pendingQueue;
                var firstPendingUpdate = lastPendingUpdate.next;
                lastPendingUpdate.next = null; // Append pending updates to base queue

                if (lastBaseUpdate === null) {
                  firstBaseUpdate = firstPendingUpdate;
                } else {
                  lastBaseUpdate.next = firstPendingUpdate;
                }

                lastBaseUpdate = lastPendingUpdate; // If there's a current queue, and it's different from the base queue, then
                // we need to transfer the updates to that queue, too. Because the base
                // queue is a singly-linked list with no cycles, we can append to both
                // lists and take advantage of structural sharing.
                // TODO: Pass `current` as argument

                var current = workInProgress.alternate;

                if (current !== null) {
                  // This is always non-null on a ClassComponent or HostRoot
                  var currentQueue = current.updateQueue;
                  var currentLastBaseUpdate = currentQueue.lastBaseUpdate;

                  if (currentLastBaseUpdate !== lastBaseUpdate) {
                    if (currentLastBaseUpdate === null) {
                      currentQueue.firstBaseUpdate = firstPendingUpdate;
                    } else {
                      currentLastBaseUpdate.next = firstPendingUpdate;
                    }

                    currentQueue.lastBaseUpdate = lastPendingUpdate;
                  }
                }
              } // These values may change as we process the queue.


              if (firstBaseUpdate !== null) {
                // Iterate through the list of updates to compute the result.
                var newState = queue.baseState; // TODO: Don't need to accumulate this. Instead, we can remove renderLanes
                // from the original lanes.

                var newLanes = NoLanes;
                var newBaseState = null;
                var newFirstBaseUpdate = null;
                var newLastBaseUpdate = null;
                var update = firstBaseUpdate;

                do {
                  var updateLane = update.lane;
                  var updateEventTime = update.eventTime;

                  if (!isSubsetOfLanes(renderLanes, updateLane)) {
                    // Priority is insufficient. Skip this update. If this is the first
                    // skipped update, the previous update/state is the new base
                    // update/state.
                    var clone = {
                      eventTime: updateEventTime,
                      lane: updateLane,
                      tag: update.tag,
                      payload: update.payload,
                      callback: update.callback,
                      next: null
                    };

                    if (newLastBaseUpdate === null) {
                      newFirstBaseUpdate = newLastBaseUpdate = clone;
                      newBaseState = newState;
                    } else {
                      newLastBaseUpdate = newLastBaseUpdate.next = clone;
                    } // Update the remaining priority in the queue.


                    newLanes = mergeLanes(newLanes, updateLane);
                  } else {
                    // This update does have sufficient priority.
                    if (newLastBaseUpdate !== null) {
                      var _clone = {
                        eventTime: updateEventTime,
                        // This update is going to be committed so we never want uncommit
                        // it. Using NoLane works because 0 is a subset of all bitmasks, so
                        // this will never be skipped by the check above.
                        lane: NoLane,
                        tag: update.tag,
                        payload: update.payload,
                        callback: update.callback,
                        next: null
                      };
                      newLastBaseUpdate = newLastBaseUpdate.next = _clone;
                    } // Process this update.


                    newState = getStateFromUpdate(workInProgress, queue, update, newState, props, instance);
                    var callback = update.callback;

                    if (callback !== null) {
                      workInProgress.flags |= Callback;
                      var effects = queue.effects;

                      if (effects === null) {
                        queue.effects = [update];
                      } else {
                        effects.push(update);
                      }
                    }
                  }

                  update = update.next;

                  if (update === null) {
                    pendingQueue = queue.shared.pending;

                    if (pendingQueue === null) {
                      break;
                    } else {
                      // An update was scheduled from inside a reducer. Add the new
                      // pending updates to the end of the list and keep processing.
                      var _lastPendingUpdate = pendingQueue; // Intentionally unsound. Pending updates form a circular list, but we
                      // unravel them when transferring them to the base queue.

                      var _firstPendingUpdate = _lastPendingUpdate.next;
                      _lastPendingUpdate.next = null;
                      update = _firstPendingUpdate;
                      queue.lastBaseUpdate = _lastPendingUpdate;
                      queue.shared.pending = null;
                    }
                  }
                } while (true);

                if (newLastBaseUpdate === null) {
                  newBaseState = newState;
                }

                queue.baseState = newBaseState;
                queue.firstBaseUpdate = newFirstBaseUpdate;
                queue.lastBaseUpdate = newLastBaseUpdate; // Set the remaining expiration time to be whatever is remaining in the queue.
                // This should be fine because the only two other things that contribute to
                // expiration time are props and context. We're already in the middle of the
                // begin phase by the time we start processing the queue, so we've already
                // dealt with the props. Context in components that specify
                // shouldComponentUpdate is tricky; but we'll have to account for
                // that regardless.

                markSkippedUpdateLanes(newLanes);
                workInProgress.lanes = newLanes;
                workInProgress.memoizedState = newState;
              }

              {
                currentlyProcessingQueue = null;
              }
            }

            function callCallback(callback, context) {
              if (!(typeof callback === 'function')) {
                {
                  throw Error( "Invalid argument passed as callback. Expected a function. Instead received: " + callback );
                }
              }

              callback.call(context);
            }

            function resetHasForceUpdateBeforeProcessing() {
              hasForceUpdate = false;
            }
            function checkHasForceUpdateAfterProcessing() {
              return hasForceUpdate;
            }
            function commitUpdateQueue(finishedWork, finishedQueue, instance) {
              // Commit the effects
              var effects = finishedQueue.effects;
              finishedQueue.effects = null;

              if (effects !== null) {
                for (var i = 0; i < effects.length; i++) {
                  var effect = effects[i];
                  var callback = effect.callback;

                  if (callback !== null) {
                    effect.callback = null;
                    callCallback(callback, instance);
                  }
                }
              }
            }

            var fakeInternalInstance = {};
            var isArray = Array.isArray; // React.Component uses a shared frozen object by default.
            // We'll use it to determine whether we need to initialize legacy refs.

            var emptyRefsObject = new React.Component().refs;
            var didWarnAboutStateAssignmentForComponent;
            var didWarnAboutUninitializedState;
            var didWarnAboutGetSnapshotBeforeUpdateWithoutDidUpdate;
            var didWarnAboutLegacyLifecyclesAndDerivedState;
            var didWarnAboutUndefinedDerivedState;
            var warnOnUndefinedDerivedState;
            var warnOnInvalidCallback;
            var didWarnAboutDirectlyAssigningPropsToState;
            var didWarnAboutContextTypeAndContextTypes;
            var didWarnAboutInvalidateContextType;

            {
              didWarnAboutStateAssignmentForComponent = new Set();
              didWarnAboutUninitializedState = new Set();
              didWarnAboutGetSnapshotBeforeUpdateWithoutDidUpdate = new Set();
              didWarnAboutLegacyLifecyclesAndDerivedState = new Set();
              didWarnAboutDirectlyAssigningPropsToState = new Set();
              didWarnAboutUndefinedDerivedState = new Set();
              didWarnAboutContextTypeAndContextTypes = new Set();
              didWarnAboutInvalidateContextType = new Set();
              var didWarnOnInvalidCallback = new Set();

              warnOnInvalidCallback = function (callback, callerName) {
                if (callback === null || typeof callback === 'function') {
                  return;
                }

                var key = callerName + '_' + callback;

                if (!didWarnOnInvalidCallback.has(key)) {
                  didWarnOnInvalidCallback.add(key);

                  error('%s(...): Expected the last optional `callback` argument to be a ' + 'function. Instead received: %s.', callerName, callback);
                }
              };

              warnOnUndefinedDerivedState = function (type, partialState) {
                if (partialState === undefined) {
                  var componentName = getComponentName(type) || 'Component';

                  if (!didWarnAboutUndefinedDerivedState.has(componentName)) {
                    didWarnAboutUndefinedDerivedState.add(componentName);

                    error('%s.getDerivedStateFromProps(): A valid state object (or null) must be returned. ' + 'You have returned undefined.', componentName);
                  }
                }
              }; // This is so gross but it's at least non-critical and can be removed if
              // it causes problems. This is meant to give a nicer error message for
              // ReactDOM15.unstable_renderSubtreeIntoContainer(reactDOM16Component,
              // ...)) which otherwise throws a "_processChildContext is not a function"
              // exception.


              Object.defineProperty(fakeInternalInstance, '_processChildContext', {
                enumerable: false,
                value: function () {
                  {
                    {
                      throw Error( "_processChildContext is not available in React 16+. This likely means you have multiple copies of React and are attempting to nest a React 15 tree inside a React 16 tree using unstable_renderSubtreeIntoContainer, which isn't supported. Try to make sure you have only one copy of React (and ideally, switch to ReactDOM.createPortal)." );
                    }
                  }
                }
              });
              Object.freeze(fakeInternalInstance);
            }

            function applyDerivedStateFromProps(workInProgress, ctor, getDerivedStateFromProps, nextProps) {
              var prevState = workInProgress.memoizedState;

              {
                if ( workInProgress.mode & StrictMode) {
                  disableLogs();

                  try {
                    // Invoke the function an extra time to help detect side-effects.
                    getDerivedStateFromProps(nextProps, prevState);
                  } finally {
                    reenableLogs();
                  }
                }
              }

              var partialState = getDerivedStateFromProps(nextProps, prevState);

              {
                warnOnUndefinedDerivedState(ctor, partialState);
              } // Merge the partial state and the previous state.


              var memoizedState = partialState === null || partialState === undefined ? prevState : _assign({}, prevState, partialState);
              workInProgress.memoizedState = memoizedState; // Once the update queue is empty, persist the derived state onto the
              // base state.

              if (workInProgress.lanes === NoLanes) {
                // Queue is always non-null for classes
                var updateQueue = workInProgress.updateQueue;
                updateQueue.baseState = memoizedState;
              }
            }
            var classComponentUpdater = {
              isMounted: isMounted,
              enqueueSetState: function (inst, payload, callback) {
                var fiber = get(inst);
                var eventTime = requestEventTime();
                var lane = requestUpdateLane(fiber);
                var update = createUpdate(eventTime, lane);
                update.payload = payload;

                if (callback !== undefined && callback !== null) {
                  {
                    warnOnInvalidCallback(callback, 'setState');
                  }

                  update.callback = callback;
                }

                enqueueUpdate(fiber, update);
                scheduleUpdateOnFiber(fiber, lane, eventTime);
              },
              enqueueReplaceState: function (inst, payload, callback) {
                var fiber = get(inst);
                var eventTime = requestEventTime();
                var lane = requestUpdateLane(fiber);
                var update = createUpdate(eventTime, lane);
                update.tag = ReplaceState;
                update.payload = payload;

                if (callback !== undefined && callback !== null) {
                  {
                    warnOnInvalidCallback(callback, 'replaceState');
                  }

                  update.callback = callback;
                }

                enqueueUpdate(fiber, update);
                scheduleUpdateOnFiber(fiber, lane, eventTime);
              },
              enqueueForceUpdate: function (inst, callback) {
                var fiber = get(inst);
                var eventTime = requestEventTime();
                var lane = requestUpdateLane(fiber);
                var update = createUpdate(eventTime, lane);
                update.tag = ForceUpdate;

                if (callback !== undefined && callback !== null) {
                  {
                    warnOnInvalidCallback(callback, 'forceUpdate');
                  }

                  update.callback = callback;
                }

                enqueueUpdate(fiber, update);
                scheduleUpdateOnFiber(fiber, lane, eventTime);
              }
            };

            function checkShouldComponentUpdate(workInProgress, ctor, oldProps, newProps, oldState, newState, nextContext) {
              var instance = workInProgress.stateNode;

              if (typeof instance.shouldComponentUpdate === 'function') {
                {
                  if ( workInProgress.mode & StrictMode) {
                    disableLogs();

                    try {
                      // Invoke the function an extra time to help detect side-effects.
                      instance.shouldComponentUpdate(newProps, newState, nextContext);
                    } finally {
                      reenableLogs();
                    }
                  }
                }

                var shouldUpdate = instance.shouldComponentUpdate(newProps, newState, nextContext);

                {
                  if (shouldUpdate === undefined) {
                    error('%s.shouldComponentUpdate(): Returned undefined instead of a ' + 'boolean value. Make sure to return true or false.', getComponentName(ctor) || 'Component');
                  }
                }

                return shouldUpdate;
              }

              if (ctor.prototype && ctor.prototype.isPureReactComponent) {
                return !shallowEqual(oldProps, newProps) || !shallowEqual(oldState, newState);
              }

              return true;
            }

            function checkClassInstance(workInProgress, ctor, newProps) {
              var instance = workInProgress.stateNode;

              {
                var name = getComponentName(ctor) || 'Component';
                var renderPresent = instance.render;

                if (!renderPresent) {
                  if (ctor.prototype && typeof ctor.prototype.render === 'function') {
                    error('%s(...): No `render` method found on the returned component ' + 'instance: did you accidentally return an object from the constructor?', name);
                  } else {
                    error('%s(...): No `render` method found on the returned component ' + 'instance: you may have forgotten to define `render`.', name);
                  }
                }

                if (instance.getInitialState && !instance.getInitialState.isReactClassApproved && !instance.state) {
                  error('getInitialState was defined on %s, a plain JavaScript class. ' + 'This is only supported for classes created using React.createClass. ' + 'Did you mean to define a state property instead?', name);
                }

                if (instance.getDefaultProps && !instance.getDefaultProps.isReactClassApproved) {
                  error('getDefaultProps was defined on %s, a plain JavaScript class. ' + 'This is only supported for classes created using React.createClass. ' + 'Use a static property to define defaultProps instead.', name);
                }

                if (instance.propTypes) {
                  error('propTypes was defined as an instance property on %s. Use a static ' + 'property to define propTypes instead.', name);
                }

                if (instance.contextType) {
                  error('contextType was defined as an instance property on %s. Use a static ' + 'property to define contextType instead.', name);
                }

                {
                  if (instance.contextTypes) {
                    error('contextTypes was defined as an instance property on %s. Use a static ' + 'property to define contextTypes instead.', name);
                  }

                  if (ctor.contextType && ctor.contextTypes && !didWarnAboutContextTypeAndContextTypes.has(ctor)) {
                    didWarnAboutContextTypeAndContextTypes.add(ctor);

                    error('%s declares both contextTypes and contextType static properties. ' + 'The legacy contextTypes property will be ignored.', name);
                  }
                }

                if (typeof instance.componentShouldUpdate === 'function') {
                  error('%s has a method called ' + 'componentShouldUpdate(). Did you mean shouldComponentUpdate()? ' + 'The name is phrased as a question because the function is ' + 'expected to return a value.', name);
                }

                if (ctor.prototype && ctor.prototype.isPureReactComponent && typeof instance.shouldComponentUpdate !== 'undefined') {
                  error('%s has a method called shouldComponentUpdate(). ' + 'shouldComponentUpdate should not be used when extending React.PureComponent. ' + 'Please extend React.Component if shouldComponentUpdate is used.', getComponentName(ctor) || 'A pure component');
                }

                if (typeof instance.componentDidUnmount === 'function') {
                  error('%s has a method called ' + 'componentDidUnmount(). But there is no such lifecycle method. ' + 'Did you mean componentWillUnmount()?', name);
                }

                if (typeof instance.componentDidReceiveProps === 'function') {
                  error('%s has a method called ' + 'componentDidReceiveProps(). But there is no such lifecycle method. ' + 'If you meant to update the state in response to changing props, ' + 'use componentWillReceiveProps(). If you meant to fetch data or ' + 'run side-effects or mutations after React has updated the UI, use componentDidUpdate().', name);
                }

                if (typeof instance.componentWillRecieveProps === 'function') {
                  error('%s has a method called ' + 'componentWillRecieveProps(). Did you mean componentWillReceiveProps()?', name);
                }

                if (typeof instance.UNSAFE_componentWillRecieveProps === 'function') {
                  error('%s has a method called ' + 'UNSAFE_componentWillRecieveProps(). Did you mean UNSAFE_componentWillReceiveProps()?', name);
                }

                var hasMutatedProps = instance.props !== newProps;

                if (instance.props !== undefined && hasMutatedProps) {
                  error('%s(...): When calling super() in `%s`, make sure to pass ' + "up the same props that your component's constructor was passed.", name, name);
                }

                if (instance.defaultProps) {
                  error('Setting defaultProps as an instance property on %s is not supported and will be ignored.' + ' Instead, define defaultProps as a static property on %s.', name, name);
                }

                if (typeof instance.getSnapshotBeforeUpdate === 'function' && typeof instance.componentDidUpdate !== 'function' && !didWarnAboutGetSnapshotBeforeUpdateWithoutDidUpdate.has(ctor)) {
                  didWarnAboutGetSnapshotBeforeUpdateWithoutDidUpdate.add(ctor);

                  error('%s: getSnapshotBeforeUpdate() should be used with componentDidUpdate(). ' + 'This component defines getSnapshotBeforeUpdate() only.', getComponentName(ctor));
                }

                if (typeof instance.getDerivedStateFromProps === 'function') {
                  error('%s: getDerivedStateFromProps() is defined as an instance method ' + 'and will be ignored. Instead, declare it as a static method.', name);
                }

                if (typeof instance.getDerivedStateFromError === 'function') {
                  error('%s: getDerivedStateFromError() is defined as an instance method ' + 'and will be ignored. Instead, declare it as a static method.', name);
                }

                if (typeof ctor.getSnapshotBeforeUpdate === 'function') {
                  error('%s: getSnapshotBeforeUpdate() is defined as a static method ' + 'and will be ignored. Instead, declare it as an instance method.', name);
                }

                var _state = instance.state;

                if (_state && (typeof _state !== 'object' || isArray(_state))) {
                  error('%s.state: must be set to an object or null', name);
                }

                if (typeof instance.getChildContext === 'function' && typeof ctor.childContextTypes !== 'object') {
                  error('%s.getChildContext(): childContextTypes must be defined in order to ' + 'use getChildContext().', name);
                }
              }
            }

            function adoptClassInstance(workInProgress, instance) {
              instance.updater = classComponentUpdater;
              workInProgress.stateNode = instance; // The instance needs access to the fiber so that it can schedule updates

              set(instance, workInProgress);

              {
                instance._reactInternalInstance = fakeInternalInstance;
              }
            }

            function constructClassInstance(workInProgress, ctor, props) {
              var isLegacyContextConsumer = false;
              var unmaskedContext = emptyContextObject;
              var context = emptyContextObject;
              var contextType = ctor.contextType;

              {
                if ('contextType' in ctor) {
                  var isValid = // Allow null for conditional declaration
                  contextType === null || contextType !== undefined && contextType.$$typeof === REACT_CONTEXT_TYPE && contextType._context === undefined; // Not a <Context.Consumer>

                  if (!isValid && !didWarnAboutInvalidateContextType.has(ctor)) {
                    didWarnAboutInvalidateContextType.add(ctor);
                    var addendum = '';

                    if (contextType === undefined) {
                      addendum = ' However, it is set to undefined. ' + 'This can be caused by a typo or by mixing up named and default imports. ' + 'This can also happen due to a circular dependency, so ' + 'try moving the createContext() call to a separate file.';
                    } else if (typeof contextType !== 'object') {
                      addendum = ' However, it is set to a ' + typeof contextType + '.';
                    } else if (contextType.$$typeof === REACT_PROVIDER_TYPE) {
                      addendum = ' Did you accidentally pass the Context.Provider instead?';
                    } else if (contextType._context !== undefined) {
                      // <Context.Consumer>
                      addendum = ' Did you accidentally pass the Context.Consumer instead?';
                    } else {
                      addendum = ' However, it is set to an object with keys {' + Object.keys(contextType).join(', ') + '}.';
                    }

                    error('%s defines an invalid contextType. ' + 'contextType should point to the Context object returned by React.createContext().%s', getComponentName(ctor) || 'Component', addendum);
                  }
                }
              }

              if (typeof contextType === 'object' && contextType !== null) {
                context = readContext(contextType);
              } else {
                unmaskedContext = getUnmaskedContext(workInProgress, ctor, true);
                var contextTypes = ctor.contextTypes;
                isLegacyContextConsumer = contextTypes !== null && contextTypes !== undefined;
                context = isLegacyContextConsumer ? getMaskedContext(workInProgress, unmaskedContext) : emptyContextObject;
              } // Instantiate twice to help detect side-effects.


              {
                if ( workInProgress.mode & StrictMode) {
                  disableLogs();

                  try {
                    new ctor(props, context); // eslint-disable-line no-new
                  } finally {
                    reenableLogs();
                  }
                }
              }

              var instance = new ctor(props, context);
              var state = workInProgress.memoizedState = instance.state !== null && instance.state !== undefined ? instance.state : null;
              adoptClassInstance(workInProgress, instance);

              {
                if (typeof ctor.getDerivedStateFromProps === 'function' && state === null) {
                  var componentName = getComponentName(ctor) || 'Component';

                  if (!didWarnAboutUninitializedState.has(componentName)) {
                    didWarnAboutUninitializedState.add(componentName);

                    error('`%s` uses `getDerivedStateFromProps` but its initial state is ' + '%s. This is not recommended. Instead, define the initial state by ' + 'assigning an object to `this.state` in the constructor of `%s`. ' + 'This ensures that `getDerivedStateFromProps` arguments have a consistent shape.', componentName, instance.state === null ? 'null' : 'undefined', componentName);
                  }
                } // If new component APIs are defined, "unsafe" lifecycles won't be called.
                // Warn about these lifecycles if they are present.
                // Don't warn about react-lifecycles-compat polyfilled methods though.


                if (typeof ctor.getDerivedStateFromProps === 'function' || typeof instance.getSnapshotBeforeUpdate === 'function') {
                  var foundWillMountName = null;
                  var foundWillReceivePropsName = null;
                  var foundWillUpdateName = null;

                  if (typeof instance.componentWillMount === 'function' && instance.componentWillMount.__suppressDeprecationWarning !== true) {
                    foundWillMountName = 'componentWillMount';
                  } else if (typeof instance.UNSAFE_componentWillMount === 'function') {
                    foundWillMountName = 'UNSAFE_componentWillMount';
                  }

                  if (typeof instance.componentWillReceiveProps === 'function' && instance.componentWillReceiveProps.__suppressDeprecationWarning !== true) {
                    foundWillReceivePropsName = 'componentWillReceiveProps';
                  } else if (typeof instance.UNSAFE_componentWillReceiveProps === 'function') {
                    foundWillReceivePropsName = 'UNSAFE_componentWillReceiveProps';
                  }

                  if (typeof instance.componentWillUpdate === 'function' && instance.componentWillUpdate.__suppressDeprecationWarning !== true) {
                    foundWillUpdateName = 'componentWillUpdate';
                  } else if (typeof instance.UNSAFE_componentWillUpdate === 'function') {
                    foundWillUpdateName = 'UNSAFE_componentWillUpdate';
                  }

                  if (foundWillMountName !== null || foundWillReceivePropsName !== null || foundWillUpdateName !== null) {
                    var _componentName = getComponentName(ctor) || 'Component';

                    var newApiName = typeof ctor.getDerivedStateFromProps === 'function' ? 'getDerivedStateFromProps()' : 'getSnapshotBeforeUpdate()';

                    if (!didWarnAboutLegacyLifecyclesAndDerivedState.has(_componentName)) {
                      didWarnAboutLegacyLifecyclesAndDerivedState.add(_componentName);

                      error('Unsafe legacy lifecycles will not be called for components using new component APIs.\n\n' + '%s uses %s but also contains the following legacy lifecycles:%s%s%s\n\n' + 'The above lifecycles should be removed. Learn more about this warning here:\n' + 'https://reactjs.org/link/unsafe-component-lifecycles', _componentName, newApiName, foundWillMountName !== null ? "\n  " + foundWillMountName : '', foundWillReceivePropsName !== null ? "\n  " + foundWillReceivePropsName : '', foundWillUpdateName !== null ? "\n  " + foundWillUpdateName : '');
                    }
                  }
                }
              } // Cache unmasked context so we can avoid recreating masked context unless necessary.
              // ReactFiberContext usually updates this cache but can't for newly-created instances.


              if (isLegacyContextConsumer) {
                cacheContext(workInProgress, unmaskedContext, context);
              }

              return instance;
            }

            function callComponentWillMount(workInProgress, instance) {
              var oldState = instance.state;

              if (typeof instance.componentWillMount === 'function') {
                instance.componentWillMount();
              }

              if (typeof instance.UNSAFE_componentWillMount === 'function') {
                instance.UNSAFE_componentWillMount();
              }

              if (oldState !== instance.state) {
                {
                  error('%s.componentWillMount(): Assigning directly to this.state is ' + "deprecated (except inside a component's " + 'constructor). Use setState instead.', getComponentName(workInProgress.type) || 'Component');
                }

                classComponentUpdater.enqueueReplaceState(instance, instance.state, null);
              }
            }

            function callComponentWillReceiveProps(workInProgress, instance, newProps, nextContext) {
              var oldState = instance.state;

              if (typeof instance.componentWillReceiveProps === 'function') {
                instance.componentWillReceiveProps(newProps, nextContext);
              }

              if (typeof instance.UNSAFE_componentWillReceiveProps === 'function') {
                instance.UNSAFE_componentWillReceiveProps(newProps, nextContext);
              }

              if (instance.state !== oldState) {
                {
                  var componentName = getComponentName(workInProgress.type) || 'Component';

                  if (!didWarnAboutStateAssignmentForComponent.has(componentName)) {
                    didWarnAboutStateAssignmentForComponent.add(componentName);

                    error('%s.componentWillReceiveProps(): Assigning directly to ' + "this.state is deprecated (except inside a component's " + 'constructor). Use setState instead.', componentName);
                  }
                }

                classComponentUpdater.enqueueReplaceState(instance, instance.state, null);
              }
            } // Invokes the mount life-cycles on a previously never rendered instance.


            function mountClassInstance(workInProgress, ctor, newProps, renderLanes) {
              {
                checkClassInstance(workInProgress, ctor, newProps);
              }

              var instance = workInProgress.stateNode;
              instance.props = newProps;
              instance.state = workInProgress.memoizedState;
              instance.refs = emptyRefsObject;
              initializeUpdateQueue(workInProgress);
              var contextType = ctor.contextType;

              if (typeof contextType === 'object' && contextType !== null) {
                instance.context = readContext(contextType);
              } else {
                var unmaskedContext = getUnmaskedContext(workInProgress, ctor, true);
                instance.context = getMaskedContext(workInProgress, unmaskedContext);
              }

              {
                if (instance.state === newProps) {
                  var componentName = getComponentName(ctor) || 'Component';

                  if (!didWarnAboutDirectlyAssigningPropsToState.has(componentName)) {
                    didWarnAboutDirectlyAssigningPropsToState.add(componentName);

                    error('%s: It is not recommended to assign props directly to state ' + "because updates to props won't be reflected in state. " + 'In most cases, it is better to use props directly.', componentName);
                  }
                }

                if (workInProgress.mode & StrictMode) {
                  ReactStrictModeWarnings.recordLegacyContextWarning(workInProgress, instance);
                }

                {
                  ReactStrictModeWarnings.recordUnsafeLifecycleWarnings(workInProgress, instance);
                }
              }

              processUpdateQueue(workInProgress, newProps, instance, renderLanes);
              instance.state = workInProgress.memoizedState;
              var getDerivedStateFromProps = ctor.getDerivedStateFromProps;

              if (typeof getDerivedStateFromProps === 'function') {
                applyDerivedStateFromProps(workInProgress, ctor, getDerivedStateFromProps, newProps);
                instance.state = workInProgress.memoizedState;
              } // In order to support react-lifecycles-compat polyfilled components,
              // Unsafe lifecycles should not be invoked for components using the new APIs.


              if (typeof ctor.getDerivedStateFromProps !== 'function' && typeof instance.getSnapshotBeforeUpdate !== 'function' && (typeof instance.UNSAFE_componentWillMount === 'function' || typeof instance.componentWillMount === 'function')) {
                callComponentWillMount(workInProgress, instance); // If we had additional state updates during this life-cycle, let's
                // process them now.

                processUpdateQueue(workInProgress, newProps, instance, renderLanes);
                instance.state = workInProgress.memoizedState;
              }

              if (typeof instance.componentDidMount === 'function') {
                workInProgress.flags |= Update;
              }
            }

            function resumeMountClassInstance(workInProgress, ctor, newProps, renderLanes) {
              var instance = workInProgress.stateNode;
              var oldProps = workInProgress.memoizedProps;
              instance.props = oldProps;
              var oldContext = instance.context;
              var contextType = ctor.contextType;
              var nextContext = emptyContextObject;

              if (typeof contextType === 'object' && contextType !== null) {
                nextContext = readContext(contextType);
              } else {
                var nextLegacyUnmaskedContext = getUnmaskedContext(workInProgress, ctor, true);
                nextContext = getMaskedContext(workInProgress, nextLegacyUnmaskedContext);
              }

              var getDerivedStateFromProps = ctor.getDerivedStateFromProps;
              var hasNewLifecycles = typeof getDerivedStateFromProps === 'function' || typeof instance.getSnapshotBeforeUpdate === 'function'; // Note: During these life-cycles, instance.props/instance.state are what
              // ever the previously attempted to render - not the "current". However,
              // during componentDidUpdate we pass the "current" props.
              // In order to support react-lifecycles-compat polyfilled components,
              // Unsafe lifecycles should not be invoked for components using the new APIs.

              if (!hasNewLifecycles && (typeof instance.UNSAFE_componentWillReceiveProps === 'function' || typeof instance.componentWillReceiveProps === 'function')) {
                if (oldProps !== newProps || oldContext !== nextContext) {
                  callComponentWillReceiveProps(workInProgress, instance, newProps, nextContext);
                }
              }

              resetHasForceUpdateBeforeProcessing();
              var oldState = workInProgress.memoizedState;
              var newState = instance.state = oldState;
              processUpdateQueue(workInProgress, newProps, instance, renderLanes);
              newState = workInProgress.memoizedState;

              if (oldProps === newProps && oldState === newState && !hasContextChanged() && !checkHasForceUpdateAfterProcessing()) {
                // If an update was already in progress, we should schedule an Update
                // effect even though we're bailing out, so that cWU/cDU are called.
                if (typeof instance.componentDidMount === 'function') {
                  workInProgress.flags |= Update;
                }

                return false;
              }

              if (typeof getDerivedStateFromProps === 'function') {
                applyDerivedStateFromProps(workInProgress, ctor, getDerivedStateFromProps, newProps);
                newState = workInProgress.memoizedState;
              }

              var shouldUpdate = checkHasForceUpdateAfterProcessing() || checkShouldComponentUpdate(workInProgress, ctor, oldProps, newProps, oldState, newState, nextContext);

              if (shouldUpdate) {
                // In order to support react-lifecycles-compat polyfilled components,
                // Unsafe lifecycles should not be invoked for components using the new APIs.
                if (!hasNewLifecycles && (typeof instance.UNSAFE_componentWillMount === 'function' || typeof instance.componentWillMount === 'function')) {
                  if (typeof instance.componentWillMount === 'function') {
                    instance.componentWillMount();
                  }

                  if (typeof instance.UNSAFE_componentWillMount === 'function') {
                    instance.UNSAFE_componentWillMount();
                  }
                }

                if (typeof instance.componentDidMount === 'function') {
                  workInProgress.flags |= Update;
                }
              } else {
                // If an update was already in progress, we should schedule an Update
                // effect even though we're bailing out, so that cWU/cDU are called.
                if (typeof instance.componentDidMount === 'function') {
                  workInProgress.flags |= Update;
                } // If shouldComponentUpdate returned false, we should still update the
                // memoized state to indicate that this work can be reused.


                workInProgress.memoizedProps = newProps;
                workInProgress.memoizedState = newState;
              } // Update the existing instance's state, props, and context pointers even
              // if shouldComponentUpdate returns false.


              instance.props = newProps;
              instance.state = newState;
              instance.context = nextContext;
              return shouldUpdate;
            } // Invokes the update life-cycles and returns false if it shouldn't rerender.


            function updateClassInstance(current, workInProgress, ctor, newProps, renderLanes) {
              var instance = workInProgress.stateNode;
              cloneUpdateQueue(current, workInProgress);
              var unresolvedOldProps = workInProgress.memoizedProps;
              var oldProps = workInProgress.type === workInProgress.elementType ? unresolvedOldProps : resolveDefaultProps(workInProgress.type, unresolvedOldProps);
              instance.props = oldProps;
              var unresolvedNewProps = workInProgress.pendingProps;
              var oldContext = instance.context;
              var contextType = ctor.contextType;
              var nextContext = emptyContextObject;

              if (typeof contextType === 'object' && contextType !== null) {
                nextContext = readContext(contextType);
              } else {
                var nextUnmaskedContext = getUnmaskedContext(workInProgress, ctor, true);
                nextContext = getMaskedContext(workInProgress, nextUnmaskedContext);
              }

              var getDerivedStateFromProps = ctor.getDerivedStateFromProps;
              var hasNewLifecycles = typeof getDerivedStateFromProps === 'function' || typeof instance.getSnapshotBeforeUpdate === 'function'; // Note: During these life-cycles, instance.props/instance.state are what
              // ever the previously attempted to render - not the "current". However,
              // during componentDidUpdate we pass the "current" props.
              // In order to support react-lifecycles-compat polyfilled components,
              // Unsafe lifecycles should not be invoked for components using the new APIs.

              if (!hasNewLifecycles && (typeof instance.UNSAFE_componentWillReceiveProps === 'function' || typeof instance.componentWillReceiveProps === 'function')) {
                if (unresolvedOldProps !== unresolvedNewProps || oldContext !== nextContext) {
                  callComponentWillReceiveProps(workInProgress, instance, newProps, nextContext);
                }
              }

              resetHasForceUpdateBeforeProcessing();
              var oldState = workInProgress.memoizedState;
              var newState = instance.state = oldState;
              processUpdateQueue(workInProgress, newProps, instance, renderLanes);
              newState = workInProgress.memoizedState;

              if (unresolvedOldProps === unresolvedNewProps && oldState === newState && !hasContextChanged() && !checkHasForceUpdateAfterProcessing()) {
                // If an update was already in progress, we should schedule an Update
                // effect even though we're bailing out, so that cWU/cDU are called.
                if (typeof instance.componentDidUpdate === 'function') {
                  if (unresolvedOldProps !== current.memoizedProps || oldState !== current.memoizedState) {
                    workInProgress.flags |= Update;
                  }
                }

                if (typeof instance.getSnapshotBeforeUpdate === 'function') {
                  if (unresolvedOldProps !== current.memoizedProps || oldState !== current.memoizedState) {
                    workInProgress.flags |= Snapshot;
                  }
                }

                return false;
              }

              if (typeof getDerivedStateFromProps === 'function') {
                applyDerivedStateFromProps(workInProgress, ctor, getDerivedStateFromProps, newProps);
                newState = workInProgress.memoizedState;
              }

              var shouldUpdate = checkHasForceUpdateAfterProcessing() || checkShouldComponentUpdate(workInProgress, ctor, oldProps, newProps, oldState, newState, nextContext);

              if (shouldUpdate) {
                // In order to support react-lifecycles-compat polyfilled components,
                // Unsafe lifecycles should not be invoked for components using the new APIs.
                if (!hasNewLifecycles && (typeof instance.UNSAFE_componentWillUpdate === 'function' || typeof instance.componentWillUpdate === 'function')) {
                  if (typeof instance.componentWillUpdate === 'function') {
                    instance.componentWillUpdate(newProps, newState, nextContext);
                  }

                  if (typeof instance.UNSAFE_componentWillUpdate === 'function') {
                    instance.UNSAFE_componentWillUpdate(newProps, newState, nextContext);
                  }
                }

                if (typeof instance.componentDidUpdate === 'function') {
                  workInProgress.flags |= Update;
                }

                if (typeof instance.getSnapshotBeforeUpdate === 'function') {
                  workInProgress.flags |= Snapshot;
                }
              } else {
                // If an update was already in progress, we should schedule an Update
                // effect even though we're bailing out, so that cWU/cDU are called.
                if (typeof instance.componentDidUpdate === 'function') {
                  if (unresolvedOldProps !== current.memoizedProps || oldState !== current.memoizedState) {
                    workInProgress.flags |= Update;
                  }
                }

                if (typeof instance.getSnapshotBeforeUpdate === 'function') {
                  if (unresolvedOldProps !== current.memoizedProps || oldState !== current.memoizedState) {
                    workInProgress.flags |= Snapshot;
                  }
                } // If shouldComponentUpdate returned false, we should still update the
                // memoized props/state to indicate that this work can be reused.


                workInProgress.memoizedProps = newProps;
                workInProgress.memoizedState = newState;
              } // Update the existing instance's state, props, and context pointers even
              // if shouldComponentUpdate returns false.


              instance.props = newProps;
              instance.state = newState;
              instance.context = nextContext;
              return shouldUpdate;
            }

            var didWarnAboutMaps;
            var didWarnAboutGenerators;
            var didWarnAboutStringRefs;
            var ownerHasKeyUseWarning;
            var ownerHasFunctionTypeWarning;

            var warnForMissingKey = function (child, returnFiber) {};

            {
              didWarnAboutMaps = false;
              didWarnAboutGenerators = false;
              didWarnAboutStringRefs = {};
              /**
               * Warn if there's no key explicitly set on dynamic arrays of children or
               * object keys are not valid. This allows us to keep track of children between
               * updates.
               */

              ownerHasKeyUseWarning = {};
              ownerHasFunctionTypeWarning = {};

              warnForMissingKey = function (child, returnFiber) {
                if (child === null || typeof child !== 'object') {
                  return;
                }

                if (!child._store || child._store.validated || child.key != null) {
                  return;
                }

                if (!(typeof child._store === 'object')) {
                  {
                    throw Error( "React Component in warnForMissingKey should have a _store. This error is likely caused by a bug in React. Please file an issue." );
                  }
                }

                child._store.validated = true;
                var componentName = getComponentName(returnFiber.type) || 'Component';

                if (ownerHasKeyUseWarning[componentName]) {
                  return;
                }

                ownerHasKeyUseWarning[componentName] = true;

                error('Each child in a list should have a unique ' + '"key" prop. See https://reactjs.org/link/warning-keys for ' + 'more information.');
              };
            }

            var isArray$1 = Array.isArray;

            function coerceRef(returnFiber, current, element) {
              var mixedRef = element.ref;

              if (mixedRef !== null && typeof mixedRef !== 'function' && typeof mixedRef !== 'object') {
                {
                  // TODO: Clean this up once we turn on the string ref warning for
                  // everyone, because the strict mode case will no longer be relevant
                  if ((returnFiber.mode & StrictMode || warnAboutStringRefs) && // We warn in ReactElement.js if owner and self are equal for string refs
                  // because these cannot be automatically converted to an arrow function
                  // using a codemod. Therefore, we don't have to warn about string refs again.
                  !(element._owner && element._self && element._owner.stateNode !== element._self)) {
                    var componentName = getComponentName(returnFiber.type) || 'Component';

                    if (!didWarnAboutStringRefs[componentName]) {
                      {
                        error('A string ref, "%s", has been found within a strict mode tree. ' + 'String refs are a source of potential bugs and should be avoided. ' + 'We recommend using useRef() or createRef() instead. ' + 'Learn more about using refs safely here: ' + 'https://reactjs.org/link/strict-mode-string-ref', mixedRef);
                      }

                      didWarnAboutStringRefs[componentName] = true;
                    }
                  }
                }

                if (element._owner) {
                  var owner = element._owner;
                  var inst;

                  if (owner) {
                    var ownerFiber = owner;

                    if (!(ownerFiber.tag === ClassComponent)) {
                      {
                        throw Error( "Function components cannot have string refs. We recommend using useRef() instead. Learn more about using refs safely here: https://reactjs.org/link/strict-mode-string-ref" );
                      }
                    }

                    inst = ownerFiber.stateNode;
                  }

                  if (!inst) {
                    {
                      throw Error( "Missing owner for string ref " + mixedRef + ". This error is likely caused by a bug in React. Please file an issue." );
                    }
                  }

                  var stringRef = '' + mixedRef; // Check if previous string ref matches new string ref

                  if (current !== null && current.ref !== null && typeof current.ref === 'function' && current.ref._stringRef === stringRef) {
                    return current.ref;
                  }

                  var ref = function (value) {
                    var refs = inst.refs;

                    if (refs === emptyRefsObject) {
                      // This is a lazy pooled frozen object, so we need to initialize.
                      refs = inst.refs = {};
                    }

                    if (value === null) {
                      delete refs[stringRef];
                    } else {
                      refs[stringRef] = value;
                    }
                  };

                  ref._stringRef = stringRef;
                  return ref;
                } else {
                  if (!(typeof mixedRef === 'string')) {
                    {
                      throw Error( "Expected ref to be a function, a string, an object returned by React.createRef(), or null." );
                    }
                  }

                  if (!element._owner) {
                    {
                      throw Error( "Element ref was specified as a string (" + mixedRef + ") but no owner was set. This could happen for one of the following reasons:\n1. You may be adding a ref to a function component\n2. You may be adding a ref to a component that was not created inside a component's render method\n3. You have multiple copies of React loaded\nSee https://reactjs.org/link/refs-must-have-owner for more information." );
                    }
                  }
                }
              }

              return mixedRef;
            }

            function throwOnInvalidObjectType(returnFiber, newChild) {
              if (returnFiber.type !== 'textarea') {
                {
                  {
                    throw Error( "Objects are not valid as a React child (found: " + (Object.prototype.toString.call(newChild) === '[object Object]' ? 'object with keys {' + Object.keys(newChild).join(', ') + '}' : newChild) + "). If you meant to render a collection of children, use an array instead." );
                  }
                }
              }
            }

            function warnOnFunctionType(returnFiber) {
              {
                var componentName = getComponentName(returnFiber.type) || 'Component';

                if (ownerHasFunctionTypeWarning[componentName]) {
                  return;
                }

                ownerHasFunctionTypeWarning[componentName] = true;

                error('Functions are not valid as a React child. This may happen if ' + 'you return a Component instead of <Component /> from render. ' + 'Or maybe you meant to call this function rather than return it.');
              }
            } // We avoid inlining this to avoid potential deopts from using try/catch.
            // to be able to optimize each path individually by branching early. This needs
            // a compiler or we can do it manually. Helpers that don't need this branching
            // live outside of this function.


            function ChildReconciler(shouldTrackSideEffects) {
              function deleteChild(returnFiber, childToDelete) {
                if (!shouldTrackSideEffects) {
                  // Noop.
                  return;
                } // Deletions are added in reversed order so we add it to the front.
                // At this point, the return fiber's effect list is empty except for
                // deletions, so we can just append the deletion to the list. The remaining
                // effects aren't added until the complete phase. Once we implement
                // resuming, this may not be true.


                var last = returnFiber.lastEffect;

                if (last !== null) {
                  last.nextEffect = childToDelete;
                  returnFiber.lastEffect = childToDelete;
                } else {
                  returnFiber.firstEffect = returnFiber.lastEffect = childToDelete;
                }

                childToDelete.nextEffect = null;
                childToDelete.flags = Deletion;
              }

              function deleteRemainingChildren(returnFiber, currentFirstChild) {
                if (!shouldTrackSideEffects) {
                  // Noop.
                  return null;
                } // TODO: For the shouldClone case, this could be micro-optimized a bit by
                // assuming that after the first child we've already added everything.


                var childToDelete = currentFirstChild;

                while (childToDelete !== null) {
                  deleteChild(returnFiber, childToDelete);
                  childToDelete = childToDelete.sibling;
                }

                return null;
              }

              function mapRemainingChildren(returnFiber, currentFirstChild) {
                // Add the remaining children to a temporary map so that we can find them by
                // keys quickly. Implicit (null) keys get added to this set with their index
                // instead.
                var existingChildren = new Map();
                var existingChild = currentFirstChild;

                while (existingChild !== null) {
                  if (existingChild.key !== null) {
                    existingChildren.set(existingChild.key, existingChild);
                  } else {
                    existingChildren.set(existingChild.index, existingChild);
                  }

                  existingChild = existingChild.sibling;
                }

                return existingChildren;
              }

              function useFiber(fiber, pendingProps) {
                // We currently set sibling to null and index to 0 here because it is easy
                // to forget to do before returning it. E.g. for the single child case.
                var clone = createWorkInProgress(fiber, pendingProps);
                clone.index = 0;
                clone.sibling = null;
                return clone;
              }

              function placeChild(newFiber, lastPlacedIndex, newIndex) {
                newFiber.index = newIndex;

                if (!shouldTrackSideEffects) {
                  // Noop.
                  return lastPlacedIndex;
                }

                var current = newFiber.alternate;

                if (current !== null) {
                  var oldIndex = current.index;

                  if (oldIndex < lastPlacedIndex) {
                    // This is a move.
                    newFiber.flags = Placement;
                    return lastPlacedIndex;
                  } else {
                    // This item can stay in place.
                    return oldIndex;
                  }
                } else {
                  // This is an insertion.
                  newFiber.flags = Placement;
                  return lastPlacedIndex;
                }
              }

              function placeSingleChild(newFiber) {
                // This is simpler for the single child case. We only need to do a
                // placement for inserting new children.
                if (shouldTrackSideEffects && newFiber.alternate === null) {
                  newFiber.flags = Placement;
                }

                return newFiber;
              }

              function updateTextNode(returnFiber, current, textContent, lanes) {
                if (current === null || current.tag !== HostText) {
                  // Insert
                  var created = createFiberFromText(textContent, returnFiber.mode, lanes);
                  created.return = returnFiber;
                  return created;
                } else {
                  // Update
                  var existing = useFiber(current, textContent);
                  existing.return = returnFiber;
                  return existing;
                }
              }

              function updateElement(returnFiber, current, element, lanes) {
                if (current !== null) {
                  if (current.elementType === element.type || ( // Keep this check inline so it only runs on the false path:
                   isCompatibleFamilyForHotReloading(current, element) )) {
                    // Move based on index
                    var existing = useFiber(current, element.props);
                    existing.ref = coerceRef(returnFiber, current, element);
                    existing.return = returnFiber;

                    {
                      existing._debugSource = element._source;
                      existing._debugOwner = element._owner;
                    }

                    return existing;
                  }
                } // Insert


                var created = createFiberFromElement(element, returnFiber.mode, lanes);
                created.ref = coerceRef(returnFiber, current, element);
                created.return = returnFiber;
                return created;
              }

              function updatePortal(returnFiber, current, portal, lanes) {
                if (current === null || current.tag !== HostPortal || current.stateNode.containerInfo !== portal.containerInfo || current.stateNode.implementation !== portal.implementation) {
                  // Insert
                  var created = createFiberFromPortal(portal, returnFiber.mode, lanes);
                  created.return = returnFiber;
                  return created;
                } else {
                  // Update
                  var existing = useFiber(current, portal.children || []);
                  existing.return = returnFiber;
                  return existing;
                }
              }

              function updateFragment(returnFiber, current, fragment, lanes, key) {
                if (current === null || current.tag !== Fragment) {
                  // Insert
                  var created = createFiberFromFragment(fragment, returnFiber.mode, lanes, key);
                  created.return = returnFiber;
                  return created;
                } else {
                  // Update
                  var existing = useFiber(current, fragment);
                  existing.return = returnFiber;
                  return existing;
                }
              }

              function createChild(returnFiber, newChild, lanes) {
                if (typeof newChild === 'string' || typeof newChild === 'number') {
                  // Text nodes don't have keys. If the previous node is implicitly keyed
                  // we can continue to replace it without aborting even if it is not a text
                  // node.
                  var created = createFiberFromText('' + newChild, returnFiber.mode, lanes);
                  created.return = returnFiber;
                  return created;
                }

                if (typeof newChild === 'object' && newChild !== null) {
                  switch (newChild.$$typeof) {
                    case REACT_ELEMENT_TYPE:
                      {
                        var _created = createFiberFromElement(newChild, returnFiber.mode, lanes);

                        _created.ref = coerceRef(returnFiber, null, newChild);
                        _created.return = returnFiber;
                        return _created;
                      }

                    case REACT_PORTAL_TYPE:
                      {
                        var _created2 = createFiberFromPortal(newChild, returnFiber.mode, lanes);

                        _created2.return = returnFiber;
                        return _created2;
                      }
                  }

                  if (isArray$1(newChild) || getIteratorFn(newChild)) {
                    var _created3 = createFiberFromFragment(newChild, returnFiber.mode, lanes, null);

                    _created3.return = returnFiber;
                    return _created3;
                  }

                  throwOnInvalidObjectType(returnFiber, newChild);
                }

                {
                  if (typeof newChild === 'function') {
                    warnOnFunctionType(returnFiber);
                  }
                }

                return null;
              }

              function updateSlot(returnFiber, oldFiber, newChild, lanes) {
                // Update the fiber if the keys match, otherwise return null.
                var key = oldFiber !== null ? oldFiber.key : null;

                if (typeof newChild === 'string' || typeof newChild === 'number') {
                  // Text nodes don't have keys. If the previous node is implicitly keyed
                  // we can continue to replace it without aborting even if it is not a text
                  // node.
                  if (key !== null) {
                    return null;
                  }

                  return updateTextNode(returnFiber, oldFiber, '' + newChild, lanes);
                }

                if (typeof newChild === 'object' && newChild !== null) {
                  switch (newChild.$$typeof) {
                    case REACT_ELEMENT_TYPE:
                      {
                        if (newChild.key === key) {
                          if (newChild.type === REACT_FRAGMENT_TYPE) {
                            return updateFragment(returnFiber, oldFiber, newChild.props.children, lanes, key);
                          }

                          return updateElement(returnFiber, oldFiber, newChild, lanes);
                        } else {
                          return null;
                        }
                      }

                    case REACT_PORTAL_TYPE:
                      {
                        if (newChild.key === key) {
                          return updatePortal(returnFiber, oldFiber, newChild, lanes);
                        } else {
                          return null;
                        }
                      }
                  }

                  if (isArray$1(newChild) || getIteratorFn(newChild)) {
                    if (key !== null) {
                      return null;
                    }

                    return updateFragment(returnFiber, oldFiber, newChild, lanes, null);
                  }

                  throwOnInvalidObjectType(returnFiber, newChild);
                }

                {
                  if (typeof newChild === 'function') {
                    warnOnFunctionType(returnFiber);
                  }
                }

                return null;
              }

              function updateFromMap(existingChildren, returnFiber, newIdx, newChild, lanes) {
                if (typeof newChild === 'string' || typeof newChild === 'number') {
                  // Text nodes don't have keys, so we neither have to check the old nor
                  // new node for the key. If both are text nodes, they match.
                  var matchedFiber = existingChildren.get(newIdx) || null;
                  return updateTextNode(returnFiber, matchedFiber, '' + newChild, lanes);
                }

                if (typeof newChild === 'object' && newChild !== null) {
                  switch (newChild.$$typeof) {
                    case REACT_ELEMENT_TYPE:
                      {
                        var _matchedFiber = existingChildren.get(newChild.key === null ? newIdx : newChild.key) || null;

                        if (newChild.type === REACT_FRAGMENT_TYPE) {
                          return updateFragment(returnFiber, _matchedFiber, newChild.props.children, lanes, newChild.key);
                        }

                        return updateElement(returnFiber, _matchedFiber, newChild, lanes);
                      }

                    case REACT_PORTAL_TYPE:
                      {
                        var _matchedFiber2 = existingChildren.get(newChild.key === null ? newIdx : newChild.key) || null;

                        return updatePortal(returnFiber, _matchedFiber2, newChild, lanes);
                      }

                  }

                  if (isArray$1(newChild) || getIteratorFn(newChild)) {
                    var _matchedFiber3 = existingChildren.get(newIdx) || null;

                    return updateFragment(returnFiber, _matchedFiber3, newChild, lanes, null);
                  }

                  throwOnInvalidObjectType(returnFiber, newChild);
                }

                {
                  if (typeof newChild === 'function') {
                    warnOnFunctionType(returnFiber);
                  }
                }

                return null;
              }
              /**
               * Warns if there is a duplicate or missing key
               */


              function warnOnInvalidKey(child, knownKeys, returnFiber) {
                {
                  if (typeof child !== 'object' || child === null) {
                    return knownKeys;
                  }

                  switch (child.$$typeof) {
                    case REACT_ELEMENT_TYPE:
                    case REACT_PORTAL_TYPE:
                      warnForMissingKey(child, returnFiber);
                      var key = child.key;

                      if (typeof key !== 'string') {
                        break;
                      }

                      if (knownKeys === null) {
                        knownKeys = new Set();
                        knownKeys.add(key);
                        break;
                      }

                      if (!knownKeys.has(key)) {
                        knownKeys.add(key);
                        break;
                      }

                      error('Encountered two children with the same key, `%s`. ' + 'Keys should be unique so that components maintain their identity ' + 'across updates. Non-unique keys may cause children to be ' + 'duplicated and/or omitted — the behavior is unsupported and ' + 'could change in a future version.', key);

                      break;
                  }
                }

                return knownKeys;
              }

              function reconcileChildrenArray(returnFiber, currentFirstChild, newChildren, lanes) {
                // This algorithm can't optimize by searching from both ends since we
                // don't have backpointers on fibers. I'm trying to see how far we can get
                // with that model. If it ends up not being worth the tradeoffs, we can
                // add it later.
                // Even with a two ended optimization, we'd want to optimize for the case
                // where there are few changes and brute force the comparison instead of
                // going for the Map. It'd like to explore hitting that path first in
                // forward-only mode and only go for the Map once we notice that we need
                // lots of look ahead. This doesn't handle reversal as well as two ended
                // search but that's unusual. Besides, for the two ended optimization to
                // work on Iterables, we'd need to copy the whole set.
                // In this first iteration, we'll just live with hitting the bad case
                // (adding everything to a Map) in for every insert/move.
                // If you change this code, also update reconcileChildrenIterator() which
                // uses the same algorithm.
                {
                  // First, validate keys.
                  var knownKeys = null;

                  for (var i = 0; i < newChildren.length; i++) {
                    var child = newChildren[i];
                    knownKeys = warnOnInvalidKey(child, knownKeys, returnFiber);
                  }
                }

                var resultingFirstChild = null;
                var previousNewFiber = null;
                var oldFiber = currentFirstChild;
                var lastPlacedIndex = 0;
                var newIdx = 0;
                var nextOldFiber = null;

                for (; oldFiber !== null && newIdx < newChildren.length; newIdx++) {
                  if (oldFiber.index > newIdx) {
                    nextOldFiber = oldFiber;
                    oldFiber = null;
                  } else {
                    nextOldFiber = oldFiber.sibling;
                  }

                  var newFiber = updateSlot(returnFiber, oldFiber, newChildren[newIdx], lanes);

                  if (newFiber === null) {
                    // TODO: This breaks on empty slots like null children. That's
                    // unfortunate because it triggers the slow path all the time. We need
                    // a better way to communicate whether this was a miss or null,
                    // boolean, undefined, etc.
                    if (oldFiber === null) {
                      oldFiber = nextOldFiber;
                    }

                    break;
                  }

                  if (shouldTrackSideEffects) {
                    if (oldFiber && newFiber.alternate === null) {
                      // We matched the slot, but we didn't reuse the existing fiber, so we
                      // need to delete the existing child.
                      deleteChild(returnFiber, oldFiber);
                    }
                  }

                  lastPlacedIndex = placeChild(newFiber, lastPlacedIndex, newIdx);

                  if (previousNewFiber === null) {
                    // TODO: Move out of the loop. This only happens for the first run.
                    resultingFirstChild = newFiber;
                  } else {
                    // TODO: Defer siblings if we're not at the right index for this slot.
                    // I.e. if we had null values before, then we want to defer this
                    // for each null value. However, we also don't want to call updateSlot
                    // with the previous one.
                    previousNewFiber.sibling = newFiber;
                  }

                  previousNewFiber = newFiber;
                  oldFiber = nextOldFiber;
                }

                if (newIdx === newChildren.length) {
                  // We've reached the end of the new children. We can delete the rest.
                  deleteRemainingChildren(returnFiber, oldFiber);
                  return resultingFirstChild;
                }

                if (oldFiber === null) {
                  // If we don't have any more existing children we can choose a fast path
                  // since the rest will all be insertions.
                  for (; newIdx < newChildren.length; newIdx++) {
                    var _newFiber = createChild(returnFiber, newChildren[newIdx], lanes);

                    if (_newFiber === null) {
                      continue;
                    }

                    lastPlacedIndex = placeChild(_newFiber, lastPlacedIndex, newIdx);

                    if (previousNewFiber === null) {
                      // TODO: Move out of the loop. This only happens for the first run.
                      resultingFirstChild = _newFiber;
                    } else {
                      previousNewFiber.sibling = _newFiber;
                    }

                    previousNewFiber = _newFiber;
                  }

                  return resultingFirstChild;
                } // Add all children to a key map for quick lookups.


                var existingChildren = mapRemainingChildren(returnFiber, oldFiber); // Keep scanning and use the map to restore deleted items as moves.

                for (; newIdx < newChildren.length; newIdx++) {
                  var _newFiber2 = updateFromMap(existingChildren, returnFiber, newIdx, newChildren[newIdx], lanes);

                  if (_newFiber2 !== null) {
                    if (shouldTrackSideEffects) {
                      if (_newFiber2.alternate !== null) {
                        // The new fiber is a work in progress, but if there exists a
                        // current, that means that we reused the fiber. We need to delete
                        // it from the child list so that we don't add it to the deletion
                        // list.
                        existingChildren.delete(_newFiber2.key === null ? newIdx : _newFiber2.key);
                      }
                    }

                    lastPlacedIndex = placeChild(_newFiber2, lastPlacedIndex, newIdx);

                    if (previousNewFiber === null) {
                      resultingFirstChild = _newFiber2;
                    } else {
                      previousNewFiber.sibling = _newFiber2;
                    }

                    previousNewFiber = _newFiber2;
                  }
                }

                if (shouldTrackSideEffects) {
                  // Any existing children that weren't consumed above were deleted. We need
                  // to add them to the deletion list.
                  existingChildren.forEach(function (child) {
                    return deleteChild(returnFiber, child);
                  });
                }

                return resultingFirstChild;
              }

              function reconcileChildrenIterator(returnFiber, currentFirstChild, newChildrenIterable, lanes) {
                // This is the same implementation as reconcileChildrenArray(),
                // but using the iterator instead.
                var iteratorFn = getIteratorFn(newChildrenIterable);

                if (!(typeof iteratorFn === 'function')) {
                  {
                    throw Error( "An object is not an iterable. This error is likely caused by a bug in React. Please file an issue." );
                  }
                }

                {
                  // We don't support rendering Generators because it's a mutation.
                  // See https://github.com/facebook/react/issues/12995
                  if (typeof Symbol === 'function' && // $FlowFixMe Flow doesn't know about toStringTag
                  newChildrenIterable[Symbol.toStringTag] === 'Generator') {
                    if (!didWarnAboutGenerators) {
                      error('Using Generators as children is unsupported and will likely yield ' + 'unexpected results because enumerating a generator mutates it. ' + 'You may convert it to an array with `Array.from()` or the ' + '`[...spread]` operator before rendering. Keep in mind ' + 'you might need to polyfill these features for older browsers.');
                    }

                    didWarnAboutGenerators = true;
                  } // Warn about using Maps as children


                  if (newChildrenIterable.entries === iteratorFn) {
                    if (!didWarnAboutMaps) {
                      error('Using Maps as children is not supported. ' + 'Use an array of keyed ReactElements instead.');
                    }

                    didWarnAboutMaps = true;
                  } // First, validate keys.
                  // We'll get a different iterator later for the main pass.


                  var _newChildren = iteratorFn.call(newChildrenIterable);

                  if (_newChildren) {
                    var knownKeys = null;

                    var _step = _newChildren.next();

                    for (; !_step.done; _step = _newChildren.next()) {
                      var child = _step.value;
                      knownKeys = warnOnInvalidKey(child, knownKeys, returnFiber);
                    }
                  }
                }

                var newChildren = iteratorFn.call(newChildrenIterable);

                if (!(newChildren != null)) {
                  {
                    throw Error( "An iterable object provided no iterator." );
                  }
                }

                var resultingFirstChild = null;
                var previousNewFiber = null;
                var oldFiber = currentFirstChild;
                var lastPlacedIndex = 0;
                var newIdx = 0;
                var nextOldFiber = null;
                var step = newChildren.next();

                for (; oldFiber !== null && !step.done; newIdx++, step = newChildren.next()) {
                  if (oldFiber.index > newIdx) {
                    nextOldFiber = oldFiber;
                    oldFiber = null;
                  } else {
                    nextOldFiber = oldFiber.sibling;
                  }

                  var newFiber = updateSlot(returnFiber, oldFiber, step.value, lanes);

                  if (newFiber === null) {
                    // TODO: This breaks on empty slots like null children. That's
                    // unfortunate because it triggers the slow path all the time. We need
                    // a better way to communicate whether this was a miss or null,
                    // boolean, undefined, etc.
                    if (oldFiber === null) {
                      oldFiber = nextOldFiber;
                    }

                    break;
                  }

                  if (shouldTrackSideEffects) {
                    if (oldFiber && newFiber.alternate === null) {
                      // We matched the slot, but we didn't reuse the existing fiber, so we
                      // need to delete the existing child.
                      deleteChild(returnFiber, oldFiber);
                    }
                  }

                  lastPlacedIndex = placeChild(newFiber, lastPlacedIndex, newIdx);

                  if (previousNewFiber === null) {
                    // TODO: Move out of the loop. This only happens for the first run.
                    resultingFirstChild = newFiber;
                  } else {
                    // TODO: Defer siblings if we're not at the right index for this slot.
                    // I.e. if we had null values before, then we want to defer this
                    // for each null value. However, we also don't want to call updateSlot
                    // with the previous one.
                    previousNewFiber.sibling = newFiber;
                  }

                  previousNewFiber = newFiber;
                  oldFiber = nextOldFiber;
                }

                if (step.done) {
                  // We've reached the end of the new children. We can delete the rest.
                  deleteRemainingChildren(returnFiber, oldFiber);
                  return resultingFirstChild;
                }

                if (oldFiber === null) {
                  // If we don't have any more existing children we can choose a fast path
                  // since the rest will all be insertions.
                  for (; !step.done; newIdx++, step = newChildren.next()) {
                    var _newFiber3 = createChild(returnFiber, step.value, lanes);

                    if (_newFiber3 === null) {
                      continue;
                    }

                    lastPlacedIndex = placeChild(_newFiber3, lastPlacedIndex, newIdx);

                    if (previousNewFiber === null) {
                      // TODO: Move out of the loop. This only happens for the first run.
                      resultingFirstChild = _newFiber3;
                    } else {
                      previousNewFiber.sibling = _newFiber3;
                    }

                    previousNewFiber = _newFiber3;
                  }

                  return resultingFirstChild;
                } // Add all children to a key map for quick lookups.


                var existingChildren = mapRemainingChildren(returnFiber, oldFiber); // Keep scanning and use the map to restore deleted items as moves.

                for (; !step.done; newIdx++, step = newChildren.next()) {
                  var _newFiber4 = updateFromMap(existingChildren, returnFiber, newIdx, step.value, lanes);

                  if (_newFiber4 !== null) {
                    if (shouldTrackSideEffects) {
                      if (_newFiber4.alternate !== null) {
                        // The new fiber is a work in progress, but if there exists a
                        // current, that means that we reused the fiber. We need to delete
                        // it from the child list so that we don't add it to the deletion
                        // list.
                        existingChildren.delete(_newFiber4.key === null ? newIdx : _newFiber4.key);
                      }
                    }

                    lastPlacedIndex = placeChild(_newFiber4, lastPlacedIndex, newIdx);

                    if (previousNewFiber === null) {
                      resultingFirstChild = _newFiber4;
                    } else {
                      previousNewFiber.sibling = _newFiber4;
                    }

                    previousNewFiber = _newFiber4;
                  }
                }

                if (shouldTrackSideEffects) {
                  // Any existing children that weren't consumed above were deleted. We need
                  // to add them to the deletion list.
                  existingChildren.forEach(function (child) {
                    return deleteChild(returnFiber, child);
                  });
                }

                return resultingFirstChild;
              }

              function reconcileSingleTextNode(returnFiber, currentFirstChild, textContent, lanes) {
                // There's no need to check for keys on text nodes since we don't have a
                // way to define them.
                if (currentFirstChild !== null && currentFirstChild.tag === HostText) {
                  // We already have an existing node so let's just update it and delete
                  // the rest.
                  deleteRemainingChildren(returnFiber, currentFirstChild.sibling);
                  var existing = useFiber(currentFirstChild, textContent);
                  existing.return = returnFiber;
                  return existing;
                } // The existing first child is not a text node so we need to create one
                // and delete the existing ones.


                deleteRemainingChildren(returnFiber, currentFirstChild);
                var created = createFiberFromText(textContent, returnFiber.mode, lanes);
                created.return = returnFiber;
                return created;
              }

              function reconcileSingleElement(returnFiber, currentFirstChild, element, lanes) {
                var key = element.key;
                var child = currentFirstChild;

                while (child !== null) {
                  // TODO: If key === null and child.key === null, then this only applies to
                  // the first item in the list.
                  if (child.key === key) {
                    switch (child.tag) {
                      case Fragment:
                        {
                          if (element.type === REACT_FRAGMENT_TYPE) {
                            deleteRemainingChildren(returnFiber, child.sibling);
                            var existing = useFiber(child, element.props.children);
                            existing.return = returnFiber;

                            {
                              existing._debugSource = element._source;
                              existing._debugOwner = element._owner;
                            }

                            return existing;
                          }

                          break;
                        }

                      case Block:

                      // We intentionally fallthrough here if enableBlocksAPI is not on.
                      // eslint-disable-next-lined no-fallthrough

                      default:
                        {
                          if (child.elementType === element.type || ( // Keep this check inline so it only runs on the false path:
                           isCompatibleFamilyForHotReloading(child, element) )) {
                            deleteRemainingChildren(returnFiber, child.sibling);

                            var _existing3 = useFiber(child, element.props);

                            _existing3.ref = coerceRef(returnFiber, child, element);
                            _existing3.return = returnFiber;

                            {
                              _existing3._debugSource = element._source;
                              _existing3._debugOwner = element._owner;
                            }

                            return _existing3;
                          }

                          break;
                        }
                    } // Didn't match.


                    deleteRemainingChildren(returnFiber, child);
                    break;
                  } else {
                    deleteChild(returnFiber, child);
                  }

                  child = child.sibling;
                }

                if (element.type === REACT_FRAGMENT_TYPE) {
                  var created = createFiberFromFragment(element.props.children, returnFiber.mode, lanes, element.key);
                  created.return = returnFiber;
                  return created;
                } else {
                  var _created4 = createFiberFromElement(element, returnFiber.mode, lanes);

                  _created4.ref = coerceRef(returnFiber, currentFirstChild, element);
                  _created4.return = returnFiber;
                  return _created4;
                }
              }

              function reconcileSinglePortal(returnFiber, currentFirstChild, portal, lanes) {
                var key = portal.key;
                var child = currentFirstChild;

                while (child !== null) {
                  // TODO: If key === null and child.key === null, then this only applies to
                  // the first item in the list.
                  if (child.key === key) {
                    if (child.tag === HostPortal && child.stateNode.containerInfo === portal.containerInfo && child.stateNode.implementation === portal.implementation) {
                      deleteRemainingChildren(returnFiber, child.sibling);
                      var existing = useFiber(child, portal.children || []);
                      existing.return = returnFiber;
                      return existing;
                    } else {
                      deleteRemainingChildren(returnFiber, child);
                      break;
                    }
                  } else {
                    deleteChild(returnFiber, child);
                  }

                  child = child.sibling;
                }

                var created = createFiberFromPortal(portal, returnFiber.mode, lanes);
                created.return = returnFiber;
                return created;
              } // This API will tag the children with the side-effect of the reconciliation
              // itself. They will be added to the side-effect list as we pass through the
              // children and the parent.


              function reconcileChildFibers(returnFiber, currentFirstChild, newChild, lanes) {
                // This function is not recursive.
                // If the top level item is an array, we treat it as a set of children,
                // not as a fragment. Nested arrays on the other hand will be treated as
                // fragment nodes. Recursion happens at the normal flow.
                // Handle top level unkeyed fragments as if they were arrays.
                // This leads to an ambiguity between <>{[...]}</> and <>...</>.
                // We treat the ambiguous cases above the same.
                var isUnkeyedTopLevelFragment = typeof newChild === 'object' && newChild !== null && newChild.type === REACT_FRAGMENT_TYPE && newChild.key === null;

                if (isUnkeyedTopLevelFragment) {
                  newChild = newChild.props.children;
                } // Handle object types


                var isObject = typeof newChild === 'object' && newChild !== null;

                if (isObject) {
                  switch (newChild.$$typeof) {
                    case REACT_ELEMENT_TYPE:
                      return placeSingleChild(reconcileSingleElement(returnFiber, currentFirstChild, newChild, lanes));

                    case REACT_PORTAL_TYPE:
                      return placeSingleChild(reconcileSinglePortal(returnFiber, currentFirstChild, newChild, lanes));

                  }
                }

                if (typeof newChild === 'string' || typeof newChild === 'number') {
                  return placeSingleChild(reconcileSingleTextNode(returnFiber, currentFirstChild, '' + newChild, lanes));
                }

                if (isArray$1(newChild)) {
                  return reconcileChildrenArray(returnFiber, currentFirstChild, newChild, lanes);
                }

                if (getIteratorFn(newChild)) {
                  return reconcileChildrenIterator(returnFiber, currentFirstChild, newChild, lanes);
                }

                if (isObject) {
                  throwOnInvalidObjectType(returnFiber, newChild);
                }

                {
                  if (typeof newChild === 'function') {
                    warnOnFunctionType(returnFiber);
                  }
                }

                if (typeof newChild === 'undefined' && !isUnkeyedTopLevelFragment) {
                  // If the new child is undefined, and the return fiber is a composite
                  // component, throw an error. If Fiber return types are disabled,
                  // we already threw above.
                  switch (returnFiber.tag) {
                    case ClassComponent:
                      {
                        {
                          var instance = returnFiber.stateNode;

                          if (instance.render._isMockFunction) {
                            // We allow auto-mocks to proceed as if they're returning null.
                            break;
                          }
                        }
                      }
                    // Intentionally fall through to the next case, which handles both
                    // functions and classes
                    // eslint-disable-next-lined no-fallthrough

                    case Block:
                    case FunctionComponent:
                    case ForwardRef:
                    case SimpleMemoComponent:
                      {
                        {
                          {
                            throw Error( (getComponentName(returnFiber.type) || 'Component') + "(...): Nothing was returned from render. This usually means a return statement is missing. Or, to render nothing, return null." );
                          }
                        }
                      }
                  }
                } // Remaining cases are all treated as empty.


                return deleteRemainingChildren(returnFiber, currentFirstChild);
              }

              return reconcileChildFibers;
            }

            var reconcileChildFibers = ChildReconciler(true);
            var mountChildFibers = ChildReconciler(false);
            function cloneChildFibers(current, workInProgress) {
              if (!(current === null || workInProgress.child === current.child)) {
                {
                  throw Error( "Resuming work not yet implemented." );
                }
              }

              if (workInProgress.child === null) {
                return;
              }

              var currentChild = workInProgress.child;
              var newChild = createWorkInProgress(currentChild, currentChild.pendingProps);
              workInProgress.child = newChild;
              newChild.return = workInProgress;

              while (currentChild.sibling !== null) {
                currentChild = currentChild.sibling;
                newChild = newChild.sibling = createWorkInProgress(currentChild, currentChild.pendingProps);
                newChild.return = workInProgress;
              }

              newChild.sibling = null;
            } // Reset a workInProgress child set to prepare it for a second pass.

            function resetChildFibers(workInProgress, lanes) {
              var child = workInProgress.child;

              while (child !== null) {
                resetWorkInProgress(child, lanes);
                child = child.sibling;
              }
            }

            var NO_CONTEXT = {};
            var contextStackCursor$1 = createCursor(NO_CONTEXT);
            var contextFiberStackCursor = createCursor(NO_CONTEXT);
            var rootInstanceStackCursor = createCursor(NO_CONTEXT);

            function requiredContext(c) {
              if (!(c !== NO_CONTEXT)) {
                {
                  throw Error( "Expected host context to exist. This error is likely caused by a bug in React. Please file an issue." );
                }
              }

              return c;
            }

            function getRootHostContainer() {
              var rootInstance = requiredContext(rootInstanceStackCursor.current);
              return rootInstance;
            }

            function pushHostContainer(fiber, nextRootInstance) {
              // Push current root instance onto the stack;
              // This allows us to reset root when portals are popped.
              push(rootInstanceStackCursor, nextRootInstance, fiber); // Track the context and the Fiber that provided it.
              // This enables us to pop only Fibers that provide unique contexts.

              push(contextFiberStackCursor, fiber, fiber); // Finally, we need to push the host context to the stack.
              // However, we can't just call getRootHostContext() and push it because
              // we'd have a different number of entries on the stack depending on
              // whether getRootHostContext() throws somewhere in renderer code or not.
              // So we push an empty value first. This lets us safely unwind on errors.

              push(contextStackCursor$1, NO_CONTEXT, fiber);
              var nextRootContext = getRootHostContext(nextRootInstance); // Now that we know this function doesn't throw, replace it.

              pop(contextStackCursor$1, fiber);
              push(contextStackCursor$1, nextRootContext, fiber);
            }

            function popHostContainer(fiber) {
              pop(contextStackCursor$1, fiber);
              pop(contextFiberStackCursor, fiber);
              pop(rootInstanceStackCursor, fiber);
            }

            function getHostContext() {
              var context = requiredContext(contextStackCursor$1.current);
              return context;
            }

            function pushHostContext(fiber) {
              requiredContext(rootInstanceStackCursor.current);
              var context = requiredContext(contextStackCursor$1.current);
              var nextContext = getChildHostContext(context, fiber.type); // Don't push this Fiber's context unless it's unique.

              if (context === nextContext) {
                return;
              } // Track the context and the Fiber that provided it.
              // This enables us to pop only Fibers that provide unique contexts.


              push(contextFiberStackCursor, fiber, fiber);
              push(contextStackCursor$1, nextContext, fiber);
            }

            function popHostContext(fiber) {
              // Do not pop unless this Fiber provided the current context.
              // pushHostContext() only pushes Fibers that provide unique contexts.
              if (contextFiberStackCursor.current !== fiber) {
                return;
              }

              pop(contextStackCursor$1, fiber);
              pop(contextFiberStackCursor, fiber);
            }

            var DefaultSuspenseContext = 0; // The Suspense Context is split into two parts. The lower bits is
            // inherited deeply down the subtree. The upper bits only affect
            // this immediate suspense boundary and gets reset each new
            // boundary or suspense list.

            var SubtreeSuspenseContextMask = 1; // Subtree Flags:
            // InvisibleParentSuspenseContext indicates that one of our parent Suspense
            // boundaries is not currently showing visible main content.
            // Either because it is already showing a fallback or is not mounted at all.
            // We can use this to determine if it is desirable to trigger a fallback at
            // the parent. If not, then we might need to trigger undesirable boundaries
            // and/or suspend the commit to avoid hiding the parent content.

            var InvisibleParentSuspenseContext = 1; // Shallow Flags:
            // ForceSuspenseFallback can be used by SuspenseList to force newly added
            // items into their fallback state during one of the render passes.

            var ForceSuspenseFallback = 2;
            var suspenseStackCursor = createCursor(DefaultSuspenseContext);
            function hasSuspenseContext(parentContext, flag) {
              return (parentContext & flag) !== 0;
            }
            function setDefaultShallowSuspenseContext(parentContext) {
              return parentContext & SubtreeSuspenseContextMask;
            }
            function setShallowSuspenseContext(parentContext, shallowContext) {
              return parentContext & SubtreeSuspenseContextMask | shallowContext;
            }
            function addSubtreeSuspenseContext(parentContext, subtreeContext) {
              return parentContext | subtreeContext;
            }
            function pushSuspenseContext(fiber, newContext) {
              push(suspenseStackCursor, newContext, fiber);
            }
            function popSuspenseContext(fiber) {
              pop(suspenseStackCursor, fiber);
            }

            function shouldCaptureSuspense(workInProgress, hasInvisibleParent) {
              // If it was the primary children that just suspended, capture and render the
              // fallback. Otherwise, don't capture and bubble to the next boundary.
              var nextState = workInProgress.memoizedState;

              if (nextState !== null) {
                if (nextState.dehydrated !== null) {
                  // A dehydrated boundary always captures.
                  return true;
                }

                return false;
              }

              var props = workInProgress.memoizedProps; // In order to capture, the Suspense component must have a fallback prop.

              if (props.fallback === undefined) {
                return false;
              } // Regular boundaries always capture.


              if (props.unstable_avoidThisFallback !== true) {
                return true;
              } // If it's a boundary we should avoid, then we prefer to bubble up to the
              // parent boundary if it is currently invisible.


              if (hasInvisibleParent) {
                return false;
              } // If the parent is not able to handle it, we must handle it.


              return true;
            }
            function findFirstSuspended(row) {
              var node = row;

              while (node !== null) {
                if (node.tag === SuspenseComponent) {
                  var state = node.memoizedState;

                  if (state !== null) {
                    var dehydrated = state.dehydrated;

                    if (dehydrated === null || isSuspenseInstancePending(dehydrated) || isSuspenseInstanceFallback(dehydrated)) {
                      return node;
                    }
                  }
                } else if (node.tag === SuspenseListComponent && // revealOrder undefined can't be trusted because it don't
                // keep track of whether it suspended or not.
                node.memoizedProps.revealOrder !== undefined) {
                  var didSuspend = (node.flags & DidCapture) !== NoFlags;

                  if (didSuspend) {
                    return node;
                  }
                } else if (node.child !== null) {
                  node.child.return = node;
                  node = node.child;
                  continue;
                }

                if (node === row) {
                  return null;
                }

                while (node.sibling === null) {
                  if (node.return === null || node.return === row) {
                    return null;
                  }

                  node = node.return;
                }

                node.sibling.return = node.return;
                node = node.sibling;
              }

              return null;
            }

            var NoFlags$1 =
            /*  */
            0; // Represents whether effect should fire.

            var HasEffect =
            /* */
            1; // Represents the phase in which the effect (not the clean-up) fires.

            var Layout =
            /*    */
            2;
            var Passive$1 =
            /*   */
            4;

            // This may have been an insertion or a hydration.

            var hydrationParentFiber = null;
            var nextHydratableInstance = null;
            var isHydrating = false;

            function enterHydrationState(fiber) {

              var parentInstance = fiber.stateNode.containerInfo;
              nextHydratableInstance = getFirstHydratableChild(parentInstance);
              hydrationParentFiber = fiber;
              isHydrating = true;
              return true;
            }

            function deleteHydratableInstance(returnFiber, instance) {
              {
                switch (returnFiber.tag) {
                  case HostRoot:
                    didNotHydrateContainerInstance(returnFiber.stateNode.containerInfo, instance);
                    break;

                  case HostComponent:
                    didNotHydrateInstance(returnFiber.type, returnFiber.memoizedProps, returnFiber.stateNode, instance);
                    break;
                }
              }

              var childToDelete = createFiberFromHostInstanceForDeletion();
              childToDelete.stateNode = instance;
              childToDelete.return = returnFiber;
              childToDelete.flags = Deletion; // This might seem like it belongs on progressedFirstDeletion. However,
              // these children are not part of the reconciliation list of children.
              // Even if we abort and rereconcile the children, that will try to hydrate
              // again and the nodes are still in the host tree so these will be
              // recreated.

              if (returnFiber.lastEffect !== null) {
                returnFiber.lastEffect.nextEffect = childToDelete;
                returnFiber.lastEffect = childToDelete;
              } else {
                returnFiber.firstEffect = returnFiber.lastEffect = childToDelete;
              }
            }

            function insertNonHydratedInstance(returnFiber, fiber) {
              fiber.flags = fiber.flags & ~Hydrating | Placement;

              {
                switch (returnFiber.tag) {
                  case HostRoot:
                    {
                      var parentContainer = returnFiber.stateNode.containerInfo;

                      switch (fiber.tag) {
                        case HostComponent:
                          var type = fiber.type;
                          fiber.pendingProps;
                          didNotFindHydratableContainerInstance(parentContainer, type);
                          break;

                        case HostText:
                          var text = fiber.pendingProps;
                          didNotFindHydratableContainerTextInstance(parentContainer, text);
                          break;
                      }

                      break;
                    }

                  case HostComponent:
                    {
                      var parentType = returnFiber.type;
                      var parentProps = returnFiber.memoizedProps;
                      var parentInstance = returnFiber.stateNode;

                      switch (fiber.tag) {
                        case HostComponent:
                          var _type = fiber.type;
                          fiber.pendingProps;
                          didNotFindHydratableInstance(parentType, parentProps, parentInstance, _type);
                          break;

                        case HostText:
                          var _text = fiber.pendingProps;
                          didNotFindHydratableTextInstance(parentType, parentProps, parentInstance, _text);
                          break;

                        case SuspenseComponent:
                          didNotFindHydratableSuspenseInstance(parentType, parentProps);
                          break;
                      }

                      break;
                    }

                  default:
                    return;
                }
              }
            }

            function tryHydrate(fiber, nextInstance) {
              switch (fiber.tag) {
                case HostComponent:
                  {
                    var type = fiber.type;
                    fiber.pendingProps;
                    var instance = canHydrateInstance(nextInstance, type);

                    if (instance !== null) {
                      fiber.stateNode = instance;
                      return true;
                    }

                    return false;
                  }

                case HostText:
                  {
                    var text = fiber.pendingProps;
                    var textInstance = canHydrateTextInstance(nextInstance, text);

                    if (textInstance !== null) {
                      fiber.stateNode = textInstance;
                      return true;
                    }

                    return false;
                  }

                case SuspenseComponent:
                  {

                    return false;
                  }

                default:
                  return false;
              }
            }

            function tryToClaimNextHydratableInstance(fiber) {
              if (!isHydrating) {
                return;
              }

              var nextInstance = nextHydratableInstance;

              if (!nextInstance) {
                // Nothing to hydrate. Make it an insertion.
                insertNonHydratedInstance(hydrationParentFiber, fiber);
                isHydrating = false;
                hydrationParentFiber = fiber;
                return;
              }

              var firstAttemptedInstance = nextInstance;

              if (!tryHydrate(fiber, nextInstance)) {
                // If we can't hydrate this instance let's try the next one.
                // We use this as a heuristic. It's based on intuition and not data so it
                // might be flawed or unnecessary.
                nextInstance = getNextHydratableSibling(firstAttemptedInstance);

                if (!nextInstance || !tryHydrate(fiber, nextInstance)) {
                  // Nothing to hydrate. Make it an insertion.
                  insertNonHydratedInstance(hydrationParentFiber, fiber);
                  isHydrating = false;
                  hydrationParentFiber = fiber;
                  return;
                } // We matched the next one, we'll now assume that the first one was
                // superfluous and we'll delete it. Since we can't eagerly delete it
                // we'll have to schedule a deletion. To do that, this node needs a dummy
                // fiber associated with it.


                deleteHydratableInstance(hydrationParentFiber, firstAttemptedInstance);
              }

              hydrationParentFiber = fiber;
              nextHydratableInstance = getFirstHydratableChild(nextInstance);
            }

            function prepareToHydrateHostInstance(fiber, rootContainerInstance, hostContext) {

              var instance = fiber.stateNode;
              var updatePayload = hydrateInstance(instance, fiber.type, fiber.memoizedProps, rootContainerInstance, hostContext, fiber); // TODO: Type this specific to this type of component.

              fiber.updateQueue = updatePayload; // If the update payload indicates that there is a change or if there
              // is a new ref we mark this as an update.

              if (updatePayload !== null) {
                return true;
              }

              return false;
            }

            function prepareToHydrateHostTextInstance(fiber) {

              var textInstance = fiber.stateNode;
              var textContent = fiber.memoizedProps;
              var shouldUpdate = hydrateTextInstance(textInstance, textContent, fiber);

              {
                if (shouldUpdate) {
                  // We assume that prepareToHydrateHostTextInstance is called in a context where the
                  // hydration parent is the parent host component of this host text.
                  var returnFiber = hydrationParentFiber;

                  if (returnFiber !== null) {
                    switch (returnFiber.tag) {
                      case HostRoot:
                        {
                          var parentContainer = returnFiber.stateNode.containerInfo;
                          didNotMatchHydratedContainerTextInstance(parentContainer, textInstance, textContent);
                          break;
                        }

                      case HostComponent:
                        {
                          var parentType = returnFiber.type;
                          var parentProps = returnFiber.memoizedProps;
                          var parentInstance = returnFiber.stateNode;
                          didNotMatchHydratedTextInstance(parentType, parentProps, parentInstance, textInstance, textContent);
                          break;
                        }
                    }
                  }
                }
              }

              return shouldUpdate;
            }

            function skipPastDehydratedSuspenseInstance(fiber) {

              var suspenseState = fiber.memoizedState;
              var suspenseInstance = suspenseState !== null ? suspenseState.dehydrated : null;

              if (!suspenseInstance) {
                {
                  throw Error( "Expected to have a hydrated suspense instance. This error is likely caused by a bug in React. Please file an issue." );
                }
              }

              return getNextHydratableInstanceAfterSuspenseInstance(suspenseInstance);
            }

            function popToNextHostParent(fiber) {
              var parent = fiber.return;

              while (parent !== null && parent.tag !== HostComponent && parent.tag !== HostRoot && parent.tag !== SuspenseComponent) {
                parent = parent.return;
              }

              hydrationParentFiber = parent;
            }

            function popHydrationState(fiber) {

              if (fiber !== hydrationParentFiber) {
                // We're deeper than the current hydration context, inside an inserted
                // tree.
                return false;
              }

              if (!isHydrating) {
                // If we're not currently hydrating but we're in a hydration context, then
                // we were an insertion and now need to pop up reenter hydration of our
                // siblings.
                popToNextHostParent(fiber);
                isHydrating = true;
                return false;
              }

              var type = fiber.type; // If we have any remaining hydratable nodes, we need to delete them now.
              // We only do this deeper than head and body since they tend to have random
              // other nodes in them. We also ignore components with pure text content in
              // side of them.
              // TODO: Better heuristic.

              if (fiber.tag !== HostComponent || type !== 'head' && type !== 'body' && !shouldSetTextContent(type, fiber.memoizedProps)) {
                var nextInstance = nextHydratableInstance;

                while (nextInstance) {
                  deleteHydratableInstance(fiber, nextInstance);
                  nextInstance = getNextHydratableSibling(nextInstance);
                }
              }

              popToNextHostParent(fiber);

              if (fiber.tag === SuspenseComponent) {
                nextHydratableInstance = skipPastDehydratedSuspenseInstance(fiber);
              } else {
                nextHydratableInstance = hydrationParentFiber ? getNextHydratableSibling(fiber.stateNode) : null;
              }

              return true;
            }

            function resetHydrationState() {

              hydrationParentFiber = null;
              nextHydratableInstance = null;
              isHydrating = false;
            }

            function getIsHydrating() {
              return isHydrating;
            }

            // and should be reset before starting a new render.
            // This tracks which mutable sources need to be reset after a render.

            var workInProgressSources = [];
            var rendererSigil$1;

            {
              // Used to detect multiple renderers using the same mutable source.
              rendererSigil$1 = {};
            }

            function markSourceAsDirty(mutableSource) {
              workInProgressSources.push(mutableSource);
            }
            function resetWorkInProgressVersions() {
              for (var i = 0; i < workInProgressSources.length; i++) {
                var mutableSource = workInProgressSources[i];

                {
                  mutableSource._workInProgressVersionPrimary = null;
                }
              }

              workInProgressSources.length = 0;
            }
            function getWorkInProgressVersion(mutableSource) {
              {
                return mutableSource._workInProgressVersionPrimary;
              }
            }
            function setWorkInProgressVersion(mutableSource, version) {
              {
                mutableSource._workInProgressVersionPrimary = version;
              }

              workInProgressSources.push(mutableSource);
            }
            function warnAboutMultipleRenderersDEV(mutableSource) {
              {
                {
                  if (mutableSource._currentPrimaryRenderer == null) {
                    mutableSource._currentPrimaryRenderer = rendererSigil$1;
                  } else if (mutableSource._currentPrimaryRenderer !== rendererSigil$1) {
                    error('Detected multiple renderers concurrently rendering the ' + 'same mutable source. This is currently unsupported.');
                  }
                }
              }
            } // Eager reads the version of a mutable source and stores it on the root.

            var ReactCurrentDispatcher$1 = ReactSharedInternals.ReactCurrentDispatcher,
                ReactCurrentBatchConfig$1 = ReactSharedInternals.ReactCurrentBatchConfig;
            var didWarnAboutMismatchedHooksForComponent;
            var didWarnAboutUseOpaqueIdentifier;

            {
              didWarnAboutUseOpaqueIdentifier = {};
              didWarnAboutMismatchedHooksForComponent = new Set();
            }

            // These are set right before calling the component.
            var renderLanes = NoLanes; // The work-in-progress fiber. I've named it differently to distinguish it from
            // the work-in-progress hook.

            var currentlyRenderingFiber$1 = null; // Hooks are stored as a linked list on the fiber's memoizedState field. The
            // current hook list is the list that belongs to the current fiber. The
            // work-in-progress hook list is a new list that will be added to the
            // work-in-progress fiber.

            var currentHook = null;
            var workInProgressHook = null; // Whether an update was scheduled at any point during the render phase. This
            // does not get reset if we do another render pass; only when we're completely
            // finished evaluating this component. This is an optimization so we know
            // whether we need to clear render phase updates after a throw.

            var didScheduleRenderPhaseUpdate = false; // Where an update was scheduled only during the current render pass. This
            // gets reset after each attempt.
            // TODO: Maybe there's some way to consolidate this with
            // `didScheduleRenderPhaseUpdate`. Or with `numberOfReRenders`.

            var didScheduleRenderPhaseUpdateDuringThisPass = false;
            var RE_RENDER_LIMIT = 25; // In DEV, this is the name of the currently executing primitive hook

            var currentHookNameInDev = null; // In DEV, this list ensures that hooks are called in the same order between renders.
            // The list stores the order of hooks used during the initial render (mount).
            // Subsequent renders (updates) reference this list.

            var hookTypesDev = null;
            var hookTypesUpdateIndexDev = -1; // In DEV, this tracks whether currently rendering component needs to ignore
            // the dependencies for Hooks that need them (e.g. useEffect or useMemo).
            // When true, such Hooks will always be "remounted". Only used during hot reload.

            var ignorePreviousDependencies = false;

            function mountHookTypesDev() {
              {
                var hookName = currentHookNameInDev;

                if (hookTypesDev === null) {
                  hookTypesDev = [hookName];
                } else {
                  hookTypesDev.push(hookName);
                }
              }
            }

            function updateHookTypesDev() {
              {
                var hookName = currentHookNameInDev;

                if (hookTypesDev !== null) {
                  hookTypesUpdateIndexDev++;

                  if (hookTypesDev[hookTypesUpdateIndexDev] !== hookName) {
                    warnOnHookMismatchInDev(hookName);
                  }
                }
              }
            }

            function checkDepsAreArrayDev(deps) {
              {
                if (deps !== undefined && deps !== null && !Array.isArray(deps)) {
                  // Verify deps, but only on mount to avoid extra checks.
                  // It's unlikely their type would change as usually you define them inline.
                  error('%s received a final argument that is not an array (instead, received `%s`). When ' + 'specified, the final argument must be an array.', currentHookNameInDev, typeof deps);
                }
              }
            }

            function warnOnHookMismatchInDev(currentHookName) {
              {
                var componentName = getComponentName(currentlyRenderingFiber$1.type);

                if (!didWarnAboutMismatchedHooksForComponent.has(componentName)) {
                  didWarnAboutMismatchedHooksForComponent.add(componentName);

                  if (hookTypesDev !== null) {
                    var table = '';
                    var secondColumnStart = 30;

                    for (var i = 0; i <= hookTypesUpdateIndexDev; i++) {
                      var oldHookName = hookTypesDev[i];
                      var newHookName = i === hookTypesUpdateIndexDev ? currentHookName : oldHookName;
                      var row = i + 1 + ". " + oldHookName; // Extra space so second column lines up
                      // lol @ IE not supporting String#repeat

                      while (row.length < secondColumnStart) {
                        row += ' ';
                      }

                      row += newHookName + '\n';
                      table += row;
                    }

                    error('React has detected a change in the order of Hooks called by %s. ' + 'This will lead to bugs and errors if not fixed. ' + 'For more information, read the Rules of Hooks: https://reactjs.org/link/rules-of-hooks\n\n' + '   Previous render            Next render\n' + '   ------------------------------------------------------\n' + '%s' + '   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n', componentName, table);
                  }
                }
              }
            }

            function throwInvalidHookError() {
              {
                {
                  throw Error( "Invalid hook call. Hooks can only be called inside of the body of a function component. This could happen for one of the following reasons:\n1. You might have mismatching versions of React and the renderer (such as React DOM)\n2. You might be breaking the Rules of Hooks\n3. You might have more than one copy of React in the same app\nSee https://reactjs.org/link/invalid-hook-call for tips about how to debug and fix this problem." );
                }
              }
            }

            function areHookInputsEqual(nextDeps, prevDeps) {
              {
                if (ignorePreviousDependencies) {
                  // Only true when this component is being hot reloaded.
                  return false;
                }
              }

              if (prevDeps === null) {
                {
                  error('%s received a final argument during this render, but not during ' + 'the previous render. Even though the final argument is optional, ' + 'its type cannot change between renders.', currentHookNameInDev);
                }

                return false;
              }

              {
                // Don't bother comparing lengths in prod because these arrays should be
                // passed inline.
                if (nextDeps.length !== prevDeps.length) {
                  error('The final argument passed to %s changed size between renders. The ' + 'order and size of this array must remain constant.\n\n' + 'Previous: %s\n' + 'Incoming: %s', currentHookNameInDev, "[" + prevDeps.join(', ') + "]", "[" + nextDeps.join(', ') + "]");
                }
              }

              for (var i = 0; i < prevDeps.length && i < nextDeps.length; i++) {
                if (objectIs(nextDeps[i], prevDeps[i])) {
                  continue;
                }

                return false;
              }

              return true;
            }

            function renderWithHooks(current, workInProgress, Component, props, secondArg, nextRenderLanes) {
              renderLanes = nextRenderLanes;
              currentlyRenderingFiber$1 = workInProgress;

              {
                hookTypesDev = current !== null ? current._debugHookTypes : null;
                hookTypesUpdateIndexDev = -1; // Used for hot reloading:

                ignorePreviousDependencies = current !== null && current.type !== workInProgress.type;
              }

              workInProgress.memoizedState = null;
              workInProgress.updateQueue = null;
              workInProgress.lanes = NoLanes; // The following should have already been reset
              // currentHook = null;
              // workInProgressHook = null;
              // didScheduleRenderPhaseUpdate = false;
              // TODO Warn if no hooks are used at all during mount, then some are used during update.
              // Currently we will identify the update render as a mount because memoizedState === null.
              // This is tricky because it's valid for certain types of components (e.g. React.lazy)
              // Using memoizedState to differentiate between mount/update only works if at least one stateful hook is used.
              // Non-stateful hooks (e.g. context) don't get added to memoizedState,
              // so memoizedState would be null during updates and mounts.

              {
                if (current !== null && current.memoizedState !== null) {
                  ReactCurrentDispatcher$1.current = HooksDispatcherOnUpdateInDEV;
                } else if (hookTypesDev !== null) {
                  // This dispatcher handles an edge case where a component is updating,
                  // but no stateful hooks have been used.
                  // We want to match the production code behavior (which will use HooksDispatcherOnMount),
                  // but with the extra DEV validation to ensure hooks ordering hasn't changed.
                  // This dispatcher does that.
                  ReactCurrentDispatcher$1.current = HooksDispatcherOnMountWithHookTypesInDEV;
                } else {
                  ReactCurrentDispatcher$1.current = HooksDispatcherOnMountInDEV;
                }
              }

              var children = Component(props, secondArg); // Check if there was a render phase update

              if (didScheduleRenderPhaseUpdateDuringThisPass) {
                // Keep rendering in a loop for as long as render phase updates continue to
                // be scheduled. Use a counter to prevent infinite loops.
                var numberOfReRenders = 0;

                do {
                  didScheduleRenderPhaseUpdateDuringThisPass = false;

                  if (!(numberOfReRenders < RE_RENDER_LIMIT)) {
                    {
                      throw Error( "Too many re-renders. React limits the number of renders to prevent an infinite loop." );
                    }
                  }

                  numberOfReRenders += 1;

                  {
                    // Even when hot reloading, allow dependencies to stabilize
                    // after first render to prevent infinite render phase updates.
                    ignorePreviousDependencies = false;
                  } // Start over from the beginning of the list


                  currentHook = null;
                  workInProgressHook = null;
                  workInProgress.updateQueue = null;

                  {
                    // Also validate hook order for cascading updates.
                    hookTypesUpdateIndexDev = -1;
                  }

                  ReactCurrentDispatcher$1.current =  HooksDispatcherOnRerenderInDEV ;
                  children = Component(props, secondArg);
                } while (didScheduleRenderPhaseUpdateDuringThisPass);
              } // We can assume the previous dispatcher is always this one, since we set it
              // at the beginning of the render phase and there's no re-entrancy.


              ReactCurrentDispatcher$1.current = ContextOnlyDispatcher;

              {
                workInProgress._debugHookTypes = hookTypesDev;
              } // This check uses currentHook so that it works the same in DEV and prod bundles.
              // hookTypesDev could catch more cases (e.g. context) but only in DEV bundles.


              var didRenderTooFewHooks = currentHook !== null && currentHook.next !== null;
              renderLanes = NoLanes;
              currentlyRenderingFiber$1 = null;
              currentHook = null;
              workInProgressHook = null;

              {
                currentHookNameInDev = null;
                hookTypesDev = null;
                hookTypesUpdateIndexDev = -1;
              }

              didScheduleRenderPhaseUpdate = false;

              if (!!didRenderTooFewHooks) {
                {
                  throw Error( "Rendered fewer hooks than expected. This may be caused by an accidental early return statement." );
                }
              }

              return children;
            }
            function bailoutHooks(current, workInProgress, lanes) {
              workInProgress.updateQueue = current.updateQueue;
              workInProgress.flags &= ~(Passive | Update);
              current.lanes = removeLanes(current.lanes, lanes);
            }
            function resetHooksAfterThrow() {
              // We can assume the previous dispatcher is always this one, since we set it
              // at the beginning of the render phase and there's no re-entrancy.
              ReactCurrentDispatcher$1.current = ContextOnlyDispatcher;

              if (didScheduleRenderPhaseUpdate) {
                // There were render phase updates. These are only valid for this render
                // phase, which we are now aborting. Remove the updates from the queues so
                // they do not persist to the next render. Do not remove updates from hooks
                // that weren't processed.
                //
                // Only reset the updates from the queue if it has a clone. If it does
                // not have a clone, that means it wasn't processed, and the updates were
                // scheduled before we entered the render phase.
                var hook = currentlyRenderingFiber$1.memoizedState;

                while (hook !== null) {
                  var queue = hook.queue;

                  if (queue !== null) {
                    queue.pending = null;
                  }

                  hook = hook.next;
                }

                didScheduleRenderPhaseUpdate = false;
              }

              renderLanes = NoLanes;
              currentlyRenderingFiber$1 = null;
              currentHook = null;
              workInProgressHook = null;

              {
                hookTypesDev = null;
                hookTypesUpdateIndexDev = -1;
                currentHookNameInDev = null;
                isUpdatingOpaqueValueInRenderPhase = false;
              }

              didScheduleRenderPhaseUpdateDuringThisPass = false;
            }

            function mountWorkInProgressHook() {
              var hook = {
                memoizedState: null,
                baseState: null,
                baseQueue: null,
                queue: null,
                next: null
              };

              if (workInProgressHook === null) {
                // This is the first hook in the list
                currentlyRenderingFiber$1.memoizedState = workInProgressHook = hook;
              } else {
                // Append to the end of the list
                workInProgressHook = workInProgressHook.next = hook;
              }

              return workInProgressHook;
            }

            function updateWorkInProgressHook() {
              // This function is used both for updates and for re-renders triggered by a
              // render phase update. It assumes there is either a current hook we can
              // clone, or a work-in-progress hook from a previous render pass that we can
              // use as a base. When we reach the end of the base list, we must switch to
              // the dispatcher used for mounts.
              var nextCurrentHook;

              if (currentHook === null) {
                var current = currentlyRenderingFiber$1.alternate;

                if (current !== null) {
                  nextCurrentHook = current.memoizedState;
                } else {
                  nextCurrentHook = null;
                }
              } else {
                nextCurrentHook = currentHook.next;
              }

              var nextWorkInProgressHook;

              if (workInProgressHook === null) {
                nextWorkInProgressHook = currentlyRenderingFiber$1.memoizedState;
              } else {
                nextWorkInProgressHook = workInProgressHook.next;
              }

              if (nextWorkInProgressHook !== null) {
                // There's already a work-in-progress. Reuse it.
                workInProgressHook = nextWorkInProgressHook;
                nextWorkInProgressHook = workInProgressHook.next;
                currentHook = nextCurrentHook;
              } else {
                // Clone from the current hook.
                if (!(nextCurrentHook !== null)) {
                  {
                    throw Error( "Rendered more hooks than during the previous render." );
                  }
                }

                currentHook = nextCurrentHook;
                var newHook = {
                  memoizedState: currentHook.memoizedState,
                  baseState: currentHook.baseState,
                  baseQueue: currentHook.baseQueue,
                  queue: currentHook.queue,
                  next: null
                };

                if (workInProgressHook === null) {
                  // This is the first hook in the list.
                  currentlyRenderingFiber$1.memoizedState = workInProgressHook = newHook;
                } else {
                  // Append to the end of the list.
                  workInProgressHook = workInProgressHook.next = newHook;
                }
              }

              return workInProgressHook;
            }

            function createFunctionComponentUpdateQueue() {
              return {
                lastEffect: null
              };
            }

            function basicStateReducer(state, action) {
              // $FlowFixMe: Flow doesn't like mixed types
              return typeof action === 'function' ? action(state) : action;
            }

            function mountReducer(reducer, initialArg, init) {
              var hook = mountWorkInProgressHook();
              var initialState;

              if (init !== undefined) {
                initialState = init(initialArg);
              } else {
                initialState = initialArg;
              }

              hook.memoizedState = hook.baseState = initialState;
              var queue = hook.queue = {
                pending: null,
                dispatch: null,
                lastRenderedReducer: reducer,
                lastRenderedState: initialState
              };
              var dispatch = queue.dispatch = dispatchAction.bind(null, currentlyRenderingFiber$1, queue);
              return [hook.memoizedState, dispatch];
            }

            function updateReducer(reducer, initialArg, init) {
              var hook = updateWorkInProgressHook();
              var queue = hook.queue;

              if (!(queue !== null)) {
                {
                  throw Error( "Should have a queue. This is likely a bug in React. Please file an issue." );
                }
              }

              queue.lastRenderedReducer = reducer;
              var current = currentHook; // The last rebase update that is NOT part of the base state.

              var baseQueue = current.baseQueue; // The last pending update that hasn't been processed yet.

              var pendingQueue = queue.pending;

              if (pendingQueue !== null) {
                // We have new updates that haven't been processed yet.
                // We'll add them to the base queue.
                if (baseQueue !== null) {
                  // Merge the pending queue and the base queue.
                  var baseFirst = baseQueue.next;
                  var pendingFirst = pendingQueue.next;
                  baseQueue.next = pendingFirst;
                  pendingQueue.next = baseFirst;
                }

                {
                  if (current.baseQueue !== baseQueue) {
                    // Internal invariant that should never happen, but feasibly could in
                    // the future if we implement resuming, or some form of that.
                    error('Internal error: Expected work-in-progress queue to be a clone. ' + 'This is a bug in React.');
                  }
                }

                current.baseQueue = baseQueue = pendingQueue;
                queue.pending = null;
              }

              if (baseQueue !== null) {
                // We have a queue to process.
                var first = baseQueue.next;
                var newState = current.baseState;
                var newBaseState = null;
                var newBaseQueueFirst = null;
                var newBaseQueueLast = null;
                var update = first;

                do {
                  var updateLane = update.lane;

                  if (!isSubsetOfLanes(renderLanes, updateLane)) {
                    // Priority is insufficient. Skip this update. If this is the first
                    // skipped update, the previous update/state is the new base
                    // update/state.
                    var clone = {
                      lane: updateLane,
                      action: update.action,
                      eagerReducer: update.eagerReducer,
                      eagerState: update.eagerState,
                      next: null
                    };

                    if (newBaseQueueLast === null) {
                      newBaseQueueFirst = newBaseQueueLast = clone;
                      newBaseState = newState;
                    } else {
                      newBaseQueueLast = newBaseQueueLast.next = clone;
                    } // Update the remaining priority in the queue.
                    // TODO: Don't need to accumulate this. Instead, we can remove
                    // renderLanes from the original lanes.


                    currentlyRenderingFiber$1.lanes = mergeLanes(currentlyRenderingFiber$1.lanes, updateLane);
                    markSkippedUpdateLanes(updateLane);
                  } else {
                    // This update does have sufficient priority.
                    if (newBaseQueueLast !== null) {
                      var _clone = {
                        // This update is going to be committed so we never want uncommit
                        // it. Using NoLane works because 0 is a subset of all bitmasks, so
                        // this will never be skipped by the check above.
                        lane: NoLane,
                        action: update.action,
                        eagerReducer: update.eagerReducer,
                        eagerState: update.eagerState,
                        next: null
                      };
                      newBaseQueueLast = newBaseQueueLast.next = _clone;
                    } // Process this update.


                    if (update.eagerReducer === reducer) {
                      // If this update was processed eagerly, and its reducer matches the
                      // current reducer, we can use the eagerly computed state.
                      newState = update.eagerState;
                    } else {
                      var action = update.action;
                      newState = reducer(newState, action);
                    }
                  }

                  update = update.next;
                } while (update !== null && update !== first);

                if (newBaseQueueLast === null) {
                  newBaseState = newState;
                } else {
                  newBaseQueueLast.next = newBaseQueueFirst;
                } // Mark that the fiber performed work, but only if the new state is
                // different from the current state.


                if (!objectIs(newState, hook.memoizedState)) {
                  markWorkInProgressReceivedUpdate();
                }

                hook.memoizedState = newState;
                hook.baseState = newBaseState;
                hook.baseQueue = newBaseQueueLast;
                queue.lastRenderedState = newState;
              }

              var dispatch = queue.dispatch;
              return [hook.memoizedState, dispatch];
            }

            function rerenderReducer(reducer, initialArg, init) {
              var hook = updateWorkInProgressHook();
              var queue = hook.queue;

              if (!(queue !== null)) {
                {
                  throw Error( "Should have a queue. This is likely a bug in React. Please file an issue." );
                }
              }

              queue.lastRenderedReducer = reducer; // This is a re-render. Apply the new render phase updates to the previous
              // work-in-progress hook.

              var dispatch = queue.dispatch;
              var lastRenderPhaseUpdate = queue.pending;
              var newState = hook.memoizedState;

              if (lastRenderPhaseUpdate !== null) {
                // The queue doesn't persist past this render pass.
                queue.pending = null;
                var firstRenderPhaseUpdate = lastRenderPhaseUpdate.next;
                var update = firstRenderPhaseUpdate;

                do {
                  // Process this render phase update. We don't have to check the
                  // priority because it will always be the same as the current
                  // render's.
                  var action = update.action;
                  newState = reducer(newState, action);
                  update = update.next;
                } while (update !== firstRenderPhaseUpdate); // Mark that the fiber performed work, but only if the new state is
                // different from the current state.


                if (!objectIs(newState, hook.memoizedState)) {
                  markWorkInProgressReceivedUpdate();
                }

                hook.memoizedState = newState; // Don't persist the state accumulated from the render phase updates to
                // the base state unless the queue is empty.
                // TODO: Not sure if this is the desired semantics, but it's what we
                // do for gDSFP. I can't remember why.

                if (hook.baseQueue === null) {
                  hook.baseState = newState;
                }

                queue.lastRenderedState = newState;
              }

              return [newState, dispatch];
            }

            function readFromUnsubcribedMutableSource(root, source, getSnapshot) {
              {
                warnAboutMultipleRenderersDEV(source);
              }

              var getVersion = source._getVersion;
              var version = getVersion(source._source); // Is it safe for this component to read from this source during the current render?

              var isSafeToReadFromSource = false; // Check the version first.
              // If this render has already been started with a specific version,
              // we can use it alone to determine if we can safely read from the source.

              var currentRenderVersion = getWorkInProgressVersion(source);

              if (currentRenderVersion !== null) {
                // It's safe to read if the store hasn't been mutated since the last time
                // we read something.
                isSafeToReadFromSource = currentRenderVersion === version;
              } else {
                // If there's no version, then this is the first time we've read from the
                // source during the current render pass, so we need to do a bit more work.
                // What we need to determine is if there are any hooks that already
                // subscribed to the source, and if so, whether there are any pending
                // mutations that haven't been synchronized yet.
                //
                // If there are no pending mutations, then `root.mutableReadLanes` will be
                // empty, and we know we can safely read.
                //
                // If there *are* pending mutations, we may still be able to safely read
                // if the currently rendering lanes are inclusive of the pending mutation
                // lanes, since that guarantees that the value we're about to read from
                // the source is consistent with the values that we read during the most
                // recent mutation.
                isSafeToReadFromSource = isSubsetOfLanes(renderLanes, root.mutableReadLanes);

                if (isSafeToReadFromSource) {
                  // If it's safe to read from this source during the current render,
                  // store the version in case other components read from it.
                  // A changed version number will let those components know to throw and restart the render.
                  setWorkInProgressVersion(source, version);
                }
              }

              if (isSafeToReadFromSource) {
                var snapshot = getSnapshot(source._source);

                {
                  if (typeof snapshot === 'function') {
                    error('Mutable source should not return a function as the snapshot value. ' + 'Functions may close over mutable values and cause tearing.');
                  }
                }

                return snapshot;
              } else {
                // This handles the special case of a mutable source being shared between renderers.
                // In that case, if the source is mutated between the first and second renderer,
                // The second renderer don't know that it needs to reset the WIP version during unwind,
                // (because the hook only marks sources as dirty if it's written to their WIP version).
                // That would cause this tear check to throw again and eventually be visible to the user.
                // We can avoid this infinite loop by explicitly marking the source as dirty.
                //
                // This can lead to tearing in the first renderer when it resumes,
                // but there's nothing we can do about that (short of throwing here and refusing to continue the render).
                markSourceAsDirty(source);

                {
                  {
                    throw Error( "Cannot read from mutable source during the current render without tearing. This is a bug in React. Please file an issue." );
                  }
                }
              }
            }

            function useMutableSource(hook, source, getSnapshot, subscribe) {
              var root = getWorkInProgressRoot();

              if (!(root !== null)) {
                {
                  throw Error( "Expected a work-in-progress root. This is a bug in React. Please file an issue." );
                }
              }

              var getVersion = source._getVersion;
              var version = getVersion(source._source);
              var dispatcher = ReactCurrentDispatcher$1.current; // eslint-disable-next-line prefer-const

              var _dispatcher$useState = dispatcher.useState(function () {
                return readFromUnsubcribedMutableSource(root, source, getSnapshot);
              }),
                  currentSnapshot = _dispatcher$useState[0],
                  setSnapshot = _dispatcher$useState[1];

              var snapshot = currentSnapshot; // Grab a handle to the state hook as well.
              // We use it to clear the pending update queue if we have a new source.

              var stateHook = workInProgressHook;
              var memoizedState = hook.memoizedState;
              var refs = memoizedState.refs;
              var prevGetSnapshot = refs.getSnapshot;
              var prevSource = memoizedState.source;
              var prevSubscribe = memoizedState.subscribe;
              var fiber = currentlyRenderingFiber$1;
              hook.memoizedState = {
                refs: refs,
                source: source,
                subscribe: subscribe
              }; // Sync the values needed by our subscription handler after each commit.

              dispatcher.useEffect(function () {
                refs.getSnapshot = getSnapshot; // Normally the dispatch function for a state hook never changes,
                // but this hook recreates the queue in certain cases  to avoid updates from stale sources.
                // handleChange() below needs to reference the dispatch function without re-subscribing,
                // so we use a ref to ensure that it always has the latest version.

                refs.setSnapshot = setSnapshot; // Check for a possible change between when we last rendered now.

                var maybeNewVersion = getVersion(source._source);

                if (!objectIs(version, maybeNewVersion)) {
                  var maybeNewSnapshot = getSnapshot(source._source);

                  {
                    if (typeof maybeNewSnapshot === 'function') {
                      error('Mutable source should not return a function as the snapshot value. ' + 'Functions may close over mutable values and cause tearing.');
                    }
                  }

                  if (!objectIs(snapshot, maybeNewSnapshot)) {
                    setSnapshot(maybeNewSnapshot);
                    var lane = requestUpdateLane(fiber);
                    markRootMutableRead(root, lane);
                  } // If the source mutated between render and now,
                  // there may be state updates already scheduled from the old source.
                  // Entangle the updates so that they render in the same batch.


                  markRootEntangled(root, root.mutableReadLanes);
                }
              }, [getSnapshot, source, subscribe]); // If we got a new source or subscribe function, re-subscribe in a passive effect.

              dispatcher.useEffect(function () {
                var handleChange = function () {
                  var latestGetSnapshot = refs.getSnapshot;
                  var latestSetSnapshot = refs.setSnapshot;

                  try {
                    latestSetSnapshot(latestGetSnapshot(source._source)); // Record a pending mutable source update with the same expiration time.

                    var lane = requestUpdateLane(fiber);
                    markRootMutableRead(root, lane);
                  } catch (error) {
                    // A selector might throw after a source mutation.
                    // e.g. it might try to read from a part of the store that no longer exists.
                    // In this case we should still schedule an update with React.
                    // Worst case the selector will throw again and then an error boundary will handle it.
                    latestSetSnapshot(function () {
                      throw error;
                    });
                  }
                };

                var unsubscribe = subscribe(source._source, handleChange);

                {
                  if (typeof unsubscribe !== 'function') {
                    error('Mutable source subscribe function must return an unsubscribe function.');
                  }
                }

                return unsubscribe;
              }, [source, subscribe]); // If any of the inputs to useMutableSource change, reading is potentially unsafe.
              //
              // If either the source or the subscription have changed we can't can't trust the update queue.
              // Maybe the source changed in a way that the old subscription ignored but the new one depends on.
              //
              // If the getSnapshot function changed, we also shouldn't rely on the update queue.
              // It's possible that the underlying source was mutated between the when the last "change" event fired,
              // and when the current render (with the new getSnapshot function) is processed.
              //
              // In both cases, we need to throw away pending updates (since they are no longer relevant)
              // and treat reading from the source as we do in the mount case.

              if (!objectIs(prevGetSnapshot, getSnapshot) || !objectIs(prevSource, source) || !objectIs(prevSubscribe, subscribe)) {
                // Create a new queue and setState method,
                // So if there are interleaved updates, they get pushed to the older queue.
                // When this becomes current, the previous queue and dispatch method will be discarded,
                // including any interleaving updates that occur.
                var newQueue = {
                  pending: null,
                  dispatch: null,
                  lastRenderedReducer: basicStateReducer,
                  lastRenderedState: snapshot
                };
                newQueue.dispatch = setSnapshot = dispatchAction.bind(null, currentlyRenderingFiber$1, newQueue);
                stateHook.queue = newQueue;
                stateHook.baseQueue = null;
                snapshot = readFromUnsubcribedMutableSource(root, source, getSnapshot);
                stateHook.memoizedState = stateHook.baseState = snapshot;
              }

              return snapshot;
            }

            function mountMutableSource(source, getSnapshot, subscribe) {
              var hook = mountWorkInProgressHook();
              hook.memoizedState = {
                refs: {
                  getSnapshot: getSnapshot,
                  setSnapshot: null
                },
                source: source,
                subscribe: subscribe
              };
              return useMutableSource(hook, source, getSnapshot, subscribe);
            }

            function updateMutableSource(source, getSnapshot, subscribe) {
              var hook = updateWorkInProgressHook();
              return useMutableSource(hook, source, getSnapshot, subscribe);
            }

            function mountState(initialState) {
              var hook = mountWorkInProgressHook();

              if (typeof initialState === 'function') {
                // $FlowFixMe: Flow doesn't like mixed types
                initialState = initialState();
              }

              hook.memoizedState = hook.baseState = initialState;
              var queue = hook.queue = {
                pending: null,
                dispatch: null,
                lastRenderedReducer: basicStateReducer,
                lastRenderedState: initialState
              };
              var dispatch = queue.dispatch = dispatchAction.bind(null, currentlyRenderingFiber$1, queue);
              return [hook.memoizedState, dispatch];
            }

            function updateState(initialState) {
              return updateReducer(basicStateReducer);
            }

            function rerenderState(initialState) {
              return rerenderReducer(basicStateReducer);
            }

            function pushEffect(tag, create, destroy, deps) {
              var effect = {
                tag: tag,
                create: create,
                destroy: destroy,
                deps: deps,
                // Circular
                next: null
              };
              var componentUpdateQueue = currentlyRenderingFiber$1.updateQueue;

              if (componentUpdateQueue === null) {
                componentUpdateQueue = createFunctionComponentUpdateQueue();
                currentlyRenderingFiber$1.updateQueue = componentUpdateQueue;
                componentUpdateQueue.lastEffect = effect.next = effect;
              } else {
                var lastEffect = componentUpdateQueue.lastEffect;

                if (lastEffect === null) {
                  componentUpdateQueue.lastEffect = effect.next = effect;
                } else {
                  var firstEffect = lastEffect.next;
                  lastEffect.next = effect;
                  effect.next = firstEffect;
                  componentUpdateQueue.lastEffect = effect;
                }
              }

              return effect;
            }

            function mountRef(initialValue) {
              var hook = mountWorkInProgressHook();
              var ref = {
                current: initialValue
              };

              {
                Object.seal(ref);
              }

              hook.memoizedState = ref;
              return ref;
            }

            function updateRef(initialValue) {
              var hook = updateWorkInProgressHook();
              return hook.memoizedState;
            }

            function mountEffectImpl(fiberFlags, hookFlags, create, deps) {
              var hook = mountWorkInProgressHook();
              var nextDeps = deps === undefined ? null : deps;
              currentlyRenderingFiber$1.flags |= fiberFlags;
              hook.memoizedState = pushEffect(HasEffect | hookFlags, create, undefined, nextDeps);
            }

            function updateEffectImpl(fiberFlags, hookFlags, create, deps) {
              var hook = updateWorkInProgressHook();
              var nextDeps = deps === undefined ? null : deps;
              var destroy = undefined;

              if (currentHook !== null) {
                var prevEffect = currentHook.memoizedState;
                destroy = prevEffect.destroy;

                if (nextDeps !== null) {
                  var prevDeps = prevEffect.deps;

                  if (areHookInputsEqual(nextDeps, prevDeps)) {
                    pushEffect(hookFlags, create, destroy, nextDeps);
                    return;
                  }
                }
              }

              currentlyRenderingFiber$1.flags |= fiberFlags;
              hook.memoizedState = pushEffect(HasEffect | hookFlags, create, destroy, nextDeps);
            }

            function mountEffect(create, deps) {
              {
                // $FlowExpectedError - jest isn't a global, and isn't recognized outside of tests
                if ('undefined' !== typeof jest) {
                  warnIfNotCurrentlyActingEffectsInDEV(currentlyRenderingFiber$1);
                }
              }

              return mountEffectImpl(Update | Passive, Passive$1, create, deps);
            }

            function updateEffect(create, deps) {
              {
                // $FlowExpectedError - jest isn't a global, and isn't recognized outside of tests
                if ('undefined' !== typeof jest) {
                  warnIfNotCurrentlyActingEffectsInDEV(currentlyRenderingFiber$1);
                }
              }

              return updateEffectImpl(Update | Passive, Passive$1, create, deps);
            }

            function mountLayoutEffect(create, deps) {
              return mountEffectImpl(Update, Layout, create, deps);
            }

            function updateLayoutEffect(create, deps) {
              return updateEffectImpl(Update, Layout, create, deps);
            }

            function imperativeHandleEffect(create, ref) {
              if (typeof ref === 'function') {
                var refCallback = ref;

                var _inst = create();

                refCallback(_inst);
                return function () {
                  refCallback(null);
                };
              } else if (ref !== null && ref !== undefined) {
                var refObject = ref;

                {
                  if (!refObject.hasOwnProperty('current')) {
                    error('Expected useImperativeHandle() first argument to either be a ' + 'ref callback or React.createRef() object. Instead received: %s.', 'an object with keys {' + Object.keys(refObject).join(', ') + '}');
                  }
                }

                var _inst2 = create();

                refObject.current = _inst2;
                return function () {
                  refObject.current = null;
                };
              }
            }

            function mountImperativeHandle(ref, create, deps) {
              {
                if (typeof create !== 'function') {
                  error('Expected useImperativeHandle() second argument to be a function ' + 'that creates a handle. Instead received: %s.', create !== null ? typeof create : 'null');
                }
              } // TODO: If deps are provided, should we skip comparing the ref itself?


              var effectDeps = deps !== null && deps !== undefined ? deps.concat([ref]) : null;
              return mountEffectImpl(Update, Layout, imperativeHandleEffect.bind(null, create, ref), effectDeps);
            }

            function updateImperativeHandle(ref, create, deps) {
              {
                if (typeof create !== 'function') {
                  error('Expected useImperativeHandle() second argument to be a function ' + 'that creates a handle. Instead received: %s.', create !== null ? typeof create : 'null');
                }
              } // TODO: If deps are provided, should we skip comparing the ref itself?


              var effectDeps = deps !== null && deps !== undefined ? deps.concat([ref]) : null;
              return updateEffectImpl(Update, Layout, imperativeHandleEffect.bind(null, create, ref), effectDeps);
            }

            function mountDebugValue(value, formatterFn) {// This hook is normally a no-op.
              // The react-debug-hooks package injects its own implementation
              // so that e.g. DevTools can display custom hook values.
            }

            var updateDebugValue = mountDebugValue;

            function mountCallback(callback, deps) {
              var hook = mountWorkInProgressHook();
              var nextDeps = deps === undefined ? null : deps;
              hook.memoizedState = [callback, nextDeps];
              return callback;
            }

            function updateCallback(callback, deps) {
              var hook = updateWorkInProgressHook();
              var nextDeps = deps === undefined ? null : deps;
              var prevState = hook.memoizedState;

              if (prevState !== null) {
                if (nextDeps !== null) {
                  var prevDeps = prevState[1];

                  if (areHookInputsEqual(nextDeps, prevDeps)) {
                    return prevState[0];
                  }
                }
              }

              hook.memoizedState = [callback, nextDeps];
              return callback;
            }

            function mountMemo(nextCreate, deps) {
              var hook = mountWorkInProgressHook();
              var nextDeps = deps === undefined ? null : deps;
              var nextValue = nextCreate();
              hook.memoizedState = [nextValue, nextDeps];
              return nextValue;
            }

            function updateMemo(nextCreate, deps) {
              var hook = updateWorkInProgressHook();
              var nextDeps = deps === undefined ? null : deps;
              var prevState = hook.memoizedState;

              if (prevState !== null) {
                // Assume these are defined. If they're not, areHookInputsEqual will warn.
                if (nextDeps !== null) {
                  var prevDeps = prevState[1];

                  if (areHookInputsEqual(nextDeps, prevDeps)) {
                    return prevState[0];
                  }
                }
              }

              var nextValue = nextCreate();
              hook.memoizedState = [nextValue, nextDeps];
              return nextValue;
            }

            function mountDeferredValue(value) {
              var _mountState = mountState(value),
                  prevValue = _mountState[0],
                  setValue = _mountState[1];

              mountEffect(function () {
                var prevTransition = ReactCurrentBatchConfig$1.transition;
                ReactCurrentBatchConfig$1.transition = 1;

                try {
                  setValue(value);
                } finally {
                  ReactCurrentBatchConfig$1.transition = prevTransition;
                }
              }, [value]);
              return prevValue;
            }

            function updateDeferredValue(value) {
              var _updateState = updateState(),
                  prevValue = _updateState[0],
                  setValue = _updateState[1];

              updateEffect(function () {
                var prevTransition = ReactCurrentBatchConfig$1.transition;
                ReactCurrentBatchConfig$1.transition = 1;

                try {
                  setValue(value);
                } finally {
                  ReactCurrentBatchConfig$1.transition = prevTransition;
                }
              }, [value]);
              return prevValue;
            }

            function rerenderDeferredValue(value) {
              var _rerenderState = rerenderState(),
                  prevValue = _rerenderState[0],
                  setValue = _rerenderState[1];

              updateEffect(function () {
                var prevTransition = ReactCurrentBatchConfig$1.transition;
                ReactCurrentBatchConfig$1.transition = 1;

                try {
                  setValue(value);
                } finally {
                  ReactCurrentBatchConfig$1.transition = prevTransition;
                }
              }, [value]);
              return prevValue;
            }

            function startTransition(setPending, callback) {
              var priorityLevel = getCurrentPriorityLevel();

              {
                runWithPriority$1(priorityLevel < UserBlockingPriority$2 ? UserBlockingPriority$2 : priorityLevel, function () {
                  setPending(true);
                });
                runWithPriority$1(priorityLevel > NormalPriority$1 ? NormalPriority$1 : priorityLevel, function () {
                  var prevTransition = ReactCurrentBatchConfig$1.transition;
                  ReactCurrentBatchConfig$1.transition = 1;

                  try {
                    setPending(false);
                    callback();
                  } finally {
                    ReactCurrentBatchConfig$1.transition = prevTransition;
                  }
                });
              }
            }

            function mountTransition() {
              var _mountState2 = mountState(false),
                  isPending = _mountState2[0],
                  setPending = _mountState2[1]; // The `start` method can be stored on a ref, since `setPending`
              // never changes.


              var start = startTransition.bind(null, setPending);
              mountRef(start);
              return [start, isPending];
            }

            function updateTransition() {
              var _updateState2 = updateState(),
                  isPending = _updateState2[0];

              var startRef = updateRef();
              var start = startRef.current;
              return [start, isPending];
            }

            function rerenderTransition() {
              var _rerenderState2 = rerenderState(),
                  isPending = _rerenderState2[0];

              var startRef = updateRef();
              var start = startRef.current;
              return [start, isPending];
            }

            var isUpdatingOpaqueValueInRenderPhase = false;
            function getIsUpdatingOpaqueValueInRenderPhaseInDEV() {
              {
                return isUpdatingOpaqueValueInRenderPhase;
              }
            }

            function warnOnOpaqueIdentifierAccessInDEV(fiber) {
              {
                // TODO: Should warn in effects and callbacks, too
                var name = getComponentName(fiber.type) || 'Unknown';

                if (getIsRendering() && !didWarnAboutUseOpaqueIdentifier[name]) {
                  error('The object passed back from useOpaqueIdentifier is meant to be ' + 'passed through to attributes only. Do not read the ' + 'value directly.');

                  didWarnAboutUseOpaqueIdentifier[name] = true;
                }
              }
            }

            function mountOpaqueIdentifier() {
              var makeId =  makeClientIdInDEV.bind(null, warnOnOpaqueIdentifierAccessInDEV.bind(null, currentlyRenderingFiber$1)) ;

              if (getIsHydrating()) {
                var didUpgrade = false;
                var fiber = currentlyRenderingFiber$1;

                var readValue = function () {
                  if (!didUpgrade) {
                    // Only upgrade once. This works even inside the render phase because
                    // the update is added to a shared queue, which outlasts the
                    // in-progress render.
                    didUpgrade = true;

                    {
                      isUpdatingOpaqueValueInRenderPhase = true;
                      setId(makeId());
                      isUpdatingOpaqueValueInRenderPhase = false;
                      warnOnOpaqueIdentifierAccessInDEV(fiber);
                    }
                  }

                  {
                    {
                      throw Error( "The object passed back from useOpaqueIdentifier is meant to be passed through to attributes only. Do not read the value directly." );
                    }
                  }
                };

                var id = makeOpaqueHydratingObject(readValue);
                var setId = mountState(id)[1];

                if ((currentlyRenderingFiber$1.mode & BlockingMode) === NoMode) {
                  currentlyRenderingFiber$1.flags |= Update | Passive;
                  pushEffect(HasEffect | Passive$1, function () {
                    setId(makeId());
                  }, undefined, null);
                }

                return id;
              } else {
                var _id = makeId();

                mountState(_id);
                return _id;
              }
            }

            function updateOpaqueIdentifier() {
              var id = updateState()[0];
              return id;
            }

            function rerenderOpaqueIdentifier() {
              var id = rerenderState()[0];
              return id;
            }

            function dispatchAction(fiber, queue, action) {
              {
                if (typeof arguments[3] === 'function') {
                  error("State updates from the useState() and useReducer() Hooks don't support the " + 'second callback argument. To execute a side effect after ' + 'rendering, declare it in the component body with useEffect().');
                }
              }

              var eventTime = requestEventTime();
              var lane = requestUpdateLane(fiber);
              var update = {
                lane: lane,
                action: action,
                eagerReducer: null,
                eagerState: null,
                next: null
              }; // Append the update to the end of the list.

              var pending = queue.pending;

              if (pending === null) {
                // This is the first update. Create a circular list.
                update.next = update;
              } else {
                update.next = pending.next;
                pending.next = update;
              }

              queue.pending = update;
              var alternate = fiber.alternate;

              if (fiber === currentlyRenderingFiber$1 || alternate !== null && alternate === currentlyRenderingFiber$1) {
                // This is a render phase update. Stash it in a lazily-created map of
                // queue -> linked list of updates. After this render pass, we'll restart
                // and apply the stashed updates on top of the work-in-progress hook.
                didScheduleRenderPhaseUpdateDuringThisPass = didScheduleRenderPhaseUpdate = true;
              } else {
                if (fiber.lanes === NoLanes && (alternate === null || alternate.lanes === NoLanes)) {
                  // The queue is currently empty, which means we can eagerly compute the
                  // next state before entering the render phase. If the new state is the
                  // same as the current state, we may be able to bail out entirely.
                  var lastRenderedReducer = queue.lastRenderedReducer;

                  if (lastRenderedReducer !== null) {
                    var prevDispatcher;

                    {
                      prevDispatcher = ReactCurrentDispatcher$1.current;
                      ReactCurrentDispatcher$1.current = InvalidNestedHooksDispatcherOnUpdateInDEV;
                    }

                    try {
                      var currentState = queue.lastRenderedState;
                      var eagerState = lastRenderedReducer(currentState, action); // Stash the eagerly computed state, and the reducer used to compute
                      // it, on the update object. If the reducer hasn't changed by the
                      // time we enter the render phase, then the eager state can be used
                      // without calling the reducer again.

                      update.eagerReducer = lastRenderedReducer;
                      update.eagerState = eagerState;

                      if (objectIs(eagerState, currentState)) {
                        // Fast path. We can bail out without scheduling React to re-render.
                        // It's still possible that we'll need to rebase this update later,
                        // if the component re-renders for a different reason and by that
                        // time the reducer has changed.
                        return;
                      }
                    } catch (error) {// Suppress the error. It will throw again in the render phase.
                    } finally {
                      {
                        ReactCurrentDispatcher$1.current = prevDispatcher;
                      }
                    }
                  }
                }

                {
                  // $FlowExpectedError - jest isn't a global, and isn't recognized outside of tests
                  if ('undefined' !== typeof jest) {
                    warnIfNotScopedWithMatchingAct(fiber);
                    warnIfNotCurrentlyActingUpdatesInDev(fiber);
                  }
                }

                scheduleUpdateOnFiber(fiber, lane, eventTime);
              }
            }

            var ContextOnlyDispatcher = {
              readContext: readContext,
              useCallback: throwInvalidHookError,
              useContext: throwInvalidHookError,
              useEffect: throwInvalidHookError,
              useImperativeHandle: throwInvalidHookError,
              useLayoutEffect: throwInvalidHookError,
              useMemo: throwInvalidHookError,
              useReducer: throwInvalidHookError,
              useRef: throwInvalidHookError,
              useState: throwInvalidHookError,
              useDebugValue: throwInvalidHookError,
              useDeferredValue: throwInvalidHookError,
              useTransition: throwInvalidHookError,
              useMutableSource: throwInvalidHookError,
              useOpaqueIdentifier: throwInvalidHookError,
              unstable_isNewReconciler: enableNewReconciler
            };
            var HooksDispatcherOnMountInDEV = null;
            var HooksDispatcherOnMountWithHookTypesInDEV = null;
            var HooksDispatcherOnUpdateInDEV = null;
            var HooksDispatcherOnRerenderInDEV = null;
            var InvalidNestedHooksDispatcherOnMountInDEV = null;
            var InvalidNestedHooksDispatcherOnUpdateInDEV = null;
            var InvalidNestedHooksDispatcherOnRerenderInDEV = null;

            {
              var warnInvalidContextAccess = function () {
                error('Context can only be read while React is rendering. ' + 'In classes, you can read it in the render method or getDerivedStateFromProps. ' + 'In function components, you can read it directly in the function body, but not ' + 'inside Hooks like useReducer() or useMemo().');
              };

              var warnInvalidHookAccess = function () {
                error('Do not call Hooks inside useEffect(...), useMemo(...), or other built-in Hooks. ' + 'You can only call Hooks at the top level of your React function. ' + 'For more information, see ' + 'https://reactjs.org/link/rules-of-hooks');
              };

              HooksDispatcherOnMountInDEV = {
                readContext: function (context, observedBits) {
                  return readContext(context, observedBits);
                },
                useCallback: function (callback, deps) {
                  currentHookNameInDev = 'useCallback';
                  mountHookTypesDev();
                  checkDepsAreArrayDev(deps);
                  return mountCallback(callback, deps);
                },
                useContext: function (context, observedBits) {
                  currentHookNameInDev = 'useContext';
                  mountHookTypesDev();
                  return readContext(context, observedBits);
                },
                useEffect: function (create, deps) {
                  currentHookNameInDev = 'useEffect';
                  mountHookTypesDev();
                  checkDepsAreArrayDev(deps);
                  return mountEffect(create, deps);
                },
                useImperativeHandle: function (ref, create, deps) {
                  currentHookNameInDev = 'useImperativeHandle';
                  mountHookTypesDev();
                  checkDepsAreArrayDev(deps);
                  return mountImperativeHandle(ref, create, deps);
                },
                useLayoutEffect: function (create, deps) {
                  currentHookNameInDev = 'useLayoutEffect';
                  mountHookTypesDev();
                  checkDepsAreArrayDev(deps);
                  return mountLayoutEffect(create, deps);
                },
                useMemo: function (create, deps) {
                  currentHookNameInDev = 'useMemo';
                  mountHookTypesDev();
                  checkDepsAreArrayDev(deps);
                  var prevDispatcher = ReactCurrentDispatcher$1.current;
                  ReactCurrentDispatcher$1.current = InvalidNestedHooksDispatcherOnMountInDEV;

                  try {
                    return mountMemo(create, deps);
                  } finally {
                    ReactCurrentDispatcher$1.current = prevDispatcher;
                  }
                },
                useReducer: function (reducer, initialArg, init) {
                  currentHookNameInDev = 'useReducer';
                  mountHookTypesDev();
                  var prevDispatcher = ReactCurrentDispatcher$1.current;
                  ReactCurrentDispatcher$1.current = InvalidNestedHooksDispatcherOnMountInDEV;

                  try {
                    return mountReducer(reducer, initialArg, init);
                  } finally {
                    ReactCurrentDispatcher$1.current = prevDispatcher;
                  }
                },
                useRef: function (initialValue) {
                  currentHookNameInDev = 'useRef';
                  mountHookTypesDev();
                  return mountRef(initialValue);
                },
                useState: function (initialState) {
                  currentHookNameInDev = 'useState';
                  mountHookTypesDev();
                  var prevDispatcher = ReactCurrentDispatcher$1.current;
                  ReactCurrentDispatcher$1.current = InvalidNestedHooksDispatcherOnMountInDEV;

                  try {
                    return mountState(initialState);
                  } finally {
                    ReactCurrentDispatcher$1.current = prevDispatcher;
                  }
                },
                useDebugValue: function (value, formatterFn) {
                  currentHookNameInDev = 'useDebugValue';
                  mountHookTypesDev();
                  return mountDebugValue();
                },
                useDeferredValue: function (value) {
                  currentHookNameInDev = 'useDeferredValue';
                  mountHookTypesDev();
                  return mountDeferredValue(value);
                },
                useTransition: function () {
                  currentHookNameInDev = 'useTransition';
                  mountHookTypesDev();
                  return mountTransition();
                },
                useMutableSource: function (source, getSnapshot, subscribe) {
                  currentHookNameInDev = 'useMutableSource';
                  mountHookTypesDev();
                  return mountMutableSource(source, getSnapshot, subscribe);
                },
                useOpaqueIdentifier: function () {
                  currentHookNameInDev = 'useOpaqueIdentifier';
                  mountHookTypesDev();
                  return mountOpaqueIdentifier();
                },
                unstable_isNewReconciler: enableNewReconciler
              };
              HooksDispatcherOnMountWithHookTypesInDEV = {
                readContext: function (context, observedBits) {
                  return readContext(context, observedBits);
                },
                useCallback: function (callback, deps) {
                  currentHookNameInDev = 'useCallback';
                  updateHookTypesDev();
                  return mountCallback(callback, deps);
                },
                useContext: function (context, observedBits) {
                  currentHookNameInDev = 'useContext';
                  updateHookTypesDev();
                  return readContext(context, observedBits);
                },
                useEffect: function (create, deps) {
                  currentHookNameInDev = 'useEffect';
                  updateHookTypesDev();
                  return mountEffect(create, deps);
                },
                useImperativeHandle: function (ref, create, deps) {
                  currentHookNameInDev = 'useImperativeHandle';
                  updateHookTypesDev();
                  return mountImperativeHandle(ref, create, deps);
                },
                useLayoutEffect: function (create, deps) {
                  currentHookNameInDev = 'useLayoutEffect';
                  updateHookTypesDev();
                  return mountLayoutEffect(create, deps);
                },
                useMemo: function (create, deps) {
                  currentHookNameInDev = 'useMemo';
                  updateHookTypesDev();
                  var prevDispatcher = ReactCurrentDispatcher$1.current;
                  ReactCurrentDispatcher$1.current = InvalidNestedHooksDispatcherOnMountInDEV;

                  try {
                    return mountMemo(create, deps);
                  } finally {
                    ReactCurrentDispatcher$1.current = prevDispatcher;
                  }
                },
                useReducer: function (reducer, initialArg, init) {
                  currentHookNameInDev = 'useReducer';
                  updateHookTypesDev();
                  var prevDispatcher = ReactCurrentDispatcher$1.current;
                  ReactCurrentDispatcher$1.current = InvalidNestedHooksDispatcherOnMountInDEV;

                  try {
                    return mountReducer(reducer, initialArg, init);
                  } finally {
                    ReactCurrentDispatcher$1.current = prevDispatcher;
                  }
                },
                useRef: function (initialValue) {
                  currentHookNameInDev = 'useRef';
                  updateHookTypesDev();
                  return mountRef(initialValue);
                },
                useState: function (initialState) {
                  currentHookNameInDev = 'useState';
                  updateHookTypesDev();
                  var prevDispatcher = ReactCurrentDispatcher$1.current;
                  ReactCurrentDispatcher$1.current = InvalidNestedHooksDispatcherOnMountInDEV;

                  try {
                    return mountState(initialState);
                  } finally {
                    ReactCurrentDispatcher$1.current = prevDispatcher;
                  }
                },
                useDebugValue: function (value, formatterFn) {
                  currentHookNameInDev = 'useDebugValue';
                  updateHookTypesDev();
                  return mountDebugValue();
                },
                useDeferredValue: function (value) {
                  currentHookNameInDev = 'useDeferredValue';
                  updateHookTypesDev();
                  return mountDeferredValue(value);
                },
                useTransition: function () {
                  currentHookNameInDev = 'useTransition';
                  updateHookTypesDev();
                  return mountTransition();
                },
                useMutableSource: function (source, getSnapshot, subscribe) {
                  currentHookNameInDev = 'useMutableSource';
                  updateHookTypesDev();
                  return mountMutableSource(source, getSnapshot, subscribe);
                },
                useOpaqueIdentifier: function () {
                  currentHookNameInDev = 'useOpaqueIdentifier';
                  updateHookTypesDev();
                  return mountOpaqueIdentifier();
                },
                unstable_isNewReconciler: enableNewReconciler
              };
              HooksDispatcherOnUpdateInDEV = {
                readContext: function (context, observedBits) {
                  return readContext(context, observedBits);
                },
                useCallback: function (callback, deps) {
                  currentHookNameInDev = 'useCallback';
                  updateHookTypesDev();
                  return updateCallback(callback, deps);
                },
                useContext: function (context, observedBits) {
                  currentHookNameInDev = 'useContext';
                  updateHookTypesDev();
                  return readContext(context, observedBits);
                },
                useEffect: function (create, deps) {
                  currentHookNameInDev = 'useEffect';
                  updateHookTypesDev();
                  return updateEffect(create, deps);
                },
                useImperativeHandle: function (ref, create, deps) {
                  currentHookNameInDev = 'useImperativeHandle';
                  updateHookTypesDev();
                  return updateImperativeHandle(ref, create, deps);
                },
                useLayoutEffect: function (create, deps) {
                  currentHookNameInDev = 'useLayoutEffect';
                  updateHookTypesDev();
                  return updateLayoutEffect(create, deps);
                },
                useMemo: function (create, deps) {
                  currentHookNameInDev = 'useMemo';
                  updateHookTypesDev();
                  var prevDispatcher = ReactCurrentDispatcher$1.current;
                  ReactCurrentDispatcher$1.current = InvalidNestedHooksDispatcherOnUpdateInDEV;

                  try {
                    return updateMemo(create, deps);
                  } finally {
                    ReactCurrentDispatcher$1.current = prevDispatcher;
                  }
                },
                useReducer: function (reducer, initialArg, init) {
                  currentHookNameInDev = 'useReducer';
                  updateHookTypesDev();
                  var prevDispatcher = ReactCurrentDispatcher$1.current;
                  ReactCurrentDispatcher$1.current = InvalidNestedHooksDispatcherOnUpdateInDEV;

                  try {
                    return updateReducer(reducer, initialArg, init);
                  } finally {
                    ReactCurrentDispatcher$1.current = prevDispatcher;
                  }
                },
                useRef: function (initialValue) {
                  currentHookNameInDev = 'useRef';
                  updateHookTypesDev();
                  return updateRef();
                },
                useState: function (initialState) {
                  currentHookNameInDev = 'useState';
                  updateHookTypesDev();
                  var prevDispatcher = ReactCurrentDispatcher$1.current;
                  ReactCurrentDispatcher$1.current = InvalidNestedHooksDispatcherOnUpdateInDEV;

                  try {
                    return updateState(initialState);
                  } finally {
                    ReactCurrentDispatcher$1.current = prevDispatcher;
                  }
                },
                useDebugValue: function (value, formatterFn) {
                  currentHookNameInDev = 'useDebugValue';
                  updateHookTypesDev();
                  return updateDebugValue();
                },
                useDeferredValue: function (value) {
                  currentHookNameInDev = 'useDeferredValue';
                  updateHookTypesDev();
                  return updateDeferredValue(value);
                },
                useTransition: function () {
                  currentHookNameInDev = 'useTransition';
                  updateHookTypesDev();
                  return updateTransition();
                },
                useMutableSource: function (source, getSnapshot, subscribe) {
                  currentHookNameInDev = 'useMutableSource';
                  updateHookTypesDev();
                  return updateMutableSource(source, getSnapshot, subscribe);
                },
                useOpaqueIdentifier: function () {
                  currentHookNameInDev = 'useOpaqueIdentifier';
                  updateHookTypesDev();
                  return updateOpaqueIdentifier();
                },
                unstable_isNewReconciler: enableNewReconciler
              };
              HooksDispatcherOnRerenderInDEV = {
                readContext: function (context, observedBits) {
                  return readContext(context, observedBits);
                },
                useCallback: function (callback, deps) {
                  currentHookNameInDev = 'useCallback';
                  updateHookTypesDev();
                  return updateCallback(callback, deps);
                },
                useContext: function (context, observedBits) {
                  currentHookNameInDev = 'useContext';
                  updateHookTypesDev();
                  return readContext(context, observedBits);
                },
                useEffect: function (create, deps) {
                  currentHookNameInDev = 'useEffect';
                  updateHookTypesDev();
                  return updateEffect(create, deps);
                },
                useImperativeHandle: function (ref, create, deps) {
                  currentHookNameInDev = 'useImperativeHandle';
                  updateHookTypesDev();
                  return updateImperativeHandle(ref, create, deps);
                },
                useLayoutEffect: function (create, deps) {
                  currentHookNameInDev = 'useLayoutEffect';
                  updateHookTypesDev();
                  return updateLayoutEffect(create, deps);
                },
                useMemo: function (create, deps) {
                  currentHookNameInDev = 'useMemo';
                  updateHookTypesDev();
                  var prevDispatcher = ReactCurrentDispatcher$1.current;
                  ReactCurrentDispatcher$1.current = InvalidNestedHooksDispatcherOnRerenderInDEV;

                  try {
                    return updateMemo(create, deps);
                  } finally {
                    ReactCurrentDispatcher$1.current = prevDispatcher;
                  }
                },
                useReducer: function (reducer, initialArg, init) {
                  currentHookNameInDev = 'useReducer';
                  updateHookTypesDev();
                  var prevDispatcher = ReactCurrentDispatcher$1.current;
                  ReactCurrentDispatcher$1.current = InvalidNestedHooksDispatcherOnRerenderInDEV;

                  try {
                    return rerenderReducer(reducer, initialArg, init);
                  } finally {
                    ReactCurrentDispatcher$1.current = prevDispatcher;
                  }
                },
                useRef: function (initialValue) {
                  currentHookNameInDev = 'useRef';
                  updateHookTypesDev();
                  return updateRef();
                },
                useState: function (initialState) {
                  currentHookNameInDev = 'useState';
                  updateHookTypesDev();
                  var prevDispatcher = ReactCurrentDispatcher$1.current;
                  ReactCurrentDispatcher$1.current = InvalidNestedHooksDispatcherOnRerenderInDEV;

                  try {
                    return rerenderState(initialState);
                  } finally {
                    ReactCurrentDispatcher$1.current = prevDispatcher;
                  }
                },
                useDebugValue: function (value, formatterFn) {
                  currentHookNameInDev = 'useDebugValue';
                  updateHookTypesDev();
                  return updateDebugValue();
                },
                useDeferredValue: function (value) {
                  currentHookNameInDev = 'useDeferredValue';
                  updateHookTypesDev();
                  return rerenderDeferredValue(value);
                },
                useTransition: function () {
                  currentHookNameInDev = 'useTransition';
                  updateHookTypesDev();
                  return rerenderTransition();
                },
                useMutableSource: function (source, getSnapshot, subscribe) {
                  currentHookNameInDev = 'useMutableSource';
                  updateHookTypesDev();
                  return updateMutableSource(source, getSnapshot, subscribe);
                },
                useOpaqueIdentifier: function () {
                  currentHookNameInDev = 'useOpaqueIdentifier';
                  updateHookTypesDev();
                  return rerenderOpaqueIdentifier();
                },
                unstable_isNewReconciler: enableNewReconciler
              };
              InvalidNestedHooksDispatcherOnMountInDEV = {
                readContext: function (context, observedBits) {
                  warnInvalidContextAccess();
                  return readContext(context, observedBits);
                },
                useCallback: function (callback, deps) {
                  currentHookNameInDev = 'useCallback';
                  warnInvalidHookAccess();
                  mountHookTypesDev();
                  return mountCallback(callback, deps);
                },
                useContext: function (context, observedBits) {
                  currentHookNameInDev = 'useContext';
                  warnInvalidHookAccess();
                  mountHookTypesDev();
                  return readContext(context, observedBits);
                },
                useEffect: function (create, deps) {
                  currentHookNameInDev = 'useEffect';
                  warnInvalidHookAccess();
                  mountHookTypesDev();
                  return mountEffect(create, deps);
                },
                useImperativeHandle: function (ref, create, deps) {
                  currentHookNameInDev = 'useImperativeHandle';
                  warnInvalidHookAccess();
                  mountHookTypesDev();
                  return mountImperativeHandle(ref, create, deps);
                },
                useLayoutEffect: function (create, deps) {
                  currentHookNameInDev = 'useLayoutEffect';
                  warnInvalidHookAccess();
                  mountHookTypesDev();
                  return mountLayoutEffect(create, deps);
                },
                useMemo: function (create, deps) {
                  currentHookNameInDev = 'useMemo';
                  warnInvalidHookAccess();
                  mountHookTypesDev();
                  var prevDispatcher = ReactCurrentDispatcher$1.current;
                  ReactCurrentDispatcher$1.current = InvalidNestedHooksDispatcherOnMountInDEV;

                  try {
                    return mountMemo(create, deps);
                  } finally {
                    ReactCurrentDispatcher$1.current = prevDispatcher;
                  }
                },
                useReducer: function (reducer, initialArg, init) {
                  currentHookNameInDev = 'useReducer';
                  warnInvalidHookAccess();
                  mountHookTypesDev();
                  var prevDispatcher = ReactCurrentDispatcher$1.current;
                  ReactCurrentDispatcher$1.current = InvalidNestedHooksDispatcherOnMountInDEV;

                  try {
                    return mountReducer(reducer, initialArg, init);
                  } finally {
                    ReactCurrentDispatcher$1.current = prevDispatcher;
                  }
                },
                useRef: function (initialValue) {
                  currentHookNameInDev = 'useRef';
                  warnInvalidHookAccess();
                  mountHookTypesDev();
                  return mountRef(initialValue);
                },
                useState: function (initialState) {
                  currentHookNameInDev = 'useState';
                  warnInvalidHookAccess();
                  mountHookTypesDev();
                  var prevDispatcher = ReactCurrentDispatcher$1.current;
                  ReactCurrentDispatcher$1.current = InvalidNestedHooksDispatcherOnMountInDEV;

                  try {
                    return mountState(initialState);
                  } finally {
                    ReactCurrentDispatcher$1.current = prevDispatcher;
                  }
                },
                useDebugValue: function (value, formatterFn) {
                  currentHookNameInDev = 'useDebugValue';
                  warnInvalidHookAccess();
                  mountHookTypesDev();
                  return mountDebugValue();
                },
                useDeferredValue: function (value) {
                  currentHookNameInDev = 'useDeferredValue';
                  warnInvalidHookAccess();
                  mountHookTypesDev();
                  return mountDeferredValue(value);
                },
                useTransition: function () {
                  currentHookNameInDev = 'useTransition';
                  warnInvalidHookAccess();
                  mountHookTypesDev();
                  return mountTransition();
                },
                useMutableSource: function (source, getSnapshot, subscribe) {
                  currentHookNameInDev = 'useMutableSource';
                  warnInvalidHookAccess();
                  mountHookTypesDev();
                  return mountMutableSource(source, getSnapshot, subscribe);
                },
                useOpaqueIdentifier: function () {
                  currentHookNameInDev = 'useOpaqueIdentifier';
                  warnInvalidHookAccess();
                  mountHookTypesDev();
                  return mountOpaqueIdentifier();
                },
                unstable_isNewReconciler: enableNewReconciler
              };
              InvalidNestedHooksDispatcherOnUpdateInDEV = {
                readContext: function (context, observedBits) {
                  warnInvalidContextAccess();
                  return readContext(context, observedBits);
                },
                useCallback: function (callback, deps) {
                  currentHookNameInDev = 'useCallback';
                  warnInvalidHookAccess();
                  updateHookTypesDev();
                  return updateCallback(callback, deps);
                },
                useContext: function (context, observedBits) {
                  currentHookNameInDev = 'useContext';
                  warnInvalidHookAccess();
                  updateHookTypesDev();
                  return readContext(context, observedBits);
                },
                useEffect: function (create, deps) {
                  currentHookNameInDev = 'useEffect';
                  warnInvalidHookAccess();
                  updateHookTypesDev();
                  return updateEffect(create, deps);
                },
                useImperativeHandle: function (ref, create, deps) {
                  currentHookNameInDev = 'useImperativeHandle';
                  warnInvalidHookAccess();
                  updateHookTypesDev();
                  return updateImperativeHandle(ref, create, deps);
                },
                useLayoutEffect: function (create, deps) {
                  currentHookNameInDev = 'useLayoutEffect';
                  warnInvalidHookAccess();
                  updateHookTypesDev();
                  return updateLayoutEffect(create, deps);
                },
                useMemo: function (create, deps) {
                  currentHookNameInDev = 'useMemo';
                  warnInvalidHookAccess();
                  updateHookTypesDev();
                  var prevDispatcher = ReactCurrentDispatcher$1.current;
                  ReactCurrentDispatcher$1.current = InvalidNestedHooksDispatcherOnUpdateInDEV;

                  try {
                    return updateMemo(create, deps);
                  } finally {
                    ReactCurrentDispatcher$1.current = prevDispatcher;
                  }
                },
                useReducer: function (reducer, initialArg, init) {
                  currentHookNameInDev = 'useReducer';
                  warnInvalidHookAccess();
                  updateHookTypesDev();
                  var prevDispatcher = ReactCurrentDispatcher$1.current;
                  ReactCurrentDispatcher$1.current = InvalidNestedHooksDispatcherOnUpdateInDEV;

                  try {
                    return updateReducer(reducer, initialArg, init);
                  } finally {
                    ReactCurrentDispatcher$1.current = prevDispatcher;
                  }
                },
                useRef: function (initialValue) {
                  currentHookNameInDev = 'useRef';
                  warnInvalidHookAccess();
                  updateHookTypesDev();
                  return updateRef();
                },
                useState: function (initialState) {
                  currentHookNameInDev = 'useState';
                  warnInvalidHookAccess();
                  updateHookTypesDev();
                  var prevDispatcher = ReactCurrentDispatcher$1.current;
                  ReactCurrentDispatcher$1.current = InvalidNestedHooksDispatcherOnUpdateInDEV;

                  try {
                    return updateState(initialState);
                  } finally {
                    ReactCurrentDispatcher$1.current = prevDispatcher;
                  }
                },
                useDebugValue: function (value, formatterFn) {
                  currentHookNameInDev = 'useDebugValue';
                  warnInvalidHookAccess();
                  updateHookTypesDev();
                  return updateDebugValue();
                },
                useDeferredValue: function (value) {
                  currentHookNameInDev = 'useDeferredValue';
                  warnInvalidHookAccess();
                  updateHookTypesDev();
                  return updateDeferredValue(value);
                },
                useTransition: function () {
                  currentHookNameInDev = 'useTransition';
                  warnInvalidHookAccess();
                  updateHookTypesDev();
                  return updateTransition();
                },
                useMutableSource: function (source, getSnapshot, subscribe) {
                  currentHookNameInDev = 'useMutableSource';
                  warnInvalidHookAccess();
                  updateHookTypesDev();
                  return updateMutableSource(source, getSnapshot, subscribe);
                },
                useOpaqueIdentifier: function () {
                  currentHookNameInDev = 'useOpaqueIdentifier';
                  warnInvalidHookAccess();
                  updateHookTypesDev();
                  return updateOpaqueIdentifier();
                },
                unstable_isNewReconciler: enableNewReconciler
              };
              InvalidNestedHooksDispatcherOnRerenderInDEV = {
                readContext: function (context, observedBits) {
                  warnInvalidContextAccess();
                  return readContext(context, observedBits);
                },
                useCallback: function (callback, deps) {
                  currentHookNameInDev = 'useCallback';
                  warnInvalidHookAccess();
                  updateHookTypesDev();
                  return updateCallback(callback, deps);
                },
                useContext: function (context, observedBits) {
                  currentHookNameInDev = 'useContext';
                  warnInvalidHookAccess();
                  updateHookTypesDev();
                  return readContext(context, observedBits);
                },
                useEffect: function (create, deps) {
                  currentHookNameInDev = 'useEffect';
                  warnInvalidHookAccess();
                  updateHookTypesDev();
                  return updateEffect(create, deps);
                },
                useImperativeHandle: function (ref, create, deps) {
                  currentHookNameInDev = 'useImperativeHandle';
                  warnInvalidHookAccess();
                  updateHookTypesDev();
                  return updateImperativeHandle(ref, create, deps);
                },
                useLayoutEffect: function (create, deps) {
                  currentHookNameInDev = 'useLayoutEffect';
                  warnInvalidHookAccess();
                  updateHookTypesDev();
                  return updateLayoutEffect(create, deps);
                },
                useMemo: function (create, deps) {
                  currentHookNameInDev = 'useMemo';
                  warnInvalidHookAccess();
                  updateHookTypesDev();
                  var prevDispatcher = ReactCurrentDispatcher$1.current;
                  ReactCurrentDispatcher$1.current = InvalidNestedHooksDispatcherOnUpdateInDEV;

                  try {
                    return updateMemo(create, deps);
                  } finally {
                    ReactCurrentDispatcher$1.current = prevDispatcher;
                  }
                },
                useReducer: function (reducer, initialArg, init) {
                  currentHookNameInDev = 'useReducer';
                  warnInvalidHookAccess();
                  updateHookTypesDev();
                  var prevDispatcher = ReactCurrentDispatcher$1.current;
                  ReactCurrentDispatcher$1.current = InvalidNestedHooksDispatcherOnUpdateInDEV;

                  try {
                    return rerenderReducer(reducer, initialArg, init);
                  } finally {
                    ReactCurrentDispatcher$1.current = prevDispatcher;
                  }
                },
                useRef: function (initialValue) {
                  currentHookNameInDev = 'useRef';
                  warnInvalidHookAccess();
                  updateHookTypesDev();
                  return updateRef();
                },
                useState: function (initialState) {
                  currentHookNameInDev = 'useState';
                  warnInvalidHookAccess();
                  updateHookTypesDev();
                  var prevDispatcher = ReactCurrentDispatcher$1.current;
                  ReactCurrentDispatcher$1.current = InvalidNestedHooksDispatcherOnUpdateInDEV;

                  try {
                    return rerenderState(initialState);
                  } finally {
                    ReactCurrentDispatcher$1.current = prevDispatcher;
                  }
                },
                useDebugValue: function (value, formatterFn) {
                  currentHookNameInDev = 'useDebugValue';
                  warnInvalidHookAccess();
                  updateHookTypesDev();
                  return updateDebugValue();
                },
                useDeferredValue: function (value) {
                  currentHookNameInDev = 'useDeferredValue';
                  warnInvalidHookAccess();
                  updateHookTypesDev();
                  return rerenderDeferredValue(value);
                },
                useTransition: function () {
                  currentHookNameInDev = 'useTransition';
                  warnInvalidHookAccess();
                  updateHookTypesDev();
                  return rerenderTransition();
                },
                useMutableSource: function (source, getSnapshot, subscribe) {
                  currentHookNameInDev = 'useMutableSource';
                  warnInvalidHookAccess();
                  updateHookTypesDev();
                  return updateMutableSource(source, getSnapshot, subscribe);
                },
                useOpaqueIdentifier: function () {
                  currentHookNameInDev = 'useOpaqueIdentifier';
                  warnInvalidHookAccess();
                  updateHookTypesDev();
                  return rerenderOpaqueIdentifier();
                },
                unstable_isNewReconciler: enableNewReconciler
              };
            }

            var now$1 = Scheduler.unstable_now;
            var commitTime = 0;
            var profilerStartTime = -1;

            function getCommitTime() {
              return commitTime;
            }

            function recordCommitTime() {

              commitTime = now$1();
            }

            function startProfilerTimer(fiber) {

              profilerStartTime = now$1();

              if (fiber.actualStartTime < 0) {
                fiber.actualStartTime = now$1();
              }
            }

            function stopProfilerTimerIfRunning(fiber) {

              profilerStartTime = -1;
            }

            function stopProfilerTimerIfRunningAndRecordDelta(fiber, overrideBaseTime) {

              if (profilerStartTime >= 0) {
                var elapsedTime = now$1() - profilerStartTime;
                fiber.actualDuration += elapsedTime;

                if (overrideBaseTime) {
                  fiber.selfBaseDuration = elapsedTime;
                }

                profilerStartTime = -1;
              }
            }

            function transferActualDuration(fiber) {
              // Transfer time spent rendering these children so we don't lose it
              // after we rerender. This is used as a helper in special cases
              // where we should count the work of multiple passes.
              var child = fiber.child;

              while (child) {
                fiber.actualDuration += child.actualDuration;
                child = child.sibling;
              }
            }

            var ReactCurrentOwner$1 = ReactSharedInternals.ReactCurrentOwner;
            var didReceiveUpdate = false;
            var didWarnAboutBadClass;
            var didWarnAboutModulePatternComponent;
            var didWarnAboutContextTypeOnFunctionComponent;
            var didWarnAboutGetDerivedStateOnFunctionComponent;
            var didWarnAboutFunctionRefs;
            var didWarnAboutReassigningProps;
            var didWarnAboutRevealOrder;
            var didWarnAboutTailOptions;

            {
              didWarnAboutBadClass = {};
              didWarnAboutModulePatternComponent = {};
              didWarnAboutContextTypeOnFunctionComponent = {};
              didWarnAboutGetDerivedStateOnFunctionComponent = {};
              didWarnAboutFunctionRefs = {};
              didWarnAboutReassigningProps = false;
              didWarnAboutRevealOrder = {};
              didWarnAboutTailOptions = {};
            }

            function reconcileChildren(current, workInProgress, nextChildren, renderLanes) {
              if (current === null) {
                // If this is a fresh new component that hasn't been rendered yet, we
                // won't update its child set by applying minimal side-effects. Instead,
                // we will add them all to the child before it gets rendered. That means
                // we can optimize this reconciliation pass by not tracking side-effects.
                workInProgress.child = mountChildFibers(workInProgress, null, nextChildren, renderLanes);
              } else {
                // If the current child is the same as the work in progress, it means that
                // we haven't yet started any work on these children. Therefore, we use
                // the clone algorithm to create a copy of all the current children.
                // If we had any progressed work already, that is invalid at this point so
                // let's throw it out.
                workInProgress.child = reconcileChildFibers(workInProgress, current.child, nextChildren, renderLanes);
              }
            }

            function forceUnmountCurrentAndReconcile(current, workInProgress, nextChildren, renderLanes) {
              // This function is fork of reconcileChildren. It's used in cases where we
              // want to reconcile without matching against the existing set. This has the
              // effect of all current children being unmounted; even if the type and key
              // are the same, the old child is unmounted and a new child is created.
              //
              // To do this, we're going to go through the reconcile algorithm twice. In
              // the first pass, we schedule a deletion for all the current children by
              // passing null.
              workInProgress.child = reconcileChildFibers(workInProgress, current.child, null, renderLanes); // In the second pass, we mount the new children. The trick here is that we
              // pass null in place of where we usually pass the current child set. This has
              // the effect of remounting all children regardless of whether their
              // identities match.

              workInProgress.child = reconcileChildFibers(workInProgress, null, nextChildren, renderLanes);
            }

            function updateForwardRef(current, workInProgress, Component, nextProps, renderLanes) {
              // TODO: current can be non-null here even if the component
              // hasn't yet mounted. This happens after the first render suspends.
              // We'll need to figure out if this is fine or can cause issues.
              {
                if (workInProgress.type !== workInProgress.elementType) {
                  // Lazy component props can't be validated in createElement
                  // because they're only guaranteed to be resolved here.
                  var innerPropTypes = Component.propTypes;

                  if (innerPropTypes) {
                    checkPropTypes(innerPropTypes, nextProps, // Resolved props
                    'prop', getComponentName(Component));
                  }
                }
              }

              var render = Component.render;
              var ref = workInProgress.ref; // The rest is a fork of updateFunctionComponent

              var nextChildren;
              prepareToReadContext(workInProgress, renderLanes);

              {
                ReactCurrentOwner$1.current = workInProgress;
                setIsRendering(true);
                nextChildren = renderWithHooks(current, workInProgress, render, nextProps, ref, renderLanes);

                if ( workInProgress.mode & StrictMode) {
                  disableLogs();

                  try {
                    nextChildren = renderWithHooks(current, workInProgress, render, nextProps, ref, renderLanes);
                  } finally {
                    reenableLogs();
                  }
                }

                setIsRendering(false);
              }

              if (current !== null && !didReceiveUpdate) {
                bailoutHooks(current, workInProgress, renderLanes);
                return bailoutOnAlreadyFinishedWork(current, workInProgress, renderLanes);
              } // React DevTools reads this flag.


              workInProgress.flags |= PerformedWork;
              reconcileChildren(current, workInProgress, nextChildren, renderLanes);
              return workInProgress.child;
            }

            function updateMemoComponent(current, workInProgress, Component, nextProps, updateLanes, renderLanes) {
              if (current === null) {
                var type = Component.type;

                if (isSimpleFunctionComponent(type) && Component.compare === null && // SimpleMemoComponent codepath doesn't resolve outer props either.
                Component.defaultProps === undefined) {
                  var resolvedType = type;

                  {
                    resolvedType = resolveFunctionForHotReloading(type);
                  } // If this is a plain function component without default props,
                  // and with only the default shallow comparison, we upgrade it
                  // to a SimpleMemoComponent to allow fast path updates.


                  workInProgress.tag = SimpleMemoComponent;
                  workInProgress.type = resolvedType;

                  {
                    validateFunctionComponentInDev(workInProgress, type);
                  }

                  return updateSimpleMemoComponent(current, workInProgress, resolvedType, nextProps, updateLanes, renderLanes);
                }

                {
                  var innerPropTypes = type.propTypes;

                  if (innerPropTypes) {
                    // Inner memo component props aren't currently validated in createElement.
                    // We could move it there, but we'd still need this for lazy code path.
                    checkPropTypes(innerPropTypes, nextProps, // Resolved props
                    'prop', getComponentName(type));
                  }
                }

                var child = createFiberFromTypeAndProps(Component.type, null, nextProps, workInProgress, workInProgress.mode, renderLanes);
                child.ref = workInProgress.ref;
                child.return = workInProgress;
                workInProgress.child = child;
                return child;
              }

              {
                var _type = Component.type;
                var _innerPropTypes = _type.propTypes;

                if (_innerPropTypes) {
                  // Inner memo component props aren't currently validated in createElement.
                  // We could move it there, but we'd still need this for lazy code path.
                  checkPropTypes(_innerPropTypes, nextProps, // Resolved props
                  'prop', getComponentName(_type));
                }
              }

              var currentChild = current.child; // This is always exactly one child

              if (!includesSomeLane(updateLanes, renderLanes)) {
                // This will be the props with resolved defaultProps,
                // unlike current.memoizedProps which will be the unresolved ones.
                var prevProps = currentChild.memoizedProps; // Default to shallow comparison

                var compare = Component.compare;
                compare = compare !== null ? compare : shallowEqual;

                if (compare(prevProps, nextProps) && current.ref === workInProgress.ref) {
                  return bailoutOnAlreadyFinishedWork(current, workInProgress, renderLanes);
                }
              } // React DevTools reads this flag.


              workInProgress.flags |= PerformedWork;
              var newChild = createWorkInProgress(currentChild, nextProps);
              newChild.ref = workInProgress.ref;
              newChild.return = workInProgress;
              workInProgress.child = newChild;
              return newChild;
            }

            function updateSimpleMemoComponent(current, workInProgress, Component, nextProps, updateLanes, renderLanes) {
              // TODO: current can be non-null here even if the component
              // hasn't yet mounted. This happens when the inner render suspends.
              // We'll need to figure out if this is fine or can cause issues.
              {
                if (workInProgress.type !== workInProgress.elementType) {
                  // Lazy component props can't be validated in createElement
                  // because they're only guaranteed to be resolved here.
                  var outerMemoType = workInProgress.elementType;

                  if (outerMemoType.$$typeof === REACT_LAZY_TYPE) {
                    // We warn when you define propTypes on lazy()
                    // so let's just skip over it to find memo() outer wrapper.
                    // Inner props for memo are validated later.
                    var lazyComponent = outerMemoType;
                    var payload = lazyComponent._payload;
                    var init = lazyComponent._init;

                    try {
                      outerMemoType = init(payload);
                    } catch (x) {
                      outerMemoType = null;
                    } // Inner propTypes will be validated in the function component path.


                    var outerPropTypes = outerMemoType && outerMemoType.propTypes;

                    if (outerPropTypes) {
                      checkPropTypes(outerPropTypes, nextProps, // Resolved (SimpleMemoComponent has no defaultProps)
                      'prop', getComponentName(outerMemoType));
                    }
                  }
                }
              }

              if (current !== null) {
                var prevProps = current.memoizedProps;

                if (shallowEqual(prevProps, nextProps) && current.ref === workInProgress.ref && ( // Prevent bailout if the implementation changed due to hot reload.
                 workInProgress.type === current.type )) {
                  didReceiveUpdate = false;

                  if (!includesSomeLane(renderLanes, updateLanes)) {
                    // The pending lanes were cleared at the beginning of beginWork. We're
                    // about to bail out, but there might be other lanes that weren't
                    // included in the current render. Usually, the priority level of the
                    // remaining updates is accumlated during the evaluation of the
                    // component (i.e. when processing the update queue). But since since
                    // we're bailing out early *without* evaluating the component, we need
                    // to account for it here, too. Reset to the value of the current fiber.
                    // NOTE: This only applies to SimpleMemoComponent, not MemoComponent,
                    // because a MemoComponent fiber does not have hooks or an update queue;
                    // rather, it wraps around an inner component, which may or may not
                    // contains hooks.
                    // TODO: Move the reset at in beginWork out of the common path so that
                    // this is no longer necessary.
                    workInProgress.lanes = current.lanes;
                    return bailoutOnAlreadyFinishedWork(current, workInProgress, renderLanes);
                  } else if ((current.flags & ForceUpdateForLegacySuspense) !== NoFlags) {
                    // This is a special case that only exists for legacy mode.
                    // See https://github.com/facebook/react/pull/19216.
                    didReceiveUpdate = true;
                  }
                }
              }

              return updateFunctionComponent(current, workInProgress, Component, nextProps, renderLanes);
            }

            function updateOffscreenComponent(current, workInProgress, renderLanes) {
              var nextProps = workInProgress.pendingProps;
              var nextChildren = nextProps.children;
              var prevState = current !== null ? current.memoizedState : null;

              if (nextProps.mode === 'hidden' || nextProps.mode === 'unstable-defer-without-hiding') {
                if ((workInProgress.mode & ConcurrentMode) === NoMode) {
                  // In legacy sync mode, don't defer the subtree. Render it now.
                  // TODO: Figure out what we should do in Blocking mode.
                  var nextState = {
                    baseLanes: NoLanes
                  };
                  workInProgress.memoizedState = nextState;
                  pushRenderLanes(workInProgress, renderLanes);
                } else if (!includesSomeLane(renderLanes, OffscreenLane)) {
                  var nextBaseLanes;

                  if (prevState !== null) {
                    var prevBaseLanes = prevState.baseLanes;
                    nextBaseLanes = mergeLanes(prevBaseLanes, renderLanes);
                  } else {
                    nextBaseLanes = renderLanes;
                  } // Schedule this fiber to re-render at offscreen priority. Then bailout.


                  {
                    markSpawnedWork(OffscreenLane);
                  }

                  workInProgress.lanes = workInProgress.childLanes = laneToLanes(OffscreenLane);
                  var _nextState = {
                    baseLanes: nextBaseLanes
                  };
                  workInProgress.memoizedState = _nextState; // We're about to bail out, but we need to push this to the stack anyway
                  // to avoid a push/pop misalignment.

                  pushRenderLanes(workInProgress, nextBaseLanes);
                  return null;
                } else {
                  // Rendering at offscreen, so we can clear the base lanes.
                  var _nextState2 = {
                    baseLanes: NoLanes
                  };
                  workInProgress.memoizedState = _nextState2; // Push the lanes that were skipped when we bailed out.

                  var subtreeRenderLanes = prevState !== null ? prevState.baseLanes : renderLanes;
                  pushRenderLanes(workInProgress, subtreeRenderLanes);
                }
              } else {
                var _subtreeRenderLanes;

                if (prevState !== null) {
                  _subtreeRenderLanes = mergeLanes(prevState.baseLanes, renderLanes); // Since we're not hidden anymore, reset the state

                  workInProgress.memoizedState = null;
                } else {
                  // We weren't previously hidden, and we still aren't, so there's nothing
                  // special to do. Need to push to the stack regardless, though, to avoid
                  // a push/pop misalignment.
                  _subtreeRenderLanes = renderLanes;
                }

                pushRenderLanes(workInProgress, _subtreeRenderLanes);
              }

              reconcileChildren(current, workInProgress, nextChildren, renderLanes);
              return workInProgress.child;
            } // Note: These happen to have identical begin phases, for now. We shouldn't hold
            // ourselves to this constraint, though. If the behavior diverges, we should
            // fork the function.


            var updateLegacyHiddenComponent = updateOffscreenComponent;

            function updateFragment(current, workInProgress, renderLanes) {
              var nextChildren = workInProgress.pendingProps;
              reconcileChildren(current, workInProgress, nextChildren, renderLanes);
              return workInProgress.child;
            }

            function updateMode(current, workInProgress, renderLanes) {
              var nextChildren = workInProgress.pendingProps.children;
              reconcileChildren(current, workInProgress, nextChildren, renderLanes);
              return workInProgress.child;
            }

            function updateProfiler(current, workInProgress, renderLanes) {
              {
                workInProgress.flags |= Update; // Reset effect durations for the next eventual effect phase.
                // These are reset during render to allow the DevTools commit hook a chance to read them,

                var stateNode = workInProgress.stateNode;
                stateNode.effectDuration = 0;
                stateNode.passiveEffectDuration = 0;
              }

              var nextProps = workInProgress.pendingProps;
              var nextChildren = nextProps.children;
              reconcileChildren(current, workInProgress, nextChildren, renderLanes);
              return workInProgress.child;
            }

            function markRef(current, workInProgress) {
              var ref = workInProgress.ref;

              if (current === null && ref !== null || current !== null && current.ref !== ref) {
                // Schedule a Ref effect
                workInProgress.flags |= Ref;
              }
            }

            function updateFunctionComponent(current, workInProgress, Component, nextProps, renderLanes) {
              {
                if (workInProgress.type !== workInProgress.elementType) {
                  // Lazy component props can't be validated in createElement
                  // because they're only guaranteed to be resolved here.
                  var innerPropTypes = Component.propTypes;

                  if (innerPropTypes) {
                    checkPropTypes(innerPropTypes, nextProps, // Resolved props
                    'prop', getComponentName(Component));
                  }
                }
              }

              var context;

              {
                var unmaskedContext = getUnmaskedContext(workInProgress, Component, true);
                context = getMaskedContext(workInProgress, unmaskedContext);
              }

              var nextChildren;
              prepareToReadContext(workInProgress, renderLanes);

              {
                ReactCurrentOwner$1.current = workInProgress;
                setIsRendering(true);
                nextChildren = renderWithHooks(current, workInProgress, Component, nextProps, context, renderLanes);

                if ( workInProgress.mode & StrictMode) {
                  disableLogs();

                  try {
                    nextChildren = renderWithHooks(current, workInProgress, Component, nextProps, context, renderLanes);
                  } finally {
                    reenableLogs();
                  }
                }

                setIsRendering(false);
              }

              if (current !== null && !didReceiveUpdate) {
                bailoutHooks(current, workInProgress, renderLanes);
                return bailoutOnAlreadyFinishedWork(current, workInProgress, renderLanes);
              } // React DevTools reads this flag.


              workInProgress.flags |= PerformedWork;
              reconcileChildren(current, workInProgress, nextChildren, renderLanes);
              return workInProgress.child;
            }

            function updateClassComponent(current, workInProgress, Component, nextProps, renderLanes) {
              {
                if (workInProgress.type !== workInProgress.elementType) {
                  // Lazy component props can't be validated in createElement
                  // because they're only guaranteed to be resolved here.
                  var innerPropTypes = Component.propTypes;

                  if (innerPropTypes) {
                    checkPropTypes(innerPropTypes, nextProps, // Resolved props
                    'prop', getComponentName(Component));
                  }
                }
              } // Push context providers early to prevent context stack mismatches.
              // During mounting we don't know the child context yet as the instance doesn't exist.
              // We will invalidate the child context in finishClassComponent() right after rendering.


              var hasContext;

              if (isContextProvider(Component)) {
                hasContext = true;
                pushContextProvider(workInProgress);
              } else {
                hasContext = false;
              }

              prepareToReadContext(workInProgress, renderLanes);
              var instance = workInProgress.stateNode;
              var shouldUpdate;

              if (instance === null) {
                if (current !== null) {
                  // A class component without an instance only mounts if it suspended
                  // inside a non-concurrent tree, in an inconsistent state. We want to
                  // treat it like a new mount, even though an empty version of it already
                  // committed. Disconnect the alternate pointers.
                  current.alternate = null;
                  workInProgress.alternate = null; // Since this is conceptually a new fiber, schedule a Placement effect

                  workInProgress.flags |= Placement;
                } // In the initial pass we might need to construct the instance.


                constructClassInstance(workInProgress, Component, nextProps);
                mountClassInstance(workInProgress, Component, nextProps, renderLanes);
                shouldUpdate = true;
              } else if (current === null) {
                // In a resume, we'll already have an instance we can reuse.
                shouldUpdate = resumeMountClassInstance(workInProgress, Component, nextProps, renderLanes);
              } else {
                shouldUpdate = updateClassInstance(current, workInProgress, Component, nextProps, renderLanes);
              }

              var nextUnitOfWork = finishClassComponent(current, workInProgress, Component, shouldUpdate, hasContext, renderLanes);

              {
                var inst = workInProgress.stateNode;

                if (shouldUpdate && inst.props !== nextProps) {
                  if (!didWarnAboutReassigningProps) {
                    error('It looks like %s is reassigning its own `this.props` while rendering. ' + 'This is not supported and can lead to confusing bugs.', getComponentName(workInProgress.type) || 'a component');
                  }

                  didWarnAboutReassigningProps = true;
                }
              }

              return nextUnitOfWork;
            }

            function finishClassComponent(current, workInProgress, Component, shouldUpdate, hasContext, renderLanes) {
              // Refs should update even if shouldComponentUpdate returns false
              markRef(current, workInProgress);
              var didCaptureError = (workInProgress.flags & DidCapture) !== NoFlags;

              if (!shouldUpdate && !didCaptureError) {
                // Context providers should defer to sCU for rendering
                if (hasContext) {
                  invalidateContextProvider(workInProgress, Component, false);
                }

                return bailoutOnAlreadyFinishedWork(current, workInProgress, renderLanes);
              }

              var instance = workInProgress.stateNode; // Rerender

              ReactCurrentOwner$1.current = workInProgress;
              var nextChildren;

              if (didCaptureError && typeof Component.getDerivedStateFromError !== 'function') {
                // If we captured an error, but getDerivedStateFromError is not defined,
                // unmount all the children. componentDidCatch will schedule an update to
                // re-render a fallback. This is temporary until we migrate everyone to
                // the new API.
                // TODO: Warn in a future release.
                nextChildren = null;

                {
                  stopProfilerTimerIfRunning();
                }
              } else {
                {
                  setIsRendering(true);
                  nextChildren = instance.render();

                  if ( workInProgress.mode & StrictMode) {
                    disableLogs();

                    try {
                      instance.render();
                    } finally {
                      reenableLogs();
                    }
                  }

                  setIsRendering(false);
                }
              } // React DevTools reads this flag.


              workInProgress.flags |= PerformedWork;

              if (current !== null && didCaptureError) {
                // If we're recovering from an error, reconcile without reusing any of
                // the existing children. Conceptually, the normal children and the children
                // that are shown on error are two different sets, so we shouldn't reuse
                // normal children even if their identities match.
                forceUnmountCurrentAndReconcile(current, workInProgress, nextChildren, renderLanes);
              } else {
                reconcileChildren(current, workInProgress, nextChildren, renderLanes);
              } // Memoize state using the values we just used to render.
              // TODO: Restructure so we never read values from the instance.


              workInProgress.memoizedState = instance.state; // The context might have changed so we need to recalculate it.

              if (hasContext) {
                invalidateContextProvider(workInProgress, Component, true);
              }

              return workInProgress.child;
            }

            function pushHostRootContext(workInProgress) {
              var root = workInProgress.stateNode;

              if (root.pendingContext) {
                pushTopLevelContextObject(workInProgress, root.pendingContext, root.pendingContext !== root.context);
              } else if (root.context) {
                // Should always be set
                pushTopLevelContextObject(workInProgress, root.context, false);
              }

              pushHostContainer(workInProgress, root.containerInfo);
            }

            function updateHostRoot(current, workInProgress, renderLanes) {
              pushHostRootContext(workInProgress);
              var updateQueue = workInProgress.updateQueue;

              if (!(current !== null && updateQueue !== null)) {
                {
                  throw Error( "If the root does not have an updateQueue, we should have already bailed out. This error is likely caused by a bug in React. Please file an issue." );
                }
              }

              var nextProps = workInProgress.pendingProps;
              var prevState = workInProgress.memoizedState;
              var prevChildren = prevState !== null ? prevState.element : null;
              cloneUpdateQueue(current, workInProgress);
              processUpdateQueue(workInProgress, nextProps, null, renderLanes);
              var nextState = workInProgress.memoizedState; // Caution: React DevTools currently depends on this property
              // being called "element".

              var nextChildren = nextState.element;

              if (nextChildren === prevChildren) {
                resetHydrationState();
                return bailoutOnAlreadyFinishedWork(current, workInProgress, renderLanes);
              }

              var root = workInProgress.stateNode;

              if (root.hydrate && enterHydrationState(workInProgress)) {
                // If we don't have any current children this might be the first pass.
                // We always try to hydrate. If this isn't a hydration pass there won't
                // be any children to hydrate which is effectively the same thing as
                // not hydrating.
                {
                  var mutableSourceEagerHydrationData = root.mutableSourceEagerHydrationData;

                  if (mutableSourceEagerHydrationData != null) {
                    for (var i = 0; i < mutableSourceEagerHydrationData.length; i += 2) {
                      var mutableSource = mutableSourceEagerHydrationData[i];
                      var version = mutableSourceEagerHydrationData[i + 1];
                      setWorkInProgressVersion(mutableSource, version);
                    }
                  }
                }

                var child = mountChildFibers(workInProgress, null, nextChildren, renderLanes);
                workInProgress.child = child;
                var node = child;

                while (node) {
                  // Mark each child as hydrating. This is a fast path to know whether this
                  // tree is part of a hydrating tree. This is used to determine if a child
                  // node has fully mounted yet, and for scheduling event replaying.
                  // Conceptually this is similar to Placement in that a new subtree is
                  // inserted into the React tree here. It just happens to not need DOM
                  // mutations because it already exists.
                  node.flags = node.flags & ~Placement | Hydrating;
                  node = node.sibling;
                }
              } else {
                // Otherwise reset hydration state in case we aborted and resumed another
                // root.
                reconcileChildren(current, workInProgress, nextChildren, renderLanes);
                resetHydrationState();
              }

              return workInProgress.child;
            }

            function updateHostComponent(current, workInProgress, renderLanes) {
              pushHostContext(workInProgress);

              if (current === null) {
                tryToClaimNextHydratableInstance(workInProgress);
              }

              var type = workInProgress.type;
              var nextProps = workInProgress.pendingProps;
              var prevProps = current !== null ? current.memoizedProps : null;
              var nextChildren = nextProps.children;
              var isDirectTextChild = shouldSetTextContent(type, nextProps);

              if (isDirectTextChild) {
                // We special case a direct text child of a host node. This is a common
                // case. We won't handle it as a reified child. We will instead handle
                // this in the host environment that also has access to this prop. That
                // avoids allocating another HostText fiber and traversing it.
                nextChildren = null;
              } else if (prevProps !== null && shouldSetTextContent(type, prevProps)) {
                // If we're switching from a direct text child to a normal child, or to
                // empty, we need to schedule the text content to be reset.
                workInProgress.flags |= ContentReset;
              }

              markRef(current, workInProgress);
              reconcileChildren(current, workInProgress, nextChildren, renderLanes);
              return workInProgress.child;
            }

            function updateHostText(current, workInProgress) {
              if (current === null) {
                tryToClaimNextHydratableInstance(workInProgress);
              } // Nothing to do here. This is terminal. We'll do the completion step
              // immediately after.


              return null;
            }

            function mountLazyComponent(_current, workInProgress, elementType, updateLanes, renderLanes) {
              if (_current !== null) {
                // A lazy component only mounts if it suspended inside a non-
                // concurrent tree, in an inconsistent state. We want to treat it like
                // a new mount, even though an empty version of it already committed.
                // Disconnect the alternate pointers.
                _current.alternate = null;
                workInProgress.alternate = null; // Since this is conceptually a new fiber, schedule a Placement effect

                workInProgress.flags |= Placement;
              }

              var props = workInProgress.pendingProps;
              var lazyComponent = elementType;
              var payload = lazyComponent._payload;
              var init = lazyComponent._init;
              var Component = init(payload); // Store the unwrapped component in the type.

              workInProgress.type = Component;
              var resolvedTag = workInProgress.tag = resolveLazyComponentTag(Component);
              var resolvedProps = resolveDefaultProps(Component, props);
              var child;

              switch (resolvedTag) {
                case FunctionComponent:
                  {
                    {
                      validateFunctionComponentInDev(workInProgress, Component);
                      workInProgress.type = Component = resolveFunctionForHotReloading(Component);
                    }

                    child = updateFunctionComponent(null, workInProgress, Component, resolvedProps, renderLanes);
                    return child;
                  }

                case ClassComponent:
                  {
                    {
                      workInProgress.type = Component = resolveClassForHotReloading(Component);
                    }

                    child = updateClassComponent(null, workInProgress, Component, resolvedProps, renderLanes);
                    return child;
                  }

                case ForwardRef:
                  {
                    {
                      workInProgress.type = Component = resolveForwardRefForHotReloading(Component);
                    }

                    child = updateForwardRef(null, workInProgress, Component, resolvedProps, renderLanes);
                    return child;
                  }

                case MemoComponent:
                  {
                    {
                      if (workInProgress.type !== workInProgress.elementType) {
                        var outerPropTypes = Component.propTypes;

                        if (outerPropTypes) {
                          checkPropTypes(outerPropTypes, resolvedProps, // Resolved for outer only
                          'prop', getComponentName(Component));
                        }
                      }
                    }

                    child = updateMemoComponent(null, workInProgress, Component, resolveDefaultProps(Component.type, resolvedProps), // The inner type can have defaults too
                    updateLanes, renderLanes);
                    return child;
                  }
              }

              var hint = '';

              {
                if (Component !== null && typeof Component === 'object' && Component.$$typeof === REACT_LAZY_TYPE) {
                  hint = ' Did you wrap a component in React.lazy() more than once?';
                }
              } // This message intentionally doesn't mention ForwardRef or MemoComponent
              // because the fact that it's a separate type of work is an
              // implementation detail.


              {
                {
                  throw Error( "Element type is invalid. Received a promise that resolves to: " + Component + ". Lazy element type must resolve to a class or function." + hint );
                }
              }
            }

            function mountIncompleteClassComponent(_current, workInProgress, Component, nextProps, renderLanes) {
              if (_current !== null) {
                // An incomplete component only mounts if it suspended inside a non-
                // concurrent tree, in an inconsistent state. We want to treat it like
                // a new mount, even though an empty version of it already committed.
                // Disconnect the alternate pointers.
                _current.alternate = null;
                workInProgress.alternate = null; // Since this is conceptually a new fiber, schedule a Placement effect

                workInProgress.flags |= Placement;
              } // Promote the fiber to a class and try rendering again.


              workInProgress.tag = ClassComponent; // The rest of this function is a fork of `updateClassComponent`
              // Push context providers early to prevent context stack mismatches.
              // During mounting we don't know the child context yet as the instance doesn't exist.
              // We will invalidate the child context in finishClassComponent() right after rendering.

              var hasContext;

              if (isContextProvider(Component)) {
                hasContext = true;
                pushContextProvider(workInProgress);
              } else {
                hasContext = false;
              }

              prepareToReadContext(workInProgress, renderLanes);
              constructClassInstance(workInProgress, Component, nextProps);
              mountClassInstance(workInProgress, Component, nextProps, renderLanes);
              return finishClassComponent(null, workInProgress, Component, true, hasContext, renderLanes);
            }

            function mountIndeterminateComponent(_current, workInProgress, Component, renderLanes) {
              if (_current !== null) {
                // An indeterminate component only mounts if it suspended inside a non-
                // concurrent tree, in an inconsistent state. We want to treat it like
                // a new mount, even though an empty version of it already committed.
                // Disconnect the alternate pointers.
                _current.alternate = null;
                workInProgress.alternate = null; // Since this is conceptually a new fiber, schedule a Placement effect

                workInProgress.flags |= Placement;
              }

              var props = workInProgress.pendingProps;
              var context;

              {
                var unmaskedContext = getUnmaskedContext(workInProgress, Component, false);
                context = getMaskedContext(workInProgress, unmaskedContext);
              }

              prepareToReadContext(workInProgress, renderLanes);
              var value;

              {
                if (Component.prototype && typeof Component.prototype.render === 'function') {
                  var componentName = getComponentName(Component) || 'Unknown';

                  if (!didWarnAboutBadClass[componentName]) {
                    error("The <%s /> component appears to have a render method, but doesn't extend React.Component. " + 'This is likely to cause errors. Change %s to extend React.Component instead.', componentName, componentName);

                    didWarnAboutBadClass[componentName] = true;
                  }
                }

                if (workInProgress.mode & StrictMode) {
                  ReactStrictModeWarnings.recordLegacyContextWarning(workInProgress, null);
                }

                setIsRendering(true);
                ReactCurrentOwner$1.current = workInProgress;
                value = renderWithHooks(null, workInProgress, Component, props, context, renderLanes);
                setIsRendering(false);
              } // React DevTools reads this flag.


              workInProgress.flags |= PerformedWork;

              {
                // Support for module components is deprecated and is removed behind a flag.
                // Whether or not it would crash later, we want to show a good message in DEV first.
                if (typeof value === 'object' && value !== null && typeof value.render === 'function' && value.$$typeof === undefined) {
                  var _componentName = getComponentName(Component) || 'Unknown';

                  if (!didWarnAboutModulePatternComponent[_componentName]) {
                    error('The <%s /> component appears to be a function component that returns a class instance. ' + 'Change %s to a class that extends React.Component instead. ' + "If you can't use a class try assigning the prototype on the function as a workaround. " + "`%s.prototype = React.Component.prototype`. Don't use an arrow function since it " + 'cannot be called with `new` by React.', _componentName, _componentName, _componentName);

                    didWarnAboutModulePatternComponent[_componentName] = true;
                  }
                }
              }

              if ( // Run these checks in production only if the flag is off.
              // Eventually we'll delete this branch altogether.
               typeof value === 'object' && value !== null && typeof value.render === 'function' && value.$$typeof === undefined) {
                {
                  var _componentName2 = getComponentName(Component) || 'Unknown';

                  if (!didWarnAboutModulePatternComponent[_componentName2]) {
                    error('The <%s /> component appears to be a function component that returns a class instance. ' + 'Change %s to a class that extends React.Component instead. ' + "If you can't use a class try assigning the prototype on the function as a workaround. " + "`%s.prototype = React.Component.prototype`. Don't use an arrow function since it " + 'cannot be called with `new` by React.', _componentName2, _componentName2, _componentName2);

                    didWarnAboutModulePatternComponent[_componentName2] = true;
                  }
                } // Proceed under the assumption that this is a class instance


                workInProgress.tag = ClassComponent; // Throw out any hooks that were used.

                workInProgress.memoizedState = null;
                workInProgress.updateQueue = null; // Push context providers early to prevent context stack mismatches.
                // During mounting we don't know the child context yet as the instance doesn't exist.
                // We will invalidate the child context in finishClassComponent() right after rendering.

                var hasContext = false;

                if (isContextProvider(Component)) {
                  hasContext = true;
                  pushContextProvider(workInProgress);
                } else {
                  hasContext = false;
                }

                workInProgress.memoizedState = value.state !== null && value.state !== undefined ? value.state : null;
                initializeUpdateQueue(workInProgress);
                var getDerivedStateFromProps = Component.getDerivedStateFromProps;

                if (typeof getDerivedStateFromProps === 'function') {
                  applyDerivedStateFromProps(workInProgress, Component, getDerivedStateFromProps, props);
                }

                adoptClassInstance(workInProgress, value);
                mountClassInstance(workInProgress, Component, props, renderLanes);
                return finishClassComponent(null, workInProgress, Component, true, hasContext, renderLanes);
              } else {
                // Proceed under the assumption that this is a function component
                workInProgress.tag = FunctionComponent;

                {

                  if ( workInProgress.mode & StrictMode) {
                    disableLogs();

                    try {
                      value = renderWithHooks(null, workInProgress, Component, props, context, renderLanes);
                    } finally {
                      reenableLogs();
                    }
                  }
                }

                reconcileChildren(null, workInProgress, value, renderLanes);

                {
                  validateFunctionComponentInDev(workInProgress, Component);
                }

                return workInProgress.child;
              }
            }

            function validateFunctionComponentInDev(workInProgress, Component) {
              {
                if (Component) {
                  if (Component.childContextTypes) {
                    error('%s(...): childContextTypes cannot be defined on a function component.', Component.displayName || Component.name || 'Component');
                  }
                }

                if (workInProgress.ref !== null) {
                  var info = '';
                  var ownerName = getCurrentFiberOwnerNameInDevOrNull();

                  if (ownerName) {
                    info += '\n\nCheck the render method of `' + ownerName + '`.';
                  }

                  var warningKey = ownerName || workInProgress._debugID || '';
                  var debugSource = workInProgress._debugSource;

                  if (debugSource) {
                    warningKey = debugSource.fileName + ':' + debugSource.lineNumber;
                  }

                  if (!didWarnAboutFunctionRefs[warningKey]) {
                    didWarnAboutFunctionRefs[warningKey] = true;

                    error('Function components cannot be given refs. ' + 'Attempts to access this ref will fail. ' + 'Did you mean to use React.forwardRef()?%s', info);
                  }
                }

                if (typeof Component.getDerivedStateFromProps === 'function') {
                  var _componentName3 = getComponentName(Component) || 'Unknown';

                  if (!didWarnAboutGetDerivedStateOnFunctionComponent[_componentName3]) {
                    error('%s: Function components do not support getDerivedStateFromProps.', _componentName3);

                    didWarnAboutGetDerivedStateOnFunctionComponent[_componentName3] = true;
                  }
                }

                if (typeof Component.contextType === 'object' && Component.contextType !== null) {
                  var _componentName4 = getComponentName(Component) || 'Unknown';

                  if (!didWarnAboutContextTypeOnFunctionComponent[_componentName4]) {
                    error('%s: Function components do not support contextType.', _componentName4);

                    didWarnAboutContextTypeOnFunctionComponent[_componentName4] = true;
                  }
                }
              }
            }

            var SUSPENDED_MARKER = {
              dehydrated: null,
              retryLane: NoLane
            };

            function mountSuspenseOffscreenState(renderLanes) {
              return {
                baseLanes: renderLanes
              };
            }

            function updateSuspenseOffscreenState(prevOffscreenState, renderLanes) {
              return {
                baseLanes: mergeLanes(prevOffscreenState.baseLanes, renderLanes)
              };
            } // TODO: Probably should inline this back


            function shouldRemainOnFallback(suspenseContext, current, workInProgress, renderLanes) {
              // If we're already showing a fallback, there are cases where we need to
              // remain on that fallback regardless of whether the content has resolved.
              // For example, SuspenseList coordinates when nested content appears.
              if (current !== null) {
                var suspenseState = current.memoizedState;

                if (suspenseState === null) {
                  // Currently showing content. Don't hide it, even if ForceSuspenseFallack
                  // is true. More precise name might be "ForceRemainSuspenseFallback".
                  // Note: This is a factoring smell. Can't remain on a fallback if there's
                  // no fallback to remain on.
                  return false;
                }
              } // Not currently showing content. Consult the Suspense context.


              return hasSuspenseContext(suspenseContext, ForceSuspenseFallback);
            }

            function getRemainingWorkInPrimaryTree(current, renderLanes) {
              // TODO: Should not remove render lanes that were pinged during this render
              return removeLanes(current.childLanes, renderLanes);
            }

            function updateSuspenseComponent(current, workInProgress, renderLanes) {
              var nextProps = workInProgress.pendingProps; // This is used by DevTools to force a boundary to suspend.

              {
                if (shouldSuspend(workInProgress)) {
                  workInProgress.flags |= DidCapture;
                }
              }

              var suspenseContext = suspenseStackCursor.current;
              var showFallback = false;
              var didSuspend = (workInProgress.flags & DidCapture) !== NoFlags;

              if (didSuspend || shouldRemainOnFallback(suspenseContext, current)) {
                // Something in this boundary's subtree already suspended. Switch to
                // rendering the fallback children.
                showFallback = true;
                workInProgress.flags &= ~DidCapture;
              } else {
                // Attempting the main content
                if (current === null || current.memoizedState !== null) {
                  // This is a new mount or this boundary is already showing a fallback state.
                  // Mark this subtree context as having at least one invisible parent that could
                  // handle the fallback state.
                  // Boundaries without fallbacks or should be avoided are not considered since
                  // they cannot handle preferred fallback states.
                  if (nextProps.fallback !== undefined && nextProps.unstable_avoidThisFallback !== true) {
                    suspenseContext = addSubtreeSuspenseContext(suspenseContext, InvisibleParentSuspenseContext);
                  }
                }
              }

              suspenseContext = setDefaultShallowSuspenseContext(suspenseContext);
              pushSuspenseContext(workInProgress, suspenseContext); // OK, the next part is confusing. We're about to reconcile the Suspense
              // boundary's children. This involves some custom reconcilation logic. Two
              // main reasons this is so complicated.
              //
              // First, Legacy Mode has different semantics for backwards compatibility. The
              // primary tree will commit in an inconsistent state, so when we do the
              // second pass to render the fallback, we do some exceedingly, uh, clever
              // hacks to make that not totally break. Like transferring effects and
              // deletions from hidden tree. In Concurrent Mode, it's much simpler,
              // because we bailout on the primary tree completely and leave it in its old
              // state, no effects. Same as what we do for Offscreen (except that
              // Offscreen doesn't have the first render pass).
              //
              // Second is hydration. During hydration, the Suspense fiber has a slightly
              // different layout, where the child points to a dehydrated fragment, which
              // contains the DOM rendered by the server.
              //
              // Third, even if you set all that aside, Suspense is like error boundaries in
              // that we first we try to render one tree, and if that fails, we render again
              // and switch to a different tree. Like a try/catch block. So we have to track
              // which branch we're currently rendering. Ideally we would model this using
              // a stack.

              if (current === null) {
                // Initial mount
                // If we're currently hydrating, try to hydrate this boundary.
                // But only if this has a fallback.
                if (nextProps.fallback !== undefined) {
                  tryToClaimNextHydratableInstance(workInProgress); // This could've been a dehydrated suspense component.
                }

                var nextPrimaryChildren = nextProps.children;
                var nextFallbackChildren = nextProps.fallback;

                if (showFallback) {
                  var fallbackFragment = mountSuspenseFallbackChildren(workInProgress, nextPrimaryChildren, nextFallbackChildren, renderLanes);
                  var primaryChildFragment = workInProgress.child;
                  primaryChildFragment.memoizedState = mountSuspenseOffscreenState(renderLanes);
                  workInProgress.memoizedState = SUSPENDED_MARKER;
                  return fallbackFragment;
                } else if (typeof nextProps.unstable_expectedLoadTime === 'number') {
                  // This is a CPU-bound tree. Skip this tree and show a placeholder to
                  // unblock the surrounding content. Then immediately retry after the
                  // initial commit.
                  var _fallbackFragment = mountSuspenseFallbackChildren(workInProgress, nextPrimaryChildren, nextFallbackChildren, renderLanes);

                  var _primaryChildFragment = workInProgress.child;
                  _primaryChildFragment.memoizedState = mountSuspenseOffscreenState(renderLanes);
                  workInProgress.memoizedState = SUSPENDED_MARKER; // Since nothing actually suspended, there will nothing to ping this to
                  // get it started back up to attempt the next item. While in terms of
                  // priority this work has the same priority as this current render, it's
                  // not part of the same transition once the transition has committed. If
                  // it's sync, we still want to yield so that it can be painted.
                  // Conceptually, this is really the same as pinging. We can use any
                  // RetryLane even if it's the one currently rendering since we're leaving
                  // it behind on this node.

                  workInProgress.lanes = SomeRetryLane;

                  {
                    markSpawnedWork(SomeRetryLane);
                  }

                  return _fallbackFragment;
                } else {
                  return mountSuspensePrimaryChildren(workInProgress, nextPrimaryChildren, renderLanes);
                }
              } else {
                // This is an update.
                // If the current fiber has a SuspenseState, that means it's already showing
                // a fallback.
                var prevState = current.memoizedState;

                if (prevState !== null) {

                  if (showFallback) {
                    var _nextFallbackChildren2 = nextProps.fallback;
                    var _nextPrimaryChildren2 = nextProps.children;

                    var _fallbackChildFragment = updateSuspenseFallbackChildren(current, workInProgress, _nextPrimaryChildren2, _nextFallbackChildren2, renderLanes);

                    var _primaryChildFragment3 = workInProgress.child;
                    var prevOffscreenState = current.child.memoizedState;
                    _primaryChildFragment3.memoizedState = prevOffscreenState === null ? mountSuspenseOffscreenState(renderLanes) : updateSuspenseOffscreenState(prevOffscreenState, renderLanes);
                    _primaryChildFragment3.childLanes = getRemainingWorkInPrimaryTree(current, renderLanes);
                    workInProgress.memoizedState = SUSPENDED_MARKER;
                    return _fallbackChildFragment;
                  } else {
                    var _nextPrimaryChildren3 = nextProps.children;

                    var _primaryChildFragment4 = updateSuspensePrimaryChildren(current, workInProgress, _nextPrimaryChildren3, renderLanes);

                    workInProgress.memoizedState = null;
                    return _primaryChildFragment4;
                  }
                } else {
                  // The current tree is not already showing a fallback.
                  if (showFallback) {
                    // Timed out.
                    var _nextFallbackChildren3 = nextProps.fallback;
                    var _nextPrimaryChildren4 = nextProps.children;

                    var _fallbackChildFragment2 = updateSuspenseFallbackChildren(current, workInProgress, _nextPrimaryChildren4, _nextFallbackChildren3, renderLanes);

                    var _primaryChildFragment5 = workInProgress.child;
                    var _prevOffscreenState = current.child.memoizedState;
                    _primaryChildFragment5.memoizedState = _prevOffscreenState === null ? mountSuspenseOffscreenState(renderLanes) : updateSuspenseOffscreenState(_prevOffscreenState, renderLanes);
                    _primaryChildFragment5.childLanes = getRemainingWorkInPrimaryTree(current, renderLanes); // Skip the primary children, and continue working on the
                    // fallback children.

                    workInProgress.memoizedState = SUSPENDED_MARKER;
                    return _fallbackChildFragment2;
                  } else {
                    // Still haven't timed out. Continue rendering the children, like we
                    // normally do.
                    var _nextPrimaryChildren5 = nextProps.children;

                    var _primaryChildFragment6 = updateSuspensePrimaryChildren(current, workInProgress, _nextPrimaryChildren5, renderLanes);

                    workInProgress.memoizedState = null;
                    return _primaryChildFragment6;
                  }
                }
              }
            }

            function mountSuspensePrimaryChildren(workInProgress, primaryChildren, renderLanes) {
              var mode = workInProgress.mode;
              var primaryChildProps = {
                mode: 'visible',
                children: primaryChildren
              };
              var primaryChildFragment = createFiberFromOffscreen(primaryChildProps, mode, renderLanes, null);
              primaryChildFragment.return = workInProgress;
              workInProgress.child = primaryChildFragment;
              return primaryChildFragment;
            }

            function mountSuspenseFallbackChildren(workInProgress, primaryChildren, fallbackChildren, renderLanes) {
              var mode = workInProgress.mode;
              var progressedPrimaryFragment = workInProgress.child;
              var primaryChildProps = {
                mode: 'hidden',
                children: primaryChildren
              };
              var primaryChildFragment;
              var fallbackChildFragment;

              if ((mode & BlockingMode) === NoMode && progressedPrimaryFragment !== null) {
                // In legacy mode, we commit the primary tree as if it successfully
                // completed, even though it's in an inconsistent state.
                primaryChildFragment = progressedPrimaryFragment;
                primaryChildFragment.childLanes = NoLanes;
                primaryChildFragment.pendingProps = primaryChildProps;

                if ( workInProgress.mode & ProfileMode) {
                  // Reset the durations from the first pass so they aren't included in the
                  // final amounts. This seems counterintuitive, since we're intentionally
                  // not measuring part of the render phase, but this makes it match what we
                  // do in Concurrent Mode.
                  primaryChildFragment.actualDuration = 0;
                  primaryChildFragment.actualStartTime = -1;
                  primaryChildFragment.selfBaseDuration = 0;
                  primaryChildFragment.treeBaseDuration = 0;
                }

                fallbackChildFragment = createFiberFromFragment(fallbackChildren, mode, renderLanes, null);
              } else {
                primaryChildFragment = createFiberFromOffscreen(primaryChildProps, mode, NoLanes, null);
                fallbackChildFragment = createFiberFromFragment(fallbackChildren, mode, renderLanes, null);
              }

              primaryChildFragment.return = workInProgress;
              fallbackChildFragment.return = workInProgress;
              primaryChildFragment.sibling = fallbackChildFragment;
              workInProgress.child = primaryChildFragment;
              return fallbackChildFragment;
            }

            function createWorkInProgressOffscreenFiber(current, offscreenProps) {
              // The props argument to `createWorkInProgress` is `any` typed, so we use this
              // wrapper function to constrain it.
              return createWorkInProgress(current, offscreenProps);
            }

            function updateSuspensePrimaryChildren(current, workInProgress, primaryChildren, renderLanes) {
              var currentPrimaryChildFragment = current.child;
              var currentFallbackChildFragment = currentPrimaryChildFragment.sibling;
              var primaryChildFragment = createWorkInProgressOffscreenFiber(currentPrimaryChildFragment, {
                mode: 'visible',
                children: primaryChildren
              });

              if ((workInProgress.mode & BlockingMode) === NoMode) {
                primaryChildFragment.lanes = renderLanes;
              }

              primaryChildFragment.return = workInProgress;
              primaryChildFragment.sibling = null;

              if (currentFallbackChildFragment !== null) {
                // Delete the fallback child fragment
                currentFallbackChildFragment.nextEffect = null;
                currentFallbackChildFragment.flags = Deletion;
                workInProgress.firstEffect = workInProgress.lastEffect = currentFallbackChildFragment;
              }

              workInProgress.child = primaryChildFragment;
              return primaryChildFragment;
            }

            function updateSuspenseFallbackChildren(current, workInProgress, primaryChildren, fallbackChildren, renderLanes) {
              var mode = workInProgress.mode;
              var currentPrimaryChildFragment = current.child;
              var currentFallbackChildFragment = currentPrimaryChildFragment.sibling;
              var primaryChildProps = {
                mode: 'hidden',
                children: primaryChildren
              };
              var primaryChildFragment;

              if ( // In legacy mode, we commit the primary tree as if it successfully
              // completed, even though it's in an inconsistent state.
              (mode & BlockingMode) === NoMode && // Make sure we're on the second pass, i.e. the primary child fragment was
              // already cloned. In legacy mode, the only case where this isn't true is
              // when DevTools forces us to display a fallback; we skip the first render
              // pass entirely and go straight to rendering the fallback. (In Concurrent
              // Mode, SuspenseList can also trigger this scenario, but this is a legacy-
              // only codepath.)
              workInProgress.child !== currentPrimaryChildFragment) {
                var progressedPrimaryFragment = workInProgress.child;
                primaryChildFragment = progressedPrimaryFragment;
                primaryChildFragment.childLanes = NoLanes;
                primaryChildFragment.pendingProps = primaryChildProps;

                if ( workInProgress.mode & ProfileMode) {
                  // Reset the durations from the first pass so they aren't included in the
                  // final amounts. This seems counterintuitive, since we're intentionally
                  // not measuring part of the render phase, but this makes it match what we
                  // do in Concurrent Mode.
                  primaryChildFragment.actualDuration = 0;
                  primaryChildFragment.actualStartTime = -1;
                  primaryChildFragment.selfBaseDuration = currentPrimaryChildFragment.selfBaseDuration;
                  primaryChildFragment.treeBaseDuration = currentPrimaryChildFragment.treeBaseDuration;
                } // The fallback fiber was added as a deletion effect during the first pass.
                // However, since we're going to remain on the fallback, we no longer want
                // to delete it. So we need to remove it from the list. Deletions are stored
                // on the same list as effects. We want to keep the effects from the primary
                // tree. So we copy the primary child fragment's effect list, which does not
                // include the fallback deletion effect.


                var progressedLastEffect = primaryChildFragment.lastEffect;

                if (progressedLastEffect !== null) {
                  workInProgress.firstEffect = primaryChildFragment.firstEffect;
                  workInProgress.lastEffect = progressedLastEffect;
                  progressedLastEffect.nextEffect = null;
                } else {
                  // TODO: Reset this somewhere else? Lol legacy mode is so weird.
                  workInProgress.firstEffect = workInProgress.lastEffect = null;
                }
              } else {
                primaryChildFragment = createWorkInProgressOffscreenFiber(currentPrimaryChildFragment, primaryChildProps);
              }

              var fallbackChildFragment;

              if (currentFallbackChildFragment !== null) {
                fallbackChildFragment = createWorkInProgress(currentFallbackChildFragment, fallbackChildren);
              } else {
                fallbackChildFragment = createFiberFromFragment(fallbackChildren, mode, renderLanes, null); // Needs a placement effect because the parent (the Suspense boundary) already
                // mounted but this is a new fiber.

                fallbackChildFragment.flags |= Placement;
              }

              fallbackChildFragment.return = workInProgress;
              primaryChildFragment.return = workInProgress;
              primaryChildFragment.sibling = fallbackChildFragment;
              workInProgress.child = primaryChildFragment;
              return fallbackChildFragment;
            }

            function scheduleWorkOnFiber(fiber, renderLanes) {
              fiber.lanes = mergeLanes(fiber.lanes, renderLanes);
              var alternate = fiber.alternate;

              if (alternate !== null) {
                alternate.lanes = mergeLanes(alternate.lanes, renderLanes);
              }

              scheduleWorkOnParentPath(fiber.return, renderLanes);
            }

            function propagateSuspenseContextChange(workInProgress, firstChild, renderLanes) {
              // Mark any Suspense boundaries with fallbacks as having work to do.
              // If they were previously forced into fallbacks, they may now be able
              // to unblock.
              var node = firstChild;

              while (node !== null) {
                if (node.tag === SuspenseComponent) {
                  var state = node.memoizedState;

                  if (state !== null) {
                    scheduleWorkOnFiber(node, renderLanes);
                  }
                } else if (node.tag === SuspenseListComponent) {
                  // If the tail is hidden there might not be an Suspense boundaries
                  // to schedule work on. In this case we have to schedule it on the
                  // list itself.
                  // We don't have to traverse to the children of the list since
                  // the list will propagate the change when it rerenders.
                  scheduleWorkOnFiber(node, renderLanes);
                } else if (node.child !== null) {
                  node.child.return = node;
                  node = node.child;
                  continue;
                }

                if (node === workInProgress) {
                  return;
                }

                while (node.sibling === null) {
                  if (node.return === null || node.return === workInProgress) {
                    return;
                  }

                  node = node.return;
                }

                node.sibling.return = node.return;
                node = node.sibling;
              }
            }

            function findLastContentRow(firstChild) {
              // This is going to find the last row among these children that is already
              // showing content on the screen, as opposed to being in fallback state or
              // new. If a row has multiple Suspense boundaries, any of them being in the
              // fallback state, counts as the whole row being in a fallback state.
              // Note that the "rows" will be workInProgress, but any nested children
              // will still be current since we haven't rendered them yet. The mounted
              // order may not be the same as the new order. We use the new order.
              var row = firstChild;
              var lastContentRow = null;

              while (row !== null) {
                var currentRow = row.alternate; // New rows can't be content rows.

                if (currentRow !== null && findFirstSuspended(currentRow) === null) {
                  lastContentRow = row;
                }

                row = row.sibling;
              }

              return lastContentRow;
            }

            function validateRevealOrder(revealOrder) {
              {
                if (revealOrder !== undefined && revealOrder !== 'forwards' && revealOrder !== 'backwards' && revealOrder !== 'together' && !didWarnAboutRevealOrder[revealOrder]) {
                  didWarnAboutRevealOrder[revealOrder] = true;

                  if (typeof revealOrder === 'string') {
                    switch (revealOrder.toLowerCase()) {
                      case 'together':
                      case 'forwards':
                      case 'backwards':
                        {
                          error('"%s" is not a valid value for revealOrder on <SuspenseList />. ' + 'Use lowercase "%s" instead.', revealOrder, revealOrder.toLowerCase());

                          break;
                        }

                      case 'forward':
                      case 'backward':
                        {
                          error('"%s" is not a valid value for revealOrder on <SuspenseList />. ' + 'React uses the -s suffix in the spelling. Use "%ss" instead.', revealOrder, revealOrder.toLowerCase());

                          break;
                        }

                      default:
                        error('"%s" is not a supported revealOrder on <SuspenseList />. ' + 'Did you mean "together", "forwards" or "backwards"?', revealOrder);

                        break;
                    }
                  } else {
                    error('%s is not a supported value for revealOrder on <SuspenseList />. ' + 'Did you mean "together", "forwards" or "backwards"?', revealOrder);
                  }
                }
              }
            }

            function validateTailOptions(tailMode, revealOrder) {
              {
                if (tailMode !== undefined && !didWarnAboutTailOptions[tailMode]) {
                  if (tailMode !== 'collapsed' && tailMode !== 'hidden') {
                    didWarnAboutTailOptions[tailMode] = true;

                    error('"%s" is not a supported value for tail on <SuspenseList />. ' + 'Did you mean "collapsed" or "hidden"?', tailMode);
                  } else if (revealOrder !== 'forwards' && revealOrder !== 'backwards') {
                    didWarnAboutTailOptions[tailMode] = true;

                    error('<SuspenseList tail="%s" /> is only valid if revealOrder is ' + '"forwards" or "backwards". ' + 'Did you mean to specify revealOrder="forwards"?', tailMode);
                  }
                }
              }
            }

            function validateSuspenseListNestedChild(childSlot, index) {
              {
                var isArray = Array.isArray(childSlot);
                var isIterable = !isArray && typeof getIteratorFn(childSlot) === 'function';

                if (isArray || isIterable) {
                  var type = isArray ? 'array' : 'iterable';

                  error('A nested %s was passed to row #%s in <SuspenseList />. Wrap it in ' + 'an additional SuspenseList to configure its revealOrder: ' + '<SuspenseList revealOrder=...> ... ' + '<SuspenseList revealOrder=...>{%s}</SuspenseList> ... ' + '</SuspenseList>', type, index, type);

                  return false;
                }
              }

              return true;
            }

            function validateSuspenseListChildren(children, revealOrder) {
              {
                if ((revealOrder === 'forwards' || revealOrder === 'backwards') && children !== undefined && children !== null && children !== false) {
                  if (Array.isArray(children)) {
                    for (var i = 0; i < children.length; i++) {
                      if (!validateSuspenseListNestedChild(children[i], i)) {
                        return;
                      }
                    }
                  } else {
                    var iteratorFn = getIteratorFn(children);

                    if (typeof iteratorFn === 'function') {
                      var childrenIterator = iteratorFn.call(children);

                      if (childrenIterator) {
                        var step = childrenIterator.next();
                        var _i = 0;

                        for (; !step.done; step = childrenIterator.next()) {
                          if (!validateSuspenseListNestedChild(step.value, _i)) {
                            return;
                          }

                          _i++;
                        }
                      }
                    } else {
                      error('A single row was passed to a <SuspenseList revealOrder="%s" />. ' + 'This is not useful since it needs multiple rows. ' + 'Did you mean to pass multiple children or an array?', revealOrder);
                    }
                  }
                }
              }
            }

            function initSuspenseListRenderState(workInProgress, isBackwards, tail, lastContentRow, tailMode, lastEffectBeforeRendering) {
              var renderState = workInProgress.memoizedState;

              if (renderState === null) {
                workInProgress.memoizedState = {
                  isBackwards: isBackwards,
                  rendering: null,
                  renderingStartTime: 0,
                  last: lastContentRow,
                  tail: tail,
                  tailMode: tailMode,
                  lastEffect: lastEffectBeforeRendering
                };
              } else {
                // We can reuse the existing object from previous renders.
                renderState.isBackwards = isBackwards;
                renderState.rendering = null;
                renderState.renderingStartTime = 0;
                renderState.last = lastContentRow;
                renderState.tail = tail;
                renderState.tailMode = tailMode;
                renderState.lastEffect = lastEffectBeforeRendering;
              }
            } // This can end up rendering this component multiple passes.
            // The first pass splits the children fibers into two sets. A head and tail.
            // We first render the head. If anything is in fallback state, we do another
            // pass through beginWork to rerender all children (including the tail) with
            // the force suspend context. If the first render didn't have anything in
            // in fallback state. Then we render each row in the tail one-by-one.
            // That happens in the completeWork phase without going back to beginWork.


            function updateSuspenseListComponent(current, workInProgress, renderLanes) {
              var nextProps = workInProgress.pendingProps;
              var revealOrder = nextProps.revealOrder;
              var tailMode = nextProps.tail;
              var newChildren = nextProps.children;
              validateRevealOrder(revealOrder);
              validateTailOptions(tailMode, revealOrder);
              validateSuspenseListChildren(newChildren, revealOrder);
              reconcileChildren(current, workInProgress, newChildren, renderLanes);
              var suspenseContext = suspenseStackCursor.current;
              var shouldForceFallback = hasSuspenseContext(suspenseContext, ForceSuspenseFallback);

              if (shouldForceFallback) {
                suspenseContext = setShallowSuspenseContext(suspenseContext, ForceSuspenseFallback);
                workInProgress.flags |= DidCapture;
              } else {
                var didSuspendBefore = current !== null && (current.flags & DidCapture) !== NoFlags;

                if (didSuspendBefore) {
                  // If we previously forced a fallback, we need to schedule work
                  // on any nested boundaries to let them know to try to render
                  // again. This is the same as context updating.
                  propagateSuspenseContextChange(workInProgress, workInProgress.child, renderLanes);
                }

                suspenseContext = setDefaultShallowSuspenseContext(suspenseContext);
              }

              pushSuspenseContext(workInProgress, suspenseContext);

              if ((workInProgress.mode & BlockingMode) === NoMode) {
                // In legacy mode, SuspenseList doesn't work so we just
                // use make it a noop by treating it as the default revealOrder.
                workInProgress.memoizedState = null;
              } else {
                switch (revealOrder) {
                  case 'forwards':
                    {
                      var lastContentRow = findLastContentRow(workInProgress.child);
                      var tail;

                      if (lastContentRow === null) {
                        // The whole list is part of the tail.
                        // TODO: We could fast path by just rendering the tail now.
                        tail = workInProgress.child;
                        workInProgress.child = null;
                      } else {
                        // Disconnect the tail rows after the content row.
                        // We're going to render them separately later.
                        tail = lastContentRow.sibling;
                        lastContentRow.sibling = null;
                      }

                      initSuspenseListRenderState(workInProgress, false, // isBackwards
                      tail, lastContentRow, tailMode, workInProgress.lastEffect);
                      break;
                    }

                  case 'backwards':
                    {
                      // We're going to find the first row that has existing content.
                      // At the same time we're going to reverse the list of everything
                      // we pass in the meantime. That's going to be our tail in reverse
                      // order.
                      var _tail = null;
                      var row = workInProgress.child;
                      workInProgress.child = null;

                      while (row !== null) {
                        var currentRow = row.alternate; // New rows can't be content rows.

                        if (currentRow !== null && findFirstSuspended(currentRow) === null) {
                          // This is the beginning of the main content.
                          workInProgress.child = row;
                          break;
                        }

                        var nextRow = row.sibling;
                        row.sibling = _tail;
                        _tail = row;
                        row = nextRow;
                      } // TODO: If workInProgress.child is null, we can continue on the tail immediately.


                      initSuspenseListRenderState(workInProgress, true, // isBackwards
                      _tail, null, // last
                      tailMode, workInProgress.lastEffect);
                      break;
                    }

                  case 'together':
                    {
                      initSuspenseListRenderState(workInProgress, false, // isBackwards
                      null, // tail
                      null, // last
                      undefined, workInProgress.lastEffect);
                      break;
                    }

                  default:
                    {
                      // The default reveal order is the same as not having
                      // a boundary.
                      workInProgress.memoizedState = null;
                    }
                }
              }

              return workInProgress.child;
            }

            function updatePortalComponent(current, workInProgress, renderLanes) {
              pushHostContainer(workInProgress, workInProgress.stateNode.containerInfo);
              var nextChildren = workInProgress.pendingProps;

              if (current === null) {
                // Portals are special because we don't append the children during mount
                // but at commit. Therefore we need to track insertions which the normal
                // flow doesn't do during mount. This doesn't happen at the root because
                // the root always starts with a "current" with a null child.
                // TODO: Consider unifying this with how the root works.
                workInProgress.child = reconcileChildFibers(workInProgress, null, nextChildren, renderLanes);
              } else {
                reconcileChildren(current, workInProgress, nextChildren, renderLanes);
              }

              return workInProgress.child;
            }

            var hasWarnedAboutUsingNoValuePropOnContextProvider = false;

            function updateContextProvider(current, workInProgress, renderLanes) {
              var providerType = workInProgress.type;
              var context = providerType._context;
              var newProps = workInProgress.pendingProps;
              var oldProps = workInProgress.memoizedProps;
              var newValue = newProps.value;

              {
                if (!('value' in newProps)) {
                  if (!hasWarnedAboutUsingNoValuePropOnContextProvider) {
                    hasWarnedAboutUsingNoValuePropOnContextProvider = true;

                    error('The `value` prop is required for the `<Context.Provider>`. Did you misspell it or forget to pass it?');
                  }
                }

                var providerPropTypes = workInProgress.type.propTypes;

                if (providerPropTypes) {
                  checkPropTypes(providerPropTypes, newProps, 'prop', 'Context.Provider');
                }
              }

              pushProvider(workInProgress, newValue);

              if (oldProps !== null) {
                var oldValue = oldProps.value;
                var changedBits = calculateChangedBits(context, newValue, oldValue);

                if (changedBits === 0) {
                  // No change. Bailout early if children are the same.
                  if (oldProps.children === newProps.children && !hasContextChanged()) {
                    return bailoutOnAlreadyFinishedWork(current, workInProgress, renderLanes);
                  }
                } else {
                  // The context value changed. Search for matching consumers and schedule
                  // them to update.
                  propagateContextChange(workInProgress, context, changedBits, renderLanes);
                }
              }

              var newChildren = newProps.children;
              reconcileChildren(current, workInProgress, newChildren, renderLanes);
              return workInProgress.child;
            }

            var hasWarnedAboutUsingContextAsConsumer = false;

            function updateContextConsumer(current, workInProgress, renderLanes) {
              var context = workInProgress.type; // The logic below for Context differs depending on PROD or DEV mode. In
              // DEV mode, we create a separate object for Context.Consumer that acts
              // like a proxy to Context. This proxy object adds unnecessary code in PROD
              // so we use the old behaviour (Context.Consumer references Context) to
              // reduce size and overhead. The separate object references context via
              // a property called "_context", which also gives us the ability to check
              // in DEV mode if this property exists or not and warn if it does not.

              {
                if (context._context === undefined) {
                  // This may be because it's a Context (rather than a Consumer).
                  // Or it may be because it's older React where they're the same thing.
                  // We only want to warn if we're sure it's a new React.
                  if (context !== context.Consumer) {
                    if (!hasWarnedAboutUsingContextAsConsumer) {
                      hasWarnedAboutUsingContextAsConsumer = true;

                      error('Rendering <Context> directly is not supported and will be removed in ' + 'a future major release. Did you mean to render <Context.Consumer> instead?');
                    }
                  }
                } else {
                  context = context._context;
                }
              }

              var newProps = workInProgress.pendingProps;
              var render = newProps.children;

              {
                if (typeof render !== 'function') {
                  error('A context consumer was rendered with multiple children, or a child ' + "that isn't a function. A context consumer expects a single child " + 'that is a function. If you did pass a function, make sure there ' + 'is no trailing or leading whitespace around it.');
                }
              }

              prepareToReadContext(workInProgress, renderLanes);
              var newValue = readContext(context, newProps.unstable_observedBits);
              var newChildren;

              {
                ReactCurrentOwner$1.current = workInProgress;
                setIsRendering(true);
                newChildren = render(newValue);
                setIsRendering(false);
              } // React DevTools reads this flag.


              workInProgress.flags |= PerformedWork;
              reconcileChildren(current, workInProgress, newChildren, renderLanes);
              return workInProgress.child;
            }

            function markWorkInProgressReceivedUpdate() {
              didReceiveUpdate = true;
            }

            function bailoutOnAlreadyFinishedWork(current, workInProgress, renderLanes) {
              if (current !== null) {
                // Reuse previous dependencies
                workInProgress.dependencies = current.dependencies;
              }

              {
                // Don't update "base" render times for bailouts.
                stopProfilerTimerIfRunning();
              }

              markSkippedUpdateLanes(workInProgress.lanes); // Check if the children have any pending work.

              if (!includesSomeLane(renderLanes, workInProgress.childLanes)) {
                // The children don't have any work either. We can skip them.
                // TODO: Once we add back resuming, we should check if the children are
                // a work-in-progress set. If so, we need to transfer their effects.
                return null;
              } else {
                // This fiber doesn't have work, but its subtree does. Clone the child
                // fibers and continue.
                cloneChildFibers(current, workInProgress);
                return workInProgress.child;
              }
            }

            function remountFiber(current, oldWorkInProgress, newWorkInProgress) {
              {
                var returnFiber = oldWorkInProgress.return;

                if (returnFiber === null) {
                  throw new Error('Cannot swap the root fiber.');
                } // Disconnect from the old current.
                // It will get deleted.


                current.alternate = null;
                oldWorkInProgress.alternate = null; // Connect to the new tree.

                newWorkInProgress.index = oldWorkInProgress.index;
                newWorkInProgress.sibling = oldWorkInProgress.sibling;
                newWorkInProgress.return = oldWorkInProgress.return;
                newWorkInProgress.ref = oldWorkInProgress.ref; // Replace the child/sibling pointers above it.

                if (oldWorkInProgress === returnFiber.child) {
                  returnFiber.child = newWorkInProgress;
                } else {
                  var prevSibling = returnFiber.child;

                  if (prevSibling === null) {
                    throw new Error('Expected parent to have a child.');
                  }

                  while (prevSibling.sibling !== oldWorkInProgress) {
                    prevSibling = prevSibling.sibling;

                    if (prevSibling === null) {
                      throw new Error('Expected to find the previous sibling.');
                    }
                  }

                  prevSibling.sibling = newWorkInProgress;
                } // Delete the old fiber and place the new one.
                // Since the old fiber is disconnected, we have to schedule it manually.


                var last = returnFiber.lastEffect;

                if (last !== null) {
                  last.nextEffect = current;
                  returnFiber.lastEffect = current;
                } else {
                  returnFiber.firstEffect = returnFiber.lastEffect = current;
                }

                current.nextEffect = null;
                current.flags = Deletion;
                newWorkInProgress.flags |= Placement; // Restart work from the new fiber.

                return newWorkInProgress;
              }
            }

            function beginWork(current, workInProgress, renderLanes) {
              var updateLanes = workInProgress.lanes;

              {
                if (workInProgress._debugNeedsRemount && current !== null) {
                  // This will restart the begin phase with a new fiber.
                  return remountFiber(current, workInProgress, createFiberFromTypeAndProps(workInProgress.type, workInProgress.key, workInProgress.pendingProps, workInProgress._debugOwner || null, workInProgress.mode, workInProgress.lanes));
                }
              }

              if (current !== null) {
                var oldProps = current.memoizedProps;
                var newProps = workInProgress.pendingProps;

                if (oldProps !== newProps || hasContextChanged() || ( // Force a re-render if the implementation changed due to hot reload:
                 workInProgress.type !== current.type )) {
                  // If props or context changed, mark the fiber as having performed work.
                  // This may be unset if the props are determined to be equal later (memo).
                  didReceiveUpdate = true;
                } else if (!includesSomeLane(renderLanes, updateLanes)) {
                  didReceiveUpdate = false; // This fiber does not have any pending work. Bailout without entering
                  // the begin phase. There's still some bookkeeping we that needs to be done
                  // in this optimized path, mostly pushing stuff onto the stack.

                  switch (workInProgress.tag) {
                    case HostRoot:
                      pushHostRootContext(workInProgress);
                      resetHydrationState();
                      break;

                    case HostComponent:
                      pushHostContext(workInProgress);
                      break;

                    case ClassComponent:
                      {
                        var Component = workInProgress.type;

                        if (isContextProvider(Component)) {
                          pushContextProvider(workInProgress);
                        }

                        break;
                      }

                    case HostPortal:
                      pushHostContainer(workInProgress, workInProgress.stateNode.containerInfo);
                      break;

                    case ContextProvider:
                      {
                        var newValue = workInProgress.memoizedProps.value;
                        pushProvider(workInProgress, newValue);
                        break;
                      }

                    case Profiler:
                      {
                        // Profiler should only call onRender when one of its descendants actually rendered.
                        var hasChildWork = includesSomeLane(renderLanes, workInProgress.childLanes);

                        if (hasChildWork) {
                          workInProgress.flags |= Update;
                        } // Reset effect durations for the next eventual effect phase.
                        // These are reset during render to allow the DevTools commit hook a chance to read them,


                        var stateNode = workInProgress.stateNode;
                        stateNode.effectDuration = 0;
                        stateNode.passiveEffectDuration = 0;
                      }

                      break;

                    case SuspenseComponent:
                      {
                        var state = workInProgress.memoizedState;

                        if (state !== null) {
                          // whether to retry the primary children, or to skip over it and
                          // go straight to the fallback. Check the priority of the primary
                          // child fragment.


                          var primaryChildFragment = workInProgress.child;
                          var primaryChildLanes = primaryChildFragment.childLanes;

                          if (includesSomeLane(renderLanes, primaryChildLanes)) {
                            // The primary children have pending work. Use the normal path
                            // to attempt to render the primary children again.
                            return updateSuspenseComponent(current, workInProgress, renderLanes);
                          } else {
                            // The primary child fragment does not have pending work marked
                            // on it
                            pushSuspenseContext(workInProgress, setDefaultShallowSuspenseContext(suspenseStackCursor.current)); // The primary children do not have pending work with sufficient
                            // priority. Bailout.

                            var child = bailoutOnAlreadyFinishedWork(current, workInProgress, renderLanes);

                            if (child !== null) {
                              // The fallback children have pending work. Skip over the
                              // primary children and work on the fallback.
                              return child.sibling;
                            } else {
                              return null;
                            }
                          }
                        } else {
                          pushSuspenseContext(workInProgress, setDefaultShallowSuspenseContext(suspenseStackCursor.current));
                        }

                        break;
                      }

                    case SuspenseListComponent:
                      {
                        var didSuspendBefore = (current.flags & DidCapture) !== NoFlags;

                        var _hasChildWork = includesSomeLane(renderLanes, workInProgress.childLanes);

                        if (didSuspendBefore) {
                          if (_hasChildWork) {
                            // If something was in fallback state last time, and we have all the
                            // same children then we're still in progressive loading state.
                            // Something might get unblocked by state updates or retries in the
                            // tree which will affect the tail. So we need to use the normal
                            // path to compute the correct tail.
                            return updateSuspenseListComponent(current, workInProgress, renderLanes);
                          } // If none of the children had any work, that means that none of
                          // them got retried so they'll still be blocked in the same way
                          // as before. We can fast bail out.


                          workInProgress.flags |= DidCapture;
                        } // If nothing suspended before and we're rendering the same children,
                        // then the tail doesn't matter. Anything new that suspends will work
                        // in the "together" mode, so we can continue from the state we had.


                        var renderState = workInProgress.memoizedState;

                        if (renderState !== null) {
                          // Reset to the "together" mode in case we've started a different
                          // update in the past but didn't complete it.
                          renderState.rendering = null;
                          renderState.tail = null;
                          renderState.lastEffect = null;
                        }

                        pushSuspenseContext(workInProgress, suspenseStackCursor.current);

                        if (_hasChildWork) {
                          break;
                        } else {
                          // If none of the children had any work, that means that none of
                          // them got retried so they'll still be blocked in the same way
                          // as before. We can fast bail out.
                          return null;
                        }
                      }

                    case OffscreenComponent:
                    case LegacyHiddenComponent:
                      {
                        // Need to check if the tree still needs to be deferred. This is
                        // almost identical to the logic used in the normal update path,
                        // so we'll just enter that. The only difference is we'll bail out
                        // at the next level instead of this one, because the child props
                        // have not changed. Which is fine.
                        // TODO: Probably should refactor `beginWork` to split the bailout
                        // path from the normal path. I'm tempted to do a labeled break here
                        // but I won't :)
                        workInProgress.lanes = NoLanes;
                        return updateOffscreenComponent(current, workInProgress, renderLanes);
                      }
                  }

                  return bailoutOnAlreadyFinishedWork(current, workInProgress, renderLanes);
                } else {
                  if ((current.flags & ForceUpdateForLegacySuspense) !== NoFlags) {
                    // This is a special case that only exists for legacy mode.
                    // See https://github.com/facebook/react/pull/19216.
                    didReceiveUpdate = true;
                  } else {
                    // An update was scheduled on this fiber, but there are no new props
                    // nor legacy context. Set this to false. If an update queue or context
                    // consumer produces a changed value, it will set this to true. Otherwise,
                    // the component will assume the children have not changed and bail out.
                    didReceiveUpdate = false;
                  }
                }
              } else {
                didReceiveUpdate = false;
              } // Before entering the begin phase, clear pending update priority.
              // TODO: This assumes that we're about to evaluate the component and process
              // the update queue. However, there's an exception: SimpleMemoComponent
              // sometimes bails out later in the begin phase. This indicates that we should
              // move this assignment out of the common path and into each branch.


              workInProgress.lanes = NoLanes;

              switch (workInProgress.tag) {
                case IndeterminateComponent:
                  {
                    return mountIndeterminateComponent(current, workInProgress, workInProgress.type, renderLanes);
                  }

                case LazyComponent:
                  {
                    var elementType = workInProgress.elementType;
                    return mountLazyComponent(current, workInProgress, elementType, updateLanes, renderLanes);
                  }

                case FunctionComponent:
                  {
                    var _Component = workInProgress.type;
                    var unresolvedProps = workInProgress.pendingProps;
                    var resolvedProps = workInProgress.elementType === _Component ? unresolvedProps : resolveDefaultProps(_Component, unresolvedProps);
                    return updateFunctionComponent(current, workInProgress, _Component, resolvedProps, renderLanes);
                  }

                case ClassComponent:
                  {
                    var _Component2 = workInProgress.type;
                    var _unresolvedProps = workInProgress.pendingProps;

                    var _resolvedProps = workInProgress.elementType === _Component2 ? _unresolvedProps : resolveDefaultProps(_Component2, _unresolvedProps);

                    return updateClassComponent(current, workInProgress, _Component2, _resolvedProps, renderLanes);
                  }

                case HostRoot:
                  return updateHostRoot(current, workInProgress, renderLanes);

                case HostComponent:
                  return updateHostComponent(current, workInProgress, renderLanes);

                case HostText:
                  return updateHostText(current, workInProgress);

                case SuspenseComponent:
                  return updateSuspenseComponent(current, workInProgress, renderLanes);

                case HostPortal:
                  return updatePortalComponent(current, workInProgress, renderLanes);

                case ForwardRef:
                  {
                    var type = workInProgress.type;
                    var _unresolvedProps2 = workInProgress.pendingProps;

                    var _resolvedProps2 = workInProgress.elementType === type ? _unresolvedProps2 : resolveDefaultProps(type, _unresolvedProps2);

                    return updateForwardRef(current, workInProgress, type, _resolvedProps2, renderLanes);
                  }

                case Fragment:
                  return updateFragment(current, workInProgress, renderLanes);

                case Mode:
                  return updateMode(current, workInProgress, renderLanes);

                case Profiler:
                  return updateProfiler(current, workInProgress, renderLanes);

                case ContextProvider:
                  return updateContextProvider(current, workInProgress, renderLanes);

                case ContextConsumer:
                  return updateContextConsumer(current, workInProgress, renderLanes);

                case MemoComponent:
                  {
                    var _type2 = workInProgress.type;
                    var _unresolvedProps3 = workInProgress.pendingProps; // Resolve outer props first, then resolve inner props.

                    var _resolvedProps3 = resolveDefaultProps(_type2, _unresolvedProps3);

                    {
                      if (workInProgress.type !== workInProgress.elementType) {
                        var outerPropTypes = _type2.propTypes;

                        if (outerPropTypes) {
                          checkPropTypes(outerPropTypes, _resolvedProps3, // Resolved for outer only
                          'prop', getComponentName(_type2));
                        }
                      }
                    }

                    _resolvedProps3 = resolveDefaultProps(_type2.type, _resolvedProps3);
                    return updateMemoComponent(current, workInProgress, _type2, _resolvedProps3, updateLanes, renderLanes);
                  }

                case SimpleMemoComponent:
                  {
                    return updateSimpleMemoComponent(current, workInProgress, workInProgress.type, workInProgress.pendingProps, updateLanes, renderLanes);
                  }

                case IncompleteClassComponent:
                  {
                    var _Component3 = workInProgress.type;
                    var _unresolvedProps4 = workInProgress.pendingProps;

                    var _resolvedProps4 = workInProgress.elementType === _Component3 ? _unresolvedProps4 : resolveDefaultProps(_Component3, _unresolvedProps4);

                    return mountIncompleteClassComponent(current, workInProgress, _Component3, _resolvedProps4, renderLanes);
                  }

                case SuspenseListComponent:
                  {
                    return updateSuspenseListComponent(current, workInProgress, renderLanes);
                  }

                case FundamentalComponent:
                  {

                    break;
                  }

                case ScopeComponent:
                  {

                    break;
                  }

                case Block:
                  {

                    break;
                  }

                case OffscreenComponent:
                  {
                    return updateOffscreenComponent(current, workInProgress, renderLanes);
                  }

                case LegacyHiddenComponent:
                  {
                    return updateLegacyHiddenComponent(current, workInProgress, renderLanes);
                  }
              }

              {
                {
                  throw Error( "Unknown unit of work tag (" + workInProgress.tag + "). This error is likely caused by a bug in React. Please file an issue." );
                }
              }
            }

            function markUpdate(workInProgress) {
              // Tag the fiber with an update effect. This turns a Placement into
              // a PlacementAndUpdate.
              workInProgress.flags |= Update;
            }

            function markRef$1(workInProgress) {
              workInProgress.flags |= Ref;
            }

            var appendAllChildren;
            var updateHostContainer;
            var updateHostComponent$1;
            var updateHostText$1;

            {
              // Mutation mode
              appendAllChildren = function (parent, workInProgress, needsVisibilityToggle, isHidden) {
                // We only have the top Fiber that was created but we need recurse down its
                // children to find all the terminal nodes.
                var node = workInProgress.child;

                while (node !== null) {
                  if (node.tag === HostComponent || node.tag === HostText) {
                    appendInitialChild(parent, node.stateNode);
                  } else if (node.tag === HostPortal) ; else if (node.child !== null) {
                    node.child.return = node;
                    node = node.child;
                    continue;
                  }

                  if (node === workInProgress) {
                    return;
                  }

                  while (node.sibling === null) {
                    if (node.return === null || node.return === workInProgress) {
                      return;
                    }

                    node = node.return;
                  }

                  node.sibling.return = node.return;
                  node = node.sibling;
                }
              };

              updateHostContainer = function (workInProgress) {// Noop
              };

              updateHostComponent$1 = function (current, workInProgress, type, newProps, rootContainerInstance) {
                // If we have an alternate, that means this is an update and we need to
                // schedule a side-effect to do the updates.
                var oldProps = current.memoizedProps;

                if (oldProps === newProps) {
                  // In mutation mode, this is sufficient for a bailout because
                  // we won't touch this node even if children changed.
                  return;
                } // If we get updated because one of our children updated, we don't
                // have newProps so we'll have to reuse them.
                // TODO: Split the update API as separate for the props vs. children.
                // Even better would be if children weren't special cased at all tho.


                var instance = workInProgress.stateNode;
                var currentHostContext = getHostContext(); // TODO: Experiencing an error where oldProps is null. Suggests a host
                // component is hitting the resume path. Figure out why. Possibly
                // related to `hidden`.

                var updatePayload = prepareUpdate(instance, type, oldProps, newProps, rootContainerInstance, currentHostContext); // TODO: Type this specific to this type of component.

                workInProgress.updateQueue = updatePayload; // If the update payload indicates that there is a change or if there
                // is a new ref we mark this as an update. All the work is done in commitWork.

                if (updatePayload) {
                  markUpdate(workInProgress);
                }
              };

              updateHostText$1 = function (current, workInProgress, oldText, newText) {
                // If the text differs, mark it as an update. All the work in done in commitWork.
                if (oldText !== newText) {
                  markUpdate(workInProgress);
                }
              };
            }

            function cutOffTailIfNeeded(renderState, hasRenderedATailFallback) {
              if (getIsHydrating()) {
                // If we're hydrating, we should consume as many items as we can
                // so we don't leave any behind.
                return;
              }

              switch (renderState.tailMode) {
                case 'hidden':
                  {
                    // Any insertions at the end of the tail list after this point
                    // should be invisible. If there are already mounted boundaries
                    // anything before them are not considered for collapsing.
                    // Therefore we need to go through the whole tail to find if
                    // there are any.
                    var tailNode = renderState.tail;
                    var lastTailNode = null;

                    while (tailNode !== null) {
                      if (tailNode.alternate !== null) {
                        lastTailNode = tailNode;
                      }

                      tailNode = tailNode.sibling;
                    } // Next we're simply going to delete all insertions after the
                    // last rendered item.


                    if (lastTailNode === null) {
                      // All remaining items in the tail are insertions.
                      renderState.tail = null;
                    } else {
                      // Detach the insertion after the last node that was already
                      // inserted.
                      lastTailNode.sibling = null;
                    }

                    break;
                  }

                case 'collapsed':
                  {
                    // Any insertions at the end of the tail list after this point
                    // should be invisible. If there are already mounted boundaries
                    // anything before them are not considered for collapsing.
                    // Therefore we need to go through the whole tail to find if
                    // there are any.
                    var _tailNode = renderState.tail;
                    var _lastTailNode = null;

                    while (_tailNode !== null) {
                      if (_tailNode.alternate !== null) {
                        _lastTailNode = _tailNode;
                      }

                      _tailNode = _tailNode.sibling;
                    } // Next we're simply going to delete all insertions after the
                    // last rendered item.


                    if (_lastTailNode === null) {
                      // All remaining items in the tail are insertions.
                      if (!hasRenderedATailFallback && renderState.tail !== null) {
                        // We suspended during the head. We want to show at least one
                        // row at the tail. So we'll keep on and cut off the rest.
                        renderState.tail.sibling = null;
                      } else {
                        renderState.tail = null;
                      }
                    } else {
                      // Detach the insertion after the last node that was already
                      // inserted.
                      _lastTailNode.sibling = null;
                    }

                    break;
                  }
              }
            }

            function completeWork(current, workInProgress, renderLanes) {
              var newProps = workInProgress.pendingProps;

              switch (workInProgress.tag) {
                case IndeterminateComponent:
                case LazyComponent:
                case SimpleMemoComponent:
                case FunctionComponent:
                case ForwardRef:
                case Fragment:
                case Mode:
                case Profiler:
                case ContextConsumer:
                case MemoComponent:
                  return null;

                case ClassComponent:
                  {
                    var Component = workInProgress.type;

                    if (isContextProvider(Component)) {
                      popContext(workInProgress);
                    }

                    return null;
                  }

                case HostRoot:
                  {
                    popHostContainer(workInProgress);
                    popTopLevelContextObject(workInProgress);
                    resetWorkInProgressVersions();
                    var fiberRoot = workInProgress.stateNode;

                    if (fiberRoot.pendingContext) {
                      fiberRoot.context = fiberRoot.pendingContext;
                      fiberRoot.pendingContext = null;
                    }

                    if (current === null || current.child === null) {
                      // If we hydrated, pop so that we can delete any remaining children
                      // that weren't hydrated.
                      var wasHydrated = popHydrationState(workInProgress);

                      if (wasHydrated) {
                        // If we hydrated, then we'll need to schedule an update for
                        // the commit side-effects on the root.
                        markUpdate(workInProgress);
                      } else if (!fiberRoot.hydrate) {
                        // Schedule an effect to clear this container at the start of the next commit.
                        // This handles the case of React rendering into a container with previous children.
                        // It's also safe to do for updates too, because current.child would only be null
                        // if the previous render was null (so the the container would already be empty).
                        workInProgress.flags |= Snapshot;
                      }
                    }

                    updateHostContainer(workInProgress);
                    return null;
                  }

                case HostComponent:
                  {
                    popHostContext(workInProgress);
                    var rootContainerInstance = getRootHostContainer();
                    var type = workInProgress.type;

                    if (current !== null && workInProgress.stateNode != null) {
                      updateHostComponent$1(current, workInProgress, type, newProps, rootContainerInstance);

                      if (current.ref !== workInProgress.ref) {
                        markRef$1(workInProgress);
                      }
                    } else {
                      if (!newProps) {
                        if (!(workInProgress.stateNode !== null)) {
                          {
                            throw Error( "We must have new props for new mounts. This error is likely caused by a bug in React. Please file an issue." );
                          }
                        } // This can happen when we abort work.


                        return null;
                      }

                      var currentHostContext = getHostContext(); // TODO: Move createInstance to beginWork and keep it on a context
                      // "stack" as the parent. Then append children as we go in beginWork
                      // or completeWork depending on whether we want to add them top->down or
                      // bottom->up. Top->down is faster in IE11.

                      var _wasHydrated = popHydrationState(workInProgress);

                      if (_wasHydrated) {
                        // TODO: Move this and createInstance step into the beginPhase
                        // to consolidate.
                        if (prepareToHydrateHostInstance(workInProgress, rootContainerInstance, currentHostContext)) {
                          // If changes to the hydrated node need to be applied at the
                          // commit-phase we mark this as such.
                          markUpdate(workInProgress);
                        }
                      } else {
                        var instance = createInstance(type, newProps, rootContainerInstance, currentHostContext, workInProgress);
                        appendAllChildren(instance, workInProgress, false, false);
                        workInProgress.stateNode = instance; // Certain renderers require commit-time effects for initial mount.
                        // (eg DOM renderer supports auto-focus for certain elements).
                        // Make sure such renderers get scheduled for later work.

                        if (finalizeInitialChildren(instance, type, newProps, rootContainerInstance)) {
                          markUpdate(workInProgress);
                        }
                      }

                      if (workInProgress.ref !== null) {
                        // If there is a ref on a host node we need to schedule a callback
                        markRef$1(workInProgress);
                      }
                    }

                    return null;
                  }

                case HostText:
                  {
                    var newText = newProps;

                    if (current && workInProgress.stateNode != null) {
                      var oldText = current.memoizedProps; // If we have an alternate, that means this is an update and we need
                      // to schedule a side-effect to do the updates.

                      updateHostText$1(current, workInProgress, oldText, newText);
                    } else {
                      if (typeof newText !== 'string') {
                        if (!(workInProgress.stateNode !== null)) {
                          {
                            throw Error( "We must have new props for new mounts. This error is likely caused by a bug in React. Please file an issue." );
                          }
                        } // This can happen when we abort work.

                      }

                      var _rootContainerInstance = getRootHostContainer();

                      var _currentHostContext = getHostContext();

                      var _wasHydrated2 = popHydrationState(workInProgress);

                      if (_wasHydrated2) {
                        if (prepareToHydrateHostTextInstance(workInProgress)) {
                          markUpdate(workInProgress);
                        }
                      } else {
                        workInProgress.stateNode = createTextInstance(newText, _rootContainerInstance, _currentHostContext, workInProgress);
                      }
                    }

                    return null;
                  }

                case SuspenseComponent:
                  {
                    popSuspenseContext(workInProgress);
                    var nextState = workInProgress.memoizedState;

                    if ((workInProgress.flags & DidCapture) !== NoFlags) {
                      // Something suspended. Re-render with the fallback children.
                      workInProgress.lanes = renderLanes; // Do not reset the effect list.

                      if ( (workInProgress.mode & ProfileMode) !== NoMode) {
                        transferActualDuration(workInProgress);
                      }

                      return workInProgress;
                    }

                    var nextDidTimeout = nextState !== null;
                    var prevDidTimeout = false;

                    if (current === null) {
                      if (workInProgress.memoizedProps.fallback !== undefined) {
                        popHydrationState(workInProgress);
                      }
                    } else {
                      var prevState = current.memoizedState;
                      prevDidTimeout = prevState !== null;
                    }

                    if (nextDidTimeout && !prevDidTimeout) {
                      // If this subtreee is running in blocking mode we can suspend,
                      // otherwise we won't suspend.
                      // TODO: This will still suspend a synchronous tree if anything
                      // in the concurrent tree already suspended during this render.
                      // This is a known bug.
                      if ((workInProgress.mode & BlockingMode) !== NoMode) {
                        // TODO: Move this back to throwException because this is too late
                        // if this is a large tree which is common for initial loads. We
                        // don't know if we should restart a render or not until we get
                        // this marker, and this is too late.
                        // If this render already had a ping or lower pri updates,
                        // and this is the first time we know we're going to suspend we
                        // should be able to immediately restart from within throwException.
                        var hasInvisibleChildContext = current === null && workInProgress.memoizedProps.unstable_avoidThisFallback !== true;

                        if (hasInvisibleChildContext || hasSuspenseContext(suspenseStackCursor.current, InvisibleParentSuspenseContext)) {
                          // If this was in an invisible tree or a new render, then showing
                          // this boundary is ok.
                          renderDidSuspend();
                        } else {
                          // Otherwise, we're going to have to hide content so we should
                          // suspend for longer if possible.
                          renderDidSuspendDelayIfPossible();
                        }
                      }
                    }

                    {
                      // TODO: Only schedule updates if these values are non equal, i.e. it changed.
                      if (nextDidTimeout || prevDidTimeout) {
                        // If this boundary just timed out, schedule an effect to attach a
                        // retry listener to the promise. This flag is also used to hide the
                        // primary children. In mutation mode, we also need the flag to
                        // *unhide* children that were previously hidden, so check if this
                        // is currently timed out, too.
                        workInProgress.flags |= Update;
                      }
                    }

                    return null;
                  }

                case HostPortal:
                  popHostContainer(workInProgress);
                  updateHostContainer(workInProgress);

                  if (current === null) {
                    preparePortalMount(workInProgress.stateNode.containerInfo);
                  }

                  return null;

                case ContextProvider:
                  // Pop provider fiber
                  popProvider(workInProgress);
                  return null;

                case IncompleteClassComponent:
                  {
                    // Same as class component case. I put it down here so that the tags are
                    // sequential to ensure this switch is compiled to a jump table.
                    var _Component = workInProgress.type;

                    if (isContextProvider(_Component)) {
                      popContext(workInProgress);
                    }

                    return null;
                  }

                case SuspenseListComponent:
                  {
                    popSuspenseContext(workInProgress);
                    var renderState = workInProgress.memoizedState;

                    if (renderState === null) {
                      // We're running in the default, "independent" mode.
                      // We don't do anything in this mode.
                      return null;
                    }

                    var didSuspendAlready = (workInProgress.flags & DidCapture) !== NoFlags;
                    var renderedTail = renderState.rendering;

                    if (renderedTail === null) {
                      // We just rendered the head.
                      if (!didSuspendAlready) {
                        // This is the first pass. We need to figure out if anything is still
                        // suspended in the rendered set.
                        // If new content unsuspended, but there's still some content that
                        // didn't. Then we need to do a second pass that forces everything
                        // to keep showing their fallbacks.
                        // We might be suspended if something in this render pass suspended, or
                        // something in the previous committed pass suspended. Otherwise,
                        // there's no chance so we can skip the expensive call to
                        // findFirstSuspended.
                        var cannotBeSuspended = renderHasNotSuspendedYet() && (current === null || (current.flags & DidCapture) === NoFlags);

                        if (!cannotBeSuspended) {
                          var row = workInProgress.child;

                          while (row !== null) {
                            var suspended = findFirstSuspended(row);

                            if (suspended !== null) {
                              didSuspendAlready = true;
                              workInProgress.flags |= DidCapture;
                              cutOffTailIfNeeded(renderState, false); // If this is a newly suspended tree, it might not get committed as
                              // part of the second pass. In that case nothing will subscribe to
                              // its thennables. Instead, we'll transfer its thennables to the
                              // SuspenseList so that it can retry if they resolve.
                              // There might be multiple of these in the list but since we're
                              // going to wait for all of them anyway, it doesn't really matter
                              // which ones gets to ping. In theory we could get clever and keep
                              // track of how many dependencies remain but it gets tricky because
                              // in the meantime, we can add/remove/change items and dependencies.
                              // We might bail out of the loop before finding any but that
                              // doesn't matter since that means that the other boundaries that
                              // we did find already has their listeners attached.

                              var newThennables = suspended.updateQueue;

                              if (newThennables !== null) {
                                workInProgress.updateQueue = newThennables;
                                workInProgress.flags |= Update;
                              } // Rerender the whole list, but this time, we'll force fallbacks
                              // to stay in place.
                              // Reset the effect list before doing the second pass since that's now invalid.


                              if (renderState.lastEffect === null) {
                                workInProgress.firstEffect = null;
                              }

                              workInProgress.lastEffect = renderState.lastEffect; // Reset the child fibers to their original state.

                              resetChildFibers(workInProgress, renderLanes); // Set up the Suspense Context to force suspense and immediately
                              // rerender the children.

                              pushSuspenseContext(workInProgress, setShallowSuspenseContext(suspenseStackCursor.current, ForceSuspenseFallback));
                              return workInProgress.child;
                            }

                            row = row.sibling;
                          }
                        }

                        if (renderState.tail !== null && now() > getRenderTargetTime()) {
                          // We have already passed our CPU deadline but we still have rows
                          // left in the tail. We'll just give up further attempts to render
                          // the main content and only render fallbacks.
                          workInProgress.flags |= DidCapture;
                          didSuspendAlready = true;
                          cutOffTailIfNeeded(renderState, false); // Since nothing actually suspended, there will nothing to ping this
                          // to get it started back up to attempt the next item. While in terms
                          // of priority this work has the same priority as this current render,
                          // it's not part of the same transition once the transition has
                          // committed. If it's sync, we still want to yield so that it can be
                          // painted. Conceptually, this is really the same as pinging.
                          // We can use any RetryLane even if it's the one currently rendering
                          // since we're leaving it behind on this node.

                          workInProgress.lanes = SomeRetryLane;

                          {
                            markSpawnedWork(SomeRetryLane);
                          }
                        }
                      } else {
                        cutOffTailIfNeeded(renderState, false);
                      } // Next we're going to render the tail.

                    } else {
                      // Append the rendered row to the child list.
                      if (!didSuspendAlready) {
                        var _suspended = findFirstSuspended(renderedTail);

                        if (_suspended !== null) {
                          workInProgress.flags |= DidCapture;
                          didSuspendAlready = true; // Ensure we transfer the update queue to the parent so that it doesn't
                          // get lost if this row ends up dropped during a second pass.

                          var _newThennables = _suspended.updateQueue;

                          if (_newThennables !== null) {
                            workInProgress.updateQueue = _newThennables;
                            workInProgress.flags |= Update;
                          }

                          cutOffTailIfNeeded(renderState, true); // This might have been modified.

                          if (renderState.tail === null && renderState.tailMode === 'hidden' && !renderedTail.alternate && !getIsHydrating() // We don't cut it if we're hydrating.
                          ) {
                              // We need to delete the row we just rendered.
                              // Reset the effect list to what it was before we rendered this
                              // child. The nested children have already appended themselves.
                              var lastEffect = workInProgress.lastEffect = renderState.lastEffect; // Remove any effects that were appended after this point.

                              if (lastEffect !== null) {
                                lastEffect.nextEffect = null;
                              } // We're done.


                              return null;
                            }
                        } else if ( // The time it took to render last row is greater than the remaining
                        // time we have to render. So rendering one more row would likely
                        // exceed it.
                        now() * 2 - renderState.renderingStartTime > getRenderTargetTime() && renderLanes !== OffscreenLane) {
                          // We have now passed our CPU deadline and we'll just give up further
                          // attempts to render the main content and only render fallbacks.
                          // The assumption is that this is usually faster.
                          workInProgress.flags |= DidCapture;
                          didSuspendAlready = true;
                          cutOffTailIfNeeded(renderState, false); // Since nothing actually suspended, there will nothing to ping this
                          // to get it started back up to attempt the next item. While in terms
                          // of priority this work has the same priority as this current render,
                          // it's not part of the same transition once the transition has
                          // committed. If it's sync, we still want to yield so that it can be
                          // painted. Conceptually, this is really the same as pinging.
                          // We can use any RetryLane even if it's the one currently rendering
                          // since we're leaving it behind on this node.

                          workInProgress.lanes = SomeRetryLane;

                          {
                            markSpawnedWork(SomeRetryLane);
                          }
                        }
                      }

                      if (renderState.isBackwards) {
                        // The effect list of the backwards tail will have been added
                        // to the end. This breaks the guarantee that life-cycles fire in
                        // sibling order but that isn't a strong guarantee promised by React.
                        // Especially since these might also just pop in during future commits.
                        // Append to the beginning of the list.
                        renderedTail.sibling = workInProgress.child;
                        workInProgress.child = renderedTail;
                      } else {
                        var previousSibling = renderState.last;

                        if (previousSibling !== null) {
                          previousSibling.sibling = renderedTail;
                        } else {
                          workInProgress.child = renderedTail;
                        }

                        renderState.last = renderedTail;
                      }
                    }

                    if (renderState.tail !== null) {
                      // We still have tail rows to render.
                      // Pop a row.
                      var next = renderState.tail;
                      renderState.rendering = next;
                      renderState.tail = next.sibling;
                      renderState.lastEffect = workInProgress.lastEffect;
                      renderState.renderingStartTime = now();
                      next.sibling = null; // Restore the context.
                      // TODO: We can probably just avoid popping it instead and only
                      // setting it the first time we go from not suspended to suspended.

                      var suspenseContext = suspenseStackCursor.current;

                      if (didSuspendAlready) {
                        suspenseContext = setShallowSuspenseContext(suspenseContext, ForceSuspenseFallback);
                      } else {
                        suspenseContext = setDefaultShallowSuspenseContext(suspenseContext);
                      }

                      pushSuspenseContext(workInProgress, suspenseContext); // Do a pass over the next row.

                      return next;
                    }

                    return null;
                  }

                case FundamentalComponent:
                  {

                    break;
                  }

                case ScopeComponent:
                  {

                    break;
                  }

                case Block:

                  break;

                case OffscreenComponent:
                case LegacyHiddenComponent:
                  {
                    popRenderLanes(workInProgress);

                    if (current !== null) {
                      var _nextState = workInProgress.memoizedState;
                      var _prevState = current.memoizedState;
                      var prevIsHidden = _prevState !== null;
                      var nextIsHidden = _nextState !== null;

                      if (prevIsHidden !== nextIsHidden && newProps.mode !== 'unstable-defer-without-hiding') {
                        workInProgress.flags |= Update;
                      }
                    }

                    return null;
                  }
              }

              {
                {
                  throw Error( "Unknown unit of work tag (" + workInProgress.tag + "). This error is likely caused by a bug in React. Please file an issue." );
                }
              }
            }

            function unwindWork(workInProgress, renderLanes) {
              switch (workInProgress.tag) {
                case ClassComponent:
                  {
                    var Component = workInProgress.type;

                    if (isContextProvider(Component)) {
                      popContext(workInProgress);
                    }

                    var flags = workInProgress.flags;

                    if (flags & ShouldCapture) {
                      workInProgress.flags = flags & ~ShouldCapture | DidCapture;

                      if ( (workInProgress.mode & ProfileMode) !== NoMode) {
                        transferActualDuration(workInProgress);
                      }

                      return workInProgress;
                    }

                    return null;
                  }

                case HostRoot:
                  {
                    popHostContainer(workInProgress);
                    popTopLevelContextObject(workInProgress);
                    resetWorkInProgressVersions();
                    var _flags = workInProgress.flags;

                    if (!((_flags & DidCapture) === NoFlags)) {
                      {
                        throw Error( "The root failed to unmount after an error. This is likely a bug in React. Please file an issue." );
                      }
                    }

                    workInProgress.flags = _flags & ~ShouldCapture | DidCapture;
                    return workInProgress;
                  }

                case HostComponent:
                  {
                    // TODO: popHydrationState
                    popHostContext(workInProgress);
                    return null;
                  }

                case SuspenseComponent:
                  {
                    popSuspenseContext(workInProgress);

                    var _flags2 = workInProgress.flags;

                    if (_flags2 & ShouldCapture) {
                      workInProgress.flags = _flags2 & ~ShouldCapture | DidCapture; // Captured a suspense effect. Re-render the boundary.

                      if ( (workInProgress.mode & ProfileMode) !== NoMode) {
                        transferActualDuration(workInProgress);
                      }

                      return workInProgress;
                    }

                    return null;
                  }

                case SuspenseListComponent:
                  {
                    popSuspenseContext(workInProgress); // SuspenseList doesn't actually catch anything. It should've been
                    // caught by a nested boundary. If not, it should bubble through.

                    return null;
                  }

                case HostPortal:
                  popHostContainer(workInProgress);
                  return null;

                case ContextProvider:
                  popProvider(workInProgress);
                  return null;

                case OffscreenComponent:
                case LegacyHiddenComponent:
                  popRenderLanes(workInProgress);
                  return null;

                default:
                  return null;
              }
            }

            function unwindInterruptedWork(interruptedWork) {
              switch (interruptedWork.tag) {
                case ClassComponent:
                  {
                    var childContextTypes = interruptedWork.type.childContextTypes;

                    if (childContextTypes !== null && childContextTypes !== undefined) {
                      popContext(interruptedWork);
                    }

                    break;
                  }

                case HostRoot:
                  {
                    popHostContainer(interruptedWork);
                    popTopLevelContextObject(interruptedWork);
                    resetWorkInProgressVersions();
                    break;
                  }

                case HostComponent:
                  {
                    popHostContext(interruptedWork);
                    break;
                  }

                case HostPortal:
                  popHostContainer(interruptedWork);
                  break;

                case SuspenseComponent:
                  popSuspenseContext(interruptedWork);
                  break;

                case SuspenseListComponent:
                  popSuspenseContext(interruptedWork);
                  break;

                case ContextProvider:
                  popProvider(interruptedWork);
                  break;

                case OffscreenComponent:
                case LegacyHiddenComponent:
                  popRenderLanes(interruptedWork);
                  break;
              }
            }

            function createCapturedValue(value, source) {
              // If the value is an error, call this function immediately after it is thrown
              // so the stack is accurate.
              return {
                value: value,
                source: source,
                stack: getStackByFiberInDevAndProd(source)
              };
            }

            // This module is forked in different environments.
            // By default, return `true` to log errors to the console.
            // Forks can return `false` if this isn't desirable.
            function showErrorDialog(boundary, errorInfo) {
              return true;
            }

            function logCapturedError(boundary, errorInfo) {
              try {
                var logError = showErrorDialog(boundary, errorInfo); // Allow injected showErrorDialog() to prevent default console.error logging.
                // This enables renderers like ReactNative to better manage redbox behavior.

                if (logError === false) {
                  return;
                }

                var error = errorInfo.value;

                if (true) {
                  var source = errorInfo.source;
                  var stack = errorInfo.stack;
                  var componentStack = stack !== null ? stack : ''; // Browsers support silencing uncaught errors by calling
                  // `preventDefault()` in window `error` handler.
                  // We record this information as an expando on the error.

                  if (error != null && error._suppressLogging) {
                    if (boundary.tag === ClassComponent) {
                      // The error is recoverable and was silenced.
                      // Ignore it and don't print the stack addendum.
                      // This is handy for testing error boundaries without noise.
                      return;
                    } // The error is fatal. Since the silencing might have
                    // been accidental, we'll surface it anyway.
                    // However, the browser would have silenced the original error
                    // so we'll print it first, and then print the stack addendum.


                    console['error'](error); // Don't transform to our wrapper
                    // For a more detailed description of this block, see:
                    // https://github.com/facebook/react/pull/13384
                  }

                  var componentName = source ? getComponentName(source.type) : null;
                  var componentNameMessage = componentName ? "The above error occurred in the <" + componentName + "> component:" : 'The above error occurred in one of your React components:';
                  var errorBoundaryMessage;
                  var errorBoundaryName = getComponentName(boundary.type);

                  if (errorBoundaryName) {
                    errorBoundaryMessage = "React will try to recreate this component tree from scratch " + ("using the error boundary you provided, " + errorBoundaryName + ".");
                  } else {
                    errorBoundaryMessage = 'Consider adding an error boundary to your tree to customize error handling behavior.\n' + 'Visit https://reactjs.org/link/error-boundaries to learn more about error boundaries.';
                  }

                  var combinedMessage = componentNameMessage + "\n" + componentStack + "\n\n" + ("" + errorBoundaryMessage); // In development, we provide our own message with just the component stack.
                  // We don't include the original error message and JS stack because the browser
                  // has already printed it. Even if the application swallows the error, it is still
                  // displayed by the browser thanks to the DEV-only fake event trick in ReactErrorUtils.

                  console['error'](combinedMessage); // Don't transform to our wrapper
                }
              } catch (e) {
                // This method must not throw, or React internal state will get messed up.
                // If console.error is overridden, or logCapturedError() shows a dialog that throws,
                // we want to report this error outside of the normal stack as a last resort.
                // https://github.com/facebook/react/issues/13188
                setTimeout(function () {
                  throw e;
                });
              }
            }

            var PossiblyWeakMap$1 = typeof WeakMap === 'function' ? WeakMap : Map;

            function createRootErrorUpdate(fiber, errorInfo, lane) {
              var update = createUpdate(NoTimestamp, lane); // Unmount the root by rendering null.

              update.tag = CaptureUpdate; // Caution: React DevTools currently depends on this property
              // being called "element".

              update.payload = {
                element: null
              };
              var error = errorInfo.value;

              update.callback = function () {
                onUncaughtError(error);
                logCapturedError(fiber, errorInfo);
              };

              return update;
            }

            function createClassErrorUpdate(fiber, errorInfo, lane) {
              var update = createUpdate(NoTimestamp, lane);
              update.tag = CaptureUpdate;
              var getDerivedStateFromError = fiber.type.getDerivedStateFromError;

              if (typeof getDerivedStateFromError === 'function') {
                var error$1 = errorInfo.value;

                update.payload = function () {
                  logCapturedError(fiber, errorInfo);
                  return getDerivedStateFromError(error$1);
                };
              }

              var inst = fiber.stateNode;

              if (inst !== null && typeof inst.componentDidCatch === 'function') {
                update.callback = function callback() {
                  {
                    markFailedErrorBoundaryForHotReloading(fiber);
                  }

                  if (typeof getDerivedStateFromError !== 'function') {
                    // To preserve the preexisting retry behavior of error boundaries,
                    // we keep track of which ones already failed during this batch.
                    // This gets reset before we yield back to the browser.
                    // TODO: Warn in strict mode if getDerivedStateFromError is
                    // not defined.
                    markLegacyErrorBoundaryAsFailed(this); // Only log here if componentDidCatch is the only error boundary method defined

                    logCapturedError(fiber, errorInfo);
                  }

                  var error$1 = errorInfo.value;
                  var stack = errorInfo.stack;
                  this.componentDidCatch(error$1, {
                    componentStack: stack !== null ? stack : ''
                  });

                  {
                    if (typeof getDerivedStateFromError !== 'function') {
                      // If componentDidCatch is the only error boundary method defined,
                      // then it needs to call setState to recover from errors.
                      // If no state update is scheduled then the boundary will swallow the error.
                      if (!includesSomeLane(fiber.lanes, SyncLane)) {
                        error('%s: Error boundaries should implement getDerivedStateFromError(). ' + 'In that method, return a state update to display an error message or fallback UI.', getComponentName(fiber.type) || 'Unknown');
                      }
                    }
                  }
                };
              } else {
                update.callback = function () {
                  markFailedErrorBoundaryForHotReloading(fiber);
                };
              }

              return update;
            }

            function attachPingListener(root, wakeable, lanes) {
              // Attach a listener to the promise to "ping" the root and retry. But only if
              // one does not already exist for the lanes we're currently rendering (which
              // acts like a "thread ID" here).
              var pingCache = root.pingCache;
              var threadIDs;

              if (pingCache === null) {
                pingCache = root.pingCache = new PossiblyWeakMap$1();
                threadIDs = new Set();
                pingCache.set(wakeable, threadIDs);
              } else {
                threadIDs = pingCache.get(wakeable);

                if (threadIDs === undefined) {
                  threadIDs = new Set();
                  pingCache.set(wakeable, threadIDs);
                }
              }

              if (!threadIDs.has(lanes)) {
                // Memoize using the thread ID to prevent redundant listeners.
                threadIDs.add(lanes);
                var ping = pingSuspendedRoot.bind(null, root, wakeable, lanes);
                wakeable.then(ping, ping);
              }
            }

            function throwException(root, returnFiber, sourceFiber, value, rootRenderLanes) {
              // The source fiber did not complete.
              sourceFiber.flags |= Incomplete; // Its effect list is no longer valid.

              sourceFiber.firstEffect = sourceFiber.lastEffect = null;

              if (value !== null && typeof value === 'object' && typeof value.then === 'function') {
                // This is a wakeable.
                var wakeable = value;

                if ((sourceFiber.mode & BlockingMode) === NoMode) {
                  // Reset the memoizedState to what it was before we attempted
                  // to render it.
                  var currentSource = sourceFiber.alternate;

                  if (currentSource) {
                    sourceFiber.updateQueue = currentSource.updateQueue;
                    sourceFiber.memoizedState = currentSource.memoizedState;
                    sourceFiber.lanes = currentSource.lanes;
                  } else {
                    sourceFiber.updateQueue = null;
                    sourceFiber.memoizedState = null;
                  }
                }

                var hasInvisibleParentBoundary = hasSuspenseContext(suspenseStackCursor.current, InvisibleParentSuspenseContext); // Schedule the nearest Suspense to re-render the timed out view.

                var _workInProgress = returnFiber;

                do {
                  if (_workInProgress.tag === SuspenseComponent && shouldCaptureSuspense(_workInProgress, hasInvisibleParentBoundary)) {
                    // Found the nearest boundary.
                    // Stash the promise on the boundary fiber. If the boundary times out, we'll
                    // attach another listener to flip the boundary back to its normal state.
                    var wakeables = _workInProgress.updateQueue;

                    if (wakeables === null) {
                      var updateQueue = new Set();
                      updateQueue.add(wakeable);
                      _workInProgress.updateQueue = updateQueue;
                    } else {
                      wakeables.add(wakeable);
                    } // If the boundary is outside of blocking mode, we should *not*
                    // suspend the commit. Pretend as if the suspended component rendered
                    // null and keep rendering. In the commit phase, we'll schedule a
                    // subsequent synchronous update to re-render the Suspense.
                    //
                    // Note: It doesn't matter whether the component that suspended was
                    // inside a blocking mode tree. If the Suspense is outside of it, we
                    // should *not* suspend the commit.


                    if ((_workInProgress.mode & BlockingMode) === NoMode) {
                      _workInProgress.flags |= DidCapture;
                      sourceFiber.flags |= ForceUpdateForLegacySuspense; // We're going to commit this fiber even though it didn't complete.
                      // But we shouldn't call any lifecycle methods or callbacks. Remove
                      // all lifecycle effect tags.

                      sourceFiber.flags &= ~(LifecycleEffectMask | Incomplete);

                      if (sourceFiber.tag === ClassComponent) {
                        var currentSourceFiber = sourceFiber.alternate;

                        if (currentSourceFiber === null) {
                          // This is a new mount. Change the tag so it's not mistaken for a
                          // completed class component. For example, we should not call
                          // componentWillUnmount if it is deleted.
                          sourceFiber.tag = IncompleteClassComponent;
                        } else {
                          // When we try rendering again, we should not reuse the current fiber,
                          // since it's known to be in an inconsistent state. Use a force update to
                          // prevent a bail out.
                          var update = createUpdate(NoTimestamp, SyncLane);
                          update.tag = ForceUpdate;
                          enqueueUpdate(sourceFiber, update);
                        }
                      } // The source fiber did not complete. Mark it with Sync priority to
                      // indicate that it still has pending work.


                      sourceFiber.lanes = mergeLanes(sourceFiber.lanes, SyncLane); // Exit without suspending.

                      return;
                    } // Confirmed that the boundary is in a concurrent mode tree. Continue
                    // with the normal suspend path.
                    //
                    // After this we'll use a set of heuristics to determine whether this
                    // render pass will run to completion or restart or "suspend" the commit.
                    // The actual logic for this is spread out in different places.
                    //
                    // This first principle is that if we're going to suspend when we complete
                    // a root, then we should also restart if we get an update or ping that
                    // might unsuspend it, and vice versa. The only reason to suspend is
                    // because you think you might want to restart before committing. However,
                    // it doesn't make sense to restart only while in the period we're suspended.
                    //
                    // Restarting too aggressively is also not good because it starves out any
                    // intermediate loading state. So we use heuristics to determine when.
                    // Suspense Heuristics
                    //
                    // If nothing threw a Promise or all the same fallbacks are already showing,
                    // then don't suspend/restart.
                    //
                    // If this is an initial render of a new tree of Suspense boundaries and
                    // those trigger a fallback, then don't suspend/restart. We want to ensure
                    // that we can show the initial loading state as quickly as possible.
                    //
                    // If we hit a "Delayed" case, such as when we'd switch from content back into
                    // a fallback, then we should always suspend/restart. Transitions apply
                    // to this case. If none is defined, JND is used instead.
                    //
                    // If we're already showing a fallback and it gets "retried", allowing us to show
                    // another level, but there's still an inner boundary that would show a fallback,
                    // then we suspend/restart for 500ms since the last time we showed a fallback
                    // anywhere in the tree. This effectively throttles progressive loading into a
                    // consistent train of commits. This also gives us an opportunity to restart to
                    // get to the completed state slightly earlier.
                    //
                    // If there's ambiguity due to batching it's resolved in preference of:
                    // 1) "delayed", 2) "initial render", 3) "retry".
                    //
                    // We want to ensure that a "busy" state doesn't get force committed. We want to
                    // ensure that new initial loading states can commit as soon as possible.


                    attachPingListener(root, wakeable, rootRenderLanes);
                    _workInProgress.flags |= ShouldCapture;
                    _workInProgress.lanes = rootRenderLanes;
                    return;
                  } // This boundary already captured during this render. Continue to the next
                  // boundary.


                  _workInProgress = _workInProgress.return;
                } while (_workInProgress !== null); // No boundary was found. Fallthrough to error mode.
                // TODO: Use invariant so the message is stripped in prod?


                value = new Error((getComponentName(sourceFiber.type) || 'A React component') + ' suspended while rendering, but no fallback UI was specified.\n' + '\n' + 'Add a <Suspense fallback=...> component higher in the tree to ' + 'provide a loading indicator or placeholder to display.');
              } // We didn't find a boundary that could handle this type of exception. Start
              // over and traverse parent path again, this time treating the exception
              // as an error.


              renderDidError();
              value = createCapturedValue(value, sourceFiber);
              var workInProgress = returnFiber;

              do {
                switch (workInProgress.tag) {
                  case HostRoot:
                    {
                      var _errorInfo = value;
                      workInProgress.flags |= ShouldCapture;
                      var lane = pickArbitraryLane(rootRenderLanes);
                      workInProgress.lanes = mergeLanes(workInProgress.lanes, lane);

                      var _update = createRootErrorUpdate(workInProgress, _errorInfo, lane);

                      enqueueCapturedUpdate(workInProgress, _update);
                      return;
                    }

                  case ClassComponent:
                    // Capture and retry
                    var errorInfo = value;
                    var ctor = workInProgress.type;
                    var instance = workInProgress.stateNode;

                    if ((workInProgress.flags & DidCapture) === NoFlags && (typeof ctor.getDerivedStateFromError === 'function' || instance !== null && typeof instance.componentDidCatch === 'function' && !isAlreadyFailedLegacyErrorBoundary(instance))) {
                      workInProgress.flags |= ShouldCapture;

                      var _lane = pickArbitraryLane(rootRenderLanes);

                      workInProgress.lanes = mergeLanes(workInProgress.lanes, _lane); // Schedule the error boundary to re-render using updated state

                      var _update2 = createClassErrorUpdate(workInProgress, errorInfo, _lane);

                      enqueueCapturedUpdate(workInProgress, _update2);
                      return;
                    }

                    break;
                }

                workInProgress = workInProgress.return;
              } while (workInProgress !== null);
            }

            var didWarnAboutUndefinedSnapshotBeforeUpdate = null;

            {
              didWarnAboutUndefinedSnapshotBeforeUpdate = new Set();
            }

            var PossiblyWeakSet = typeof WeakSet === 'function' ? WeakSet : Set;

            var callComponentWillUnmountWithTimer = function (current, instance) {
              instance.props = current.memoizedProps;
              instance.state = current.memoizedState;

              {
                instance.componentWillUnmount();
              }
            }; // Capture errors so they don't interrupt unmounting.


            function safelyCallComponentWillUnmount(current, instance) {
              {
                invokeGuardedCallback(null, callComponentWillUnmountWithTimer, null, current, instance);

                if (hasCaughtError()) {
                  var unmountError = clearCaughtError();
                  captureCommitPhaseError(current, unmountError);
                }
              }
            }

            function safelyDetachRef(current) {
              var ref = current.ref;

              if (ref !== null) {
                if (typeof ref === 'function') {
                  {
                    invokeGuardedCallback(null, ref, null, null);

                    if (hasCaughtError()) {
                      var refError = clearCaughtError();
                      captureCommitPhaseError(current, refError);
                    }
                  }
                } else {
                  ref.current = null;
                }
              }
            }

            function safelyCallDestroy(current, destroy) {
              {
                invokeGuardedCallback(null, destroy, null);

                if (hasCaughtError()) {
                  var error = clearCaughtError();
                  captureCommitPhaseError(current, error);
                }
              }
            }

            function commitBeforeMutationLifeCycles(current, finishedWork) {
              switch (finishedWork.tag) {
                case FunctionComponent:
                case ForwardRef:
                case SimpleMemoComponent:
                case Block:
                  {
                    return;
                  }

                case ClassComponent:
                  {
                    if (finishedWork.flags & Snapshot) {
                      if (current !== null) {
                        var prevProps = current.memoizedProps;
                        var prevState = current.memoizedState;
                        var instance = finishedWork.stateNode; // We could update instance props and state here,
                        // but instead we rely on them being set during last render.
                        // TODO: revisit this when we implement resuming.

                        {
                          if (finishedWork.type === finishedWork.elementType && !didWarnAboutReassigningProps) {
                            if (instance.props !== finishedWork.memoizedProps) {
                              error('Expected %s props to match memoized props before ' + 'getSnapshotBeforeUpdate. ' + 'This might either be because of a bug in React, or because ' + 'a component reassigns its own `this.props`. ' + 'Please file an issue.', getComponentName(finishedWork.type) || 'instance');
                            }

                            if (instance.state !== finishedWork.memoizedState) {
                              error('Expected %s state to match memoized state before ' + 'getSnapshotBeforeUpdate. ' + 'This might either be because of a bug in React, or because ' + 'a component reassigns its own `this.state`. ' + 'Please file an issue.', getComponentName(finishedWork.type) || 'instance');
                            }
                          }
                        }

                        var snapshot = instance.getSnapshotBeforeUpdate(finishedWork.elementType === finishedWork.type ? prevProps : resolveDefaultProps(finishedWork.type, prevProps), prevState);

                        {
                          var didWarnSet = didWarnAboutUndefinedSnapshotBeforeUpdate;

                          if (snapshot === undefined && !didWarnSet.has(finishedWork.type)) {
                            didWarnSet.add(finishedWork.type);

                            error('%s.getSnapshotBeforeUpdate(): A snapshot value (or null) ' + 'must be returned. You have returned undefined.', getComponentName(finishedWork.type));
                          }
                        }

                        instance.__reactInternalSnapshotBeforeUpdate = snapshot;
                      }
                    }

                    return;
                  }

                case HostRoot:
                  {
                    {
                      if (finishedWork.flags & Snapshot) {
                        var root = finishedWork.stateNode;
                        clearContainer(root.containerInfo);
                      }
                    }

                    return;
                  }

                case HostComponent:
                case HostText:
                case HostPortal:
                case IncompleteClassComponent:
                  // Nothing to do for these component types
                  return;
              }

              {
                {
                  throw Error( "This unit of work tag should not have side-effects. This error is likely caused by a bug in React. Please file an issue." );
                }
              }
            }

            function commitHookEffectListUnmount(tag, finishedWork) {
              var updateQueue = finishedWork.updateQueue;
              var lastEffect = updateQueue !== null ? updateQueue.lastEffect : null;

              if (lastEffect !== null) {
                var firstEffect = lastEffect.next;
                var effect = firstEffect;

                do {
                  if ((effect.tag & tag) === tag) {
                    // Unmount
                    var destroy = effect.destroy;
                    effect.destroy = undefined;

                    if (destroy !== undefined) {
                      destroy();
                    }
                  }

                  effect = effect.next;
                } while (effect !== firstEffect);
              }
            }

            function commitHookEffectListMount(tag, finishedWork) {
              var updateQueue = finishedWork.updateQueue;
              var lastEffect = updateQueue !== null ? updateQueue.lastEffect : null;

              if (lastEffect !== null) {
                var firstEffect = lastEffect.next;
                var effect = firstEffect;

                do {
                  if ((effect.tag & tag) === tag) {
                    // Mount
                    var create = effect.create;
                    effect.destroy = create();

                    {
                      var destroy = effect.destroy;

                      if (destroy !== undefined && typeof destroy !== 'function') {
                        var addendum = void 0;

                        if (destroy === null) {
                          addendum = ' You returned null. If your effect does not require clean ' + 'up, return undefined (or nothing).';
                        } else if (typeof destroy.then === 'function') {
                          addendum = '\n\nIt looks like you wrote useEffect(async () => ...) or returned a Promise. ' + 'Instead, write the async function inside your effect ' + 'and call it immediately:\n\n' + 'useEffect(() => {\n' + '  async function fetchData() {\n' + '    // You can await here\n' + '    const response = await MyAPI.getData(someId);\n' + '    // ...\n' + '  }\n' + '  fetchData();\n' + "}, [someId]); // Or [] if effect doesn't need props or state\n\n" + 'Learn more about data fetching with Hooks: https://reactjs.org/link/hooks-data-fetching';
                        } else {
                          addendum = ' You returned: ' + destroy;
                        }

                        error('An effect function must not return anything besides a function, ' + 'which is used for clean-up.%s', addendum);
                      }
                    }
                  }

                  effect = effect.next;
                } while (effect !== firstEffect);
              }
            }

            function schedulePassiveEffects(finishedWork) {
              var updateQueue = finishedWork.updateQueue;
              var lastEffect = updateQueue !== null ? updateQueue.lastEffect : null;

              if (lastEffect !== null) {
                var firstEffect = lastEffect.next;
                var effect = firstEffect;

                do {
                  var _effect = effect,
                      next = _effect.next,
                      tag = _effect.tag;

                  if ((tag & Passive$1) !== NoFlags$1 && (tag & HasEffect) !== NoFlags$1) {
                    enqueuePendingPassiveHookEffectUnmount(finishedWork, effect);
                    enqueuePendingPassiveHookEffectMount(finishedWork, effect);
                  }

                  effect = next;
                } while (effect !== firstEffect);
              }
            }

            function commitLifeCycles(finishedRoot, current, finishedWork, committedLanes) {
              switch (finishedWork.tag) {
                case FunctionComponent:
                case ForwardRef:
                case SimpleMemoComponent:
                case Block:
                  {
                    // At this point layout effects have already been destroyed (during mutation phase).
                    // This is done to prevent sibling component effects from interfering with each other,
                    // e.g. a destroy function in one component should never override a ref set
                    // by a create function in another component during the same commit.
                    {
                      commitHookEffectListMount(Layout | HasEffect, finishedWork);
                    }

                    schedulePassiveEffects(finishedWork);
                    return;
                  }

                case ClassComponent:
                  {
                    var instance = finishedWork.stateNode;

                    if (finishedWork.flags & Update) {
                      if (current === null) {
                        // We could update instance props and state here,
                        // but instead we rely on them being set during last render.
                        // TODO: revisit this when we implement resuming.
                        {
                          if (finishedWork.type === finishedWork.elementType && !didWarnAboutReassigningProps) {
                            if (instance.props !== finishedWork.memoizedProps) {
                              error('Expected %s props to match memoized props before ' + 'componentDidMount. ' + 'This might either be because of a bug in React, or because ' + 'a component reassigns its own `this.props`. ' + 'Please file an issue.', getComponentName(finishedWork.type) || 'instance');
                            }

                            if (instance.state !== finishedWork.memoizedState) {
                              error('Expected %s state to match memoized state before ' + 'componentDidMount. ' + 'This might either be because of a bug in React, or because ' + 'a component reassigns its own `this.state`. ' + 'Please file an issue.', getComponentName(finishedWork.type) || 'instance');
                            }
                          }
                        }

                        {
                          instance.componentDidMount();
                        }
                      } else {
                        var prevProps = finishedWork.elementType === finishedWork.type ? current.memoizedProps : resolveDefaultProps(finishedWork.type, current.memoizedProps);
                        var prevState = current.memoizedState; // We could update instance props and state here,
                        // but instead we rely on them being set during last render.
                        // TODO: revisit this when we implement resuming.

                        {
                          if (finishedWork.type === finishedWork.elementType && !didWarnAboutReassigningProps) {
                            if (instance.props !== finishedWork.memoizedProps) {
                              error('Expected %s props to match memoized props before ' + 'componentDidUpdate. ' + 'This might either be because of a bug in React, or because ' + 'a component reassigns its own `this.props`. ' + 'Please file an issue.', getComponentName(finishedWork.type) || 'instance');
                            }

                            if (instance.state !== finishedWork.memoizedState) {
                              error('Expected %s state to match memoized state before ' + 'componentDidUpdate. ' + 'This might either be because of a bug in React, or because ' + 'a component reassigns its own `this.state`. ' + 'Please file an issue.', getComponentName(finishedWork.type) || 'instance');
                            }
                          }
                        }

                        {
                          instance.componentDidUpdate(prevProps, prevState, instance.__reactInternalSnapshotBeforeUpdate);
                        }
                      }
                    } // TODO: I think this is now always non-null by the time it reaches the
                    // commit phase. Consider removing the type check.


                    var updateQueue = finishedWork.updateQueue;

                    if (updateQueue !== null) {
                      {
                        if (finishedWork.type === finishedWork.elementType && !didWarnAboutReassigningProps) {
                          if (instance.props !== finishedWork.memoizedProps) {
                            error('Expected %s props to match memoized props before ' + 'processing the update queue. ' + 'This might either be because of a bug in React, or because ' + 'a component reassigns its own `this.props`. ' + 'Please file an issue.', getComponentName(finishedWork.type) || 'instance');
                          }

                          if (instance.state !== finishedWork.memoizedState) {
                            error('Expected %s state to match memoized state before ' + 'processing the update queue. ' + 'This might either be because of a bug in React, or because ' + 'a component reassigns its own `this.state`. ' + 'Please file an issue.', getComponentName(finishedWork.type) || 'instance');
                          }
                        }
                      } // We could update instance props and state here,
                      // but instead we rely on them being set during last render.
                      // TODO: revisit this when we implement resuming.


                      commitUpdateQueue(finishedWork, updateQueue, instance);
                    }

                    return;
                  }

                case HostRoot:
                  {
                    // TODO: I think this is now always non-null by the time it reaches the
                    // commit phase. Consider removing the type check.
                    var _updateQueue = finishedWork.updateQueue;

                    if (_updateQueue !== null) {
                      var _instance = null;

                      if (finishedWork.child !== null) {
                        switch (finishedWork.child.tag) {
                          case HostComponent:
                            _instance = getPublicInstance(finishedWork.child.stateNode);
                            break;

                          case ClassComponent:
                            _instance = finishedWork.child.stateNode;
                            break;
                        }
                      }

                      commitUpdateQueue(finishedWork, _updateQueue, _instance);
                    }

                    return;
                  }

                case HostComponent:
                  {
                    var _instance2 = finishedWork.stateNode; // Renderers may schedule work to be done after host components are mounted
                    // (eg DOM renderer may schedule auto-focus for inputs and form controls).
                    // These effects should only be committed when components are first mounted,
                    // aka when there is no current/alternate.

                    if (current === null && finishedWork.flags & Update) {
                      var type = finishedWork.type;
                      var props = finishedWork.memoizedProps;
                      commitMount(_instance2, type, props);
                    }

                    return;
                  }

                case HostText:
                  {
                    // We have no life-cycles associated with text.
                    return;
                  }

                case HostPortal:
                  {
                    // We have no life-cycles associated with portals.
                    return;
                  }

                case Profiler:
                  {
                    {
                      var _finishedWork$memoize2 = finishedWork.memoizedProps;
                          _finishedWork$memoize2.onCommit;
                          var onRender = _finishedWork$memoize2.onRender;
                      finishedWork.stateNode.effectDuration;
                      var commitTime = getCommitTime();

                      if (typeof onRender === 'function') {
                        {
                          onRender(finishedWork.memoizedProps.id, current === null ? 'mount' : 'update', finishedWork.actualDuration, finishedWork.treeBaseDuration, finishedWork.actualStartTime, commitTime, finishedRoot.memoizedInteractions);
                        }
                      }
                    }

                    return;
                  }

                case SuspenseComponent:
                  {
                    commitSuspenseHydrationCallbacks(finishedRoot, finishedWork);
                    return;
                  }

                case SuspenseListComponent:
                case IncompleteClassComponent:
                case FundamentalComponent:
                case ScopeComponent:
                case OffscreenComponent:
                case LegacyHiddenComponent:
                  return;
              }

              {
                {
                  throw Error( "This unit of work tag should not have side-effects. This error is likely caused by a bug in React. Please file an issue." );
                }
              }
            }

            function hideOrUnhideAllChildren(finishedWork, isHidden) {
              {
                // We only have the top Fiber that was inserted but we need to recurse down its
                // children to find all the terminal nodes.
                var node = finishedWork;

                while (true) {
                  if (node.tag === HostComponent) {
                    var instance = node.stateNode;

                    if (isHidden) {
                      hideInstance(instance);
                    } else {
                      unhideInstance(node.stateNode, node.memoizedProps);
                    }
                  } else if (node.tag === HostText) {
                    var _instance3 = node.stateNode;

                    if (isHidden) {
                      hideTextInstance(_instance3);
                    } else {
                      unhideTextInstance(_instance3, node.memoizedProps);
                    }
                  } else if ((node.tag === OffscreenComponent || node.tag === LegacyHiddenComponent) && node.memoizedState !== null && node !== finishedWork) ; else if (node.child !== null) {
                    node.child.return = node;
                    node = node.child;
                    continue;
                  }

                  if (node === finishedWork) {
                    return;
                  }

                  while (node.sibling === null) {
                    if (node.return === null || node.return === finishedWork) {
                      return;
                    }

                    node = node.return;
                  }

                  node.sibling.return = node.return;
                  node = node.sibling;
                }
              }
            }

            function commitAttachRef(finishedWork) {
              var ref = finishedWork.ref;

              if (ref !== null) {
                var instance = finishedWork.stateNode;
                var instanceToUse;

                switch (finishedWork.tag) {
                  case HostComponent:
                    instanceToUse = getPublicInstance(instance);
                    break;

                  default:
                    instanceToUse = instance;
                } // Moved outside to ensure DCE works with this flag

                if (typeof ref === 'function') {
                  ref(instanceToUse);
                } else {
                  {
                    if (!ref.hasOwnProperty('current')) {
                      error('Unexpected ref object provided for %s. ' + 'Use either a ref-setter function or React.createRef().', getComponentName(finishedWork.type));
                    }
                  }

                  ref.current = instanceToUse;
                }
              }
            }

            function commitDetachRef(current) {
              var currentRef = current.ref;

              if (currentRef !== null) {
                if (typeof currentRef === 'function') {
                  currentRef(null);
                } else {
                  currentRef.current = null;
                }
              }
            } // User-originating errors (lifecycles and refs) should not interrupt
            // deletion, so don't let them throw. Host-originating errors should
            // interrupt deletion, so it's okay


            function commitUnmount(finishedRoot, current, renderPriorityLevel) {
              onCommitUnmount(current);

              switch (current.tag) {
                case FunctionComponent:
                case ForwardRef:
                case MemoComponent:
                case SimpleMemoComponent:
                case Block:
                  {
                    var updateQueue = current.updateQueue;

                    if (updateQueue !== null) {
                      var lastEffect = updateQueue.lastEffect;

                      if (lastEffect !== null) {
                        var firstEffect = lastEffect.next;
                        var effect = firstEffect;

                        do {
                          var _effect2 = effect,
                              destroy = _effect2.destroy,
                              tag = _effect2.tag;

                          if (destroy !== undefined) {
                            if ((tag & Passive$1) !== NoFlags$1) {
                              enqueuePendingPassiveHookEffectUnmount(current, effect);
                            } else {
                              {
                                safelyCallDestroy(current, destroy);
                              }
                            }
                          }

                          effect = effect.next;
                        } while (effect !== firstEffect);
                      }
                    }

                    return;
                  }

                case ClassComponent:
                  {
                    safelyDetachRef(current);
                    var instance = current.stateNode;

                    if (typeof instance.componentWillUnmount === 'function') {
                      safelyCallComponentWillUnmount(current, instance);
                    }

                    return;
                  }

                case HostComponent:
                  {
                    safelyDetachRef(current);
                    return;
                  }

                case HostPortal:
                  {
                    // TODO: this is recursive.
                    // We are also not using this parent because
                    // the portal will get pushed immediately.
                    {
                      unmountHostComponents(finishedRoot, current);
                    }

                    return;
                  }

                case FundamentalComponent:
                  {

                    return;
                  }

                case DehydratedFragment:
                  {

                    return;
                  }

                case ScopeComponent:
                  {

                    return;
                  }
              }
            }

            function commitNestedUnmounts(finishedRoot, root, renderPriorityLevel) {
              // While we're inside a removed host node we don't want to call
              // removeChild on the inner nodes because they're removed by the top
              // call anyway. We also want to call componentWillUnmount on all
              // composites before this host node is removed from the tree. Therefore
              // we do an inner loop while we're still inside the host node.
              var node = root;

              while (true) {
                commitUnmount(finishedRoot, node); // Visit children because they may contain more composite or host nodes.
                // Skip portals because commitUnmount() currently visits them recursively.

                if (node.child !== null && ( // If we use mutation we drill down into portals using commitUnmount above.
                // If we don't use mutation we drill down into portals here instead.
                 node.tag !== HostPortal)) {
                  node.child.return = node;
                  node = node.child;
                  continue;
                }

                if (node === root) {
                  return;
                }

                while (node.sibling === null) {
                  if (node.return === null || node.return === root) {
                    return;
                  }

                  node = node.return;
                }

                node.sibling.return = node.return;
                node = node.sibling;
              }
            }

            function detachFiberMutation(fiber) {
              // Cut off the return pointers to disconnect it from the tree. Ideally, we
              // should clear the child pointer of the parent alternate to let this
              // get GC:ed but we don't know which for sure which parent is the current
              // one so we'll settle for GC:ing the subtree of this child. This child
              // itself will be GC:ed when the parent updates the next time.
              // Note: we cannot null out sibling here, otherwise it can cause issues
              // with findDOMNode and how it requires the sibling field to carry out
              // traversal in a later effect. See PR #16820. We now clear the sibling
              // field after effects, see: detachFiberAfterEffects.
              //
              // Don't disconnect stateNode now; it will be detached in detachFiberAfterEffects.
              // It may be required if the current component is an error boundary,
              // and one of its descendants throws while unmounting a passive effect.
              fiber.alternate = null;
              fiber.child = null;
              fiber.dependencies = null;
              fiber.firstEffect = null;
              fiber.lastEffect = null;
              fiber.memoizedProps = null;
              fiber.memoizedState = null;
              fiber.pendingProps = null;
              fiber.return = null;
              fiber.updateQueue = null;

              {
                fiber._debugOwner = null;
              }
            }

            function getHostParentFiber(fiber) {
              var parent = fiber.return;

              while (parent !== null) {
                if (isHostParent(parent)) {
                  return parent;
                }

                parent = parent.return;
              }

              {
                {
                  throw Error( "Expected to find a host parent. This error is likely caused by a bug in React. Please file an issue." );
                }
              }
            }

            function isHostParent(fiber) {
              return fiber.tag === HostComponent || fiber.tag === HostRoot || fiber.tag === HostPortal;
            }

            function getHostSibling(fiber) {
              // We're going to search forward into the tree until we find a sibling host
              // node. Unfortunately, if multiple insertions are done in a row we have to
              // search past them. This leads to exponential search for the next sibling.
              // TODO: Find a more efficient way to do this.
              var node = fiber;

              siblings: while (true) {
                // If we didn't find anything, let's try the next sibling.
                while (node.sibling === null) {
                  if (node.return === null || isHostParent(node.return)) {
                    // If we pop out of the root or hit the parent the fiber we are the
                    // last sibling.
                    return null;
                  }

                  node = node.return;
                }

                node.sibling.return = node.return;
                node = node.sibling;

                while (node.tag !== HostComponent && node.tag !== HostText && node.tag !== DehydratedFragment) {
                  // If it is not host node and, we might have a host node inside it.
                  // Try to search down until we find one.
                  if (node.flags & Placement) {
                    // If we don't have a child, try the siblings instead.
                    continue siblings;
                  } // If we don't have a child, try the siblings instead.
                  // We also skip portals because they are not part of this host tree.


                  if (node.child === null || node.tag === HostPortal) {
                    continue siblings;
                  } else {
                    node.child.return = node;
                    node = node.child;
                  }
                } // Check if this host node is stable or about to be placed.


                if (!(node.flags & Placement)) {
                  // Found it!
                  return node.stateNode;
                }
              }
            }

            function commitPlacement(finishedWork) {


              var parentFiber = getHostParentFiber(finishedWork); // Note: these two variables *must* always be updated together.

              var parent;
              var isContainer;
              var parentStateNode = parentFiber.stateNode;

              switch (parentFiber.tag) {
                case HostComponent:
                  parent = parentStateNode;
                  isContainer = false;
                  break;

                case HostRoot:
                  parent = parentStateNode.containerInfo;
                  isContainer = true;
                  break;

                case HostPortal:
                  parent = parentStateNode.containerInfo;
                  isContainer = true;
                  break;

                case FundamentalComponent:

                // eslint-disable-next-line-no-fallthrough

                default:
                  {
                    {
                      throw Error( "Invalid host parent fiber. This error is likely caused by a bug in React. Please file an issue." );
                    }
                  }

              }

              if (parentFiber.flags & ContentReset) {
                // Reset the text content of the parent before doing any insertions
                resetTextContent(parent); // Clear ContentReset from the effect tag

                parentFiber.flags &= ~ContentReset;
              }

              var before = getHostSibling(finishedWork); // We only have the top Fiber that was inserted but we need to recurse down its
              // children to find all the terminal nodes.

              if (isContainer) {
                insertOrAppendPlacementNodeIntoContainer(finishedWork, before, parent);
              } else {
                insertOrAppendPlacementNode(finishedWork, before, parent);
              }
            }

            function insertOrAppendPlacementNodeIntoContainer(node, before, parent) {
              var tag = node.tag;
              var isHost = tag === HostComponent || tag === HostText;

              if (isHost || enableFundamentalAPI ) {
                var stateNode = isHost ? node.stateNode : node.stateNode.instance;

                if (before) {
                  insertInContainerBefore(parent, stateNode, before);
                } else {
                  appendChildToContainer(parent, stateNode);
                }
              } else if (tag === HostPortal) ; else {
                var child = node.child;

                if (child !== null) {
                  insertOrAppendPlacementNodeIntoContainer(child, before, parent);
                  var sibling = child.sibling;

                  while (sibling !== null) {
                    insertOrAppendPlacementNodeIntoContainer(sibling, before, parent);
                    sibling = sibling.sibling;
                  }
                }
              }
            }

            function insertOrAppendPlacementNode(node, before, parent) {
              var tag = node.tag;
              var isHost = tag === HostComponent || tag === HostText;

              if (isHost || enableFundamentalAPI ) {
                var stateNode = isHost ? node.stateNode : node.stateNode.instance;

                if (before) {
                  insertBefore(parent, stateNode, before);
                } else {
                  appendChild(parent, stateNode);
                }
              } else if (tag === HostPortal) ; else {
                var child = node.child;

                if (child !== null) {
                  insertOrAppendPlacementNode(child, before, parent);
                  var sibling = child.sibling;

                  while (sibling !== null) {
                    insertOrAppendPlacementNode(sibling, before, parent);
                    sibling = sibling.sibling;
                  }
                }
              }
            }

            function unmountHostComponents(finishedRoot, current, renderPriorityLevel) {
              // We only have the top Fiber that was deleted but we need to recurse down its
              // children to find all the terminal nodes.
              var node = current; // Each iteration, currentParent is populated with node's host parent if not
              // currentParentIsValid.

              var currentParentIsValid = false; // Note: these two variables *must* always be updated together.

              var currentParent;
              var currentParentIsContainer;

              while (true) {
                if (!currentParentIsValid) {
                  var parent = node.return;

                  findParent: while (true) {
                    if (!(parent !== null)) {
                      {
                        throw Error( "Expected to find a host parent. This error is likely caused by a bug in React. Please file an issue." );
                      }
                    }

                    var parentStateNode = parent.stateNode;

                    switch (parent.tag) {
                      case HostComponent:
                        currentParent = parentStateNode;
                        currentParentIsContainer = false;
                        break findParent;

                      case HostRoot:
                        currentParent = parentStateNode.containerInfo;
                        currentParentIsContainer = true;
                        break findParent;

                      case HostPortal:
                        currentParent = parentStateNode.containerInfo;
                        currentParentIsContainer = true;
                        break findParent;

                    }

                    parent = parent.return;
                  }

                  currentParentIsValid = true;
                }

                if (node.tag === HostComponent || node.tag === HostText) {
                  commitNestedUnmounts(finishedRoot, node); // After all the children have unmounted, it is now safe to remove the
                  // node from the tree.

                  if (currentParentIsContainer) {
                    removeChildFromContainer(currentParent, node.stateNode);
                  } else {
                    removeChild(currentParent, node.stateNode);
                  } // Don't visit children because we already visited them.

                } else if (node.tag === HostPortal) {
                  if (node.child !== null) {
                    // When we go into a portal, it becomes the parent to remove from.
                    // We will reassign it back when we pop the portal on the way up.
                    currentParent = node.stateNode.containerInfo;
                    currentParentIsContainer = true; // Visit children because portals might contain host components.

                    node.child.return = node;
                    node = node.child;
                    continue;
                  }
                } else {
                  commitUnmount(finishedRoot, node); // Visit children because we may find more host components below.

                  if (node.child !== null) {
                    node.child.return = node;
                    node = node.child;
                    continue;
                  }
                }

                if (node === current) {
                  return;
                }

                while (node.sibling === null) {
                  if (node.return === null || node.return === current) {
                    return;
                  }

                  node = node.return;

                  if (node.tag === HostPortal) {
                    // When we go out of the portal, we need to restore the parent.
                    // Since we don't keep a stack of them, we will search for it.
                    currentParentIsValid = false;
                  }
                }

                node.sibling.return = node.return;
                node = node.sibling;
              }
            }

            function commitDeletion(finishedRoot, current, renderPriorityLevel) {
              {
                // Recursively delete all host nodes from the parent.
                // Detach refs and call componentWillUnmount() on the whole subtree.
                unmountHostComponents(finishedRoot, current);
              }

              var alternate = current.alternate;
              detachFiberMutation(current);

              if (alternate !== null) {
                detachFiberMutation(alternate);
              }
            }

            function commitWork(current, finishedWork) {

              switch (finishedWork.tag) {
                case FunctionComponent:
                case ForwardRef:
                case MemoComponent:
                case SimpleMemoComponent:
                case Block:
                  {
                    // Layout effects are destroyed during the mutation phase so that all
                    // destroy functions for all fibers are called before any create functions.
                    // This prevents sibling component effects from interfering with each other,
                    // e.g. a destroy function in one component should never override a ref set
                    // by a create function in another component during the same commit.
                    {
                      commitHookEffectListUnmount(Layout | HasEffect, finishedWork);
                    }

                    return;
                  }

                case ClassComponent:
                  {
                    return;
                  }

                case HostComponent:
                  {
                    var instance = finishedWork.stateNode;

                    if (instance != null) {
                      // Commit the work prepared earlier.
                      var newProps = finishedWork.memoizedProps; // For hydration we reuse the update path but we treat the oldProps
                      // as the newProps. The updatePayload will contain the real change in
                      // this case.

                      var oldProps = current !== null ? current.memoizedProps : newProps;
                      var type = finishedWork.type; // TODO: Type the updateQueue to be specific to host components.

                      var updatePayload = finishedWork.updateQueue;
                      finishedWork.updateQueue = null;

                      if (updatePayload !== null) {
                        commitUpdate(instance, updatePayload, type, oldProps, newProps);
                      }
                    }

                    return;
                  }

                case HostText:
                  {
                    if (!(finishedWork.stateNode !== null)) {
                      {
                        throw Error( "This should have a text node initialized. This error is likely caused by a bug in React. Please file an issue." );
                      }
                    }

                    var textInstance = finishedWork.stateNode;
                    var newText = finishedWork.memoizedProps; // For hydration we reuse the update path but we treat the oldProps
                    // as the newProps. The updatePayload will contain the real change in
                    // this case.

                    var oldText = current !== null ? current.memoizedProps : newText;
                    commitTextUpdate(textInstance, oldText, newText);
                    return;
                  }

                case HostRoot:
                  {
                    {
                      var _root = finishedWork.stateNode;

                      if (_root.hydrate) {
                        // We've just hydrated. No need to hydrate again.
                        _root.hydrate = false;
                        commitHydratedContainer(_root.containerInfo);
                      }
                    }

                    return;
                  }

                case Profiler:
                  {
                    return;
                  }

                case SuspenseComponent:
                  {
                    commitSuspenseComponent(finishedWork);
                    attachSuspenseRetryListeners(finishedWork);
                    return;
                  }

                case SuspenseListComponent:
                  {
                    attachSuspenseRetryListeners(finishedWork);
                    return;
                  }

                case IncompleteClassComponent:
                  {
                    return;
                  }

                case FundamentalComponent:
                  {

                    break;
                  }

                case ScopeComponent:
                  {

                    break;
                  }

                case OffscreenComponent:
                case LegacyHiddenComponent:
                  {
                    var newState = finishedWork.memoizedState;
                    var isHidden = newState !== null;
                    hideOrUnhideAllChildren(finishedWork, isHidden);
                    return;
                  }
              }

              {
                {
                  throw Error( "This unit of work tag should not have side-effects. This error is likely caused by a bug in React. Please file an issue." );
                }
              }
            }

            function commitSuspenseComponent(finishedWork) {
              var newState = finishedWork.memoizedState;

              if (newState !== null) {
                markCommitTimeOfFallback();

                {
                  // Hide the Offscreen component that contains the primary children. TODO:
                  // Ideally, this effect would have been scheduled on the Offscreen fiber
                  // itself. That's how unhiding works: the Offscreen component schedules an
                  // effect on itself. However, in this case, the component didn't complete,
                  // so the fiber was never added to the effect list in the normal path. We
                  // could have appended it to the effect list in the Suspense component's
                  // second pass, but doing it this way is less complicated. This would be
                  // simpler if we got rid of the effect list and traversed the tree, like
                  // we're planning to do.
                  var primaryChildParent = finishedWork.child;
                  hideOrUnhideAllChildren(primaryChildParent, true);
                }
              }
            }

            function commitSuspenseHydrationCallbacks(finishedRoot, finishedWork) {

              var newState = finishedWork.memoizedState;

              if (newState === null) {
                var current = finishedWork.alternate;

                if (current !== null) {
                  var prevState = current.memoizedState;

                  if (prevState !== null) {
                    var suspenseInstance = prevState.dehydrated;

                    if (suspenseInstance !== null) {
                      commitHydratedSuspenseInstance(suspenseInstance);
                    }
                  }
                }
              }
            }

            function attachSuspenseRetryListeners(finishedWork) {
              // If this boundary just timed out, then it will have a set of wakeables.
              // For each wakeable, attach a listener so that when it resolves, React
              // attempts to re-render the boundary in the primary (pre-timeout) state.
              var wakeables = finishedWork.updateQueue;

              if (wakeables !== null) {
                finishedWork.updateQueue = null;
                var retryCache = finishedWork.stateNode;

                if (retryCache === null) {
                  retryCache = finishedWork.stateNode = new PossiblyWeakSet();
                }

                wakeables.forEach(function (wakeable) {
                  // Memoize using the boundary fiber to prevent redundant listeners.
                  var retry = resolveRetryWakeable.bind(null, finishedWork, wakeable);

                  if (!retryCache.has(wakeable)) {
                    {
                      if (wakeable.__reactDoNotTraceInteractions !== true) {
                        retry = tracing$1.unstable_wrap(retry);
                      }
                    }

                    retryCache.add(wakeable);
                    wakeable.then(retry, retry);
                  }
                });
              }
            } // This function detects when a Suspense boundary goes from visible to hidden.
            // It returns false if the boundary is already hidden.
            // TODO: Use an effect tag.


            function isSuspenseBoundaryBeingHidden(current, finishedWork) {
              if (current !== null) {
                var oldState = current.memoizedState;

                if (oldState === null || oldState.dehydrated !== null) {
                  var newState = finishedWork.memoizedState;
                  return newState !== null && newState.dehydrated === null;
                }
              }

              return false;
            }

            function commitResetTextContent(current) {

              resetTextContent(current.stateNode);
            }

            if (typeof Symbol === 'function' && Symbol.for) {
              var symbolFor$1 = Symbol.for;
              symbolFor$1('selector.component');
              symbolFor$1('selector.has_pseudo_class');
              symbolFor$1('selector.role');
              symbolFor$1('selector.test_id');
              symbolFor$1('selector.text');
            }
            var commitHooks = [];
            function onCommitRoot$1() {
              {
                commitHooks.forEach(function (commitHook) {
                  return commitHook();
                });
              }
            }

            var ceil = Math.ceil;
            var ReactCurrentDispatcher$2 = ReactSharedInternals.ReactCurrentDispatcher,
                ReactCurrentOwner$2 = ReactSharedInternals.ReactCurrentOwner,
                IsSomeRendererActing = ReactSharedInternals.IsSomeRendererActing;
            var NoContext =
            /*             */
            0;
            var BatchedContext =
            /*               */
            1;
            var EventContext =
            /*                 */
            2;
            var DiscreteEventContext =
            /*         */
            4;
            var LegacyUnbatchedContext =
            /*       */
            8;
            var RenderContext =
            /*                */
            16;
            var CommitContext =
            /*                */
            32;
            var RetryAfterError =
            /*       */
            64;
            var RootIncomplete = 0;
            var RootFatalErrored = 1;
            var RootErrored = 2;
            var RootSuspended = 3;
            var RootSuspendedWithDelay = 4;
            var RootCompleted = 5; // Describes where we are in the React execution stack

            var executionContext = NoContext; // The root we're working on

            var workInProgressRoot = null; // The fiber we're working on

            var workInProgress = null; // The lanes we're rendering

            var workInProgressRootRenderLanes = NoLanes; // Stack that allows components to change the render lanes for its subtree
            // This is a superset of the lanes we started working on at the root. The only
            // case where it's different from `workInProgressRootRenderLanes` is when we
            // enter a subtree that is hidden and needs to be unhidden: Suspense and
            // Offscreen component.
            //
            // Most things in the work loop should deal with workInProgressRootRenderLanes.
            // Most things in begin/complete phases should deal with subtreeRenderLanes.

            var subtreeRenderLanes = NoLanes;
            var subtreeRenderLanesCursor = createCursor(NoLanes); // Whether to root completed, errored, suspended, etc.

            var workInProgressRootExitStatus = RootIncomplete; // A fatal error, if one is thrown

            var workInProgressRootFatalError = null; // "Included" lanes refer to lanes that were worked on during this render. It's
            // slightly different than `renderLanes` because `renderLanes` can change as you
            // enter and exit an Offscreen tree. This value is the combination of all render
            // lanes for the entire render phase.

            var workInProgressRootIncludedLanes = NoLanes; // The work left over by components that were visited during this render. Only
            // includes unprocessed updates, not work in bailed out children.

            var workInProgressRootSkippedLanes = NoLanes; // Lanes that were updated (in an interleaved event) during this render.

            var workInProgressRootUpdatedLanes = NoLanes; // Lanes that were pinged (in an interleaved event) during this render.

            var workInProgressRootPingedLanes = NoLanes;
            var mostRecentlyUpdatedRoot = null; // The most recent time we committed a fallback. This lets us ensure a train
            // model where we don't commit new loading states in too quick succession.

            var globalMostRecentFallbackTime = 0;
            var FALLBACK_THROTTLE_MS = 500; // The absolute time for when we should start giving up on rendering
            // more and prefer CPU suspense heuristics instead.

            var workInProgressRootRenderTargetTime = Infinity; // How long a render is supposed to take before we start following CPU
            // suspense heuristics and opt out of rendering more content.

            var RENDER_TIMEOUT_MS = 500;

            function resetRenderTimer() {
              workInProgressRootRenderTargetTime = now() + RENDER_TIMEOUT_MS;
            }

            function getRenderTargetTime() {
              return workInProgressRootRenderTargetTime;
            }
            var nextEffect = null;
            var hasUncaughtError = false;
            var firstUncaughtError = null;
            var legacyErrorBoundariesThatAlreadyFailed = null;
            var rootDoesHavePassiveEffects = false;
            var rootWithPendingPassiveEffects = null;
            var pendingPassiveEffectsRenderPriority = NoPriority$1;
            var pendingPassiveEffectsLanes = NoLanes;
            var pendingPassiveHookEffectsMount = [];
            var pendingPassiveHookEffectsUnmount = [];
            var rootsWithPendingDiscreteUpdates = null; // Use these to prevent an infinite loop of nested updates

            var NESTED_UPDATE_LIMIT = 50;
            var nestedUpdateCount = 0;
            var rootWithNestedUpdates = null;
            var NESTED_PASSIVE_UPDATE_LIMIT = 50;
            var nestedPassiveUpdateCount = 0; // Marks the need to reschedule pending interactions at these lanes
            // during the commit phase. This enables them to be traced across components
            // that spawn new work during render. E.g. hidden boundaries, suspended SSR
            // hydration or SuspenseList.
            // TODO: Can use a bitmask instead of an array

            var spawnedWorkDuringRender = null; // If two updates are scheduled within the same event, we should treat their
            // event times as simultaneous, even if the actual clock time has advanced
            // between the first and second call.

            var currentEventTime = NoTimestamp;
            var currentEventWipLanes = NoLanes;
            var currentEventPendingLanes = NoLanes; // Dev only flag that tracks if passive effects are currently being flushed.
            // We warn about state updates for unmounted components differently in this case.

            var isFlushingPassiveEffects = false;
            var focusedInstanceHandle = null;
            var shouldFireAfterActiveInstanceBlur = false;
            function getWorkInProgressRoot() {
              return workInProgressRoot;
            }
            function requestEventTime() {
              if ((executionContext & (RenderContext | CommitContext)) !== NoContext) {
                // We're inside React, so it's fine to read the actual time.
                return now();
              } // We're not inside React, so we may be in the middle of a browser event.


              if (currentEventTime !== NoTimestamp) {
                // Use the same start time for all updates until we enter React again.
                return currentEventTime;
              } // This is the first update since React yielded. Compute a new start time.


              currentEventTime = now();
              return currentEventTime;
            }
            function requestUpdateLane(fiber) {
              // Special cases
              var mode = fiber.mode;

              if ((mode & BlockingMode) === NoMode) {
                return SyncLane;
              } else if ((mode & ConcurrentMode) === NoMode) {
                return getCurrentPriorityLevel() === ImmediatePriority$1 ? SyncLane : SyncBatchedLane;
              } // The algorithm for assigning an update to a lane should be stable for all
              // updates at the same priority within the same event. To do this, the inputs
              // to the algorithm must be the same. For example, we use the `renderLanes`
              // to avoid choosing a lane that is already in the middle of rendering.
              //
              // However, the "included" lanes could be mutated in between updates in the
              // same event, like if you perform an update inside `flushSync`. Or any other
              // code path that might call `prepareFreshStack`.
              //
              // The trick we use is to cache the first of each of these inputs within an
              // event. Then reset the cached values once we can be sure the event is over.
              // Our heuristic for that is whenever we enter a concurrent work loop.
              //
              // We'll do the same for `currentEventPendingLanes` below.


              if (currentEventWipLanes === NoLanes) {
                currentEventWipLanes = workInProgressRootIncludedLanes;
              }

              var isTransition = requestCurrentTransition() !== NoTransition;

              if (isTransition) {
                if (currentEventPendingLanes !== NoLanes) {
                  currentEventPendingLanes = mostRecentlyUpdatedRoot !== null ? mostRecentlyUpdatedRoot.pendingLanes : NoLanes;
                }

                return findTransitionLane(currentEventWipLanes, currentEventPendingLanes);
              } // TODO: Remove this dependency on the Scheduler priority.
              // To do that, we're replacing it with an update lane priority.


              var schedulerPriority = getCurrentPriorityLevel(); // The old behavior was using the priority level of the Scheduler.
              // This couples React to the Scheduler internals, so we're replacing it
              // with the currentUpdateLanePriority above. As an example of how this
              // could be problematic, if we're not inside `Scheduler.runWithPriority`,
              // then we'll get the priority of the current running Scheduler task,
              // which is probably not what we want.

              var lane;

              if ( // TODO: Temporary. We're removing the concept of discrete updates.
              (executionContext & DiscreteEventContext) !== NoContext && schedulerPriority === UserBlockingPriority$2) {
                lane = findUpdateLane(InputDiscreteLanePriority, currentEventWipLanes);
              } else {
                var schedulerLanePriority = schedulerPriorityToLanePriority(schedulerPriority);

                lane = findUpdateLane(schedulerLanePriority, currentEventWipLanes);
              }

              return lane;
            }

            function requestRetryLane(fiber) {
              // This is a fork of `requestUpdateLane` designed specifically for Suspense
              // "retries" — a special update that attempts to flip a Suspense boundary
              // from its placeholder state to its primary/resolved state.
              // Special cases
              var mode = fiber.mode;

              if ((mode & BlockingMode) === NoMode) {
                return SyncLane;
              } else if ((mode & ConcurrentMode) === NoMode) {
                return getCurrentPriorityLevel() === ImmediatePriority$1 ? SyncLane : SyncBatchedLane;
              } // See `requestUpdateLane` for explanation of `currentEventWipLanes`


              if (currentEventWipLanes === NoLanes) {
                currentEventWipLanes = workInProgressRootIncludedLanes;
              }

              return findRetryLane(currentEventWipLanes);
            }

            function scheduleUpdateOnFiber(fiber, lane, eventTime) {
              checkForNestedUpdates();
              warnAboutRenderPhaseUpdatesInDEV(fiber);
              var root = markUpdateLaneFromFiberToRoot(fiber, lane);

              if (root === null) {
                warnAboutUpdateOnUnmountedFiberInDEV(fiber);
                return null;
              } // Mark that the root has a pending update.


              markRootUpdated(root, lane, eventTime);

              if (root === workInProgressRoot) {
                // Received an update to a tree that's in the middle of rendering. Mark
                // that there was an interleaved update work on this root. Unless the
                // `deferRenderPhaseUpdateToNextBatch` flag is off and this is a render
                // phase update. In that case, we don't treat render phase updates as if
                // they were interleaved, for backwards compat reasons.
                {
                  workInProgressRootUpdatedLanes = mergeLanes(workInProgressRootUpdatedLanes, lane);
                }

                if (workInProgressRootExitStatus === RootSuspendedWithDelay) {
                  // The root already suspended with a delay, which means this render
                  // definitely won't finish. Since we have a new update, let's mark it as
                  // suspended now, right before marking the incoming update. This has the
                  // effect of interrupting the current render and switching to the update.
                  // TODO: Make sure this doesn't override pings that happen while we've
                  // already started rendering.
                  markRootSuspended$1(root, workInProgressRootRenderLanes);
                }
              } // TODO: requestUpdateLanePriority also reads the priority. Pass the
              // priority as an argument to that function and this one.


              var priorityLevel = getCurrentPriorityLevel();

              if (lane === SyncLane) {
                if ( // Check if we're inside unbatchedUpdates
                (executionContext & LegacyUnbatchedContext) !== NoContext && // Check if we're not already rendering
                (executionContext & (RenderContext | CommitContext)) === NoContext) {
                  // Register pending interactions on the root to avoid losing traced interaction data.
                  schedulePendingInteractions(root, lane); // This is a legacy edge case. The initial mount of a ReactDOM.render-ed
                  // root inside of batchedUpdates should be synchronous, but layout updates
                  // should be deferred until the end of the batch.

                  performSyncWorkOnRoot(root);
                } else {
                  ensureRootIsScheduled(root, eventTime);
                  schedulePendingInteractions(root, lane);

                  if (executionContext === NoContext) {
                    // Flush the synchronous work now, unless we're already working or inside
                    // a batch. This is intentionally inside scheduleUpdateOnFiber instead of
                    // scheduleCallbackForFiber to preserve the ability to schedule a callback
                    // without immediately flushing it. We only do this for user-initiated
                    // updates, to preserve historical behavior of legacy mode.
                    resetRenderTimer();
                    flushSyncCallbackQueue();
                  }
                }
              } else {
                // Schedule a discrete update but only if it's not Sync.
                if ((executionContext & DiscreteEventContext) !== NoContext && ( // Only updates at user-blocking priority or greater are considered
                // discrete, even inside a discrete event.
                priorityLevel === UserBlockingPriority$2 || priorityLevel === ImmediatePriority$1)) {
                  // This is the result of a discrete event. Track the lowest priority
                  // discrete update per root so we can flush them early, if needed.
                  if (rootsWithPendingDiscreteUpdates === null) {
                    rootsWithPendingDiscreteUpdates = new Set([root]);
                  } else {
                    rootsWithPendingDiscreteUpdates.add(root);
                  }
                } // Schedule other updates after in case the callback is sync.


                ensureRootIsScheduled(root, eventTime);
                schedulePendingInteractions(root, lane);
              } // We use this when assigning a lane for a transition inside
              // `requestUpdateLane`. We assume it's the same as the root being updated,
              // since in the common case of a single root app it probably is. If it's not
              // the same root, then it's not a huge deal, we just might batch more stuff
              // together more than necessary.


              mostRecentlyUpdatedRoot = root;
            } // This is split into a separate function so we can mark a fiber with pending
            // work without treating it as a typical update that originates from an event;
            // e.g. retrying a Suspense boundary isn't an update, but it does schedule work
            // on a fiber.

            function markUpdateLaneFromFiberToRoot(sourceFiber, lane) {
              // Update the source fiber's lanes
              sourceFiber.lanes = mergeLanes(sourceFiber.lanes, lane);
              var alternate = sourceFiber.alternate;

              if (alternate !== null) {
                alternate.lanes = mergeLanes(alternate.lanes, lane);
              }

              {
                if (alternate === null && (sourceFiber.flags & (Placement | Hydrating)) !== NoFlags) {
                  warnAboutUpdateOnNotYetMountedFiberInDEV(sourceFiber);
                }
              } // Walk the parent path to the root and update the child expiration time.


              var node = sourceFiber;
              var parent = sourceFiber.return;

              while (parent !== null) {
                parent.childLanes = mergeLanes(parent.childLanes, lane);
                alternate = parent.alternate;

                if (alternate !== null) {
                  alternate.childLanes = mergeLanes(alternate.childLanes, lane);
                } else {
                  {
                    if ((parent.flags & (Placement | Hydrating)) !== NoFlags) {
                      warnAboutUpdateOnNotYetMountedFiberInDEV(sourceFiber);
                    }
                  }
                }

                node = parent;
                parent = parent.return;
              }

              if (node.tag === HostRoot) {
                var root = node.stateNode;
                return root;
              } else {
                return null;
              }
            } // Use this function to schedule a task for a root. There's only one task per
            // root; if a task was already scheduled, we'll check to make sure the priority
            // of the existing task is the same as the priority of the next level that the
            // root has work on. This function is called on every update, and right before
            // exiting a task.


            function ensureRootIsScheduled(root, currentTime) {
              var existingCallbackNode = root.callbackNode; // Check if any lanes are being starved by other work. If so, mark them as
              // expired so we know to work on those next.

              markStarvedLanesAsExpired(root, currentTime); // Determine the next lanes to work on, and their priority.

              var nextLanes = getNextLanes(root, root === workInProgressRoot ? workInProgressRootRenderLanes : NoLanes); // This returns the priority level computed during the `getNextLanes` call.

              var newCallbackPriority = returnNextLanesPriority();

              if (nextLanes === NoLanes) {
                // Special case: There's nothing to work on.
                if (existingCallbackNode !== null) {
                  cancelCallback(existingCallbackNode);
                  root.callbackNode = null;
                  root.callbackPriority = NoLanePriority;
                }

                return;
              } // Check if there's an existing task. We may be able to reuse it.


              if (existingCallbackNode !== null) {
                var existingCallbackPriority = root.callbackPriority;

                if (existingCallbackPriority === newCallbackPriority) {
                  // The priority hasn't changed. We can reuse the existing task. Exit.
                  return;
                } // The priority changed. Cancel the existing callback. We'll schedule a new
                // one below.


                cancelCallback(existingCallbackNode);
              } // Schedule a new callback.


              var newCallbackNode;

              if (newCallbackPriority === SyncLanePriority) {
                // Special case: Sync React callbacks are scheduled on a special
                // internal queue
                newCallbackNode = scheduleSyncCallback(performSyncWorkOnRoot.bind(null, root));
              } else if (newCallbackPriority === SyncBatchedLanePriority) {
                newCallbackNode = scheduleCallback(ImmediatePriority$1, performSyncWorkOnRoot.bind(null, root));
              } else {
                var schedulerPriorityLevel = lanePriorityToSchedulerPriority(newCallbackPriority);
                newCallbackNode = scheduleCallback(schedulerPriorityLevel, performConcurrentWorkOnRoot.bind(null, root));
              }

              root.callbackPriority = newCallbackPriority;
              root.callbackNode = newCallbackNode;
            } // This is the entry point for every concurrent task, i.e. anything that
            // goes through Scheduler.


            function performConcurrentWorkOnRoot(root) {
              // Since we know we're in a React event, we can clear the current
              // event time. The next update will compute a new event time.
              currentEventTime = NoTimestamp;
              currentEventWipLanes = NoLanes;
              currentEventPendingLanes = NoLanes;

              if (!((executionContext & (RenderContext | CommitContext)) === NoContext)) {
                {
                  throw Error( "Should not already be working." );
                }
              } // Flush any pending passive effects before deciding which lanes to work on,
              // in case they schedule additional work.


              var originalCallbackNode = root.callbackNode;
              var didFlushPassiveEffects = flushPassiveEffects();

              if (didFlushPassiveEffects) {
                // Something in the passive effect phase may have canceled the current task.
                // Check if the task node for this root was changed.
                if (root.callbackNode !== originalCallbackNode) {
                  // The current task was canceled. Exit. We don't need to call
                  // `ensureRootIsScheduled` because the check above implies either that
                  // there's a new task, or that there's no remaining work on this root.
                  return null;
                }
              } // Determine the next expiration time to work on, using the fields stored
              // on the root.


              var lanes = getNextLanes(root, root === workInProgressRoot ? workInProgressRootRenderLanes : NoLanes);

              if (lanes === NoLanes) {
                // Defensive coding. This is never expected to happen.
                return null;
              }

              var exitStatus = renderRootConcurrent(root, lanes);

              if (includesSomeLane(workInProgressRootIncludedLanes, workInProgressRootUpdatedLanes)) {
                // The render included lanes that were updated during the render phase.
                // For example, when unhiding a hidden tree, we include all the lanes
                // that were previously skipped when the tree was hidden. That set of
                // lanes is a superset of the lanes we started rendering with.
                //
                // So we'll throw out the current work and restart.
                prepareFreshStack(root, NoLanes);
              } else if (exitStatus !== RootIncomplete) {
                if (exitStatus === RootErrored) {
                  executionContext |= RetryAfterError; // If an error occurred during hydration,
                  // discard server response and fall back to client side render.

                  if (root.hydrate) {
                    root.hydrate = false;
                    clearContainer(root.containerInfo);
                  } // If something threw an error, try rendering one more time. We'll render
                  // synchronously to block concurrent data mutations, and we'll includes
                  // all pending updates are included. If it still fails after the second
                  // attempt, we'll give up and commit the resulting tree.


                  lanes = getLanesToRetrySynchronouslyOnError(root);

                  if (lanes !== NoLanes) {
                    exitStatus = renderRootSync(root, lanes);
                  }
                }

                if (exitStatus === RootFatalErrored) {
                  var fatalError = workInProgressRootFatalError;
                  prepareFreshStack(root, NoLanes);
                  markRootSuspended$1(root, lanes);
                  ensureRootIsScheduled(root, now());
                  throw fatalError;
                } // We now have a consistent tree. The next step is either to commit it,
                // or, if something suspended, wait to commit it after a timeout.


                var finishedWork = root.current.alternate;
                root.finishedWork = finishedWork;
                root.finishedLanes = lanes;
                finishConcurrentRender(root, exitStatus, lanes);
              }

              ensureRootIsScheduled(root, now());

              if (root.callbackNode === originalCallbackNode) {
                // The task node scheduled for this root is the same one that's
                // currently executed. Need to return a continuation.
                return performConcurrentWorkOnRoot.bind(null, root);
              }

              return null;
            }

            function finishConcurrentRender(root, exitStatus, lanes) {
              switch (exitStatus) {
                case RootIncomplete:
                case RootFatalErrored:
                  {
                    {
                      {
                        throw Error( "Root did not complete. This is a bug in React." );
                      }
                    }
                  }
                // Flow knows about invariant, so it complains if I add a break
                // statement, but eslint doesn't know about invariant, so it complains
                // if I do. eslint-disable-next-line no-fallthrough

                case RootErrored:
                  {
                    // We should have already attempted to retry this tree. If we reached
                    // this point, it errored again. Commit it.
                    commitRoot(root);
                    break;
                  }

                case RootSuspended:
                  {
                    markRootSuspended$1(root, lanes); // We have an acceptable loading state. We need to figure out if we
                    // should immediately commit it or wait a bit.

                    if (includesOnlyRetries(lanes) && // do not delay if we're inside an act() scope
                    !shouldForceFlushFallbacksInDEV()) {
                      // This render only included retries, no updates. Throttle committing
                      // retries so that we don't show too many loading states too quickly.
                      var msUntilTimeout = globalMostRecentFallbackTime + FALLBACK_THROTTLE_MS - now(); // Don't bother with a very short suspense time.

                      if (msUntilTimeout > 10) {
                        var nextLanes = getNextLanes(root, NoLanes);

                        if (nextLanes !== NoLanes) {
                          // There's additional work on this root.
                          break;
                        }

                        var suspendedLanes = root.suspendedLanes;

                        if (!isSubsetOfLanes(suspendedLanes, lanes)) {
                          // We should prefer to render the fallback of at the last
                          // suspended level. Ping the last suspended level to try
                          // rendering it again.
                          // FIXME: What if the suspended lanes are Idle? Should not restart.
                          requestEventTime();
                          markRootPinged(root, suspendedLanes);
                          break;
                        } // The render is suspended, it hasn't timed out, and there's no
                        // lower priority work to do. Instead of committing the fallback
                        // immediately, wait for more data to arrive.


                        root.timeoutHandle = scheduleTimeout(commitRoot.bind(null, root), msUntilTimeout);
                        break;
                      }
                    } // The work expired. Commit immediately.


                    commitRoot(root);
                    break;
                  }

                case RootSuspendedWithDelay:
                  {
                    markRootSuspended$1(root, lanes);

                    if (includesOnlyTransitions(lanes)) {
                      // This is a transition, so we should exit without committing a
                      // placeholder and without scheduling a timeout. Delay indefinitely
                      // until we receive more data.
                      break;
                    }

                    {
                      // This is not a transition, but we did trigger an avoided state.
                      // Schedule a placeholder to display after a short delay, using the Just
                      // Noticeable Difference.
                      // TODO: Is the JND optimization worth the added complexity? If this is
                      // the only reason we track the event time, then probably not.
                      // Consider removing.
                      var mostRecentEventTime = getMostRecentEventTime(root, lanes);
                      var eventTimeMs = mostRecentEventTime;
                      var timeElapsedMs = now() - eventTimeMs;

                      var _msUntilTimeout = jnd(timeElapsedMs) - timeElapsedMs; // Don't bother with a very short suspense time.


                      if (_msUntilTimeout > 10) {
                        // Instead of committing the fallback immediately, wait for more data
                        // to arrive.
                        root.timeoutHandle = scheduleTimeout(commitRoot.bind(null, root), _msUntilTimeout);
                        break;
                      }
                    } // Commit the placeholder.


                    commitRoot(root);
                    break;
                  }

                case RootCompleted:
                  {
                    // The work completed. Ready to commit.
                    commitRoot(root);
                    break;
                  }

                default:
                  {
                    {
                      {
                        throw Error( "Unknown root exit status." );
                      }
                    }
                  }
              }
            }

            function markRootSuspended$1(root, suspendedLanes) {
              // When suspending, we should always exclude lanes that were pinged or (more
              // rarely, since we try to avoid it) updated during the render phase.
              // TODO: Lol maybe there's a better way to factor this besides this
              // obnoxiously named function :)
              suspendedLanes = removeLanes(suspendedLanes, workInProgressRootPingedLanes);
              suspendedLanes = removeLanes(suspendedLanes, workInProgressRootUpdatedLanes);
              markRootSuspended(root, suspendedLanes);
            } // This is the entry point for synchronous tasks that don't go
            // through Scheduler


            function performSyncWorkOnRoot(root) {
              if (!((executionContext & (RenderContext | CommitContext)) === NoContext)) {
                {
                  throw Error( "Should not already be working." );
                }
              }

              flushPassiveEffects();
              var lanes;
              var exitStatus;

              if (root === workInProgressRoot && includesSomeLane(root.expiredLanes, workInProgressRootRenderLanes)) {
                // There's a partial tree, and at least one of its lanes has expired. Finish
                // rendering it before rendering the rest of the expired work.
                lanes = workInProgressRootRenderLanes;
                exitStatus = renderRootSync(root, lanes);

                if (includesSomeLane(workInProgressRootIncludedLanes, workInProgressRootUpdatedLanes)) {
                  // The render included lanes that were updated during the render phase.
                  // For example, when unhiding a hidden tree, we include all the lanes
                  // that were previously skipped when the tree was hidden. That set of
                  // lanes is a superset of the lanes we started rendering with.
                  //
                  // Note that this only happens when part of the tree is rendered
                  // concurrently. If the whole tree is rendered synchronously, then there
                  // are no interleaved events.
                  lanes = getNextLanes(root, lanes);
                  exitStatus = renderRootSync(root, lanes);
                }
              } else {
                lanes = getNextLanes(root, NoLanes);
                exitStatus = renderRootSync(root, lanes);
              }

              if (root.tag !== LegacyRoot && exitStatus === RootErrored) {
                executionContext |= RetryAfterError; // If an error occurred during hydration,
                // discard server response and fall back to client side render.

                if (root.hydrate) {
                  root.hydrate = false;
                  clearContainer(root.containerInfo);
                } // If something threw an error, try rendering one more time. We'll render
                // synchronously to block concurrent data mutations, and we'll includes
                // all pending updates are included. If it still fails after the second
                // attempt, we'll give up and commit the resulting tree.


                lanes = getLanesToRetrySynchronouslyOnError(root);

                if (lanes !== NoLanes) {
                  exitStatus = renderRootSync(root, lanes);
                }
              }

              if (exitStatus === RootFatalErrored) {
                var fatalError = workInProgressRootFatalError;
                prepareFreshStack(root, NoLanes);
                markRootSuspended$1(root, lanes);
                ensureRootIsScheduled(root, now());
                throw fatalError;
              } // We now have a consistent tree. Because this is a sync render, we
              // will commit it even if something suspended.


              var finishedWork = root.current.alternate;
              root.finishedWork = finishedWork;
              root.finishedLanes = lanes;
              commitRoot(root); // Before exiting, make sure there's a callback scheduled for the next
              // pending level.

              ensureRootIsScheduled(root, now());
              return null;
            }
            function flushDiscreteUpdates() {
              // TODO: Should be able to flush inside batchedUpdates, but not inside `act`.
              // However, `act` uses `batchedUpdates`, so there's no way to distinguish
              // those two cases. Need to fix this before exposing flushDiscreteUpdates
              // as a public API.
              if ((executionContext & (BatchedContext | RenderContext | CommitContext)) !== NoContext) {
                {
                  if ((executionContext & RenderContext) !== NoContext) {
                    error('unstable_flushDiscreteUpdates: Cannot flush updates when React is ' + 'already rendering.');
                  }
                } // We're already rendering, so we can't synchronously flush pending work.
                // This is probably a nested event dispatch triggered by a lifecycle/effect,
                // like `el.focus()`. Exit.


                return;
              }

              flushPendingDiscreteUpdates(); // If the discrete updates scheduled passive effects, flush them now so that
              // they fire before the next serial event.

              flushPassiveEffects();
            }

            function flushPendingDiscreteUpdates() {
              if (rootsWithPendingDiscreteUpdates !== null) {
                // For each root with pending discrete updates, schedule a callback to
                // immediately flush them.
                var roots = rootsWithPendingDiscreteUpdates;
                rootsWithPendingDiscreteUpdates = null;
                roots.forEach(function (root) {
                  markDiscreteUpdatesExpired(root);
                  ensureRootIsScheduled(root, now());
                });
              } // Now flush the immediate queue.


              flushSyncCallbackQueue();
            }

            function batchedUpdates$1(fn, a) {
              var prevExecutionContext = executionContext;
              executionContext |= BatchedContext;

              try {
                return fn(a);
              } finally {
                executionContext = prevExecutionContext;

                if (executionContext === NoContext) {
                  // Flush the immediate callbacks that were scheduled during this batch
                  resetRenderTimer();
                  flushSyncCallbackQueue();
                }
              }
            }
            function batchedEventUpdates$1(fn, a) {
              var prevExecutionContext = executionContext;
              executionContext |= EventContext;

              try {
                return fn(a);
              } finally {
                executionContext = prevExecutionContext;

                if (executionContext === NoContext) {
                  // Flush the immediate callbacks that were scheduled during this batch
                  resetRenderTimer();
                  flushSyncCallbackQueue();
                }
              }
            }
            function discreteUpdates$1(fn, a, b, c, d) {
              var prevExecutionContext = executionContext;
              executionContext |= DiscreteEventContext;

              {
                try {
                  return runWithPriority$1(UserBlockingPriority$2, fn.bind(null, a, b, c, d));
                } finally {
                  executionContext = prevExecutionContext;

                  if (executionContext === NoContext) {
                    // Flush the immediate callbacks that were scheduled during this batch
                    resetRenderTimer();
                    flushSyncCallbackQueue();
                  }
                }
              }
            }
            function unbatchedUpdates(fn, a) {
              var prevExecutionContext = executionContext;
              executionContext &= ~BatchedContext;
              executionContext |= LegacyUnbatchedContext;

              try {
                return fn(a);
              } finally {
                executionContext = prevExecutionContext;

                if (executionContext === NoContext) {
                  // Flush the immediate callbacks that were scheduled during this batch
                  resetRenderTimer();
                  flushSyncCallbackQueue();
                }
              }
            }
            function flushSync(fn, a) {
              var prevExecutionContext = executionContext;

              if ((prevExecutionContext & (RenderContext | CommitContext)) !== NoContext) {
                {
                  error('flushSync was called from inside a lifecycle method. React cannot ' + 'flush when React is already rendering. Consider moving this call to ' + 'a scheduler task or micro task.');
                }

                return fn(a);
              }

              executionContext |= BatchedContext;

              {
                try {
                  if (fn) {
                    return runWithPriority$1(ImmediatePriority$1, fn.bind(null, a));
                  } else {
                    return undefined;
                  }
                } finally {
                  executionContext = prevExecutionContext; // Flush the immediate callbacks that were scheduled during this batch.
                  // Note that this will happen even if batchedUpdates is higher up
                  // the stack.

                  flushSyncCallbackQueue();
                }
              }
            }
            function pushRenderLanes(fiber, lanes) {
              push(subtreeRenderLanesCursor, subtreeRenderLanes, fiber);
              subtreeRenderLanes = mergeLanes(subtreeRenderLanes, lanes);
              workInProgressRootIncludedLanes = mergeLanes(workInProgressRootIncludedLanes, lanes);
            }
            function popRenderLanes(fiber) {
              subtreeRenderLanes = subtreeRenderLanesCursor.current;
              pop(subtreeRenderLanesCursor, fiber);
            }

            function prepareFreshStack(root, lanes) {
              root.finishedWork = null;
              root.finishedLanes = NoLanes;
              var timeoutHandle = root.timeoutHandle;

              if (timeoutHandle !== noTimeout) {
                // The root previous suspended and scheduled a timeout to commit a fallback
                // state. Now that we have additional work, cancel the timeout.
                root.timeoutHandle = noTimeout; // $FlowFixMe Complains noTimeout is not a TimeoutID, despite the check above

                cancelTimeout(timeoutHandle);
              }

              if (workInProgress !== null) {
                var interruptedWork = workInProgress.return;

                while (interruptedWork !== null) {
                  unwindInterruptedWork(interruptedWork);
                  interruptedWork = interruptedWork.return;
                }
              }

              workInProgressRoot = root;
              workInProgress = createWorkInProgress(root.current, null);
              workInProgressRootRenderLanes = subtreeRenderLanes = workInProgressRootIncludedLanes = lanes;
              workInProgressRootExitStatus = RootIncomplete;
              workInProgressRootFatalError = null;
              workInProgressRootSkippedLanes = NoLanes;
              workInProgressRootUpdatedLanes = NoLanes;
              workInProgressRootPingedLanes = NoLanes;

              {
                spawnedWorkDuringRender = null;
              }

              {
                ReactStrictModeWarnings.discardPendingWarnings();
              }
            }

            function handleError(root, thrownValue) {
              do {
                var erroredWork = workInProgress;

                try {
                  // Reset module-level state that was set during the render phase.
                  resetContextDependencies();
                  resetHooksAfterThrow();
                  resetCurrentFiber(); // TODO: I found and added this missing line while investigating a
                  // separate issue. Write a regression test using string refs.

                  ReactCurrentOwner$2.current = null;

                  if (erroredWork === null || erroredWork.return === null) {
                    // Expected to be working on a non-root fiber. This is a fatal error
                    // because there's no ancestor that can handle it; the root is
                    // supposed to capture all errors that weren't caught by an error
                    // boundary.
                    workInProgressRootExitStatus = RootFatalErrored;
                    workInProgressRootFatalError = thrownValue; // Set `workInProgress` to null. This represents advancing to the next
                    // sibling, or the parent if there are no siblings. But since the root
                    // has no siblings nor a parent, we set it to null. Usually this is
                    // handled by `completeUnitOfWork` or `unwindWork`, but since we're
                    // intentionally not calling those, we need set it here.
                    // TODO: Consider calling `unwindWork` to pop the contexts.

                    workInProgress = null;
                    return;
                  }

                  if (enableProfilerTimer && erroredWork.mode & ProfileMode) {
                    // Record the time spent rendering before an error was thrown. This
                    // avoids inaccurate Profiler durations in the case of a
                    // suspended render.
                    stopProfilerTimerIfRunningAndRecordDelta(erroredWork, true);
                  }

                  throwException(root, erroredWork.return, erroredWork, thrownValue, workInProgressRootRenderLanes);
                  completeUnitOfWork(erroredWork);
                } catch (yetAnotherThrownValue) {
                  // Something in the return path also threw.
                  thrownValue = yetAnotherThrownValue;

                  if (workInProgress === erroredWork && erroredWork !== null) {
                    // If this boundary has already errored, then we had trouble processing
                    // the error. Bubble it to the next boundary.
                    erroredWork = erroredWork.return;
                    workInProgress = erroredWork;
                  } else {
                    erroredWork = workInProgress;
                  }

                  continue;
                } // Return to the normal work loop.


                return;
              } while (true);
            }

            function pushDispatcher() {
              var prevDispatcher = ReactCurrentDispatcher$2.current;
              ReactCurrentDispatcher$2.current = ContextOnlyDispatcher;

              if (prevDispatcher === null) {
                // The React isomorphic package does not include a default dispatcher.
                // Instead the first renderer will lazily attach one, in order to give
                // nicer error messages.
                return ContextOnlyDispatcher;
              } else {
                return prevDispatcher;
              }
            }

            function popDispatcher(prevDispatcher) {
              ReactCurrentDispatcher$2.current = prevDispatcher;
            }

            function pushInteractions(root) {
              {
                var prevInteractions = tracing$1.__interactionsRef.current;
                tracing$1.__interactionsRef.current = root.memoizedInteractions;
                return prevInteractions;
              }
            }

            function popInteractions(prevInteractions) {
              {
                tracing$1.__interactionsRef.current = prevInteractions;
              }
            }

            function markCommitTimeOfFallback() {
              globalMostRecentFallbackTime = now();
            }
            function markSkippedUpdateLanes(lane) {
              workInProgressRootSkippedLanes = mergeLanes(lane, workInProgressRootSkippedLanes);
            }
            function renderDidSuspend() {
              if (workInProgressRootExitStatus === RootIncomplete) {
                workInProgressRootExitStatus = RootSuspended;
              }
            }
            function renderDidSuspendDelayIfPossible() {
              if (workInProgressRootExitStatus === RootIncomplete || workInProgressRootExitStatus === RootSuspended) {
                workInProgressRootExitStatus = RootSuspendedWithDelay;
              } // Check if there are updates that we skipped tree that might have unblocked
              // this render.


              if (workInProgressRoot !== null && (includesNonIdleWork(workInProgressRootSkippedLanes) || includesNonIdleWork(workInProgressRootUpdatedLanes))) {
                // Mark the current render as suspended so that we switch to working on
                // the updates that were skipped. Usually we only suspend at the end of
                // the render phase.
                // TODO: We should probably always mark the root as suspended immediately
                // (inside this function), since by suspending at the end of the render
                // phase introduces a potential mistake where we suspend lanes that were
                // pinged or updated while we were rendering.
                markRootSuspended$1(workInProgressRoot, workInProgressRootRenderLanes);
              }
            }
            function renderDidError() {
              if (workInProgressRootExitStatus !== RootCompleted) {
                workInProgressRootExitStatus = RootErrored;
              }
            } // Called during render to determine if anything has suspended.
            // Returns false if we're not sure.

            function renderHasNotSuspendedYet() {
              // If something errored or completed, we can't really be sure,
              // so those are false.
              return workInProgressRootExitStatus === RootIncomplete;
            }

            function renderRootSync(root, lanes) {
              var prevExecutionContext = executionContext;
              executionContext |= RenderContext;
              var prevDispatcher = pushDispatcher(); // If the root or lanes have changed, throw out the existing stack
              // and prepare a fresh one. Otherwise we'll continue where we left off.

              if (workInProgressRoot !== root || workInProgressRootRenderLanes !== lanes) {
                prepareFreshStack(root, lanes);
                startWorkOnPendingInteractions(root, lanes);
              }

              var prevInteractions = pushInteractions(root);

              do {
                try {
                  workLoopSync();
                  break;
                } catch (thrownValue) {
                  handleError(root, thrownValue);
                }
              } while (true);

              resetContextDependencies();

              {
                popInteractions(prevInteractions);
              }

              executionContext = prevExecutionContext;
              popDispatcher(prevDispatcher);

              if (workInProgress !== null) {
                // This is a sync render, so we should have finished the whole tree.
                {
                  {
                    throw Error( "Cannot commit an incomplete root. This error is likely caused by a bug in React. Please file an issue." );
                  }
                }
              }


              workInProgressRoot = null;
              workInProgressRootRenderLanes = NoLanes;
              return workInProgressRootExitStatus;
            } // The work loop is an extremely hot path. Tell Closure not to inline it.

            /** @noinline */


            function workLoopSync() {
              // Already timed out, so perform work without checking if we need to yield.
              while (workInProgress !== null) {
                performUnitOfWork(workInProgress);
              }
            }

            function renderRootConcurrent(root, lanes) {
              var prevExecutionContext = executionContext;
              executionContext |= RenderContext;
              var prevDispatcher = pushDispatcher(); // If the root or lanes have changed, throw out the existing stack
              // and prepare a fresh one. Otherwise we'll continue where we left off.

              if (workInProgressRoot !== root || workInProgressRootRenderLanes !== lanes) {
                resetRenderTimer();
                prepareFreshStack(root, lanes);
                startWorkOnPendingInteractions(root, lanes);
              }

              var prevInteractions = pushInteractions(root);

              do {
                try {
                  workLoopConcurrent();
                  break;
                } catch (thrownValue) {
                  handleError(root, thrownValue);
                }
              } while (true);

              resetContextDependencies();

              {
                popInteractions(prevInteractions);
              }

              popDispatcher(prevDispatcher);
              executionContext = prevExecutionContext;


              if (workInProgress !== null) {

                return RootIncomplete;
              } else {


                workInProgressRoot = null;
                workInProgressRootRenderLanes = NoLanes; // Return the final exit status.

                return workInProgressRootExitStatus;
              }
            }
            /** @noinline */


            function workLoopConcurrent() {
              // Perform work until Scheduler asks us to yield
              while (workInProgress !== null && !shouldYield()) {
                performUnitOfWork(workInProgress);
              }
            }

            function performUnitOfWork(unitOfWork) {
              // The current, flushed, state of this fiber is the alternate. Ideally
              // nothing should rely on this, but relying on it here means that we don't
              // need an additional field on the work in progress.
              var current = unitOfWork.alternate;
              setCurrentFiber(unitOfWork);
              var next;

              if ( (unitOfWork.mode & ProfileMode) !== NoMode) {
                startProfilerTimer(unitOfWork);
                next = beginWork$1(current, unitOfWork, subtreeRenderLanes);
                stopProfilerTimerIfRunningAndRecordDelta(unitOfWork, true);
              } else {
                next = beginWork$1(current, unitOfWork, subtreeRenderLanes);
              }

              resetCurrentFiber();
              unitOfWork.memoizedProps = unitOfWork.pendingProps;

              if (next === null) {
                // If this doesn't spawn new work, complete the current work.
                completeUnitOfWork(unitOfWork);
              } else {
                workInProgress = next;
              }

              ReactCurrentOwner$2.current = null;
            }

            function completeUnitOfWork(unitOfWork) {
              // Attempt to complete the current unit of work, then move to the next
              // sibling. If there are no more siblings, return to the parent fiber.
              var completedWork = unitOfWork;

              do {
                // The current, flushed, state of this fiber is the alternate. Ideally
                // nothing should rely on this, but relying on it here means that we don't
                // need an additional field on the work in progress.
                var current = completedWork.alternate;
                var returnFiber = completedWork.return; // Check if the work completed or if something threw.

                if ((completedWork.flags & Incomplete) === NoFlags) {
                  setCurrentFiber(completedWork);
                  var next = void 0;

                  if ( (completedWork.mode & ProfileMode) === NoMode) {
                    next = completeWork(current, completedWork, subtreeRenderLanes);
                  } else {
                    startProfilerTimer(completedWork);
                    next = completeWork(current, completedWork, subtreeRenderLanes); // Update render duration assuming we didn't error.

                    stopProfilerTimerIfRunningAndRecordDelta(completedWork, false);
                  }

                  resetCurrentFiber();

                  if (next !== null) {
                    // Completing this fiber spawned new work. Work on that next.
                    workInProgress = next;
                    return;
                  }

                  resetChildLanes(completedWork);

                  if (returnFiber !== null && // Do not append effects to parents if a sibling failed to complete
                  (returnFiber.flags & Incomplete) === NoFlags) {
                    // Append all the effects of the subtree and this fiber onto the effect
                    // list of the parent. The completion order of the children affects the
                    // side-effect order.
                    if (returnFiber.firstEffect === null) {
                      returnFiber.firstEffect = completedWork.firstEffect;
                    }

                    if (completedWork.lastEffect !== null) {
                      if (returnFiber.lastEffect !== null) {
                        returnFiber.lastEffect.nextEffect = completedWork.firstEffect;
                      }

                      returnFiber.lastEffect = completedWork.lastEffect;
                    } // If this fiber had side-effects, we append it AFTER the children's
                    // side-effects. We can perform certain side-effects earlier if needed,
                    // by doing multiple passes over the effect list. We don't want to
                    // schedule our own side-effect on our own list because if end up
                    // reusing children we'll schedule this effect onto itself since we're
                    // at the end.


                    var flags = completedWork.flags; // Skip both NoWork and PerformedWork tags when creating the effect
                    // list. PerformedWork effect is read by React DevTools but shouldn't be
                    // committed.

                    if (flags > PerformedWork) {
                      if (returnFiber.lastEffect !== null) {
                        returnFiber.lastEffect.nextEffect = completedWork;
                      } else {
                        returnFiber.firstEffect = completedWork;
                      }

                      returnFiber.lastEffect = completedWork;
                    }
                  }
                } else {
                  // This fiber did not complete because something threw. Pop values off
                  // the stack without entering the complete phase. If this is a boundary,
                  // capture values if possible.
                  var _next = unwindWork(completedWork); // Because this fiber did not complete, don't reset its expiration time.


                  if (_next !== null) {
                    // If completing this work spawned new work, do that next. We'll come
                    // back here again.
                    // Since we're restarting, remove anything that is not a host effect
                    // from the effect tag.
                    _next.flags &= HostEffectMask;
                    workInProgress = _next;
                    return;
                  }

                  if ( (completedWork.mode & ProfileMode) !== NoMode) {
                    // Record the render duration for the fiber that errored.
                    stopProfilerTimerIfRunningAndRecordDelta(completedWork, false); // Include the time spent working on failed children before continuing.

                    var actualDuration = completedWork.actualDuration;
                    var child = completedWork.child;

                    while (child !== null) {
                      actualDuration += child.actualDuration;
                      child = child.sibling;
                    }

                    completedWork.actualDuration = actualDuration;
                  }

                  if (returnFiber !== null) {
                    // Mark the parent fiber as incomplete and clear its effect list.
                    returnFiber.firstEffect = returnFiber.lastEffect = null;
                    returnFiber.flags |= Incomplete;
                  }
                }

                var siblingFiber = completedWork.sibling;

                if (siblingFiber !== null) {
                  // If there is more work to do in this returnFiber, do that next.
                  workInProgress = siblingFiber;
                  return;
                } // Otherwise, return to the parent


                completedWork = returnFiber; // Update the next thing we're working on in case something throws.

                workInProgress = completedWork;
              } while (completedWork !== null); // We've reached the root.


              if (workInProgressRootExitStatus === RootIncomplete) {
                workInProgressRootExitStatus = RootCompleted;
              }
            }

            function resetChildLanes(completedWork) {
              if ( // TODO: Move this check out of the hot path by moving `resetChildLanes`
              // to switch statement in `completeWork`.
              (completedWork.tag === LegacyHiddenComponent || completedWork.tag === OffscreenComponent) && completedWork.memoizedState !== null && !includesSomeLane(subtreeRenderLanes, OffscreenLane) && (completedWork.mode & ConcurrentMode) !== NoLanes) {
                // The children of this component are hidden. Don't bubble their
                // expiration times.
                return;
              }

              var newChildLanes = NoLanes; // Bubble up the earliest expiration time.

              if ( (completedWork.mode & ProfileMode) !== NoMode) {
                // In profiling mode, resetChildExpirationTime is also used to reset
                // profiler durations.
                var actualDuration = completedWork.actualDuration;
                var treeBaseDuration = completedWork.selfBaseDuration; // When a fiber is cloned, its actualDuration is reset to 0. This value will
                // only be updated if work is done on the fiber (i.e. it doesn't bailout).
                // When work is done, it should bubble to the parent's actualDuration. If
                // the fiber has not been cloned though, (meaning no work was done), then
                // this value will reflect the amount of time spent working on a previous
                // render. In that case it should not bubble. We determine whether it was
                // cloned by comparing the child pointer.

                var shouldBubbleActualDurations = completedWork.alternate === null || completedWork.child !== completedWork.alternate.child;
                var child = completedWork.child;

                while (child !== null) {
                  newChildLanes = mergeLanes(newChildLanes, mergeLanes(child.lanes, child.childLanes));

                  if (shouldBubbleActualDurations) {
                    actualDuration += child.actualDuration;
                  }

                  treeBaseDuration += child.treeBaseDuration;
                  child = child.sibling;
                }

                var isTimedOutSuspense = completedWork.tag === SuspenseComponent && completedWork.memoizedState !== null;

                if (isTimedOutSuspense) {
                  // Don't count time spent in a timed out Suspense subtree as part of the base duration.
                  var primaryChildFragment = completedWork.child;

                  if (primaryChildFragment !== null) {
                    treeBaseDuration -= primaryChildFragment.treeBaseDuration;
                  }
                }

                completedWork.actualDuration = actualDuration;
                completedWork.treeBaseDuration = treeBaseDuration;
              } else {
                var _child = completedWork.child;

                while (_child !== null) {
                  newChildLanes = mergeLanes(newChildLanes, mergeLanes(_child.lanes, _child.childLanes));
                  _child = _child.sibling;
                }
              }

              completedWork.childLanes = newChildLanes;
            }

            function commitRoot(root) {
              var renderPriorityLevel = getCurrentPriorityLevel();
              runWithPriority$1(ImmediatePriority$1, commitRootImpl.bind(null, root, renderPriorityLevel));
              return null;
            }

            function commitRootImpl(root, renderPriorityLevel) {
              do {
                // `flushPassiveEffects` will call `flushSyncUpdateQueue` at the end, which
                // means `flushPassiveEffects` will sometimes result in additional
                // passive effects. So we need to keep flushing in a loop until there are
                // no more pending effects.
                // TODO: Might be better if `flushPassiveEffects` did not automatically
                // flush synchronous work at the end, to avoid factoring hazards like this.
                flushPassiveEffects();
              } while (rootWithPendingPassiveEffects !== null);

              flushRenderPhaseStrictModeWarningsInDEV();

              if (!((executionContext & (RenderContext | CommitContext)) === NoContext)) {
                {
                  throw Error( "Should not already be working." );
                }
              }

              var finishedWork = root.finishedWork;
              var lanes = root.finishedLanes;

              if (finishedWork === null) {

                return null;
              }

              root.finishedWork = null;
              root.finishedLanes = NoLanes;

              if (!(finishedWork !== root.current)) {
                {
                  throw Error( "Cannot commit the same tree as before. This error is likely caused by a bug in React. Please file an issue." );
                }
              } // commitRoot never returns a continuation; it always finishes synchronously.
              // So we can clear these now to allow a new callback to be scheduled.


              root.callbackNode = null; // Update the first and last pending times on this root. The new first
              // pending time is whatever is left on the root fiber.

              var remainingLanes = mergeLanes(finishedWork.lanes, finishedWork.childLanes);
              markRootFinished(root, remainingLanes); // Clear already finished discrete updates in case that a later call of
              // `flushDiscreteUpdates` starts a useless render pass which may cancels
              // a scheduled timeout.

              if (rootsWithPendingDiscreteUpdates !== null) {
                if (!hasDiscreteLanes(remainingLanes) && rootsWithPendingDiscreteUpdates.has(root)) {
                  rootsWithPendingDiscreteUpdates.delete(root);
                }
              }

              if (root === workInProgressRoot) {
                // We can reset these now that they are finished.
                workInProgressRoot = null;
                workInProgress = null;
                workInProgressRootRenderLanes = NoLanes;
              } // Get the list of effects.


              var firstEffect;

              if (finishedWork.flags > PerformedWork) {
                // A fiber's effect list consists only of its children, not itself. So if
                // the root has an effect, we need to add it to the end of the list. The
                // resulting list is the set that would belong to the root's parent, if it
                // had one; that is, all the effects in the tree including the root.
                if (finishedWork.lastEffect !== null) {
                  finishedWork.lastEffect.nextEffect = finishedWork;
                  firstEffect = finishedWork.firstEffect;
                } else {
                  firstEffect = finishedWork;
                }
              } else {
                // There is no effect on the root.
                firstEffect = finishedWork.firstEffect;
              }

              if (firstEffect !== null) {

                var prevExecutionContext = executionContext;
                executionContext |= CommitContext;
                var prevInteractions = pushInteractions(root); // Reset this to null before calling lifecycles

                ReactCurrentOwner$2.current = null; // The commit phase is broken into several sub-phases. We do a separate pass
                // of the effect list for each phase: all mutation effects come before all
                // layout effects, and so on.
                // The first phase a "before mutation" phase. We use this phase to read the
                // state of the host tree right before we mutate it. This is where
                // getSnapshotBeforeUpdate is called.

                focusedInstanceHandle = prepareForCommit(root.containerInfo);
                shouldFireAfterActiveInstanceBlur = false;
                nextEffect = firstEffect;

                do {
                  {
                    invokeGuardedCallback(null, commitBeforeMutationEffects, null);

                    if (hasCaughtError()) {
                      if (!(nextEffect !== null)) {
                        {
                          throw Error( "Should be working on an effect." );
                        }
                      }

                      var error = clearCaughtError();
                      captureCommitPhaseError(nextEffect, error);
                      nextEffect = nextEffect.nextEffect;
                    }
                  }
                } while (nextEffect !== null); // We no longer need to track the active instance fiber


                focusedInstanceHandle = null;

                {
                  // Mark the current commit time to be shared by all Profilers in this
                  // batch. This enables them to be grouped later.
                  recordCommitTime();
                } // The next phase is the mutation phase, where we mutate the host tree.


                nextEffect = firstEffect;

                do {
                  {
                    invokeGuardedCallback(null, commitMutationEffects, null, root, renderPriorityLevel);

                    if (hasCaughtError()) {
                      if (!(nextEffect !== null)) {
                        {
                          throw Error( "Should be working on an effect." );
                        }
                      }

                      var _error = clearCaughtError();

                      captureCommitPhaseError(nextEffect, _error);
                      nextEffect = nextEffect.nextEffect;
                    }
                  }
                } while (nextEffect !== null);

                resetAfterCommit(root.containerInfo); // The work-in-progress tree is now the current tree. This must come after
                // the mutation phase, so that the previous tree is still current during
                // componentWillUnmount, but before the layout phase, so that the finished
                // work is current during componentDidMount/Update.

                root.current = finishedWork; // The next phase is the layout phase, where we call effects that read
                // the host tree after it's been mutated. The idiomatic use case for this is
                // layout, but class component lifecycles also fire here for legacy reasons.

                nextEffect = firstEffect;

                do {
                  {
                    invokeGuardedCallback(null, commitLayoutEffects, null, root, lanes);

                    if (hasCaughtError()) {
                      if (!(nextEffect !== null)) {
                        {
                          throw Error( "Should be working on an effect." );
                        }
                      }

                      var _error2 = clearCaughtError();

                      captureCommitPhaseError(nextEffect, _error2);
                      nextEffect = nextEffect.nextEffect;
                    }
                  }
                } while (nextEffect !== null);

                nextEffect = null; // Tell Scheduler to yield at the end of the frame, so the browser has an
                // opportunity to paint.

                requestPaint();

                {
                  popInteractions(prevInteractions);
                }

                executionContext = prevExecutionContext;
              } else {
                // No effects.
                root.current = finishedWork; // Measure these anyway so the flamegraph explicitly shows that there were
                // no effects.
                // TODO: Maybe there's a better way to report this.

                {
                  recordCommitTime();
                }
              }

              var rootDidHavePassiveEffects = rootDoesHavePassiveEffects;

              if (rootDoesHavePassiveEffects) {
                // This commit has passive effects. Stash a reference to them. But don't
                // schedule a callback until after flushing layout work.
                rootDoesHavePassiveEffects = false;
                rootWithPendingPassiveEffects = root;
                pendingPassiveEffectsLanes = lanes;
                pendingPassiveEffectsRenderPriority = renderPriorityLevel;
              } else {
                // We are done with the effect chain at this point so let's clear the
                // nextEffect pointers to assist with GC. If we have passive effects, we'll
                // clear this in flushPassiveEffects.
                nextEffect = firstEffect;

                while (nextEffect !== null) {
                  var nextNextEffect = nextEffect.nextEffect;
                  nextEffect.nextEffect = null;

                  if (nextEffect.flags & Deletion) {
                    detachFiberAfterEffects(nextEffect);
                  }

                  nextEffect = nextNextEffect;
                }
              } // Read this again, since an effect might have updated it


              remainingLanes = root.pendingLanes; // Check if there's remaining work on this root

              if (remainingLanes !== NoLanes) {
                {
                  if (spawnedWorkDuringRender !== null) {
                    var expirationTimes = spawnedWorkDuringRender;
                    spawnedWorkDuringRender = null;

                    for (var i = 0; i < expirationTimes.length; i++) {
                      scheduleInteractions(root, expirationTimes[i], root.memoizedInteractions);
                    }
                  }

                  schedulePendingInteractions(root, remainingLanes);
                }
              } else {
                // If there's no remaining work, we can clear the set of already failed
                // error boundaries.
                legacyErrorBoundariesThatAlreadyFailed = null;
              }

              {
                if (!rootDidHavePassiveEffects) {
                  // If there are no passive effects, then we can complete the pending interactions.
                  // Otherwise, we'll wait until after the passive effects are flushed.
                  // Wait to do this until after remaining work has been scheduled,
                  // so that we don't prematurely signal complete for interactions when there's e.g. hidden work.
                  finishPendingInteractions(root, lanes);
                }
              }

              if (remainingLanes === SyncLane) {
                // Count the number of times the root synchronously re-renders without
                // finishing. If there are too many, it indicates an infinite update loop.
                if (root === rootWithNestedUpdates) {
                  nestedUpdateCount++;
                } else {
                  nestedUpdateCount = 0;
                  rootWithNestedUpdates = root;
                }
              } else {
                nestedUpdateCount = 0;
              }

              onCommitRoot(finishedWork.stateNode, renderPriorityLevel);

              {
                onCommitRoot$1();
              } // Always call this before exiting `commitRoot`, to ensure that any
              // additional work on this root is scheduled.


              ensureRootIsScheduled(root, now());

              if (hasUncaughtError) {
                hasUncaughtError = false;
                var _error3 = firstUncaughtError;
                firstUncaughtError = null;
                throw _error3;
              }

              if ((executionContext & LegacyUnbatchedContext) !== NoContext) {
                // a ReactDOM.render-ed root inside of batchedUpdates. The commit fired
                // synchronously, but layout updates should be deferred until the end
                // of the batch.


                return null;
              } // If layout work was scheduled, flush it now.


              flushSyncCallbackQueue();

              return null;
            }

            function commitBeforeMutationEffects() {
              while (nextEffect !== null) {
                var current = nextEffect.alternate;

                if (!shouldFireAfterActiveInstanceBlur && focusedInstanceHandle !== null) {
                  if ((nextEffect.flags & Deletion) !== NoFlags) {
                    if (doesFiberContain(nextEffect, focusedInstanceHandle)) {
                      shouldFireAfterActiveInstanceBlur = true;
                    }
                  } else {
                    // TODO: Move this out of the hot path using a dedicated effect tag.
                    if (nextEffect.tag === SuspenseComponent && isSuspenseBoundaryBeingHidden(current, nextEffect) && doesFiberContain(nextEffect, focusedInstanceHandle)) {
                      shouldFireAfterActiveInstanceBlur = true;
                    }
                  }
                }

                var flags = nextEffect.flags;

                if ((flags & Snapshot) !== NoFlags) {
                  setCurrentFiber(nextEffect);
                  commitBeforeMutationLifeCycles(current, nextEffect);
                  resetCurrentFiber();
                }

                if ((flags & Passive) !== NoFlags) {
                  // If there are passive effects, schedule a callback to flush at
                  // the earliest opportunity.
                  if (!rootDoesHavePassiveEffects) {
                    rootDoesHavePassiveEffects = true;
                    scheduleCallback(NormalPriority$1, function () {
                      flushPassiveEffects();
                      return null;
                    });
                  }
                }

                nextEffect = nextEffect.nextEffect;
              }
            }

            function commitMutationEffects(root, renderPriorityLevel) {
              // TODO: Should probably move the bulk of this function to commitWork.
              while (nextEffect !== null) {
                setCurrentFiber(nextEffect);
                var flags = nextEffect.flags;

                if (flags & ContentReset) {
                  commitResetTextContent(nextEffect);
                }

                if (flags & Ref) {
                  var current = nextEffect.alternate;

                  if (current !== null) {
                    commitDetachRef(current);
                  }
                } // The following switch statement is only concerned about placement,
                // updates, and deletions. To avoid needing to add a case for every possible
                // bitmap value, we remove the secondary effects from the effect tag and
                // switch on that value.


                var primaryFlags = flags & (Placement | Update | Deletion | Hydrating);

                switch (primaryFlags) {
                  case Placement:
                    {
                      commitPlacement(nextEffect); // Clear the "placement" from effect tag so that we know that this is
                      // inserted, before any life-cycles like componentDidMount gets called.
                      // TODO: findDOMNode doesn't rely on this any more but isMounted does
                      // and isMounted is deprecated anyway so we should be able to kill this.

                      nextEffect.flags &= ~Placement;
                      break;
                    }

                  case PlacementAndUpdate:
                    {
                      // Placement
                      commitPlacement(nextEffect); // Clear the "placement" from effect tag so that we know that this is
                      // inserted, before any life-cycles like componentDidMount gets called.

                      nextEffect.flags &= ~Placement; // Update

                      var _current = nextEffect.alternate;
                      commitWork(_current, nextEffect);
                      break;
                    }

                  case Hydrating:
                    {
                      nextEffect.flags &= ~Hydrating;
                      break;
                    }

                  case HydratingAndUpdate:
                    {
                      nextEffect.flags &= ~Hydrating; // Update

                      var _current2 = nextEffect.alternate;
                      commitWork(_current2, nextEffect);
                      break;
                    }

                  case Update:
                    {
                      var _current3 = nextEffect.alternate;
                      commitWork(_current3, nextEffect);
                      break;
                    }

                  case Deletion:
                    {
                      commitDeletion(root, nextEffect);
                      break;
                    }
                }

                resetCurrentFiber();
                nextEffect = nextEffect.nextEffect;
              }
            }

            function commitLayoutEffects(root, committedLanes) {


              while (nextEffect !== null) {
                setCurrentFiber(nextEffect);
                var flags = nextEffect.flags;

                if (flags & (Update | Callback)) {
                  var current = nextEffect.alternate;
                  commitLifeCycles(root, current, nextEffect);
                }

                {
                  if (flags & Ref) {
                    commitAttachRef(nextEffect);
                  }
                }

                resetCurrentFiber();
                nextEffect = nextEffect.nextEffect;
              }
            }

            function flushPassiveEffects() {
              // Returns whether passive effects were flushed.
              if (pendingPassiveEffectsRenderPriority !== NoPriority$1) {
                var priorityLevel = pendingPassiveEffectsRenderPriority > NormalPriority$1 ? NormalPriority$1 : pendingPassiveEffectsRenderPriority;
                pendingPassiveEffectsRenderPriority = NoPriority$1;

                {
                  return runWithPriority$1(priorityLevel, flushPassiveEffectsImpl);
                }
              }

              return false;
            }
            function enqueuePendingPassiveHookEffectMount(fiber, effect) {
              pendingPassiveHookEffectsMount.push(effect, fiber);

              if (!rootDoesHavePassiveEffects) {
                rootDoesHavePassiveEffects = true;
                scheduleCallback(NormalPriority$1, function () {
                  flushPassiveEffects();
                  return null;
                });
              }
            }
            function enqueuePendingPassiveHookEffectUnmount(fiber, effect) {
              pendingPassiveHookEffectsUnmount.push(effect, fiber);

              {
                fiber.flags |= PassiveUnmountPendingDev;
                var alternate = fiber.alternate;

                if (alternate !== null) {
                  alternate.flags |= PassiveUnmountPendingDev;
                }
              }

              if (!rootDoesHavePassiveEffects) {
                rootDoesHavePassiveEffects = true;
                scheduleCallback(NormalPriority$1, function () {
                  flushPassiveEffects();
                  return null;
                });
              }
            }

            function invokePassiveEffectCreate(effect) {
              var create = effect.create;
              effect.destroy = create();
            }

            function flushPassiveEffectsImpl() {
              if (rootWithPendingPassiveEffects === null) {
                return false;
              }

              var root = rootWithPendingPassiveEffects;
              var lanes = pendingPassiveEffectsLanes;
              rootWithPendingPassiveEffects = null;
              pendingPassiveEffectsLanes = NoLanes;

              if (!((executionContext & (RenderContext | CommitContext)) === NoContext)) {
                {
                  throw Error( "Cannot flush passive effects while already rendering." );
                }
              }

              {
                isFlushingPassiveEffects = true;
              }

              var prevExecutionContext = executionContext;
              executionContext |= CommitContext;
              var prevInteractions = pushInteractions(root); // It's important that ALL pending passive effect destroy functions are called
              // before ANY passive effect create functions are called.
              // Otherwise effects in sibling components might interfere with each other.
              // e.g. a destroy function in one component may unintentionally override a ref
              // value set by a create function in another component.
              // Layout effects have the same constraint.
              // First pass: Destroy stale passive effects.

              var unmountEffects = pendingPassiveHookEffectsUnmount;
              pendingPassiveHookEffectsUnmount = [];

              for (var i = 0; i < unmountEffects.length; i += 2) {
                var _effect = unmountEffects[i];
                var fiber = unmountEffects[i + 1];
                var destroy = _effect.destroy;
                _effect.destroy = undefined;

                {
                  fiber.flags &= ~PassiveUnmountPendingDev;
                  var alternate = fiber.alternate;

                  if (alternate !== null) {
                    alternate.flags &= ~PassiveUnmountPendingDev;
                  }
                }

                if (typeof destroy === 'function') {
                  {
                    setCurrentFiber(fiber);

                    {
                      invokeGuardedCallback(null, destroy, null);
                    }

                    if (hasCaughtError()) {
                      if (!(fiber !== null)) {
                        {
                          throw Error( "Should be working on an effect." );
                        }
                      }

                      var error = clearCaughtError();
                      captureCommitPhaseError(fiber, error);
                    }

                    resetCurrentFiber();
                  }
                }
              } // Second pass: Create new passive effects.


              var mountEffects = pendingPassiveHookEffectsMount;
              pendingPassiveHookEffectsMount = [];

              for (var _i = 0; _i < mountEffects.length; _i += 2) {
                var _effect2 = mountEffects[_i];
                var _fiber = mountEffects[_i + 1];

                {
                  setCurrentFiber(_fiber);

                  {
                    invokeGuardedCallback(null, invokePassiveEffectCreate, null, _effect2);
                  }

                  if (hasCaughtError()) {
                    if (!(_fiber !== null)) {
                      {
                        throw Error( "Should be working on an effect." );
                      }
                    }

                    var _error4 = clearCaughtError();

                    captureCommitPhaseError(_fiber, _error4);
                  }

                  resetCurrentFiber();
                }
              } // Note: This currently assumes there are no passive effects on the root fiber
              // because the root is not part of its own effect list.
              // This could change in the future.


              var effect = root.current.firstEffect;

              while (effect !== null) {
                var nextNextEffect = effect.nextEffect; // Remove nextEffect pointer to assist GC

                effect.nextEffect = null;

                if (effect.flags & Deletion) {
                  detachFiberAfterEffects(effect);
                }

                effect = nextNextEffect;
              }

              {
                popInteractions(prevInteractions);
                finishPendingInteractions(root, lanes);
              }

              {
                isFlushingPassiveEffects = false;
              }

              executionContext = prevExecutionContext;
              flushSyncCallbackQueue(); // If additional passive effects were scheduled, increment a counter. If this
              // exceeds the limit, we'll fire a warning.

              nestedPassiveUpdateCount = rootWithPendingPassiveEffects === null ? 0 : nestedPassiveUpdateCount + 1;
              return true;
            }

            function isAlreadyFailedLegacyErrorBoundary(instance) {
              return legacyErrorBoundariesThatAlreadyFailed !== null && legacyErrorBoundariesThatAlreadyFailed.has(instance);
            }
            function markLegacyErrorBoundaryAsFailed(instance) {
              if (legacyErrorBoundariesThatAlreadyFailed === null) {
                legacyErrorBoundariesThatAlreadyFailed = new Set([instance]);
              } else {
                legacyErrorBoundariesThatAlreadyFailed.add(instance);
              }
            }

            function prepareToThrowUncaughtError(error) {
              if (!hasUncaughtError) {
                hasUncaughtError = true;
                firstUncaughtError = error;
              }
            }

            var onUncaughtError = prepareToThrowUncaughtError;

            function captureCommitPhaseErrorOnRoot(rootFiber, sourceFiber, error) {
              var errorInfo = createCapturedValue(error, sourceFiber);
              var update = createRootErrorUpdate(rootFiber, errorInfo, SyncLane);
              enqueueUpdate(rootFiber, update);
              var eventTime = requestEventTime();
              var root = markUpdateLaneFromFiberToRoot(rootFiber, SyncLane);

              if (root !== null) {
                markRootUpdated(root, SyncLane, eventTime);
                ensureRootIsScheduled(root, eventTime);
                schedulePendingInteractions(root, SyncLane);
              }
            }

            function captureCommitPhaseError(sourceFiber, error) {
              if (sourceFiber.tag === HostRoot) {
                // Error was thrown at the root. There is no parent, so the root
                // itself should capture it.
                captureCommitPhaseErrorOnRoot(sourceFiber, sourceFiber, error);
                return;
              }

              var fiber = sourceFiber.return;

              while (fiber !== null) {
                if (fiber.tag === HostRoot) {
                  captureCommitPhaseErrorOnRoot(fiber, sourceFiber, error);
                  return;
                } else if (fiber.tag === ClassComponent) {
                  var ctor = fiber.type;
                  var instance = fiber.stateNode;

                  if (typeof ctor.getDerivedStateFromError === 'function' || typeof instance.componentDidCatch === 'function' && !isAlreadyFailedLegacyErrorBoundary(instance)) {
                    var errorInfo = createCapturedValue(error, sourceFiber);
                    var update = createClassErrorUpdate(fiber, errorInfo, SyncLane);
                    enqueueUpdate(fiber, update);
                    var eventTime = requestEventTime();
                    var root = markUpdateLaneFromFiberToRoot(fiber, SyncLane);

                    if (root !== null) {
                      markRootUpdated(root, SyncLane, eventTime);
                      ensureRootIsScheduled(root, eventTime);
                      schedulePendingInteractions(root, SyncLane);
                    } else {
                      // This component has already been unmounted.
                      // We can't schedule any follow up work for the root because the fiber is already unmounted,
                      // but we can still call the log-only boundary so the error isn't swallowed.
                      //
                      // TODO This is only a temporary bandaid for the old reconciler fork.
                      // We can delete this special case once the new fork is merged.
                      if (typeof instance.componentDidCatch === 'function' && !isAlreadyFailedLegacyErrorBoundary(instance)) {
                        try {
                          instance.componentDidCatch(error, errorInfo);
                        } catch (errorToIgnore) {// TODO Ignore this error? Rethrow it?
                          // This is kind of an edge case.
                        }
                      }
                    }

                    return;
                  }
                }

                fiber = fiber.return;
              }
            }
            function pingSuspendedRoot(root, wakeable, pingedLanes) {
              var pingCache = root.pingCache;

              if (pingCache !== null) {
                // The wakeable resolved, so we no longer need to memoize, because it will
                // never be thrown again.
                pingCache.delete(wakeable);
              }

              var eventTime = requestEventTime();
              markRootPinged(root, pingedLanes);

              if (workInProgressRoot === root && isSubsetOfLanes(workInProgressRootRenderLanes, pingedLanes)) {
                // Received a ping at the same priority level at which we're currently
                // rendering. We might want to restart this render. This should mirror
                // the logic of whether or not a root suspends once it completes.
                // TODO: If we're rendering sync either due to Sync, Batched or expired,
                // we should probably never restart.
                // If we're suspended with delay, or if it's a retry, we'll always suspend
                // so we can always restart.
                if (workInProgressRootExitStatus === RootSuspendedWithDelay || workInProgressRootExitStatus === RootSuspended && includesOnlyRetries(workInProgressRootRenderLanes) && now() - globalMostRecentFallbackTime < FALLBACK_THROTTLE_MS) {
                  // Restart from the root.
                  prepareFreshStack(root, NoLanes);
                } else {
                  // Even though we can't restart right now, we might get an
                  // opportunity later. So we mark this render as having a ping.
                  workInProgressRootPingedLanes = mergeLanes(workInProgressRootPingedLanes, pingedLanes);
                }
              }

              ensureRootIsScheduled(root, eventTime);
              schedulePendingInteractions(root, pingedLanes);
            }

            function retryTimedOutBoundary(boundaryFiber, retryLane) {
              // The boundary fiber (a Suspense component or SuspenseList component)
              // previously was rendered in its fallback state. One of the promises that
              // suspended it has resolved, which means at least part of the tree was
              // likely unblocked. Try rendering again, at a new expiration time.
              if (retryLane === NoLane) {
                retryLane = requestRetryLane(boundaryFiber);
              } // TODO: Special case idle priority?


              var eventTime = requestEventTime();
              var root = markUpdateLaneFromFiberToRoot(boundaryFiber, retryLane);

              if (root !== null) {
                markRootUpdated(root, retryLane, eventTime);
                ensureRootIsScheduled(root, eventTime);
                schedulePendingInteractions(root, retryLane);
              }
            }
            function resolveRetryWakeable(boundaryFiber, wakeable) {
              var retryLane = NoLane; // Default

              var retryCache;

              {
                retryCache = boundaryFiber.stateNode;
              }

              if (retryCache !== null) {
                // The wakeable resolved, so we no longer need to memoize, because it will
                // never be thrown again.
                retryCache.delete(wakeable);
              }

              retryTimedOutBoundary(boundaryFiber, retryLane);
            } // Computes the next Just Noticeable Difference (JND) boundary.
            // The theory is that a person can't tell the difference between small differences in time.
            // Therefore, if we wait a bit longer than necessary that won't translate to a noticeable
            // difference in the experience. However, waiting for longer might mean that we can avoid
            // showing an intermediate loading state. The longer we have already waited, the harder it
            // is to tell small differences in time. Therefore, the longer we've already waited,
            // the longer we can wait additionally. At some point we have to give up though.
            // We pick a train model where the next boundary commits at a consistent schedule.
            // These particular numbers are vague estimates. We expect to adjust them based on research.

            function jnd(timeElapsed) {
              return timeElapsed < 120 ? 120 : timeElapsed < 480 ? 480 : timeElapsed < 1080 ? 1080 : timeElapsed < 1920 ? 1920 : timeElapsed < 3000 ? 3000 : timeElapsed < 4320 ? 4320 : ceil(timeElapsed / 1960) * 1960;
            }

            function checkForNestedUpdates() {
              if (nestedUpdateCount > NESTED_UPDATE_LIMIT) {
                nestedUpdateCount = 0;
                rootWithNestedUpdates = null;

                {
                  {
                    throw Error( "Maximum update depth exceeded. This can happen when a component repeatedly calls setState inside componentWillUpdate or componentDidUpdate. React limits the number of nested updates to prevent infinite loops." );
                  }
                }
              }

              {
                if (nestedPassiveUpdateCount > NESTED_PASSIVE_UPDATE_LIMIT) {
                  nestedPassiveUpdateCount = 0;

                  error('Maximum update depth exceeded. This can happen when a component ' + "calls setState inside useEffect, but useEffect either doesn't " + 'have a dependency array, or one of the dependencies changes on ' + 'every render.');
                }
              }
            }

            function flushRenderPhaseStrictModeWarningsInDEV() {
              {
                ReactStrictModeWarnings.flushLegacyContextWarning();

                {
                  ReactStrictModeWarnings.flushPendingUnsafeLifecycleWarnings();
                }
              }
            }

            var didWarnStateUpdateForNotYetMountedComponent = null;

            function warnAboutUpdateOnNotYetMountedFiberInDEV(fiber) {
              {
                if ((executionContext & RenderContext) !== NoContext) {
                  // We let the other warning about render phase updates deal with this one.
                  return;
                }

                if (!(fiber.mode & (BlockingMode | ConcurrentMode))) {
                  return;
                }

                var tag = fiber.tag;

                if (tag !== IndeterminateComponent && tag !== HostRoot && tag !== ClassComponent && tag !== FunctionComponent && tag !== ForwardRef && tag !== MemoComponent && tag !== SimpleMemoComponent && tag !== Block) {
                  // Only warn for user-defined components, not internal ones like Suspense.
                  return;
                } // We show the whole stack but dedupe on the top component's name because
                // the problematic code almost always lies inside that component.


                var componentName = getComponentName(fiber.type) || 'ReactComponent';

                if (didWarnStateUpdateForNotYetMountedComponent !== null) {
                  if (didWarnStateUpdateForNotYetMountedComponent.has(componentName)) {
                    return;
                  }

                  didWarnStateUpdateForNotYetMountedComponent.add(componentName);
                } else {
                  didWarnStateUpdateForNotYetMountedComponent = new Set([componentName]);
                }

                var previousFiber = current;

                try {
                  setCurrentFiber(fiber);

                  error("Can't perform a React state update on a component that hasn't mounted yet. " + 'This indicates that you have a side-effect in your render function that ' + 'asynchronously later calls tries to update the component. Move this work to ' + 'useEffect instead.');
                } finally {
                  if (previousFiber) {
                    setCurrentFiber(fiber);
                  } else {
                    resetCurrentFiber();
                  }
                }
              }
            }

            var didWarnStateUpdateForUnmountedComponent = null;

            function warnAboutUpdateOnUnmountedFiberInDEV(fiber) {
              {
                var tag = fiber.tag;

                if (tag !== HostRoot && tag !== ClassComponent && tag !== FunctionComponent && tag !== ForwardRef && tag !== MemoComponent && tag !== SimpleMemoComponent && tag !== Block) {
                  // Only warn for user-defined components, not internal ones like Suspense.
                  return;
                } // If there are pending passive effects unmounts for this Fiber,
                // we can assume that they would have prevented this update.


                if ((fiber.flags & PassiveUnmountPendingDev) !== NoFlags) {
                  return;
                } // We show the whole stack but dedupe on the top component's name because
                // the problematic code almost always lies inside that component.


                var componentName = getComponentName(fiber.type) || 'ReactComponent';

                if (didWarnStateUpdateForUnmountedComponent !== null) {
                  if (didWarnStateUpdateForUnmountedComponent.has(componentName)) {
                    return;
                  }

                  didWarnStateUpdateForUnmountedComponent.add(componentName);
                } else {
                  didWarnStateUpdateForUnmountedComponent = new Set([componentName]);
                }

                if (isFlushingPassiveEffects) ; else {
                  var previousFiber = current;

                  try {
                    setCurrentFiber(fiber);

                    error("Can't perform a React state update on an unmounted component. This " + 'is a no-op, but it indicates a memory leak in your application. To ' + 'fix, cancel all subscriptions and asynchronous tasks in %s.', tag === ClassComponent ? 'the componentWillUnmount method' : 'a useEffect cleanup function');
                  } finally {
                    if (previousFiber) {
                      setCurrentFiber(fiber);
                    } else {
                      resetCurrentFiber();
                    }
                  }
                }
              }
            }

            var beginWork$1;

            {
              var dummyFiber = null;

              beginWork$1 = function (current, unitOfWork, lanes) {
                // If a component throws an error, we replay it again in a synchronously
                // dispatched event, so that the debugger will treat it as an uncaught
                // error See ReactErrorUtils for more information.
                // Before entering the begin phase, copy the work-in-progress onto a dummy
                // fiber. If beginWork throws, we'll use this to reset the state.
                var originalWorkInProgressCopy = assignFiberPropertiesInDEV(dummyFiber, unitOfWork);

                try {
                  return beginWork(current, unitOfWork, lanes);
                } catch (originalError) {
                  if (originalError !== null && typeof originalError === 'object' && typeof originalError.then === 'function') {
                    // Don't replay promises. Treat everything else like an error.
                    throw originalError;
                  } // Keep this code in sync with handleError; any changes here must have
                  // corresponding changes there.


                  resetContextDependencies();
                  resetHooksAfterThrow(); // Don't reset current debug fiber, since we're about to work on the
                  // same fiber again.
                  // Unwind the failed stack frame

                  unwindInterruptedWork(unitOfWork); // Restore the original properties of the fiber.

                  assignFiberPropertiesInDEV(unitOfWork, originalWorkInProgressCopy);

                  if ( unitOfWork.mode & ProfileMode) {
                    // Reset the profiler timer.
                    startProfilerTimer(unitOfWork);
                  } // Run beginWork again.


                  invokeGuardedCallback(null, beginWork, null, current, unitOfWork, lanes);

                  if (hasCaughtError()) {
                    var replayError = clearCaughtError(); // `invokeGuardedCallback` sometimes sets an expando `_suppressLogging`.
                    // Rethrow this error instead of the original one.

                    throw replayError;
                  } else {
                    // This branch is reachable if the render phase is impure.
                    throw originalError;
                  }
                }
              };
            }

            var didWarnAboutUpdateInRender = false;
            var didWarnAboutUpdateInRenderForAnotherComponent;

            {
              didWarnAboutUpdateInRenderForAnotherComponent = new Set();
            }

            function warnAboutRenderPhaseUpdatesInDEV(fiber) {
              {
                if (isRendering && (executionContext & RenderContext) !== NoContext && !getIsUpdatingOpaqueValueInRenderPhaseInDEV()) {
                  switch (fiber.tag) {
                    case FunctionComponent:
                    case ForwardRef:
                    case SimpleMemoComponent:
                      {
                        var renderingComponentName = workInProgress && getComponentName(workInProgress.type) || 'Unknown'; // Dedupe by the rendering component because it's the one that needs to be fixed.

                        var dedupeKey = renderingComponentName;

                        if (!didWarnAboutUpdateInRenderForAnotherComponent.has(dedupeKey)) {
                          didWarnAboutUpdateInRenderForAnotherComponent.add(dedupeKey);
                          var setStateComponentName = getComponentName(fiber.type) || 'Unknown';

                          error('Cannot update a component (`%s`) while rendering a ' + 'different component (`%s`). To locate the bad setState() call inside `%s`, ' + 'follow the stack trace as described in https://reactjs.org/link/setstate-in-render', setStateComponentName, renderingComponentName, renderingComponentName);
                        }

                        break;
                      }

                    case ClassComponent:
                      {
                        if (!didWarnAboutUpdateInRender) {
                          error('Cannot update during an existing state transition (such as ' + 'within `render`). Render methods should be a pure ' + 'function of props and state.');

                          didWarnAboutUpdateInRender = true;
                        }

                        break;
                      }
                  }
                }
              }
            } // a 'shared' variable that changes when act() opens/closes in tests.


            var IsThisRendererActing = {
              current: false
            };
            function warnIfNotScopedWithMatchingAct(fiber) {
              {
                if ( IsSomeRendererActing.current === true && IsThisRendererActing.current !== true) {
                  var previousFiber = current;

                  try {
                    setCurrentFiber(fiber);

                    error("It looks like you're using the wrong act() around your test interactions.\n" + 'Be sure to use the matching version of act() corresponding to your renderer:\n\n' + '// for react-dom:\n' + // Break up imports to avoid accidentally parsing them as dependencies.
                    'import {act} fr' + "om 'react-dom/test-utils';\n" + '// ...\n' + 'act(() => ...);\n\n' + '// for react-test-renderer:\n' + // Break up imports to avoid accidentally parsing them as dependencies.
                    'import TestRenderer fr' + "om react-test-renderer';\n" + 'const {act} = TestRenderer;\n' + '// ...\n' + 'act(() => ...);');
                  } finally {
                    if (previousFiber) {
                      setCurrentFiber(fiber);
                    } else {
                      resetCurrentFiber();
                    }
                  }
                }
              }
            }
            function warnIfNotCurrentlyActingEffectsInDEV(fiber) {
              {
                if ( (fiber.mode & StrictMode) !== NoMode && IsSomeRendererActing.current === false && IsThisRendererActing.current === false) {
                  error('An update to %s ran an effect, but was not wrapped in act(...).\n\n' + 'When testing, code that causes React state updates should be ' + 'wrapped into act(...):\n\n' + 'act(() => {\n' + '  /* fire events that update state */\n' + '});\n' + '/* assert on the output */\n\n' + "This ensures that you're testing the behavior the user would see " + 'in the browser.' + ' Learn more at https://reactjs.org/link/wrap-tests-with-act', getComponentName(fiber.type));
                }
              }
            }

            function warnIfNotCurrentlyActingUpdatesInDEV(fiber) {
              {
                if ( executionContext === NoContext && IsSomeRendererActing.current === false && IsThisRendererActing.current === false) {
                  var previousFiber = current;

                  try {
                    setCurrentFiber(fiber);

                    error('An update to %s inside a test was not wrapped in act(...).\n\n' + 'When testing, code that causes React state updates should be ' + 'wrapped into act(...):\n\n' + 'act(() => {\n' + '  /* fire events that update state */\n' + '});\n' + '/* assert on the output */\n\n' + "This ensures that you're testing the behavior the user would see " + 'in the browser.' + ' Learn more at https://reactjs.org/link/wrap-tests-with-act', getComponentName(fiber.type));
                  } finally {
                    if (previousFiber) {
                      setCurrentFiber(fiber);
                    } else {
                      resetCurrentFiber();
                    }
                  }
                }
              }
            }

            var warnIfNotCurrentlyActingUpdatesInDev = warnIfNotCurrentlyActingUpdatesInDEV; // In tests, we want to enforce a mocked scheduler.

            var didWarnAboutUnmockedScheduler = false; // TODO Before we release concurrent mode, revisit this and decide whether a mocked
            // scheduler is the actual recommendation. The alternative could be a testing build,
            // a new lib, or whatever; we dunno just yet. This message is for early adopters
            // to get their tests right.

            function warnIfUnmockedScheduler(fiber) {
              {
                if (didWarnAboutUnmockedScheduler === false && Scheduler.unstable_flushAllWithoutAsserting === undefined) {
                  if (fiber.mode & BlockingMode || fiber.mode & ConcurrentMode) {
                    didWarnAboutUnmockedScheduler = true;

                    error('In Concurrent or Sync modes, the "scheduler" module needs to be mocked ' + 'to guarantee consistent behaviour across tests and browsers. ' + 'For example, with jest: \n' + // Break up requires to avoid accidentally parsing them as dependencies.
                    "jest.mock('scheduler', () => require" + "('scheduler/unstable_mock'));\n\n" + 'For more info, visit https://reactjs.org/link/mock-scheduler');
                  }
                }
              }
            }

            function computeThreadID(root, lane) {
              // Interaction threads are unique per root and expiration time.
              // NOTE: Intentionally unsound cast. All that matters is that it's a number
              // and it represents a batch of work. Could make a helper function instead,
              // but meh this is fine for now.
              return lane * 1000 + root.interactionThreadID;
            }

            function markSpawnedWork(lane) {

              if (spawnedWorkDuringRender === null) {
                spawnedWorkDuringRender = [lane];
              } else {
                spawnedWorkDuringRender.push(lane);
              }
            }

            function scheduleInteractions(root, lane, interactions) {

              if (interactions.size > 0) {
                var pendingInteractionMap = root.pendingInteractionMap;
                var pendingInteractions = pendingInteractionMap.get(lane);

                if (pendingInteractions != null) {
                  interactions.forEach(function (interaction) {
                    if (!pendingInteractions.has(interaction)) {
                      // Update the pending async work count for previously unscheduled interaction.
                      interaction.__count++;
                    }

                    pendingInteractions.add(interaction);
                  });
                } else {
                  pendingInteractionMap.set(lane, new Set(interactions)); // Update the pending async work count for the current interactions.

                  interactions.forEach(function (interaction) {
                    interaction.__count++;
                  });
                }

                var subscriber = tracing$1.__subscriberRef.current;

                if (subscriber !== null) {
                  var threadID = computeThreadID(root, lane);
                  subscriber.onWorkScheduled(interactions, threadID);
                }
              }
            }

            function schedulePendingInteractions(root, lane) {

              scheduleInteractions(root, lane, tracing$1.__interactionsRef.current);
            }

            function startWorkOnPendingInteractions(root, lanes) {
              // we can accurately attribute time spent working on it, And so that cascading
              // work triggered during the render phase will be associated with it.


              var interactions = new Set();
              root.pendingInteractionMap.forEach(function (scheduledInteractions, scheduledLane) {
                if (includesSomeLane(lanes, scheduledLane)) {
                  scheduledInteractions.forEach(function (interaction) {
                    return interactions.add(interaction);
                  });
                }
              }); // Store the current set of interactions on the FiberRoot for a few reasons:
              // We can re-use it in hot functions like performConcurrentWorkOnRoot()
              // without having to recalculate it. We will also use it in commitWork() to
              // pass to any Profiler onRender() hooks. This also provides DevTools with a
              // way to access it when the onCommitRoot() hook is called.

              root.memoizedInteractions = interactions;

              if (interactions.size > 0) {
                var subscriber = tracing$1.__subscriberRef.current;

                if (subscriber !== null) {
                  var threadID = computeThreadID(root, lanes);

                  try {
                    subscriber.onWorkStarted(interactions, threadID);
                  } catch (error) {
                    // If the subscriber throws, rethrow it in a separate task
                    scheduleCallback(ImmediatePriority$1, function () {
                      throw error;
                    });
                  }
                }
              }
            }

            function finishPendingInteractions(root, committedLanes) {

              var remainingLanesAfterCommit = root.pendingLanes;
              var subscriber;

              try {
                subscriber = tracing$1.__subscriberRef.current;

                if (subscriber !== null && root.memoizedInteractions.size > 0) {
                  // FIXME: More than one lane can finish in a single commit.
                  var threadID = computeThreadID(root, committedLanes);
                  subscriber.onWorkStopped(root.memoizedInteractions, threadID);
                }
              } catch (error) {
                // If the subscriber throws, rethrow it in a separate task
                scheduleCallback(ImmediatePriority$1, function () {
                  throw error;
                });
              } finally {
                // Clear completed interactions from the pending Map.
                // Unless the render was suspended or cascading work was scheduled,
                // In which case– leave pending interactions until the subsequent render.
                var pendingInteractionMap = root.pendingInteractionMap;
                pendingInteractionMap.forEach(function (scheduledInteractions, lane) {
                  // Only decrement the pending interaction count if we're done.
                  // If there's still work at the current priority,
                  // That indicates that we are waiting for suspense data.
                  if (!includesSomeLane(remainingLanesAfterCommit, lane)) {
                    pendingInteractionMap.delete(lane);
                    scheduledInteractions.forEach(function (interaction) {
                      interaction.__count--;

                      if (subscriber !== null && interaction.__count === 0) {
                        try {
                          subscriber.onInteractionScheduledWorkCompleted(interaction);
                        } catch (error) {
                          // If the subscriber throws, rethrow it in a separate task
                          scheduleCallback(ImmediatePriority$1, function () {
                            throw error;
                          });
                        }
                      }
                    });
                  }
                });
              }
            } // `act` testing API

            function shouldForceFlushFallbacksInDEV() {
              // Never force flush in production. This function should get stripped out.
              return  actingUpdatesScopeDepth > 0;
            }
            // so we can tell if any async act() calls try to run in parallel.


            var actingUpdatesScopeDepth = 0;

            function detachFiberAfterEffects(fiber) {
              fiber.sibling = null;
              fiber.stateNode = null;
            }

            var resolveFamily = null; // $FlowFixMe Flow gets confused by a WeakSet feature check below.

            var failedBoundaries = null;
            var setRefreshHandler = function (handler) {
              {
                resolveFamily = handler;
              }
            };
            function resolveFunctionForHotReloading(type) {
              {
                if (resolveFamily === null) {
                  // Hot reloading is disabled.
                  return type;
                }

                var family = resolveFamily(type);

                if (family === undefined) {
                  return type;
                } // Use the latest known implementation.


                return family.current;
              }
            }
            function resolveClassForHotReloading(type) {
              // No implementation differences.
              return resolveFunctionForHotReloading(type);
            }
            function resolveForwardRefForHotReloading(type) {
              {
                if (resolveFamily === null) {
                  // Hot reloading is disabled.
                  return type;
                }

                var family = resolveFamily(type);

                if (family === undefined) {
                  // Check if we're dealing with a real forwardRef. Don't want to crash early.
                  if (type !== null && type !== undefined && typeof type.render === 'function') {
                    // ForwardRef is special because its resolved .type is an object,
                    // but it's possible that we only have its inner render function in the map.
                    // If that inner render function is different, we'll build a new forwardRef type.
                    var currentRender = resolveFunctionForHotReloading(type.render);

                    if (type.render !== currentRender) {
                      var syntheticType = {
                        $$typeof: REACT_FORWARD_REF_TYPE,
                        render: currentRender
                      };

                      if (type.displayName !== undefined) {
                        syntheticType.displayName = type.displayName;
                      }

                      return syntheticType;
                    }
                  }

                  return type;
                } // Use the latest known implementation.


                return family.current;
              }
            }
            function isCompatibleFamilyForHotReloading(fiber, element) {
              {
                if (resolveFamily === null) {
                  // Hot reloading is disabled.
                  return false;
                }

                var prevType = fiber.elementType;
                var nextType = element.type; // If we got here, we know types aren't === equal.

                var needsCompareFamilies = false;
                var $$typeofNextType = typeof nextType === 'object' && nextType !== null ? nextType.$$typeof : null;

                switch (fiber.tag) {
                  case ClassComponent:
                    {
                      if (typeof nextType === 'function') {
                        needsCompareFamilies = true;
                      }

                      break;
                    }

                  case FunctionComponent:
                    {
                      if (typeof nextType === 'function') {
                        needsCompareFamilies = true;
                      } else if ($$typeofNextType === REACT_LAZY_TYPE) {
                        // We don't know the inner type yet.
                        // We're going to assume that the lazy inner type is stable,
                        // and so it is sufficient to avoid reconciling it away.
                        // We're not going to unwrap or actually use the new lazy type.
                        needsCompareFamilies = true;
                      }

                      break;
                    }

                  case ForwardRef:
                    {
                      if ($$typeofNextType === REACT_FORWARD_REF_TYPE) {
                        needsCompareFamilies = true;
                      } else if ($$typeofNextType === REACT_LAZY_TYPE) {
                        needsCompareFamilies = true;
                      }

                      break;
                    }

                  case MemoComponent:
                  case SimpleMemoComponent:
                    {
                      if ($$typeofNextType === REACT_MEMO_TYPE) {
                        // TODO: if it was but can no longer be simple,
                        // we shouldn't set this.
                        needsCompareFamilies = true;
                      } else if ($$typeofNextType === REACT_LAZY_TYPE) {
                        needsCompareFamilies = true;
                      }

                      break;
                    }

                  default:
                    return false;
                } // Check if both types have a family and it's the same one.


                if (needsCompareFamilies) {
                  // Note: memo() and forwardRef() we'll compare outer rather than inner type.
                  // This means both of them need to be registered to preserve state.
                  // If we unwrapped and compared the inner types for wrappers instead,
                  // then we would risk falsely saying two separate memo(Foo)
                  // calls are equivalent because they wrap the same Foo function.
                  var prevFamily = resolveFamily(prevType);

                  if (prevFamily !== undefined && prevFamily === resolveFamily(nextType)) {
                    return true;
                  }
                }

                return false;
              }
            }
            function markFailedErrorBoundaryForHotReloading(fiber) {
              {
                if (resolveFamily === null) {
                  // Hot reloading is disabled.
                  return;
                }

                if (typeof WeakSet !== 'function') {
                  return;
                }

                if (failedBoundaries === null) {
                  failedBoundaries = new WeakSet();
                }

                failedBoundaries.add(fiber);
              }
            }
            var scheduleRefresh = function (root, update) {
              {
                if (resolveFamily === null) {
                  // Hot reloading is disabled.
                  return;
                }

                var staleFamilies = update.staleFamilies,
                    updatedFamilies = update.updatedFamilies;
                flushPassiveEffects();
                flushSync(function () {
                  scheduleFibersWithFamiliesRecursively(root.current, updatedFamilies, staleFamilies);
                });
              }
            };
            var scheduleRoot = function (root, element) {
              {
                if (root.context !== emptyContextObject) {
                  // Super edge case: root has a legacy _renderSubtree context
                  // but we don't know the parentComponent so we can't pass it.
                  // Just ignore. We'll delete this with _renderSubtree code path later.
                  return;
                }

                flushPassiveEffects();
                flushSync(function () {
                  updateContainer(element, root, null, null);
                });
              }
            };

            function scheduleFibersWithFamiliesRecursively(fiber, updatedFamilies, staleFamilies) {
              {
                var alternate = fiber.alternate,
                    child = fiber.child,
                    sibling = fiber.sibling,
                    tag = fiber.tag,
                    type = fiber.type;
                var candidateType = null;

                switch (tag) {
                  case FunctionComponent:
                  case SimpleMemoComponent:
                  case ClassComponent:
                    candidateType = type;
                    break;

                  case ForwardRef:
                    candidateType = type.render;
                    break;
                }

                if (resolveFamily === null) {
                  throw new Error('Expected resolveFamily to be set during hot reload.');
                }

                var needsRender = false;
                var needsRemount = false;

                if (candidateType !== null) {
                  var family = resolveFamily(candidateType);

                  if (family !== undefined) {
                    if (staleFamilies.has(family)) {
                      needsRemount = true;
                    } else if (updatedFamilies.has(family)) {
                      if (tag === ClassComponent) {
                        needsRemount = true;
                      } else {
                        needsRender = true;
                      }
                    }
                  }
                }

                if (failedBoundaries !== null) {
                  if (failedBoundaries.has(fiber) || alternate !== null && failedBoundaries.has(alternate)) {
                    needsRemount = true;
                  }
                }

                if (needsRemount) {
                  fiber._debugNeedsRemount = true;
                }

                if (needsRemount || needsRender) {
                  scheduleUpdateOnFiber(fiber, SyncLane, NoTimestamp);
                }

                if (child !== null && !needsRemount) {
                  scheduleFibersWithFamiliesRecursively(child, updatedFamilies, staleFamilies);
                }

                if (sibling !== null) {
                  scheduleFibersWithFamiliesRecursively(sibling, updatedFamilies, staleFamilies);
                }
              }
            }

            var findHostInstancesForRefresh = function (root, families) {
              {
                var hostInstances = new Set();
                var types = new Set(families.map(function (family) {
                  return family.current;
                }));
                findHostInstancesForMatchingFibersRecursively(root.current, types, hostInstances);
                return hostInstances;
              }
            };

            function findHostInstancesForMatchingFibersRecursively(fiber, types, hostInstances) {
              {
                var child = fiber.child,
                    sibling = fiber.sibling,
                    tag = fiber.tag,
                    type = fiber.type;
                var candidateType = null;

                switch (tag) {
                  case FunctionComponent:
                  case SimpleMemoComponent:
                  case ClassComponent:
                    candidateType = type;
                    break;

                  case ForwardRef:
                    candidateType = type.render;
                    break;
                }

                var didMatch = false;

                if (candidateType !== null) {
                  if (types.has(candidateType)) {
                    didMatch = true;
                  }
                }

                if (didMatch) {
                  // We have a match. This only drills down to the closest host components.
                  // There's no need to search deeper because for the purpose of giving
                  // visual feedback, "flashing" outermost parent rectangles is sufficient.
                  findHostInstancesForFiberShallowly(fiber, hostInstances);
                } else {
                  // If there's no match, maybe there will be one further down in the child tree.
                  if (child !== null) {
                    findHostInstancesForMatchingFibersRecursively(child, types, hostInstances);
                  }
                }

                if (sibling !== null) {
                  findHostInstancesForMatchingFibersRecursively(sibling, types, hostInstances);
                }
              }
            }

            function findHostInstancesForFiberShallowly(fiber, hostInstances) {
              {
                var foundHostInstances = findChildHostInstancesForFiberShallowly(fiber, hostInstances);

                if (foundHostInstances) {
                  return;
                } // If we didn't find any host children, fallback to closest host parent.


                var node = fiber;

                while (true) {
                  switch (node.tag) {
                    case HostComponent:
                      hostInstances.add(node.stateNode);
                      return;

                    case HostPortal:
                      hostInstances.add(node.stateNode.containerInfo);
                      return;

                    case HostRoot:
                      hostInstances.add(node.stateNode.containerInfo);
                      return;
                  }

                  if (node.return === null) {
                    throw new Error('Expected to reach root first.');
                  }

                  node = node.return;
                }
              }
            }

            function findChildHostInstancesForFiberShallowly(fiber, hostInstances) {
              {
                var node = fiber;
                var foundHostInstances = false;

                while (true) {
                  if (node.tag === HostComponent) {
                    // We got a match.
                    foundHostInstances = true;
                    hostInstances.add(node.stateNode); // There may still be more, so keep searching.
                  } else if (node.child !== null) {
                    node.child.return = node;
                    node = node.child;
                    continue;
                  }

                  if (node === fiber) {
                    return foundHostInstances;
                  }

                  while (node.sibling === null) {
                    if (node.return === null || node.return === fiber) {
                      return foundHostInstances;
                    }

                    node = node.return;
                  }

                  node.sibling.return = node.return;
                  node = node.sibling;
                }
              }

              return false;
            }

            var hasBadMapPolyfill;

            {
              hasBadMapPolyfill = false;

              try {
                var nonExtensibleObject = Object.preventExtensions({});
                /* eslint-disable no-new */

                new Map([[nonExtensibleObject, null]]);
                new Set([nonExtensibleObject]);
                /* eslint-enable no-new */
              } catch (e) {
                // TODO: Consider warning about bad polyfills
                hasBadMapPolyfill = true;
              }
            }

            var debugCounter = 1;

            function FiberNode(tag, pendingProps, key, mode) {
              // Instance
              this.tag = tag;
              this.key = key;
              this.elementType = null;
              this.type = null;
              this.stateNode = null; // Fiber

              this.return = null;
              this.child = null;
              this.sibling = null;
              this.index = 0;
              this.ref = null;
              this.pendingProps = pendingProps;
              this.memoizedProps = null;
              this.updateQueue = null;
              this.memoizedState = null;
              this.dependencies = null;
              this.mode = mode; // Effects

              this.flags = NoFlags;
              this.nextEffect = null;
              this.firstEffect = null;
              this.lastEffect = null;
              this.lanes = NoLanes;
              this.childLanes = NoLanes;
              this.alternate = null;

              {
                // Note: The following is done to avoid a v8 performance cliff.
                //
                // Initializing the fields below to smis and later updating them with
                // double values will cause Fibers to end up having separate shapes.
                // This behavior/bug has something to do with Object.preventExtension().
                // Fortunately this only impacts DEV builds.
                // Unfortunately it makes React unusably slow for some applications.
                // To work around this, initialize the fields below with doubles.
                //
                // Learn more about this here:
                // https://github.com/facebook/react/issues/14365
                // https://bugs.chromium.org/p/v8/issues/detail?id=8538
                this.actualDuration = Number.NaN;
                this.actualStartTime = Number.NaN;
                this.selfBaseDuration = Number.NaN;
                this.treeBaseDuration = Number.NaN; // It's okay to replace the initial doubles with smis after initialization.
                // This won't trigger the performance cliff mentioned above,
                // and it simplifies other profiler code (including DevTools).

                this.actualDuration = 0;
                this.actualStartTime = -1;
                this.selfBaseDuration = 0;
                this.treeBaseDuration = 0;
              }

              {
                // This isn't directly used but is handy for debugging internals:
                this._debugID = debugCounter++;
                this._debugSource = null;
                this._debugOwner = null;
                this._debugNeedsRemount = false;
                this._debugHookTypes = null;

                if (!hasBadMapPolyfill && typeof Object.preventExtensions === 'function') {
                  Object.preventExtensions(this);
                }
              }
            } // This is a constructor function, rather than a POJO constructor, still
            // please ensure we do the following:
            // 1) Nobody should add any instance methods on this. Instance methods can be
            //    more difficult to predict when they get optimized and they are almost
            //    never inlined properly in static compilers.
            // 2) Nobody should rely on `instanceof Fiber` for type testing. We should
            //    always know when it is a fiber.
            // 3) We might want to experiment with using numeric keys since they are easier
            //    to optimize in a non-JIT environment.
            // 4) We can easily go from a constructor to a createFiber object literal if that
            //    is faster.
            // 5) It should be easy to port this to a C struct and keep a C implementation
            //    compatible.


            var createFiber = function (tag, pendingProps, key, mode) {
              // $FlowFixMe: the shapes are exact here but Flow doesn't like constructors
              return new FiberNode(tag, pendingProps, key, mode);
            };

            function shouldConstruct$1(Component) {
              var prototype = Component.prototype;
              return !!(prototype && prototype.isReactComponent);
            }

            function isSimpleFunctionComponent(type) {
              return typeof type === 'function' && !shouldConstruct$1(type) && type.defaultProps === undefined;
            }
            function resolveLazyComponentTag(Component) {
              if (typeof Component === 'function') {
                return shouldConstruct$1(Component) ? ClassComponent : FunctionComponent;
              } else if (Component !== undefined && Component !== null) {
                var $$typeof = Component.$$typeof;

                if ($$typeof === REACT_FORWARD_REF_TYPE) {
                  return ForwardRef;
                }

                if ($$typeof === REACT_MEMO_TYPE) {
                  return MemoComponent;
                }
              }

              return IndeterminateComponent;
            } // This is used to create an alternate fiber to do work on.

            function createWorkInProgress(current, pendingProps) {
              var workInProgress = current.alternate;

              if (workInProgress === null) {
                // We use a double buffering pooling technique because we know that we'll
                // only ever need at most two versions of a tree. We pool the "other" unused
                // node that we're free to reuse. This is lazily created to avoid allocating
                // extra objects for things that are never updated. It also allow us to
                // reclaim the extra memory if needed.
                workInProgress = createFiber(current.tag, pendingProps, current.key, current.mode);
                workInProgress.elementType = current.elementType;
                workInProgress.type = current.type;
                workInProgress.stateNode = current.stateNode;

                {
                  // DEV-only fields
                  workInProgress._debugID = current._debugID;
                  workInProgress._debugSource = current._debugSource;
                  workInProgress._debugOwner = current._debugOwner;
                  workInProgress._debugHookTypes = current._debugHookTypes;
                }

                workInProgress.alternate = current;
                current.alternate = workInProgress;
              } else {
                workInProgress.pendingProps = pendingProps; // Needed because Blocks store data on type.

                workInProgress.type = current.type; // We already have an alternate.
                // Reset the effect tag.

                workInProgress.flags = NoFlags; // The effect list is no longer valid.

                workInProgress.nextEffect = null;
                workInProgress.firstEffect = null;
                workInProgress.lastEffect = null;

                {
                  // We intentionally reset, rather than copy, actualDuration & actualStartTime.
                  // This prevents time from endlessly accumulating in new commits.
                  // This has the downside of resetting values for different priority renders,
                  // But works for yielding (the common case) and should support resuming.
                  workInProgress.actualDuration = 0;
                  workInProgress.actualStartTime = -1;
                }
              }

              workInProgress.childLanes = current.childLanes;
              workInProgress.lanes = current.lanes;
              workInProgress.child = current.child;
              workInProgress.memoizedProps = current.memoizedProps;
              workInProgress.memoizedState = current.memoizedState;
              workInProgress.updateQueue = current.updateQueue; // Clone the dependencies object. This is mutated during the render phase, so
              // it cannot be shared with the current fiber.

              var currentDependencies = current.dependencies;
              workInProgress.dependencies = currentDependencies === null ? null : {
                lanes: currentDependencies.lanes,
                firstContext: currentDependencies.firstContext
              }; // These will be overridden during the parent's reconciliation

              workInProgress.sibling = current.sibling;
              workInProgress.index = current.index;
              workInProgress.ref = current.ref;

              {
                workInProgress.selfBaseDuration = current.selfBaseDuration;
                workInProgress.treeBaseDuration = current.treeBaseDuration;
              }

              {
                workInProgress._debugNeedsRemount = current._debugNeedsRemount;

                switch (workInProgress.tag) {
                  case IndeterminateComponent:
                  case FunctionComponent:
                  case SimpleMemoComponent:
                    workInProgress.type = resolveFunctionForHotReloading(current.type);
                    break;

                  case ClassComponent:
                    workInProgress.type = resolveClassForHotReloading(current.type);
                    break;

                  case ForwardRef:
                    workInProgress.type = resolveForwardRefForHotReloading(current.type);
                    break;
                }
              }

              return workInProgress;
            } // Used to reuse a Fiber for a second pass.

            function resetWorkInProgress(workInProgress, renderLanes) {
              // This resets the Fiber to what createFiber or createWorkInProgress would
              // have set the values to before during the first pass. Ideally this wouldn't
              // be necessary but unfortunately many code paths reads from the workInProgress
              // when they should be reading from current and writing to workInProgress.
              // We assume pendingProps, index, key, ref, return are still untouched to
              // avoid doing another reconciliation.
              // Reset the effect tag but keep any Placement tags, since that's something
              // that child fiber is setting, not the reconciliation.
              workInProgress.flags &= Placement; // The effect list is no longer valid.

              workInProgress.nextEffect = null;
              workInProgress.firstEffect = null;
              workInProgress.lastEffect = null;
              var current = workInProgress.alternate;

              if (current === null) {
                // Reset to createFiber's initial values.
                workInProgress.childLanes = NoLanes;
                workInProgress.lanes = renderLanes;
                workInProgress.child = null;
                workInProgress.memoizedProps = null;
                workInProgress.memoizedState = null;
                workInProgress.updateQueue = null;
                workInProgress.dependencies = null;
                workInProgress.stateNode = null;

                {
                  // Note: We don't reset the actualTime counts. It's useful to accumulate
                  // actual time across multiple render passes.
                  workInProgress.selfBaseDuration = 0;
                  workInProgress.treeBaseDuration = 0;
                }
              } else {
                // Reset to the cloned values that createWorkInProgress would've.
                workInProgress.childLanes = current.childLanes;
                workInProgress.lanes = current.lanes;
                workInProgress.child = current.child;
                workInProgress.memoizedProps = current.memoizedProps;
                workInProgress.memoizedState = current.memoizedState;
                workInProgress.updateQueue = current.updateQueue; // Needed because Blocks store data on type.

                workInProgress.type = current.type; // Clone the dependencies object. This is mutated during the render phase, so
                // it cannot be shared with the current fiber.

                var currentDependencies = current.dependencies;
                workInProgress.dependencies = currentDependencies === null ? null : {
                  lanes: currentDependencies.lanes,
                  firstContext: currentDependencies.firstContext
                };

                {
                  // Note: We don't reset the actualTime counts. It's useful to accumulate
                  // actual time across multiple render passes.
                  workInProgress.selfBaseDuration = current.selfBaseDuration;
                  workInProgress.treeBaseDuration = current.treeBaseDuration;
                }
              }

              return workInProgress;
            }
            function createHostRootFiber(tag) {
              var mode;

              if (tag === ConcurrentRoot) {
                mode = ConcurrentMode | BlockingMode | StrictMode;
              } else if (tag === BlockingRoot) {
                mode = BlockingMode | StrictMode;
              } else {
                mode = NoMode;
              }

              if ( isDevToolsPresent) {
                // Always collect profile timings when DevTools are present.
                // This enables DevTools to start capturing timing at any point–
                // Without some nodes in the tree having empty base times.
                mode |= ProfileMode;
              }

              return createFiber(HostRoot, null, null, mode);
            }
            function createFiberFromTypeAndProps(type, // React$ElementType
            key, pendingProps, owner, mode, lanes) {
              var fiberTag = IndeterminateComponent; // The resolved type is set if we know what the final type will be. I.e. it's not lazy.

              var resolvedType = type;

              if (typeof type === 'function') {
                if (shouldConstruct$1(type)) {
                  fiberTag = ClassComponent;

                  {
                    resolvedType = resolveClassForHotReloading(resolvedType);
                  }
                } else {
                  {
                    resolvedType = resolveFunctionForHotReloading(resolvedType);
                  }
                }
              } else if (typeof type === 'string') {
                fiberTag = HostComponent;
              } else {
                getTag: switch (type) {
                  case REACT_FRAGMENT_TYPE:
                    return createFiberFromFragment(pendingProps.children, mode, lanes, key);

                  case REACT_DEBUG_TRACING_MODE_TYPE:
                    fiberTag = Mode;
                    mode |= DebugTracingMode;
                    break;

                  case REACT_STRICT_MODE_TYPE:
                    fiberTag = Mode;
                    mode |= StrictMode;
                    break;

                  case REACT_PROFILER_TYPE:
                    return createFiberFromProfiler(pendingProps, mode, lanes, key);

                  case REACT_SUSPENSE_TYPE:
                    return createFiberFromSuspense(pendingProps, mode, lanes, key);

                  case REACT_SUSPENSE_LIST_TYPE:
                    return createFiberFromSuspenseList(pendingProps, mode, lanes, key);

                  case REACT_OFFSCREEN_TYPE:
                    return createFiberFromOffscreen(pendingProps, mode, lanes, key);

                  case REACT_LEGACY_HIDDEN_TYPE:
                    return createFiberFromLegacyHidden(pendingProps, mode, lanes, key);

                  case REACT_SCOPE_TYPE:

                  // eslint-disable-next-line no-fallthrough

                  default:
                    {
                      if (typeof type === 'object' && type !== null) {
                        switch (type.$$typeof) {
                          case REACT_PROVIDER_TYPE:
                            fiberTag = ContextProvider;
                            break getTag;

                          case REACT_CONTEXT_TYPE:
                            // This is a consumer
                            fiberTag = ContextConsumer;
                            break getTag;

                          case REACT_FORWARD_REF_TYPE:
                            fiberTag = ForwardRef;

                            {
                              resolvedType = resolveForwardRefForHotReloading(resolvedType);
                            }

                            break getTag;

                          case REACT_MEMO_TYPE:
                            fiberTag = MemoComponent;
                            break getTag;

                          case REACT_LAZY_TYPE:
                            fiberTag = LazyComponent;
                            resolvedType = null;
                            break getTag;

                          case REACT_BLOCK_TYPE:
                            fiberTag = Block;
                            break getTag;
                        }
                      }

                      var info = '';

                      {
                        if (type === undefined || typeof type === 'object' && type !== null && Object.keys(type).length === 0) {
                          info += ' You likely forgot to export your component from the file ' + "it's defined in, or you might have mixed up default and " + 'named imports.';
                        }

                        var ownerName = owner ? getComponentName(owner.type) : null;

                        if (ownerName) {
                          info += '\n\nCheck the render method of `' + ownerName + '`.';
                        }
                      }

                      {
                        {
                          throw Error( "Element type is invalid: expected a string (for built-in components) or a class/function (for composite components) but got: " + (type == null ? type : typeof type) + "." + info );
                        }
                      }
                    }
                }
              }

              var fiber = createFiber(fiberTag, pendingProps, key, mode);
              fiber.elementType = type;
              fiber.type = resolvedType;
              fiber.lanes = lanes;

              {
                fiber._debugOwner = owner;
              }

              return fiber;
            }
            function createFiberFromElement(element, mode, lanes) {
              var owner = null;

              {
                owner = element._owner;
              }

              var type = element.type;
              var key = element.key;
              var pendingProps = element.props;
              var fiber = createFiberFromTypeAndProps(type, key, pendingProps, owner, mode, lanes);

              {
                fiber._debugSource = element._source;
                fiber._debugOwner = element._owner;
              }

              return fiber;
            }
            function createFiberFromFragment(elements, mode, lanes, key) {
              var fiber = createFiber(Fragment, elements, key, mode);
              fiber.lanes = lanes;
              return fiber;
            }

            function createFiberFromProfiler(pendingProps, mode, lanes, key) {
              {
                if (typeof pendingProps.id !== 'string') {
                  error('Profiler must specify an "id" as a prop');
                }
              }

              var fiber = createFiber(Profiler, pendingProps, key, mode | ProfileMode); // TODO: The Profiler fiber shouldn't have a type. It has a tag.

              fiber.elementType = REACT_PROFILER_TYPE;
              fiber.type = REACT_PROFILER_TYPE;
              fiber.lanes = lanes;

              {
                fiber.stateNode = {
                  effectDuration: 0,
                  passiveEffectDuration: 0
                };
              }

              return fiber;
            }

            function createFiberFromSuspense(pendingProps, mode, lanes, key) {
              var fiber = createFiber(SuspenseComponent, pendingProps, key, mode); // TODO: The SuspenseComponent fiber shouldn't have a type. It has a tag.
              // This needs to be fixed in getComponentName so that it relies on the tag
              // instead.

              fiber.type = REACT_SUSPENSE_TYPE;
              fiber.elementType = REACT_SUSPENSE_TYPE;
              fiber.lanes = lanes;
              return fiber;
            }
            function createFiberFromSuspenseList(pendingProps, mode, lanes, key) {
              var fiber = createFiber(SuspenseListComponent, pendingProps, key, mode);

              {
                // TODO: The SuspenseListComponent fiber shouldn't have a type. It has a tag.
                // This needs to be fixed in getComponentName so that it relies on the tag
                // instead.
                fiber.type = REACT_SUSPENSE_LIST_TYPE;
              }

              fiber.elementType = REACT_SUSPENSE_LIST_TYPE;
              fiber.lanes = lanes;
              return fiber;
            }
            function createFiberFromOffscreen(pendingProps, mode, lanes, key) {
              var fiber = createFiber(OffscreenComponent, pendingProps, key, mode); // TODO: The OffscreenComponent fiber shouldn't have a type. It has a tag.
              // This needs to be fixed in getComponentName so that it relies on the tag
              // instead.

              {
                fiber.type = REACT_OFFSCREEN_TYPE;
              }

              fiber.elementType = REACT_OFFSCREEN_TYPE;
              fiber.lanes = lanes;
              return fiber;
            }
            function createFiberFromLegacyHidden(pendingProps, mode, lanes, key) {
              var fiber = createFiber(LegacyHiddenComponent, pendingProps, key, mode); // TODO: The LegacyHidden fiber shouldn't have a type. It has a tag.
              // This needs to be fixed in getComponentName so that it relies on the tag
              // instead.

              {
                fiber.type = REACT_LEGACY_HIDDEN_TYPE;
              }

              fiber.elementType = REACT_LEGACY_HIDDEN_TYPE;
              fiber.lanes = lanes;
              return fiber;
            }
            function createFiberFromText(content, mode, lanes) {
              var fiber = createFiber(HostText, content, null, mode);
              fiber.lanes = lanes;
              return fiber;
            }
            function createFiberFromHostInstanceForDeletion() {
              var fiber = createFiber(HostComponent, null, null, NoMode); // TODO: These should not need a type.

              fiber.elementType = 'DELETED';
              fiber.type = 'DELETED';
              return fiber;
            }
            function createFiberFromPortal(portal, mode, lanes) {
              var pendingProps = portal.children !== null ? portal.children : [];
              var fiber = createFiber(HostPortal, pendingProps, portal.key, mode);
              fiber.lanes = lanes;
              fiber.stateNode = {
                containerInfo: portal.containerInfo,
                pendingChildren: null,
                // Used by persistent updates
                implementation: portal.implementation
              };
              return fiber;
            } // Used for stashing WIP properties to replay failed work in DEV.

            function assignFiberPropertiesInDEV(target, source) {
              if (target === null) {
                // This Fiber's initial properties will always be overwritten.
                // We only use a Fiber to ensure the same hidden class so DEV isn't slow.
                target = createFiber(IndeterminateComponent, null, null, NoMode);
              } // This is intentionally written as a list of all properties.
              // We tried to use Object.assign() instead but this is called in
              // the hottest path, and Object.assign() was too slow:
              // https://github.com/facebook/react/issues/12502
              // This code is DEV-only so size is not a concern.


              target.tag = source.tag;
              target.key = source.key;
              target.elementType = source.elementType;
              target.type = source.type;
              target.stateNode = source.stateNode;
              target.return = source.return;
              target.child = source.child;
              target.sibling = source.sibling;
              target.index = source.index;
              target.ref = source.ref;
              target.pendingProps = source.pendingProps;
              target.memoizedProps = source.memoizedProps;
              target.updateQueue = source.updateQueue;
              target.memoizedState = source.memoizedState;
              target.dependencies = source.dependencies;
              target.mode = source.mode;
              target.flags = source.flags;
              target.nextEffect = source.nextEffect;
              target.firstEffect = source.firstEffect;
              target.lastEffect = source.lastEffect;
              target.lanes = source.lanes;
              target.childLanes = source.childLanes;
              target.alternate = source.alternate;

              {
                target.actualDuration = source.actualDuration;
                target.actualStartTime = source.actualStartTime;
                target.selfBaseDuration = source.selfBaseDuration;
                target.treeBaseDuration = source.treeBaseDuration;
              }

              target._debugID = source._debugID;
              target._debugSource = source._debugSource;
              target._debugOwner = source._debugOwner;
              target._debugNeedsRemount = source._debugNeedsRemount;
              target._debugHookTypes = source._debugHookTypes;
              return target;
            }

            function FiberRootNode(containerInfo, tag, hydrate) {
              this.tag = tag;
              this.containerInfo = containerInfo;
              this.pendingChildren = null;
              this.current = null;
              this.pingCache = null;
              this.finishedWork = null;
              this.timeoutHandle = noTimeout;
              this.context = null;
              this.pendingContext = null;
              this.hydrate = hydrate;
              this.callbackNode = null;
              this.callbackPriority = NoLanePriority;
              this.eventTimes = createLaneMap(NoLanes);
              this.expirationTimes = createLaneMap(NoTimestamp);
              this.pendingLanes = NoLanes;
              this.suspendedLanes = NoLanes;
              this.pingedLanes = NoLanes;
              this.expiredLanes = NoLanes;
              this.mutableReadLanes = NoLanes;
              this.finishedLanes = NoLanes;
              this.entangledLanes = NoLanes;
              this.entanglements = createLaneMap(NoLanes);

              {
                this.mutableSourceEagerHydrationData = null;
              }

              {
                this.interactionThreadID = tracing$1.unstable_getThreadID();
                this.memoizedInteractions = new Set();
                this.pendingInteractionMap = new Map();
              }

              {
                switch (tag) {
                  case BlockingRoot:
                    this._debugRootType = 'createBlockingRoot()';
                    break;

                  case ConcurrentRoot:
                    this._debugRootType = 'createRoot()';
                    break;

                  case LegacyRoot:
                    this._debugRootType = 'createLegacyRoot()';
                    break;
                }
              }
            }

            function createFiberRoot(containerInfo, tag, hydrate, hydrationCallbacks) {
              var root = new FiberRootNode(containerInfo, tag, hydrate);
              // stateNode is any.


              var uninitializedFiber = createHostRootFiber(tag);
              root.current = uninitializedFiber;
              uninitializedFiber.stateNode = root;
              initializeUpdateQueue(uninitializedFiber);
              return root;
            }

            // This ensures that the version used for server rendering matches the one
            // that is eventually read during hydration.
            // If they don't match there's a potential tear and a full deopt render is required.

            function registerMutableSourceForHydration(root, mutableSource) {
              var getVersion = mutableSource._getVersion;
              var version = getVersion(mutableSource._source); // TODO Clear this data once all pending hydration work is finished.
              // Retaining it forever may interfere with GC.

              if (root.mutableSourceEagerHydrationData == null) {
                root.mutableSourceEagerHydrationData = [mutableSource, version];
              } else {
                root.mutableSourceEagerHydrationData.push(mutableSource, version);
              }
            }

            function createPortal(children, containerInfo, // TODO: figure out the API for cross-renderer implementation.
            implementation) {
              var key = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : null;
              return {
                // This tag allow us to uniquely identify this as a React Portal
                $$typeof: REACT_PORTAL_TYPE,
                key: key == null ? null : '' + key,
                children: children,
                containerInfo: containerInfo,
                implementation: implementation
              };
            }

            var didWarnAboutNestedUpdates;
            var didWarnAboutFindNodeInStrictMode;

            {
              didWarnAboutNestedUpdates = false;
              didWarnAboutFindNodeInStrictMode = {};
            }

            function getContextForSubtree(parentComponent) {
              if (!parentComponent) {
                return emptyContextObject;
              }

              var fiber = get(parentComponent);
              var parentContext = findCurrentUnmaskedContext(fiber);

              if (fiber.tag === ClassComponent) {
                var Component = fiber.type;

                if (isContextProvider(Component)) {
                  return processChildContext(fiber, Component, parentContext);
                }
              }

              return parentContext;
            }

            function findHostInstanceWithWarning(component, methodName) {
              {
                var fiber = get(component);

                if (fiber === undefined) {
                  if (typeof component.render === 'function') {
                    {
                      {
                        throw Error( "Unable to find node on an unmounted component." );
                      }
                    }
                  } else {
                    {
                      {
                        throw Error( "Argument appears to not be a ReactComponent. Keys: " + Object.keys(component) );
                      }
                    }
                  }
                }

                var hostFiber = findCurrentHostFiber(fiber);

                if (hostFiber === null) {
                  return null;
                }

                if (hostFiber.mode & StrictMode) {
                  var componentName = getComponentName(fiber.type) || 'Component';

                  if (!didWarnAboutFindNodeInStrictMode[componentName]) {
                    didWarnAboutFindNodeInStrictMode[componentName] = true;
                    var previousFiber = current;

                    try {
                      setCurrentFiber(hostFiber);

                      if (fiber.mode & StrictMode) {
                        error('%s is deprecated in StrictMode. ' + '%s was passed an instance of %s which is inside StrictMode. ' + 'Instead, add a ref directly to the element you want to reference. ' + 'Learn more about using refs safely here: ' + 'https://reactjs.org/link/strict-mode-find-node', methodName, methodName, componentName);
                      } else {
                        error('%s is deprecated in StrictMode. ' + '%s was passed an instance of %s which renders StrictMode children. ' + 'Instead, add a ref directly to the element you want to reference. ' + 'Learn more about using refs safely here: ' + 'https://reactjs.org/link/strict-mode-find-node', methodName, methodName, componentName);
                      }
                    } finally {
                      // Ideally this should reset to previous but this shouldn't be called in
                      // render and there's another warning for that anyway.
                      if (previousFiber) {
                        setCurrentFiber(previousFiber);
                      } else {
                        resetCurrentFiber();
                      }
                    }
                  }
                }

                return hostFiber.stateNode;
              }
            }

            function createContainer(containerInfo, tag, hydrate, hydrationCallbacks) {
              return createFiberRoot(containerInfo, tag, hydrate);
            }
            function updateContainer(element, container, parentComponent, callback) {
              {
                onScheduleRoot(container, element);
              }

              var current$1 = container.current;
              var eventTime = requestEventTime();

              {
                // $FlowExpectedError - jest isn't a global, and isn't recognized outside of tests
                if ('undefined' !== typeof jest) {
                  warnIfUnmockedScheduler(current$1);
                  warnIfNotScopedWithMatchingAct(current$1);
                }
              }

              var lane = requestUpdateLane(current$1);

              var context = getContextForSubtree(parentComponent);

              if (container.context === null) {
                container.context = context;
              } else {
                container.pendingContext = context;
              }

              {
                if (isRendering && current !== null && !didWarnAboutNestedUpdates) {
                  didWarnAboutNestedUpdates = true;

                  error('Render methods should be a pure function of props and state; ' + 'triggering nested component updates from render is not allowed. ' + 'If necessary, trigger nested updates in componentDidUpdate.\n\n' + 'Check the render method of %s.', getComponentName(current.type) || 'Unknown');
                }
              }

              var update = createUpdate(eventTime, lane); // Caution: React DevTools currently depends on this property
              // being called "element".

              update.payload = {
                element: element
              };
              callback = callback === undefined ? null : callback;

              if (callback !== null) {
                {
                  if (typeof callback !== 'function') {
                    error('render(...): Expected the last optional `callback` argument to be a ' + 'function. Instead received: %s.', callback);
                  }
                }

                update.callback = callback;
              }

              enqueueUpdate(current$1, update);
              scheduleUpdateOnFiber(current$1, lane, eventTime);
              return lane;
            }
            function getPublicRootInstance(container) {
              var containerFiber = container.current;

              if (!containerFiber.child) {
                return null;
              }

              switch (containerFiber.child.tag) {
                case HostComponent:
                  return getPublicInstance(containerFiber.child.stateNode);

                default:
                  return containerFiber.child.stateNode;
              }
            }

            function markRetryLaneImpl(fiber, retryLane) {
              var suspenseState = fiber.memoizedState;

              if (suspenseState !== null && suspenseState.dehydrated !== null) {
                suspenseState.retryLane = higherPriorityLane(suspenseState.retryLane, retryLane);
              }
            } // Increases the priority of thennables when they resolve within this boundary.


            function markRetryLaneIfNotHydrated(fiber, retryLane) {
              markRetryLaneImpl(fiber, retryLane);
              var alternate = fiber.alternate;

              if (alternate) {
                markRetryLaneImpl(alternate, retryLane);
              }
            }

            function attemptUserBlockingHydration$1(fiber) {
              if (fiber.tag !== SuspenseComponent) {
                // We ignore HostRoots here because we can't increase
                // their priority and they should not suspend on I/O,
                // since you have to wrap anything that might suspend in
                // Suspense.
                return;
              }

              var eventTime = requestEventTime();
              var lane = InputDiscreteHydrationLane;
              scheduleUpdateOnFiber(fiber, lane, eventTime);
              markRetryLaneIfNotHydrated(fiber, lane);
            }
            function attemptContinuousHydration$1(fiber) {
              if (fiber.tag !== SuspenseComponent) {
                // We ignore HostRoots here because we can't increase
                // their priority and they should not suspend on I/O,
                // since you have to wrap anything that might suspend in
                // Suspense.
                return;
              }

              var eventTime = requestEventTime();
              var lane = SelectiveHydrationLane;
              scheduleUpdateOnFiber(fiber, lane, eventTime);
              markRetryLaneIfNotHydrated(fiber, lane);
            }
            function attemptHydrationAtCurrentPriority$1(fiber) {
              if (fiber.tag !== SuspenseComponent) {
                // We ignore HostRoots here because we can't increase
                // their priority other than synchronously flush it.
                return;
              }

              var eventTime = requestEventTime();
              var lane = requestUpdateLane(fiber);
              scheduleUpdateOnFiber(fiber, lane, eventTime);
              markRetryLaneIfNotHydrated(fiber, lane);
            }
            function runWithPriority$2(priority, fn) {

              try {
                setCurrentUpdateLanePriority(priority);
                return fn();
              } finally {
              }
            }
            function findHostInstanceWithNoPortals(fiber) {
              var hostFiber = findCurrentHostFiberWithNoPortals(fiber);

              if (hostFiber === null) {
                return null;
              }

              if (hostFiber.tag === FundamentalComponent) {
                return hostFiber.stateNode.instance;
              }

              return hostFiber.stateNode;
            }

            var shouldSuspendImpl = function (fiber) {
              return false;
            };

            function shouldSuspend(fiber) {
              return shouldSuspendImpl(fiber);
            }
            var overrideHookState = null;
            var overrideHookStateDeletePath = null;
            var overrideHookStateRenamePath = null;
            var overrideProps = null;
            var overridePropsDeletePath = null;
            var overridePropsRenamePath = null;
            var scheduleUpdate = null;
            var setSuspenseHandler = null;

            {
              var copyWithDeleteImpl = function (obj, path, index) {
                var key = path[index];
                var updated = Array.isArray(obj) ? obj.slice() : _assign({}, obj);

                if (index + 1 === path.length) {
                  if (Array.isArray(updated)) {
                    updated.splice(key, 1);
                  } else {
                    delete updated[key];
                  }

                  return updated;
                } // $FlowFixMe number or string is fine here


                updated[key] = copyWithDeleteImpl(obj[key], path, index + 1);
                return updated;
              };

              var copyWithDelete = function (obj, path) {
                return copyWithDeleteImpl(obj, path, 0);
              };

              var copyWithRenameImpl = function (obj, oldPath, newPath, index) {
                var oldKey = oldPath[index];
                var updated = Array.isArray(obj) ? obj.slice() : _assign({}, obj);

                if (index + 1 === oldPath.length) {
                  var newKey = newPath[index]; // $FlowFixMe number or string is fine here

                  updated[newKey] = updated[oldKey];

                  if (Array.isArray(updated)) {
                    updated.splice(oldKey, 1);
                  } else {
                    delete updated[oldKey];
                  }
                } else {
                  // $FlowFixMe number or string is fine here
                  updated[oldKey] = copyWithRenameImpl( // $FlowFixMe number or string is fine here
                  obj[oldKey], oldPath, newPath, index + 1);
                }

                return updated;
              };

              var copyWithRename = function (obj, oldPath, newPath) {
                if (oldPath.length !== newPath.length) {
                  warn('copyWithRename() expects paths of the same length');

                  return;
                } else {
                  for (var i = 0; i < newPath.length - 1; i++) {
                    if (oldPath[i] !== newPath[i]) {
                      warn('copyWithRename() expects paths to be the same except for the deepest key');

                      return;
                    }
                  }
                }

                return copyWithRenameImpl(obj, oldPath, newPath, 0);
              };

              var copyWithSetImpl = function (obj, path, index, value) {
                if (index >= path.length) {
                  return value;
                }

                var key = path[index];
                var updated = Array.isArray(obj) ? obj.slice() : _assign({}, obj); // $FlowFixMe number or string is fine here

                updated[key] = copyWithSetImpl(obj[key], path, index + 1, value);
                return updated;
              };

              var copyWithSet = function (obj, path, value) {
                return copyWithSetImpl(obj, path, 0, value);
              };

              var findHook = function (fiber, id) {
                // For now, the "id" of stateful hooks is just the stateful hook index.
                // This may change in the future with e.g. nested hooks.
                var currentHook = fiber.memoizedState;

                while (currentHook !== null && id > 0) {
                  currentHook = currentHook.next;
                  id--;
                }

                return currentHook;
              }; // Support DevTools editable values for useState and useReducer.


              overrideHookState = function (fiber, id, path, value) {
                var hook = findHook(fiber, id);

                if (hook !== null) {
                  var newState = copyWithSet(hook.memoizedState, path, value);
                  hook.memoizedState = newState;
                  hook.baseState = newState; // We aren't actually adding an update to the queue,
                  // because there is no update we can add for useReducer hooks that won't trigger an error.
                  // (There's no appropriate action type for DevTools overrides.)
                  // As a result though, React will see the scheduled update as a noop and bailout.
                  // Shallow cloning props works as a workaround for now to bypass the bailout check.

                  fiber.memoizedProps = _assign({}, fiber.memoizedProps);
                  scheduleUpdateOnFiber(fiber, SyncLane, NoTimestamp);
                }
              };

              overrideHookStateDeletePath = function (fiber, id, path) {
                var hook = findHook(fiber, id);

                if (hook !== null) {
                  var newState = copyWithDelete(hook.memoizedState, path);
                  hook.memoizedState = newState;
                  hook.baseState = newState; // We aren't actually adding an update to the queue,
                  // because there is no update we can add for useReducer hooks that won't trigger an error.
                  // (There's no appropriate action type for DevTools overrides.)
                  // As a result though, React will see the scheduled update as a noop and bailout.
                  // Shallow cloning props works as a workaround for now to bypass the bailout check.

                  fiber.memoizedProps = _assign({}, fiber.memoizedProps);
                  scheduleUpdateOnFiber(fiber, SyncLane, NoTimestamp);
                }
              };

              overrideHookStateRenamePath = function (fiber, id, oldPath, newPath) {
                var hook = findHook(fiber, id);

                if (hook !== null) {
                  var newState = copyWithRename(hook.memoizedState, oldPath, newPath);
                  hook.memoizedState = newState;
                  hook.baseState = newState; // We aren't actually adding an update to the queue,
                  // because there is no update we can add for useReducer hooks that won't trigger an error.
                  // (There's no appropriate action type for DevTools overrides.)
                  // As a result though, React will see the scheduled update as a noop and bailout.
                  // Shallow cloning props works as a workaround for now to bypass the bailout check.

                  fiber.memoizedProps = _assign({}, fiber.memoizedProps);
                  scheduleUpdateOnFiber(fiber, SyncLane, NoTimestamp);
                }
              }; // Support DevTools props for function components, forwardRef, memo, host components, etc.


              overrideProps = function (fiber, path, value) {
                fiber.pendingProps = copyWithSet(fiber.memoizedProps, path, value);

                if (fiber.alternate) {
                  fiber.alternate.pendingProps = fiber.pendingProps;
                }

                scheduleUpdateOnFiber(fiber, SyncLane, NoTimestamp);
              };

              overridePropsDeletePath = function (fiber, path) {
                fiber.pendingProps = copyWithDelete(fiber.memoizedProps, path);

                if (fiber.alternate) {
                  fiber.alternate.pendingProps = fiber.pendingProps;
                }

                scheduleUpdateOnFiber(fiber, SyncLane, NoTimestamp);
              };

              overridePropsRenamePath = function (fiber, oldPath, newPath) {
                fiber.pendingProps = copyWithRename(fiber.memoizedProps, oldPath, newPath);

                if (fiber.alternate) {
                  fiber.alternate.pendingProps = fiber.pendingProps;
                }

                scheduleUpdateOnFiber(fiber, SyncLane, NoTimestamp);
              };

              scheduleUpdate = function (fiber) {
                scheduleUpdateOnFiber(fiber, SyncLane, NoTimestamp);
              };

              setSuspenseHandler = function (newShouldSuspendImpl) {
                shouldSuspendImpl = newShouldSuspendImpl;
              };
            }

            function findHostInstanceByFiber(fiber) {
              var hostFiber = findCurrentHostFiber(fiber);

              if (hostFiber === null) {
                return null;
              }

              return hostFiber.stateNode;
            }

            function emptyFindFiberByHostInstance(instance) {
              return null;
            }

            function getCurrentFiberForDevTools() {
              return current;
            }

            function injectIntoDevTools(devToolsConfig) {
              var findFiberByHostInstance = devToolsConfig.findFiberByHostInstance;
              var ReactCurrentDispatcher = ReactSharedInternals.ReactCurrentDispatcher;
              return injectInternals({
                bundleType: devToolsConfig.bundleType,
                version: devToolsConfig.version,
                rendererPackageName: devToolsConfig.rendererPackageName,
                rendererConfig: devToolsConfig.rendererConfig,
                overrideHookState: overrideHookState,
                overrideHookStateDeletePath: overrideHookStateDeletePath,
                overrideHookStateRenamePath: overrideHookStateRenamePath,
                overrideProps: overrideProps,
                overridePropsDeletePath: overridePropsDeletePath,
                overridePropsRenamePath: overridePropsRenamePath,
                setSuspenseHandler: setSuspenseHandler,
                scheduleUpdate: scheduleUpdate,
                currentDispatcherRef: ReactCurrentDispatcher,
                findHostInstanceByFiber: findHostInstanceByFiber,
                findFiberByHostInstance: findFiberByHostInstance || emptyFindFiberByHostInstance,
                // React Refresh
                findHostInstancesForRefresh:  findHostInstancesForRefresh ,
                scheduleRefresh:  scheduleRefresh ,
                scheduleRoot:  scheduleRoot ,
                setRefreshHandler:  setRefreshHandler ,
                // Enables DevTools to append owner stacks to error messages in DEV mode.
                getCurrentFiber:  getCurrentFiberForDevTools 
              });
            }

            function ReactDOMBlockingRoot(container, tag, options) {
              this._internalRoot = createRootImpl(container, tag, options);
            }

            ReactDOMBlockingRoot.prototype.render = function (children) {
              var root = this._internalRoot;

              {
                if (typeof arguments[1] === 'function') {
                  error('render(...): does not support the second callback argument. ' + 'To execute a side effect after rendering, declare it in a component body with useEffect().');
                }

                var container = root.containerInfo;

                if (container.nodeType !== COMMENT_NODE) {
                  var hostInstance = findHostInstanceWithNoPortals(root.current);

                  if (hostInstance) {
                    if (hostInstance.parentNode !== container) {
                      error('render(...): It looks like the React-rendered content of the ' + 'root container was removed without using React. This is not ' + 'supported and will cause errors. Instead, call ' + "root.unmount() to empty a root's container.");
                    }
                  }
                }
              }

              updateContainer(children, root, null, null);
            };

            ReactDOMBlockingRoot.prototype.unmount = function () {
              {
                if (typeof arguments[0] === 'function') {
                  error('unmount(...): does not support a callback argument. ' + 'To execute a side effect after rendering, declare it in a component body with useEffect().');
                }
              }

              var root = this._internalRoot;
              var container = root.containerInfo;
              updateContainer(null, root, null, function () {
                unmarkContainerAsRoot(container);
              });
            };

            function createRootImpl(container, tag, options) {
              // Tag is either LegacyRoot or Concurrent Root
              var hydrate = options != null && options.hydrate === true;
              options != null && options.hydrationOptions || null;
              var mutableSources = options != null && options.hydrationOptions != null && options.hydrationOptions.mutableSources || null;
              var root = createContainer(container, tag, hydrate);
              markContainerAsRoot(root.current, container);
              container.nodeType;

              {
                var rootContainerElement = container.nodeType === COMMENT_NODE ? container.parentNode : container;
                listenToAllSupportedEvents(rootContainerElement);
              }

              if (mutableSources) {
                for (var i = 0; i < mutableSources.length; i++) {
                  var mutableSource = mutableSources[i];
                  registerMutableSourceForHydration(root, mutableSource);
                }
              }

              return root;
            }
            function createLegacyRoot(container, options) {
              return new ReactDOMBlockingRoot(container, LegacyRoot, options);
            }
            function isValidContainer(node) {
              return !!(node && (node.nodeType === ELEMENT_NODE || node.nodeType === DOCUMENT_NODE || node.nodeType === DOCUMENT_FRAGMENT_NODE || node.nodeType === COMMENT_NODE && node.nodeValue === ' react-mount-point-unstable '));
            }

            var ReactCurrentOwner$3 = ReactSharedInternals.ReactCurrentOwner;
            var topLevelUpdateWarnings;
            var warnedAboutHydrateAPI = false;

            {
              topLevelUpdateWarnings = function (container) {
                if (container._reactRootContainer && container.nodeType !== COMMENT_NODE) {
                  var hostInstance = findHostInstanceWithNoPortals(container._reactRootContainer._internalRoot.current);

                  if (hostInstance) {
                    if (hostInstance.parentNode !== container) {
                      error('render(...): It looks like the React-rendered content of this ' + 'container was removed without using React. This is not ' + 'supported and will cause errors. Instead, call ' + 'ReactDOM.unmountComponentAtNode to empty a container.');
                    }
                  }
                }

                var isRootRenderedBySomeReact = !!container._reactRootContainer;
                var rootEl = getReactRootElementInContainer(container);
                var hasNonRootReactChild = !!(rootEl && getInstanceFromNode(rootEl));

                if (hasNonRootReactChild && !isRootRenderedBySomeReact) {
                  error('render(...): Replacing React-rendered children with a new root ' + 'component. If you intended to update the children of this node, ' + 'you should instead have the existing children update their state ' + 'and render the new components instead of calling ReactDOM.render.');
                }

                if (container.nodeType === ELEMENT_NODE && container.tagName && container.tagName.toUpperCase() === 'BODY') {
                  error('render(): Rendering components directly into document.body is ' + 'discouraged, since its children are often manipulated by third-party ' + 'scripts and browser extensions. This may lead to subtle ' + 'reconciliation issues. Try rendering into a container element created ' + 'for your app.');
                }
              };
            }

            function getReactRootElementInContainer(container) {
              if (!container) {
                return null;
              }

              if (container.nodeType === DOCUMENT_NODE) {
                return container.documentElement;
              } else {
                return container.firstChild;
              }
            }

            function shouldHydrateDueToLegacyHeuristic(container) {
              var rootElement = getReactRootElementInContainer(container);
              return !!(rootElement && rootElement.nodeType === ELEMENT_NODE && rootElement.hasAttribute(ROOT_ATTRIBUTE_NAME));
            }

            function legacyCreateRootFromDOMContainer(container, forceHydrate) {
              var shouldHydrate = forceHydrate || shouldHydrateDueToLegacyHeuristic(container); // First clear any existing content.

              if (!shouldHydrate) {
                var warned = false;
                var rootSibling;

                while (rootSibling = container.lastChild) {
                  {
                    if (!warned && rootSibling.nodeType === ELEMENT_NODE && rootSibling.hasAttribute(ROOT_ATTRIBUTE_NAME)) {
                      warned = true;

                      error('render(): Target node has markup rendered by React, but there ' + 'are unrelated nodes as well. This is most commonly caused by ' + 'white-space inserted around server-rendered markup.');
                    }
                  }

                  container.removeChild(rootSibling);
                }
              }

              {
                if (shouldHydrate && !forceHydrate && !warnedAboutHydrateAPI) {
                  warnedAboutHydrateAPI = true;

                  warn('render(): Calling ReactDOM.render() to hydrate server-rendered markup ' + 'will stop working in React v18. Replace the ReactDOM.render() call ' + 'with ReactDOM.hydrate() if you want React to attach to the server HTML.');
                }
              }

              return createLegacyRoot(container, shouldHydrate ? {
                hydrate: true
              } : undefined);
            }

            function warnOnInvalidCallback$1(callback, callerName) {
              {
                if (callback !== null && typeof callback !== 'function') {
                  error('%s(...): Expected the last optional `callback` argument to be a ' + 'function. Instead received: %s.', callerName, callback);
                }
              }
            }

            function legacyRenderSubtreeIntoContainer(parentComponent, children, container, forceHydrate, callback) {
              {
                topLevelUpdateWarnings(container);
                warnOnInvalidCallback$1(callback === undefined ? null : callback, 'render');
              } // TODO: Without `any` type, Flow says "Property cannot be accessed on any
              // member of intersection type." Whyyyyyy.


              var root = container._reactRootContainer;
              var fiberRoot;

              if (!root) {
                // Initial mount
                root = container._reactRootContainer = legacyCreateRootFromDOMContainer(container, forceHydrate);
                fiberRoot = root._internalRoot;

                if (typeof callback === 'function') {
                  var originalCallback = callback;

                  callback = function () {
                    var instance = getPublicRootInstance(fiberRoot);
                    originalCallback.call(instance);
                  };
                } // Initial mount should not be batched.


                unbatchedUpdates(function () {
                  updateContainer(children, fiberRoot, parentComponent, callback);
                });
              } else {
                fiberRoot = root._internalRoot;

                if (typeof callback === 'function') {
                  var _originalCallback = callback;

                  callback = function () {
                    var instance = getPublicRootInstance(fiberRoot);

                    _originalCallback.call(instance);
                  };
                } // Update


                updateContainer(children, fiberRoot, parentComponent, callback);
              }

              return getPublicRootInstance(fiberRoot);
            }

            function findDOMNode(componentOrElement) {
              {
                var owner = ReactCurrentOwner$3.current;

                if (owner !== null && owner.stateNode !== null) {
                  var warnedAboutRefsInRender = owner.stateNode._warnedAboutRefsInRender;

                  if (!warnedAboutRefsInRender) {
                    error('%s is accessing findDOMNode inside its render(). ' + 'render() should be a pure function of props and state. It should ' + 'never access something that requires stale data from the previous ' + 'render, such as refs. Move this logic to componentDidMount and ' + 'componentDidUpdate instead.', getComponentName(owner.type) || 'A component');
                  }

                  owner.stateNode._warnedAboutRefsInRender = true;
                }
              }

              if (componentOrElement == null) {
                return null;
              }

              if (componentOrElement.nodeType === ELEMENT_NODE) {
                return componentOrElement;
              }

              {
                return findHostInstanceWithWarning(componentOrElement, 'findDOMNode');
              }
            }
            function hydrate(element, container, callback) {
              if (!isValidContainer(container)) {
                {
                  throw Error( "Target container is not a DOM element." );
                }
              }

              {
                var isModernRoot = isContainerMarkedAsRoot(container) && container._reactRootContainer === undefined;

                if (isModernRoot) {
                  error('You are calling ReactDOM.hydrate() on a container that was previously ' + 'passed to ReactDOM.createRoot(). This is not supported. ' + 'Did you mean to call createRoot(container, {hydrate: true}).render(element)?');
                }
              } // TODO: throw or warn if we couldn't hydrate?


              return legacyRenderSubtreeIntoContainer(null, element, container, true, callback);
            }
            function render(element, container, callback) {
              if (!isValidContainer(container)) {
                {
                  throw Error( "Target container is not a DOM element." );
                }
              }

              {
                var isModernRoot = isContainerMarkedAsRoot(container) && container._reactRootContainer === undefined;

                if (isModernRoot) {
                  error('You are calling ReactDOM.render() on a container that was previously ' + 'passed to ReactDOM.createRoot(). This is not supported. ' + 'Did you mean to call root.render(element)?');
                }
              }

              return legacyRenderSubtreeIntoContainer(null, element, container, false, callback);
            }
            function unstable_renderSubtreeIntoContainer(parentComponent, element, containerNode, callback) {
              if (!isValidContainer(containerNode)) {
                {
                  throw Error( "Target container is not a DOM element." );
                }
              }

              if (!(parentComponent != null && has(parentComponent))) {
                {
                  throw Error( "parentComponent must be a valid React Component" );
                }
              }

              return legacyRenderSubtreeIntoContainer(parentComponent, element, containerNode, false, callback);
            }
            function unmountComponentAtNode(container) {
              if (!isValidContainer(container)) {
                {
                  throw Error( "unmountComponentAtNode(...): Target container is not a DOM element." );
                }
              }

              {
                var isModernRoot = isContainerMarkedAsRoot(container) && container._reactRootContainer === undefined;

                if (isModernRoot) {
                  error('You are calling ReactDOM.unmountComponentAtNode() on a container that was previously ' + 'passed to ReactDOM.createRoot(). This is not supported. Did you mean to call root.unmount()?');
                }
              }

              if (container._reactRootContainer) {
                {
                  var rootEl = getReactRootElementInContainer(container);
                  var renderedByDifferentReact = rootEl && !getInstanceFromNode(rootEl);

                  if (renderedByDifferentReact) {
                    error("unmountComponentAtNode(): The node you're attempting to unmount " + 'was rendered by another copy of React.');
                  }
                } // Unmount should not be batched.


                unbatchedUpdates(function () {
                  legacyRenderSubtreeIntoContainer(null, null, container, false, function () {
                    // $FlowFixMe This should probably use `delete container._reactRootContainer`
                    container._reactRootContainer = null;
                    unmarkContainerAsRoot(container);
                  });
                }); // If you call unmountComponentAtNode twice in quick succession, you'll
                // get `true` twice. That's probably fine?

                return true;
              } else {
                {
                  var _rootEl = getReactRootElementInContainer(container);

                  var hasNonRootReactChild = !!(_rootEl && getInstanceFromNode(_rootEl)); // Check if the container itself is a React root node.

                  var isContainerReactRoot = container.nodeType === ELEMENT_NODE && isValidContainer(container.parentNode) && !!container.parentNode._reactRootContainer;

                  if (hasNonRootReactChild) {
                    error("unmountComponentAtNode(): The node you're attempting to unmount " + 'was rendered by React and is not a top-level container. %s', isContainerReactRoot ? 'You may have accidentally passed in a React root node instead ' + 'of its container.' : 'Instead, have the parent component update its state and ' + 'rerender in order to remove this component.');
                  }
                }

                return false;
              }
            }

            setAttemptUserBlockingHydration(attemptUserBlockingHydration$1);
            setAttemptContinuousHydration(attemptContinuousHydration$1);
            setAttemptHydrationAtCurrentPriority(attemptHydrationAtCurrentPriority$1);
            setAttemptHydrationAtPriority(runWithPriority$2);
            var didWarnAboutUnstableCreatePortal = false;

            {
              if (typeof Map !== 'function' || // $FlowIssue Flow incorrectly thinks Map has no prototype
              Map.prototype == null || typeof Map.prototype.forEach !== 'function' || typeof Set !== 'function' || // $FlowIssue Flow incorrectly thinks Set has no prototype
              Set.prototype == null || typeof Set.prototype.clear !== 'function' || typeof Set.prototype.forEach !== 'function') {
                error('React depends on Map and Set built-in types. Make sure that you load a ' + 'polyfill in older browsers. https://reactjs.org/link/react-polyfills');
              }
            }

            setRestoreImplementation(restoreControlledState$3);
            setBatchingImplementation(batchedUpdates$1, discreteUpdates$1, flushDiscreteUpdates, batchedEventUpdates$1);

            function createPortal$1(children, container) {
              var key = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : null;

              if (!isValidContainer(container)) {
                {
                  throw Error( "Target container is not a DOM element." );
                }
              } // TODO: pass ReactDOM portal implementation as third argument
              // $FlowFixMe The Flow type is opaque but there's no way to actually create it.


              return createPortal(children, container, null, key);
            }

            function renderSubtreeIntoContainer(parentComponent, element, containerNode, callback) {

              return unstable_renderSubtreeIntoContainer(parentComponent, element, containerNode, callback);
            }

            function unstable_createPortal(children, container) {
              var key = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : null;

              {
                if (!didWarnAboutUnstableCreatePortal) {
                  didWarnAboutUnstableCreatePortal = true;

                  warn('The ReactDOM.unstable_createPortal() alias has been deprecated, ' + 'and will be removed in React 18+. Update your code to use ' + 'ReactDOM.createPortal() instead. It has the exact same API, ' + 'but without the "unstable_" prefix.');
                }
              }

              return createPortal$1(children, container, key);
            }

            var Internals = {
              // Keep in sync with ReactTestUtils.js, and ReactTestUtilsAct.js.
              // This is an array for better minification.
              Events: [getInstanceFromNode, getNodeFromInstance, getFiberCurrentPropsFromNode, enqueueStateRestore, restoreStateIfNeeded, flushPassiveEffects, // TODO: This is related to `act`, not events. Move to separate key?
              IsThisRendererActing]
            };
            var foundDevTools = injectIntoDevTools({
              findFiberByHostInstance: getClosestInstanceFromNode,
              bundleType:  1 ,
              version: ReactVersion,
              rendererPackageName: 'react-dom'
            });

            {
              if (!foundDevTools && canUseDOM && window.top === window.self) {
                // If we're in Chrome or Firefox, provide a download link if not installed.
                if (navigator.userAgent.indexOf('Chrome') > -1 && navigator.userAgent.indexOf('Edge') === -1 || navigator.userAgent.indexOf('Firefox') > -1) {
                  var protocol = window.location.protocol; // Don't warn in exotic cases like chrome-extension://.

                  if (/^(https?|file):$/.test(protocol)) {
                    // eslint-disable-next-line react-internal/no-production-logging
                    console.info('%cDownload the React DevTools ' + 'for a better development experience: ' + 'https://reactjs.org/link/react-devtools' + (protocol === 'file:' ? '\nYou might need to use a local HTTP server (instead of file://): ' + 'https://reactjs.org/link/react-devtools-faq' : ''), 'font-weight:bold');
                  }
                }
              }
            }

            exports.__SECRET_INTERNALS_DO_NOT_USE_OR_YOU_WILL_BE_FIRED = Internals;
            exports.createPortal = createPortal$1;
            exports.findDOMNode = findDOMNode;
            exports.flushSync = flushSync;
            exports.hydrate = hydrate;
            exports.render = render;
            exports.unmountComponentAtNode = unmountComponentAtNode;
            exports.unstable_batchedUpdates = batchedUpdates$1;
            exports.unstable_createPortal = unstable_createPortal;
            exports.unstable_renderSubtreeIntoContainer = renderSubtreeIntoContainer;
            exports.version = ReactVersion;
              })();
            }
            });

            var reactDom = createCommonjsModule(function (module) {

            {
              module.exports = reactDom_development;
            }
            });

            const currentTab = () => new Promise((resolve, reject) => {
                chrome.tabs.query({ active: true }, (tabs) => {
                    const firstTab = tabs[0];
                    if (firstTab) {
                        resolve(firstTab.id);
                        return;
                    }
                    reject('No Tab Selected');
                });
            });

            var accessors = /*#__PURE__*/Object.freeze({
                        __proto__: null,
                        currentTab: currentTab
            });

            var identity$1 = {
                ...chrome.identity,
            };

            const REGEX = /^(?:[0-9a-f]{8}-[0-9a-f]{4}-[1-5][0-9a-f]{3}-[89ab][0-9a-f]{3}-[0-9a-f]{12}|00000000-0000-0000-0000-000000000000)$/i;
            const validate = (uuid) => typeof uuid === 'string' && REGEX.test(uuid);
            const rnds8 = new Uint8Array(16);
            const rng = () => {
                {
                    if (typeof crypto !== 'undefined') {
                        return crypto.getRandomValues(rnds8);
                    }
                    if (typeof msCrypto !== 'undefined') {
                        return msCrypto.getRandomValues(rnds8);
                    }
                }
                throw new Error('crypto.getRandomValues() not supported. See https://github.com/uuidjs/uuid#getrandomvalues-not-supported');
            };
            const byteToHex = [];
            for (let i = 0; i < 256; ++i) {
                byteToHex.push((i + 0x100).toString(16).substr(1));
            }
            const stringify = (arr) => {
                const offset = 0;
                const uuid = `${''}${byteToHex[arr[offset + 0]]}${''}${byteToHex[arr[offset + 1]]}${''}${byteToHex[arr[offset + 2]]}${''}${byteToHex[arr[offset + 3]]}${''}-${''}${byteToHex[arr[offset + 4]]}${''}${byteToHex[arr[offset + 5]]}${''}-${''}${byteToHex[arr[offset + 6]]}${''}${byteToHex[arr[offset + 7]]}${''}-${''}${byteToHex[arr[offset + 8]]}${''}${byteToHex[arr[offset + 9]]}${''}-${''}${byteToHex[arr[offset + 10]]}${''}${byteToHex[arr[offset + 11]]}${''}${byteToHex[arr[offset + 12]]}${''}${byteToHex[arr[offset + 13]]}${''}${byteToHex[arr[offset + 14]]}${''}${byteToHex[arr[offset + 15]]}${''}`
                    .toLowerCase();
                if (!validate(uuid)) {
                    throw TypeError('Stringified UUID is invalid');
                }
                return uuid;
            };
            const v4 = () => {
                const randoms = rng();
                randoms[6] = (randoms[6] & 0x0f) | 0x40;
                randoms[8] = (randoms[8] & 0x3f) | 0x80;
                return stringify(randoms);
            };

            const respond = (message) => {
                chrome.runtime.sendMessage(message);
            };
            const send$6 = (message) => {
                const id = v4();
                chrome.runtime.sendMessage({
                    ...message,
                    meta: {
                        id,
                    },
                });
                return id;
            };
            const listen$6 = (type, listener) => {
                const localListener = (message) => {
                    if (Array.isArray(type) && type.includes(message.type)) {
                        listener(message);
                        return;
                    }
                    if (message.type === type) {
                        listener(message);
                    }
                };
                if (!chrome.runtime.onMessage.hasListener(localListener)) {
                    chrome.runtime.onMessage.addListener(localListener);
                }
                const stopListening = () => {
                    hangup$1(listener);
                };
                return stopListening;
            };
            const hangup$1 = (listener) => {
                if (chrome.runtime.onMessage.hasListener(listener)) {
                    chrome.runtime.onMessage.removeListener(listener);
                }
            };
            const { sendMessage, ...rest } = chrome.runtime;
            var runtime = {
                ...rest,
                hangup: hangup$1,
                listen: listen$6,
                respond,
                send: send$6,
            };

            const get$1 = (key) => new Promise((resolve) => {
                chrome.storage.local.get(key, (data) => {
                    if (Object.keys(data).length === 0) {
                        resolve(null);
                    }
                    resolve(data[key]);
                });
            });
            const getData = async (key) => {
                const response = await get$1(key);
                if (response) {
                    return response.data;
                }
                return null;
            };
            const set = (key, data) => new Promise((resolve) => {
                const storeData = {
                    data,
                    lastUpdate: Date.now(),
                };
                const store = {
                    [key]: storeData,
                };
                chrome.storage.local.set(store, () => {
                    resolve(storeData);
                });
            });
            const remove = (key) => {
                chrome.storage.local.remove(key);
            };
            const addListener = (key, listener) => {
                const localListener = (changes, namespace) => {
                    const value = changes[key];
                    if (value) {
                        const { newValue, oldValue } = value;
                        const change = {
                            oldValue: oldValue?.data,
                            newValue: newValue?.data,
                        };
                        listener(change, namespace);
                    }
                };
                if (!chrome.storage.onChanged.hasListener(localListener)) {
                    chrome.storage.onChanged.addListener(localListener);
                }
                const stopListening = () => {
                    hangup(localListener);
                };
                return stopListening;
            };
            const hangup = (listener) => {
                if (chrome.storage.onChanged.hasListener(listener)) {
                    chrome.storage.onChanged.removeListener(listener);
                }
            };
            const inferStorage = (unknown, predicate) => predicate(unknown);
            const predicate = {
                githubSettings: (message) => message.key === 'githubSettings',
                filters: (message) => message.key === 'filters',
                linksStandard: (message) => message.key === 'linksStandard',
                linksCustom: (message) => message.key === 'linksCustom',
                linksOrder: (message) => message.key === 'linksOrder',
            };
            const guards$6 = {
                honeybadgerSettings: (message) => message.key === 'honeybadgerSettings',
                jiraSettings: (message) => message.key === 'jiraSettings',
                githubSettings: (message) => message.key === 'githubSettings',
                filters: (message) => message.key === 'filters',
                linksStandard: (message) => message.key === 'linksStandard',
                linksCustom: (message) => message.key === 'linksCustom',
                linksOrder: (message) => message.key === 'linksOrder',
                visibleUnits: (message) => message.key === 'visibleUnits',
                isAuthenticatedMessage: (message, unit) => {
                    if (message.type === 'github/IS_AUTHENTICATED' && unit === 'github') {
                        return true;
                    }
                    if (message.type === 'jira/IS_AUTHENTICATED' && unit === 'jira') {
                        return true;
                    }
                    return false;
                },
            };
            var storage = {
                ...chrome.storage,
                guards: guards$6,
                addListener,
                inferStorage,
                get: get$1,
                getData,
                predicate,
                remove,
                set,
            };

            var chrome$1 = {
                ...chrome,
                storage,
                runtime,
                accessors,
                identity: identity$1,
            };

            const counts = (config, full, items) => items.filter((item, index) => config.run(item, full, index)).length;

            const colors$1 = [
                '#DBD821',
                '#C052EB',
                '#EB8E46',
                '#46D8EB',
                '#24EDA5',
                '#C43D27',
            ];
            const getColor$1 = (index, color) => color || colors$1[index % colors$1.length];

            const groups = (filterConfigs, items) => filterConfigs
                .map((config) => {
                if (!config) {
                    return;
                }
                const current = {};
                items.forEach((item, index) => {
                    config.create(item, current, index);
                });
                const currentFilters = Object
                    .entries(current)
                    .sort(([, a], [, b]) => {
                    if (a.abbreviation < b.abbreviation) {
                        return -1;
                    }
                    if (a.abbreviation > b.abbreviation) {
                        return 1;
                    }
                    return 0;
                })
                    .map(([key, filter], index) => [
                    key,
                    {
                        groupId: config.id,
                        state: 'omit',
                        filter: {
                            ...filter,
                            color: getColor$1(index, filter.color),
                        },
                    },
                ])
                    .reduce((acc, [key, filter]) => {
                    const filterCounts = counts(config, filter.filter.full, items);
                    filter.counts = {
                        currentCount: filterCounts,
                        total: filterCounts,
                    };
                    filter.config = config;
                    acc[key] = filter;
                    return acc;
                }, {});
                return {
                    id: config.id,
                    label: config.label,
                    filters: currentFilters,
                    lastState: 'omit',
                };
            })
                .filter((group) => !!group);

            const parseProps = (props, state) => {
                const { items, filterConfigs } = props;
                const filterGroups = groups(filterConfigs, items);
                const currentFilters = filterGroups.reduce((acc, cur) => {
                    const group = Object.values(cur.filters);
                    acc.push(...group);
                    return acc;
                }, []);
                return {
                    ...state,
                    currentFilters,
                    filterGroups,
                    filterConfigs,
                    allItems: items,
                    filteredItems: items,
                };
            };
            const createFilterConfigs = (filterConfigs) => (filters) => filters ? filters.map((filter) => filterConfigs[filter]) : [];
            var filterBuilder = {
                parseProps,
                createFilterConfigs,
            };

            const hexToRGB = (hex) => {
                const h = parseInt('0x' + hex.slice(1));
                return {
                    r: h >> 16 & 255,
                    g: h >> 8 & 255,
                    b: h & 255,
                };
            };
            const getRGB = (color) => {
                if (!color) {
                    return {
                        r: 0,
                        g: 0,
                        b: 0,
                    };
                }
                const match = color.match(/^rgba?\((\d+),\s*(\d+),\s*(\d+)(?:,\s*(\d+(?:\.\d+)?))?\)$/);
                if (color.match(/^rgb/) && match) {
                    return {
                        r: Number(match[1]),
                        g: Number(match[2]),
                        b: Number(match[3]),
                    };
                }
                return hexToRGB(color);
            };

            const alpha = (color, alpha) => {
                const { r, g, b } = !color || typeof color === 'string' ? getRGB(color) : color;
                return `rgba(${r}, ${g}, ${b}, ${alpha || 1})`;
            };

            var reactIs_development = createCommonjsModule(function (module, exports) {



            {
              (function() {

            // The Symbol used to tag the ReactElement-like types. If there is no native Symbol
            // nor polyfill, then a plain number is used for performance.
            var hasSymbol = typeof Symbol === 'function' && Symbol.for;
            var REACT_ELEMENT_TYPE = hasSymbol ? Symbol.for('react.element') : 0xeac7;
            var REACT_PORTAL_TYPE = hasSymbol ? Symbol.for('react.portal') : 0xeaca;
            var REACT_FRAGMENT_TYPE = hasSymbol ? Symbol.for('react.fragment') : 0xeacb;
            var REACT_STRICT_MODE_TYPE = hasSymbol ? Symbol.for('react.strict_mode') : 0xeacc;
            var REACT_PROFILER_TYPE = hasSymbol ? Symbol.for('react.profiler') : 0xead2;
            var REACT_PROVIDER_TYPE = hasSymbol ? Symbol.for('react.provider') : 0xeacd;
            var REACT_CONTEXT_TYPE = hasSymbol ? Symbol.for('react.context') : 0xeace; // TODO: We don't use AsyncMode or ConcurrentMode anymore. They were temporary
            // (unstable) APIs that have been removed. Can we remove the symbols?

            var REACT_ASYNC_MODE_TYPE = hasSymbol ? Symbol.for('react.async_mode') : 0xeacf;
            var REACT_CONCURRENT_MODE_TYPE = hasSymbol ? Symbol.for('react.concurrent_mode') : 0xeacf;
            var REACT_FORWARD_REF_TYPE = hasSymbol ? Symbol.for('react.forward_ref') : 0xead0;
            var REACT_SUSPENSE_TYPE = hasSymbol ? Symbol.for('react.suspense') : 0xead1;
            var REACT_SUSPENSE_LIST_TYPE = hasSymbol ? Symbol.for('react.suspense_list') : 0xead8;
            var REACT_MEMO_TYPE = hasSymbol ? Symbol.for('react.memo') : 0xead3;
            var REACT_LAZY_TYPE = hasSymbol ? Symbol.for('react.lazy') : 0xead4;
            var REACT_BLOCK_TYPE = hasSymbol ? Symbol.for('react.block') : 0xead9;
            var REACT_FUNDAMENTAL_TYPE = hasSymbol ? Symbol.for('react.fundamental') : 0xead5;
            var REACT_RESPONDER_TYPE = hasSymbol ? Symbol.for('react.responder') : 0xead6;
            var REACT_SCOPE_TYPE = hasSymbol ? Symbol.for('react.scope') : 0xead7;

            function isValidElementType(type) {
              return typeof type === 'string' || typeof type === 'function' || // Note: its typeof might be other than 'symbol' or 'number' if it's a polyfill.
              type === REACT_FRAGMENT_TYPE || type === REACT_CONCURRENT_MODE_TYPE || type === REACT_PROFILER_TYPE || type === REACT_STRICT_MODE_TYPE || type === REACT_SUSPENSE_TYPE || type === REACT_SUSPENSE_LIST_TYPE || typeof type === 'object' && type !== null && (type.$$typeof === REACT_LAZY_TYPE || type.$$typeof === REACT_MEMO_TYPE || type.$$typeof === REACT_PROVIDER_TYPE || type.$$typeof === REACT_CONTEXT_TYPE || type.$$typeof === REACT_FORWARD_REF_TYPE || type.$$typeof === REACT_FUNDAMENTAL_TYPE || type.$$typeof === REACT_RESPONDER_TYPE || type.$$typeof === REACT_SCOPE_TYPE || type.$$typeof === REACT_BLOCK_TYPE);
            }

            function typeOf(object) {
              if (typeof object === 'object' && object !== null) {
                var $$typeof = object.$$typeof;

                switch ($$typeof) {
                  case REACT_ELEMENT_TYPE:
                    var type = object.type;

                    switch (type) {
                      case REACT_ASYNC_MODE_TYPE:
                      case REACT_CONCURRENT_MODE_TYPE:
                      case REACT_FRAGMENT_TYPE:
                      case REACT_PROFILER_TYPE:
                      case REACT_STRICT_MODE_TYPE:
                      case REACT_SUSPENSE_TYPE:
                        return type;

                      default:
                        var $$typeofType = type && type.$$typeof;

                        switch ($$typeofType) {
                          case REACT_CONTEXT_TYPE:
                          case REACT_FORWARD_REF_TYPE:
                          case REACT_LAZY_TYPE:
                          case REACT_MEMO_TYPE:
                          case REACT_PROVIDER_TYPE:
                            return $$typeofType;

                          default:
                            return $$typeof;
                        }

                    }

                  case REACT_PORTAL_TYPE:
                    return $$typeof;
                }
              }

              return undefined;
            } // AsyncMode is deprecated along with isAsyncMode

            var AsyncMode = REACT_ASYNC_MODE_TYPE;
            var ConcurrentMode = REACT_CONCURRENT_MODE_TYPE;
            var ContextConsumer = REACT_CONTEXT_TYPE;
            var ContextProvider = REACT_PROVIDER_TYPE;
            var Element = REACT_ELEMENT_TYPE;
            var ForwardRef = REACT_FORWARD_REF_TYPE;
            var Fragment = REACT_FRAGMENT_TYPE;
            var Lazy = REACT_LAZY_TYPE;
            var Memo = REACT_MEMO_TYPE;
            var Portal = REACT_PORTAL_TYPE;
            var Profiler = REACT_PROFILER_TYPE;
            var StrictMode = REACT_STRICT_MODE_TYPE;
            var Suspense = REACT_SUSPENSE_TYPE;
            var hasWarnedAboutDeprecatedIsAsyncMode = false; // AsyncMode should be deprecated

            function isAsyncMode(object) {
              {
                if (!hasWarnedAboutDeprecatedIsAsyncMode) {
                  hasWarnedAboutDeprecatedIsAsyncMode = true; // Using console['warn'] to evade Babel and ESLint

                  console['warn']('The ReactIs.isAsyncMode() alias has been deprecated, ' + 'and will be removed in React 17+. Update your code to use ' + 'ReactIs.isConcurrentMode() instead. It has the exact same API.');
                }
              }

              return isConcurrentMode(object) || typeOf(object) === REACT_ASYNC_MODE_TYPE;
            }
            function isConcurrentMode(object) {
              return typeOf(object) === REACT_CONCURRENT_MODE_TYPE;
            }
            function isContextConsumer(object) {
              return typeOf(object) === REACT_CONTEXT_TYPE;
            }
            function isContextProvider(object) {
              return typeOf(object) === REACT_PROVIDER_TYPE;
            }
            function isElement(object) {
              return typeof object === 'object' && object !== null && object.$$typeof === REACT_ELEMENT_TYPE;
            }
            function isForwardRef(object) {
              return typeOf(object) === REACT_FORWARD_REF_TYPE;
            }
            function isFragment(object) {
              return typeOf(object) === REACT_FRAGMENT_TYPE;
            }
            function isLazy(object) {
              return typeOf(object) === REACT_LAZY_TYPE;
            }
            function isMemo(object) {
              return typeOf(object) === REACT_MEMO_TYPE;
            }
            function isPortal(object) {
              return typeOf(object) === REACT_PORTAL_TYPE;
            }
            function isProfiler(object) {
              return typeOf(object) === REACT_PROFILER_TYPE;
            }
            function isStrictMode(object) {
              return typeOf(object) === REACT_STRICT_MODE_TYPE;
            }
            function isSuspense(object) {
              return typeOf(object) === REACT_SUSPENSE_TYPE;
            }

            exports.AsyncMode = AsyncMode;
            exports.ConcurrentMode = ConcurrentMode;
            exports.ContextConsumer = ContextConsumer;
            exports.ContextProvider = ContextProvider;
            exports.Element = Element;
            exports.ForwardRef = ForwardRef;
            exports.Fragment = Fragment;
            exports.Lazy = Lazy;
            exports.Memo = Memo;
            exports.Portal = Portal;
            exports.Profiler = Profiler;
            exports.StrictMode = StrictMode;
            exports.Suspense = Suspense;
            exports.isAsyncMode = isAsyncMode;
            exports.isConcurrentMode = isConcurrentMode;
            exports.isContextConsumer = isContextConsumer;
            exports.isContextProvider = isContextProvider;
            exports.isElement = isElement;
            exports.isForwardRef = isForwardRef;
            exports.isFragment = isFragment;
            exports.isLazy = isLazy;
            exports.isMemo = isMemo;
            exports.isPortal = isPortal;
            exports.isProfiler = isProfiler;
            exports.isStrictMode = isStrictMode;
            exports.isSuspense = isSuspense;
            exports.isValidElementType = isValidElementType;
            exports.typeOf = typeOf;
              })();
            }
            });

            var reactIs = createCommonjsModule(function (module) {

            {
              module.exports = reactIs_development;
            }
            });

            function stylis_min (W) {
              function M(d, c, e, h, a) {
                for (var m = 0, b = 0, v = 0, n = 0, q, g, x = 0, K = 0, k, u = k = q = 0, l = 0, r = 0, I = 0, t = 0, B = e.length, J = B - 1, y, f = '', p = '', F = '', G = '', C; l < B;) {
                  g = e.charCodeAt(l);
                  l === J && 0 !== b + n + v + m && (0 !== b && (g = 47 === b ? 10 : 47), n = v = m = 0, B++, J++);

                  if (0 === b + n + v + m) {
                    if (l === J && (0 < r && (f = f.replace(N, '')), 0 < f.trim().length)) {
                      switch (g) {
                        case 32:
                        case 9:
                        case 59:
                        case 13:
                        case 10:
                          break;

                        default:
                          f += e.charAt(l);
                      }

                      g = 59;
                    }

                    switch (g) {
                      case 123:
                        f = f.trim();
                        q = f.charCodeAt(0);
                        k = 1;

                        for (t = ++l; l < B;) {
                          switch (g = e.charCodeAt(l)) {
                            case 123:
                              k++;
                              break;

                            case 125:
                              k--;
                              break;

                            case 47:
                              switch (g = e.charCodeAt(l + 1)) {
                                case 42:
                                case 47:
                                  a: {
                                    for (u = l + 1; u < J; ++u) {
                                      switch (e.charCodeAt(u)) {
                                        case 47:
                                          if (42 === g && 42 === e.charCodeAt(u - 1) && l + 2 !== u) {
                                            l = u + 1;
                                            break a;
                                          }

                                          break;

                                        case 10:
                                          if (47 === g) {
                                            l = u + 1;
                                            break a;
                                          }

                                      }
                                    }

                                    l = u;
                                  }

                              }

                              break;

                            case 91:
                              g++;

                            case 40:
                              g++;

                            case 34:
                            case 39:
                              for (; l++ < J && e.charCodeAt(l) !== g;) {
                              }

                          }

                          if (0 === k) break;
                          l++;
                        }

                        k = e.substring(t, l);
                        0 === q && (q = (f = f.replace(ca, '').trim()).charCodeAt(0));

                        switch (q) {
                          case 64:
                            0 < r && (f = f.replace(N, ''));
                            g = f.charCodeAt(1);

                            switch (g) {
                              case 100:
                              case 109:
                              case 115:
                              case 45:
                                r = c;
                                break;

                              default:
                                r = O;
                            }

                            k = M(c, r, k, g, a + 1);
                            t = k.length;
                            0 < A && (r = X(O, f, I), C = H(3, k, r, c, D, z, t, g, a, h), f = r.join(''), void 0 !== C && 0 === (t = (k = C.trim()).length) && (g = 0, k = ''));
                            if (0 < t) switch (g) {
                              case 115:
                                f = f.replace(da, ea);

                              case 100:
                              case 109:
                              case 45:
                                k = f + '{' + k + '}';
                                break;

                              case 107:
                                f = f.replace(fa, '$1 $2');
                                k = f + '{' + k + '}';
                                k = 1 === w || 2 === w && L('@' + k, 3) ? '@-webkit-' + k + '@' + k : '@' + k;
                                break;

                              default:
                                k = f + k, 112 === h && (k = (p += k, ''));
                            } else k = '';
                            break;

                          default:
                            k = M(c, X(c, f, I), k, h, a + 1);
                        }

                        F += k;
                        k = I = r = u = q = 0;
                        f = '';
                        g = e.charCodeAt(++l);
                        break;

                      case 125:
                      case 59:
                        f = (0 < r ? f.replace(N, '') : f).trim();
                        if (1 < (t = f.length)) switch (0 === u && (q = f.charCodeAt(0), 45 === q || 96 < q && 123 > q) && (t = (f = f.replace(' ', ':')).length), 0 < A && void 0 !== (C = H(1, f, c, d, D, z, p.length, h, a, h)) && 0 === (t = (f = C.trim()).length) && (f = '\x00\x00'), q = f.charCodeAt(0), g = f.charCodeAt(1), q) {
                          case 0:
                            break;

                          case 64:
                            if (105 === g || 99 === g) {
                              G += f + e.charAt(l);
                              break;
                            }

                          default:
                            58 !== f.charCodeAt(t - 1) && (p += P(f, q, g, f.charCodeAt(2)));
                        }
                        I = r = u = q = 0;
                        f = '';
                        g = e.charCodeAt(++l);
                    }
                  }

                  switch (g) {
                    case 13:
                    case 10:
                      47 === b ? b = 0 : 0 === 1 + q && 107 !== h && 0 < f.length && (r = 1, f += '\x00');
                      0 < A * Y && H(0, f, c, d, D, z, p.length, h, a, h);
                      z = 1;
                      D++;
                      break;

                    case 59:
                    case 125:
                      if (0 === b + n + v + m) {
                        z++;
                        break;
                      }

                    default:
                      z++;
                      y = e.charAt(l);

                      switch (g) {
                        case 9:
                        case 32:
                          if (0 === n + m + b) switch (x) {
                            case 44:
                            case 58:
                            case 9:
                            case 32:
                              y = '';
                              break;

                            default:
                              32 !== g && (y = ' ');
                          }
                          break;

                        case 0:
                          y = '\\0';
                          break;

                        case 12:
                          y = '\\f';
                          break;

                        case 11:
                          y = '\\v';
                          break;

                        case 38:
                          0 === n + b + m && (r = I = 1, y = '\f' + y);
                          break;

                        case 108:
                          if (0 === n + b + m + E && 0 < u) switch (l - u) {
                            case 2:
                              112 === x && 58 === e.charCodeAt(l - 3) && (E = x);

                            case 8:
                              111 === K && (E = K);
                          }
                          break;

                        case 58:
                          0 === n + b + m && (u = l);
                          break;

                        case 44:
                          0 === b + v + n + m && (r = 1, y += '\r');
                          break;

                        case 34:
                        case 39:
                          0 === b && (n = n === g ? 0 : 0 === n ? g : n);
                          break;

                        case 91:
                          0 === n + b + v && m++;
                          break;

                        case 93:
                          0 === n + b + v && m--;
                          break;

                        case 41:
                          0 === n + b + m && v--;
                          break;

                        case 40:
                          if (0 === n + b + m) {
                            if (0 === q) switch (2 * x + 3 * K) {
                              case 533:
                                break;

                              default:
                                q = 1;
                            }
                            v++;
                          }

                          break;

                        case 64:
                          0 === b + v + n + m + u + k && (k = 1);
                          break;

                        case 42:
                        case 47:
                          if (!(0 < n + m + v)) switch (b) {
                            case 0:
                              switch (2 * g + 3 * e.charCodeAt(l + 1)) {
                                case 235:
                                  b = 47;
                                  break;

                                case 220:
                                  t = l, b = 42;
                              }

                              break;

                            case 42:
                              47 === g && 42 === x && t + 2 !== l && (33 === e.charCodeAt(t + 2) && (p += e.substring(t, l + 1)), y = '', b = 0);
                          }
                      }

                      0 === b && (f += y);
                  }

                  K = x;
                  x = g;
                  l++;
                }

                t = p.length;

                if (0 < t) {
                  r = c;
                  if (0 < A && (C = H(2, p, r, d, D, z, t, h, a, h), void 0 !== C && 0 === (p = C).length)) return G + p + F;
                  p = r.join(',') + '{' + p + '}';

                  if (0 !== w * E) {
                    2 !== w || L(p, 2) || (E = 0);

                    switch (E) {
                      case 111:
                        p = p.replace(ha, ':-moz-$1') + p;
                        break;

                      case 112:
                        p = p.replace(Q, '::-webkit-input-$1') + p.replace(Q, '::-moz-$1') + p.replace(Q, ':-ms-input-$1') + p;
                    }

                    E = 0;
                  }
                }

                return G + p + F;
              }

              function X(d, c, e) {
                var h = c.trim().split(ia);
                c = h;
                var a = h.length,
                    m = d.length;

                switch (m) {
                  case 0:
                  case 1:
                    var b = 0;

                    for (d = 0 === m ? '' : d[0] + ' '; b < a; ++b) {
                      c[b] = Z(d, c[b], e).trim();
                    }

                    break;

                  default:
                    var v = b = 0;

                    for (c = []; b < a; ++b) {
                      for (var n = 0; n < m; ++n) {
                        c[v++] = Z(d[n] + ' ', h[b], e).trim();
                      }
                    }

                }

                return c;
              }

              function Z(d, c, e) {
                var h = c.charCodeAt(0);
                33 > h && (h = (c = c.trim()).charCodeAt(0));

                switch (h) {
                  case 38:
                    return c.replace(F, '$1' + d.trim());

                  case 58:
                    return d.trim() + c.replace(F, '$1' + d.trim());

                  default:
                    if (0 < 1 * e && 0 < c.indexOf('\f')) return c.replace(F, (58 === d.charCodeAt(0) ? '' : '$1') + d.trim());
                }

                return d + c;
              }

              function P(d, c, e, h) {
                var a = d + ';',
                    m = 2 * c + 3 * e + 4 * h;

                if (944 === m) {
                  d = a.indexOf(':', 9) + 1;
                  var b = a.substring(d, a.length - 1).trim();
                  b = a.substring(0, d).trim() + b + ';';
                  return 1 === w || 2 === w && L(b, 1) ? '-webkit-' + b + b : b;
                }

                if (0 === w || 2 === w && !L(a, 1)) return a;

                switch (m) {
                  case 1015:
                    return 97 === a.charCodeAt(10) ? '-webkit-' + a + a : a;

                  case 951:
                    return 116 === a.charCodeAt(3) ? '-webkit-' + a + a : a;

                  case 963:
                    return 110 === a.charCodeAt(5) ? '-webkit-' + a + a : a;

                  case 1009:
                    if (100 !== a.charCodeAt(4)) break;

                  case 969:
                  case 942:
                    return '-webkit-' + a + a;

                  case 978:
                    return '-webkit-' + a + '-moz-' + a + a;

                  case 1019:
                  case 983:
                    return '-webkit-' + a + '-moz-' + a + '-ms-' + a + a;

                  case 883:
                    if (45 === a.charCodeAt(8)) return '-webkit-' + a + a;
                    if (0 < a.indexOf('image-set(', 11)) return a.replace(ja, '$1-webkit-$2') + a;
                    break;

                  case 932:
                    if (45 === a.charCodeAt(4)) switch (a.charCodeAt(5)) {
                      case 103:
                        return '-webkit-box-' + a.replace('-grow', '') + '-webkit-' + a + '-ms-' + a.replace('grow', 'positive') + a;

                      case 115:
                        return '-webkit-' + a + '-ms-' + a.replace('shrink', 'negative') + a;

                      case 98:
                        return '-webkit-' + a + '-ms-' + a.replace('basis', 'preferred-size') + a;
                    }
                    return '-webkit-' + a + '-ms-' + a + a;

                  case 964:
                    return '-webkit-' + a + '-ms-flex-' + a + a;

                  case 1023:
                    if (99 !== a.charCodeAt(8)) break;
                    b = a.substring(a.indexOf(':', 15)).replace('flex-', '').replace('space-between', 'justify');
                    return '-webkit-box-pack' + b + '-webkit-' + a + '-ms-flex-pack' + b + a;

                  case 1005:
                    return ka.test(a) ? a.replace(aa, ':-webkit-') + a.replace(aa, ':-moz-') + a : a;

                  case 1e3:
                    b = a.substring(13).trim();
                    c = b.indexOf('-') + 1;

                    switch (b.charCodeAt(0) + b.charCodeAt(c)) {
                      case 226:
                        b = a.replace(G, 'tb');
                        break;

                      case 232:
                        b = a.replace(G, 'tb-rl');
                        break;

                      case 220:
                        b = a.replace(G, 'lr');
                        break;

                      default:
                        return a;
                    }

                    return '-webkit-' + a + '-ms-' + b + a;

                  case 1017:
                    if (-1 === a.indexOf('sticky', 9)) break;

                  case 975:
                    c = (a = d).length - 10;
                    b = (33 === a.charCodeAt(c) ? a.substring(0, c) : a).substring(d.indexOf(':', 7) + 1).trim();

                    switch (m = b.charCodeAt(0) + (b.charCodeAt(7) | 0)) {
                      case 203:
                        if (111 > b.charCodeAt(8)) break;

                      case 115:
                        a = a.replace(b, '-webkit-' + b) + ';' + a;
                        break;

                      case 207:
                      case 102:
                        a = a.replace(b, '-webkit-' + (102 < m ? 'inline-' : '') + 'box') + ';' + a.replace(b, '-webkit-' + b) + ';' + a.replace(b, '-ms-' + b + 'box') + ';' + a;
                    }

                    return a + ';';

                  case 938:
                    if (45 === a.charCodeAt(5)) switch (a.charCodeAt(6)) {
                      case 105:
                        return b = a.replace('-items', ''), '-webkit-' + a + '-webkit-box-' + b + '-ms-flex-' + b + a;

                      case 115:
                        return '-webkit-' + a + '-ms-flex-item-' + a.replace(ba, '') + a;

                      default:
                        return '-webkit-' + a + '-ms-flex-line-pack' + a.replace('align-content', '').replace(ba, '') + a;
                    }
                    break;

                  case 973:
                  case 989:
                    if (45 !== a.charCodeAt(3) || 122 === a.charCodeAt(4)) break;

                  case 931:
                  case 953:
                    if (!0 === la.test(d)) return 115 === (b = d.substring(d.indexOf(':') + 1)).charCodeAt(0) ? P(d.replace('stretch', 'fill-available'), c, e, h).replace(':fill-available', ':stretch') : a.replace(b, '-webkit-' + b) + a.replace(b, '-moz-' + b.replace('fill-', '')) + a;
                    break;

                  case 962:
                    if (a = '-webkit-' + a + (102 === a.charCodeAt(5) ? '-ms-' + a : '') + a, 211 === e + h && 105 === a.charCodeAt(13) && 0 < a.indexOf('transform', 10)) return a.substring(0, a.indexOf(';', 27) + 1).replace(ma, '$1-webkit-$2') + a;
                }

                return a;
              }

              function L(d, c) {
                var e = d.indexOf(1 === c ? ':' : '{'),
                    h = d.substring(0, 3 !== c ? e : 10);
                e = d.substring(e + 1, d.length - 1);
                return R(2 !== c ? h : h.replace(na, '$1'), e, c);
              }

              function ea(d, c) {
                var e = P(c, c.charCodeAt(0), c.charCodeAt(1), c.charCodeAt(2));
                return e !== c + ';' ? e.replace(oa, ' or ($1)').substring(4) : '(' + c + ')';
              }

              function H(d, c, e, h, a, m, b, v, n, q) {
                for (var g = 0, x = c, w; g < A; ++g) {
                  switch (w = S[g].call(B, d, x, e, h, a, m, b, v, n, q)) {
                    case void 0:
                    case !1:
                    case !0:
                    case null:
                      break;

                    default:
                      x = w;
                  }
                }

                if (x !== c) return x;
              }

              function T(d) {
                switch (d) {
                  case void 0:
                  case null:
                    A = S.length = 0;
                    break;

                  default:
                    if ('function' === typeof d) S[A++] = d;else if ('object' === typeof d) for (var c = 0, e = d.length; c < e; ++c) {
                      T(d[c]);
                    } else Y = !!d | 0;
                }

                return T;
              }

              function U(d) {
                d = d.prefix;
                void 0 !== d && (R = null, d ? 'function' !== typeof d ? w = 1 : (w = 2, R = d) : w = 0);
                return U;
              }

              function B(d, c) {
                var e = d;
                33 > e.charCodeAt(0) && (e = e.trim());
                V = e;
                e = [V];

                if (0 < A) {
                  var h = H(-1, c, e, e, D, z, 0, 0, 0, 0);
                  void 0 !== h && 'string' === typeof h && (c = h);
                }

                var a = M(O, e, c, 0, 0);
                0 < A && (h = H(-2, a, e, e, D, z, a.length, 0, 0, 0), void 0 !== h && (a = h));
                V = '';
                E = 0;
                z = D = 1;
                return a;
              }

              var ca = /^\0+/g,
                  N = /[\0\r\f]/g,
                  aa = /: */g,
                  ka = /zoo|gra/,
                  ma = /([,: ])(transform)/g,
                  ia = /,\r+?/g,
                  F = /([\t\r\n ])*\f?&/g,
                  fa = /@(k\w+)\s*(\S*)\s*/,
                  Q = /::(place)/g,
                  ha = /:(read-only)/g,
                  G = /[svh]\w+-[tblr]{2}/,
                  da = /\(\s*(.*)\s*\)/g,
                  oa = /([\s\S]*?);/g,
                  ba = /-self|flex-/g,
                  na = /[^]*?(:[rp][el]a[\w-]+)[^]*/,
                  la = /stretch|:\s*\w+\-(?:conte|avail)/,
                  ja = /([^-])(image-set\()/,
                  z = 1,
                  D = 1,
                  E = 0,
                  w = 1,
                  O = [],
                  S = [],
                  A = 0,
                  R = null,
                  Y = 0,
                  V = '';
              B.use = T;
              B.set = U;
              void 0 !== W && U(W);
              return B;
            }

            var unitlessKeys = {
              animationIterationCount: 1,
              borderImageOutset: 1,
              borderImageSlice: 1,
              borderImageWidth: 1,
              boxFlex: 1,
              boxFlexGroup: 1,
              boxOrdinalGroup: 1,
              columnCount: 1,
              columns: 1,
              flex: 1,
              flexGrow: 1,
              flexPositive: 1,
              flexShrink: 1,
              flexNegative: 1,
              flexOrder: 1,
              gridRow: 1,
              gridRowEnd: 1,
              gridRowSpan: 1,
              gridRowStart: 1,
              gridColumn: 1,
              gridColumnEnd: 1,
              gridColumnSpan: 1,
              gridColumnStart: 1,
              msGridRow: 1,
              msGridRowSpan: 1,
              msGridColumn: 1,
              msGridColumnSpan: 1,
              fontWeight: 1,
              lineHeight: 1,
              opacity: 1,
              order: 1,
              orphans: 1,
              tabSize: 1,
              widows: 1,
              zIndex: 1,
              zoom: 1,
              WebkitLineClamp: 1,
              // SVG-related properties
              fillOpacity: 1,
              floodOpacity: 1,
              stopOpacity: 1,
              strokeDasharray: 1,
              strokeDashoffset: 1,
              strokeMiterlimit: 1,
              strokeOpacity: 1,
              strokeWidth: 1
            };

            function memoize$1(fn) {
              var cache = {};
              return function (arg) {
                if (cache[arg] === undefined) cache[arg] = fn(arg);
                return cache[arg];
              };
            }

            var reactPropsRegex = /^((children|dangerouslySetInnerHTML|key|ref|autoFocus|defaultValue|defaultChecked|innerHTML|suppressContentEditableWarning|suppressHydrationWarning|valueLink|accept|acceptCharset|accessKey|action|allow|allowUserMedia|allowPaymentRequest|allowFullScreen|allowTransparency|alt|async|autoComplete|autoPlay|capture|cellPadding|cellSpacing|challenge|charSet|checked|cite|classID|className|cols|colSpan|content|contentEditable|contextMenu|controls|controlsList|coords|crossOrigin|data|dateTime|decoding|default|defer|dir|disabled|disablePictureInPicture|download|draggable|encType|form|formAction|formEncType|formMethod|formNoValidate|formTarget|frameBorder|headers|height|hidden|high|href|hrefLang|htmlFor|httpEquiv|id|inputMode|integrity|is|keyParams|keyType|kind|label|lang|list|loading|loop|low|marginHeight|marginWidth|max|maxLength|media|mediaGroup|method|min|minLength|multiple|muted|name|nonce|noValidate|open|optimum|pattern|placeholder|playsInline|poster|preload|profile|radioGroup|readOnly|referrerPolicy|rel|required|reversed|role|rows|rowSpan|sandbox|scope|scoped|scrolling|seamless|selected|shape|size|sizes|slot|span|spellCheck|src|srcDoc|srcLang|srcSet|start|step|style|summary|tabIndex|target|title|type|useMap|value|width|wmode|wrap|about|datatype|inlist|prefix|property|resource|typeof|vocab|autoCapitalize|autoCorrect|autoSave|color|inert|itemProp|itemScope|itemType|itemID|itemRef|on|results|security|unselectable|accentHeight|accumulate|additive|alignmentBaseline|allowReorder|alphabetic|amplitude|arabicForm|ascent|attributeName|attributeType|autoReverse|azimuth|baseFrequency|baselineShift|baseProfile|bbox|begin|bias|by|calcMode|capHeight|clip|clipPathUnits|clipPath|clipRule|colorInterpolation|colorInterpolationFilters|colorProfile|colorRendering|contentScriptType|contentStyleType|cursor|cx|cy|d|decelerate|descent|diffuseConstant|direction|display|divisor|dominantBaseline|dur|dx|dy|edgeMode|elevation|enableBackground|end|exponent|externalResourcesRequired|fill|fillOpacity|fillRule|filter|filterRes|filterUnits|floodColor|floodOpacity|focusable|fontFamily|fontSize|fontSizeAdjust|fontStretch|fontStyle|fontVariant|fontWeight|format|from|fr|fx|fy|g1|g2|glyphName|glyphOrientationHorizontal|glyphOrientationVertical|glyphRef|gradientTransform|gradientUnits|hanging|horizAdvX|horizOriginX|ideographic|imageRendering|in|in2|intercept|k|k1|k2|k3|k4|kernelMatrix|kernelUnitLength|kerning|keyPoints|keySplines|keyTimes|lengthAdjust|letterSpacing|lightingColor|limitingConeAngle|local|markerEnd|markerMid|markerStart|markerHeight|markerUnits|markerWidth|mask|maskContentUnits|maskUnits|mathematical|mode|numOctaves|offset|opacity|operator|order|orient|orientation|origin|overflow|overlinePosition|overlineThickness|panose1|paintOrder|pathLength|patternContentUnits|patternTransform|patternUnits|pointerEvents|points|pointsAtX|pointsAtY|pointsAtZ|preserveAlpha|preserveAspectRatio|primitiveUnits|r|radius|refX|refY|renderingIntent|repeatCount|repeatDur|requiredExtensions|requiredFeatures|restart|result|rotate|rx|ry|scale|seed|shapeRendering|slope|spacing|specularConstant|specularExponent|speed|spreadMethod|startOffset|stdDeviation|stemh|stemv|stitchTiles|stopColor|stopOpacity|strikethroughPosition|strikethroughThickness|string|stroke|strokeDasharray|strokeDashoffset|strokeLinecap|strokeLinejoin|strokeMiterlimit|strokeOpacity|strokeWidth|surfaceScale|systemLanguage|tableValues|targetX|targetY|textAnchor|textDecoration|textRendering|textLength|to|transform|u1|u2|underlinePosition|underlineThickness|unicode|unicodeBidi|unicodeRange|unitsPerEm|vAlphabetic|vHanging|vIdeographic|vMathematical|values|vectorEffect|version|vertAdvY|vertOriginX|vertOriginY|viewBox|viewTarget|visibility|widths|wordSpacing|writingMode|x|xHeight|x1|x2|xChannelSelector|xlinkActuate|xlinkArcrole|xlinkHref|xlinkRole|xlinkShow|xlinkTitle|xlinkType|xmlBase|xmlns|xmlnsXlink|xmlLang|xmlSpace|y|y1|y2|yChannelSelector|z|zoomAndPan|for|class|autofocus)|(([Dd][Aa][Tt][Aa]|[Aa][Rr][Ii][Aa]|x)-.*))$/; // https://esbench.com/bench/5bfee68a4cd7e6009ef61d23

            var index$1 = memoize$1(function (prop) {
              return reactPropsRegex.test(prop) || prop.charCodeAt(0) === 111
              /* o */
              && prop.charCodeAt(1) === 110
              /* n */
              && prop.charCodeAt(2) < 91;
            }
            /* Z+1 */
            );

            /**
             * Copyright 2015, Yahoo! Inc.
             * Copyrights licensed under the New BSD License. See the accompanying LICENSE file for terms.
             */
            var REACT_STATICS = {
              childContextTypes: true,
              contextType: true,
              contextTypes: true,
              defaultProps: true,
              displayName: true,
              getDefaultProps: true,
              getDerivedStateFromError: true,
              getDerivedStateFromProps: true,
              mixins: true,
              propTypes: true,
              type: true
            };
            var KNOWN_STATICS = {
              name: true,
              length: true,
              prototype: true,
              caller: true,
              callee: true,
              arguments: true,
              arity: true
            };
            var FORWARD_REF_STATICS = {
              '$$typeof': true,
              render: true,
              defaultProps: true,
              displayName: true,
              propTypes: true
            };
            var MEMO_STATICS = {
              '$$typeof': true,
              compare: true,
              defaultProps: true,
              displayName: true,
              propTypes: true,
              type: true
            };
            var TYPE_STATICS = {};
            TYPE_STATICS[reactIs.ForwardRef] = FORWARD_REF_STATICS;
            TYPE_STATICS[reactIs.Memo] = MEMO_STATICS;

            function getStatics(component) {
              // React v16.11 and below
              if (reactIs.isMemo(component)) {
                return MEMO_STATICS;
              } // React v16.12 and above


              return TYPE_STATICS[component['$$typeof']] || REACT_STATICS;
            }

            var defineProperty = Object.defineProperty;
            var getOwnPropertyNames = Object.getOwnPropertyNames;
            var getOwnPropertySymbols = Object.getOwnPropertySymbols;
            var getOwnPropertyDescriptor = Object.getOwnPropertyDescriptor;
            var getPrototypeOf = Object.getPrototypeOf;
            var objectPrototype = Object.prototype;
            function hoistNonReactStatics(targetComponent, sourceComponent, blacklist) {
              if (typeof sourceComponent !== 'string') {
                // don't hoist over string (html) components
                if (objectPrototype) {
                  var inheritedComponent = getPrototypeOf(sourceComponent);

                  if (inheritedComponent && inheritedComponent !== objectPrototype) {
                    hoistNonReactStatics(targetComponent, inheritedComponent, blacklist);
                  }
                }

                var keys = getOwnPropertyNames(sourceComponent);

                if (getOwnPropertySymbols) {
                  keys = keys.concat(getOwnPropertySymbols(sourceComponent));
                }

                var targetStatics = getStatics(targetComponent);
                var sourceStatics = getStatics(sourceComponent);

                for (var i = 0; i < keys.length; ++i) {
                  var key = keys[i];

                  if (!KNOWN_STATICS[key] && !(blacklist && blacklist[key]) && !(sourceStatics && sourceStatics[key]) && !(targetStatics && targetStatics[key])) {
                    var descriptor = getOwnPropertyDescriptor(sourceComponent, key);

                    try {
                      // Avoid failures from read-only properties
                      defineProperty(targetComponent, key, descriptor);
                    } catch (e) {}
                  }
                }
              }

              return targetComponent;
            }

            var hoistNonReactStatics_cjs = hoistNonReactStatics;

            function v$1(){return (v$1=Object.assign||function(e){for(var t=1;t<arguments.length;t++){var n=arguments[t];for(var r in n)Object.prototype.hasOwnProperty.call(n,r)&&(e[r]=n[r]);}return e}).apply(this,arguments)}var g$2=function(e,t){for(var n=[e[0]],r=0,o=t.length;r<o;r+=1)n.push(t[r],e[r+1]);return n},S$2=function(t){return null!==t&&"object"==typeof t&&"[object Object]"===(t.toString?t.toString():Object.prototype.toString.call(t))&&!reactIs.typeOf(t)},w$2=Object.freeze([]),E$3=Object.freeze({});function b$2(e){return "function"==typeof e}function _$1(e){return "string"==typeof e&&e||e.displayName||e.name||"Component"}function N(e){return e&&"string"==typeof e.styledComponentId}var A$1="undefined"!=typeof process&&(process.env.REACT_APP_SC_ATTR||process.env.SC_ATTR)||"data-styled",I$1="undefined"!=typeof window&&"HTMLElement"in window,P$1=Boolean("boolean"==typeof SC_DISABLE_SPEEDY?SC_DISABLE_SPEEDY:"undefined"!=typeof process&&void 0!==process.env.REACT_APP_SC_DISABLE_SPEEDY&&""!==process.env.REACT_APP_SC_DISABLE_SPEEDY?"false"!==process.env.REACT_APP_SC_DISABLE_SPEEDY&&process.env.REACT_APP_SC_DISABLE_SPEEDY:"undefined"!=typeof process&&void 0!==process.env.SC_DISABLE_SPEEDY&&""!==process.env.SC_DISABLE_SPEEDY?"false"!==process.env.SC_DISABLE_SPEEDY&&process.env.SC_DISABLE_SPEEDY:"production"!=="development"),O$2={},R$1={1:"Cannot create styled-component for component: %s.\n\n",2:"Can't collect styles once you've consumed a `ServerStyleSheet`'s styles! `ServerStyleSheet` is a one off instance for each server-side render cycle.\n\n- Are you trying to reuse it across renders?\n- Are you accidentally calling collectStyles twice?\n\n",3:"Streaming SSR is only supported in a Node.js environment; Please do not try to call this method in the browser.\n\n",4:"The `StyleSheetManager` expects a valid target or sheet prop!\n\n- Does this error occur on the client and is your target falsy?\n- Does this error occur on the server and is the sheet falsy?\n\n",5:"The clone method cannot be used on the client!\n\n- Are you running in a client-like environment on the server?\n- Are you trying to run SSR on the client?\n\n",6:"Trying to insert a new style tag, but the given Node is unmounted!\n\n- Are you using a custom target that isn't mounted?\n- Does your document not have a valid head element?\n- Have you accidentally removed a style tag manually?\n\n",7:'ThemeProvider: Please return an object from your "theme" prop function, e.g.\n\n```js\ntheme={() => ({})}\n```\n\n',8:'ThemeProvider: Please make your "theme" prop an object.\n\n',9:"Missing document `<head>`\n\n",10:"Cannot find a StyleSheet instance. Usually this happens if there are multiple copies of styled-components loaded at once. Check out this issue for how to troubleshoot and fix the common cases where this situation can happen: https://github.com/styled-components/styled-components/issues/1941#issuecomment-417862021\n\n",11:"_This error was replaced with a dev-time warning, it will be deleted for v4 final._ [createGlobalStyle] received children which will not be rendered. Please use the component without passing children elements.\n\n",12:"It seems you are interpolating a keyframe declaration (%s) into an untagged string. This was supported in styled-components v3, but is not longer supported in v4 as keyframes are now injected on-demand. Please wrap your string in the css\\`\\` helper which ensures the styles are injected correctly. See https://www.styled-components.com/docs/api#css\n\n",13:"%s is not a styled component and cannot be referred to via component selector. See https://www.styled-components.com/docs/advanced#referring-to-other-components for more details.\n\n",14:'ThemeProvider: "theme" prop is required.\n\n',15:"A stylis plugin has been supplied that is not named. We need a name for each plugin to be able to prevent styling collisions between different stylis configurations within the same app. Before you pass your plugin to `<StyleSheetManager stylisPlugins={[]}>`, please make sure each plugin is uniquely-named, e.g.\n\n```js\nObject.defineProperty(importedPlugin, 'name', { value: 'some-unique-name' });\n```\n\n",16:"Reached the limit of how many styled components may be created at group %s.\nYou may only create up to 1,073,741,824 components. If you're creating components dynamically,\nas for instance in your render method then you may be running into this limitation.\n\n",17:"CSSStyleSheet could not be found on HTMLStyleElement.\nHas styled-components' style tag been unmounted or altered by another script?\n"};function D$1(){for(var e=arguments.length<=0?void 0:arguments[0],t=[],n=1,r=arguments.length;n<r;n+=1)t.push(n<0||arguments.length<=n?void 0:arguments[n]);return t.forEach((function(t){e=e.replace(/%[a-z]/,t);})),e}function j$3(e){for(var t=arguments.length,n=new Array(t>1?t-1:0),r=1;r<t;r++)n[r-1]=arguments[r];throw new Error(D$1.apply(void 0,[R$1[e]].concat(n)).trim())}var T=function(){function e(e){this.groupSizes=new Uint32Array(512),this.length=512,this.tag=e;}var t=e.prototype;return t.indexOfGroup=function(e){for(var t=0,n=0;n<e;n++)t+=this.groupSizes[n];return t},t.insertRules=function(e,t){if(e>=this.groupSizes.length){for(var n=this.groupSizes,r=n.length,o=r;e>=o;)(o<<=1)<0&&j$3(16,""+e);this.groupSizes=new Uint32Array(o),this.groupSizes.set(n),this.length=o;for(var i=r;i<o;i++)this.groupSizes[i]=0;}for(var s=this.indexOfGroup(e+1),a=0,c=t.length;a<c;a++)this.tag.insertRule(s,t[a])&&(this.groupSizes[e]++,s++);},t.clearGroup=function(e){if(e<this.length){var t=this.groupSizes[e],n=this.indexOfGroup(e),r=n+t;this.groupSizes[e]=0;for(var o=n;o<r;o++)this.tag.deleteRule(n);}},t.getGroup=function(e){var t="";if(e>=this.length||0===this.groupSizes[e])return t;for(var n=this.groupSizes[e],r=this.indexOfGroup(e),o=r+n,i=r;i<o;i++)t+=this.tag.getRule(i)+"/*!sc*/\n";return t},e}(),k$2=new Map,x$2=new Map,V=1,B$1=function(e){if(k$2.has(e))return k$2.get(e);for(;x$2.has(V);)V++;var t=V++;return ((0|t)<0||t>1<<30)&&j$3(16,""+t),k$2.set(e,t),x$2.set(t,e),t},M$2=function(e){return x$2.get(e)},z$1=function(e,t){k$2.set(e,t),x$2.set(t,e);},L$1="style["+A$1+'][data-styled-version="5.3.0"]',G$1=new RegExp("^"+A$1+'\\.g(\\d+)\\[id="([\\w\\d-]+)"\\].*?"([^"]*)'),F$1=function(e,t,n){for(var r,o=n.split(","),i=0,s=o.length;i<s;i++)(r=o[i])&&e.registerName(t,r);},Y$1=function(e,t){for(var n=t.innerHTML.split("/*!sc*/\n"),r=[],o=0,i=n.length;o<i;o++){var s=n[o].trim();if(s){var a=s.match(G$1);if(a){var c=0|parseInt(a[1],10),u=a[2];0!==c&&(z$1(u,c),F$1(e,u,a[3]),e.getTag().insertRules(c,r)),r.length=0;}else r.push(s);}}},q$1=function(){return "undefined"!=typeof window&&void 0!==window.__webpack_nonce__?window.__webpack_nonce__:null},H$1=function(e){var t=document.head,n=e||t,r=document.createElement("style"),o=function(e){for(var t=e.childNodes,n=t.length;n>=0;n--){var r=t[n];if(r&&1===r.nodeType&&r.hasAttribute(A$1))return r}}(n),i=void 0!==o?o.nextSibling:null;r.setAttribute(A$1,"active"),r.setAttribute("data-styled-version","5.3.0");var s=q$1();return s&&r.setAttribute("nonce",s),n.insertBefore(r,i),r},$=function(){function e(e){var t=this.element=H$1(e);t.appendChild(document.createTextNode("")),this.sheet=function(e){if(e.sheet)return e.sheet;for(var t=document.styleSheets,n=0,r=t.length;n<r;n++){var o=t[n];if(o.ownerNode===e)return o}j$3(17);}(t),this.length=0;}var t=e.prototype;return t.insertRule=function(e,t){try{return this.sheet.insertRule(t,e),this.length++,!0}catch(e){return !1}},t.deleteRule=function(e){this.sheet.deleteRule(e),this.length--;},t.getRule=function(e){var t=this.sheet.cssRules[e];return void 0!==t&&"string"==typeof t.cssText?t.cssText:""},e}(),W$2=function(){function e(e){var t=this.element=H$1(e);this.nodes=t.childNodes,this.length=0;}var t=e.prototype;return t.insertRule=function(e,t){if(e<=this.length&&e>=0){var n=document.createTextNode(t),r=this.nodes[e];return this.element.insertBefore(n,r||null),this.length++,!0}return !1},t.deleteRule=function(e){this.element.removeChild(this.nodes[e]),this.length--;},t.getRule=function(e){return e<this.length?this.nodes[e].textContent:""},e}(),U$2=function(){function e(e){this.rules=[],this.length=0;}var t=e.prototype;return t.insertRule=function(e,t){return e<=this.length&&(this.rules.splice(e,0,t),this.length++,!0)},t.deleteRule=function(e){this.rules.splice(e,1),this.length--;},t.getRule=function(e){return e<this.length?this.rules[e]:""},e}(),J=I$1,X$1={isServer:!I$1,useCSSOMInjection:!P$1},Z$1=function(){function e(e,t,n){void 0===e&&(e=E$3),void 0===t&&(t={}),this.options=v$1({},X$1,{},e),this.gs=t,this.names=new Map(n),!this.options.isServer&&I$1&&J&&(J=!1,function(e){for(var t=document.querySelectorAll(L$1),n=0,r=t.length;n<r;n++){var o=t[n];o&&"active"!==o.getAttribute(A$1)&&(Y$1(e,o),o.parentNode&&o.parentNode.removeChild(o));}}(this));}e.registerId=function(e){return B$1(e)};var t=e.prototype;return t.reconstructWithOptions=function(t,n){return void 0===n&&(n=!0),new e(v$1({},this.options,{},t),this.gs,n&&this.names||void 0)},t.allocateGSInstance=function(e){return this.gs[e]=(this.gs[e]||0)+1},t.getTag=function(){return this.tag||(this.tag=(n=(t=this.options).isServer,r=t.useCSSOMInjection,o=t.target,e=n?new U$2(o):r?new $(o):new W$2(o),new T(e)));var e,t,n,r,o;},t.hasNameForId=function(e,t){return this.names.has(e)&&this.names.get(e).has(t)},t.registerName=function(e,t){if(B$1(e),this.names.has(e))this.names.get(e).add(t);else {var n=new Set;n.add(t),this.names.set(e,n);}},t.insertRules=function(e,t,n){this.registerName(e,t),this.getTag().insertRules(B$1(e),n);},t.clearNames=function(e){this.names.has(e)&&this.names.get(e).clear();},t.clearRules=function(e){this.getTag().clearGroup(B$1(e)),this.clearNames(e);},t.clearTag=function(){this.tag=void 0;},t.toString=function(){return function(e){for(var t=e.getTag(),n=t.length,r="",o=0;o<n;o++){var i=M$2(o);if(void 0!==i){var s=e.names.get(i),a=t.getGroup(o);if(void 0!==s&&0!==a.length){var c=A$1+".g"+o+'[id="'+i+'"]',u="";void 0!==s&&s.forEach((function(e){e.length>0&&(u+=e+",");})),r+=""+a+c+'{content:"'+u+'"}/*!sc*/\n';}}}return r}(this)},e}(),K=/(a)(d)/gi,Q$1=function(e){return String.fromCharCode(e+(e>25?39:97))};function ee(e){var t,n="";for(t=Math.abs(e);t>52;t=t/52|0)n=Q$1(t%52)+n;return (Q$1(t%52)+n).replace(K,"$1-$2")}var te=function(e,t){for(var n=t.length;n;)e=33*e^t.charCodeAt(--n);return e},ne=function(e){return te(5381,e)};function re(e){for(var t=0;t<e.length;t+=1){var n=e[t];if(b$2(n)&&!N(n))return !1}return !0}var oe=ne("5.3.0"),ie=function(){function e(e,t,n){this.rules=e,this.staticRulesId="",this.isStatic="production"==="development",this.componentId=t,this.baseHash=te(oe,t),this.baseStyle=n,Z$1.registerId(t);}return e.prototype.generateAndInjectStyles=function(e,t,n){var r=this.componentId,o=[];if(this.baseStyle&&o.push(this.baseStyle.generateAndInjectStyles(e,t,n)),this.isStatic&&!n.hash)if(this.staticRulesId&&t.hasNameForId(r,this.staticRulesId))o.push(this.staticRulesId);else {var i=Ne(this.rules,e,t,n).join(""),s=ee(te(this.baseHash,i.length)>>>0);if(!t.hasNameForId(r,s)){var a=n(i,"."+s,void 0,r);t.insertRules(r,s,a);}o.push(s),this.staticRulesId=s;}else {for(var c=this.rules.length,u=te(this.baseHash,n.hash),l="",d=0;d<c;d++){var h=this.rules[d];if("string"==typeof h)l+=h,(u=te(u,h+d));else if(h){var p=Ne(h,e,t,n),f=Array.isArray(p)?p.join(""):p;u=te(u,f+d),l+=f;}}if(l){var m=ee(u>>>0);if(!t.hasNameForId(r,m)){var y=n(l,"."+m,void 0,r);t.insertRules(r,m,y);}o.push(m);}}return o.join(" ")},e}(),se=/^\s*\/\/.*$/gm,ae=[":","[",".","#"];function ce(e){var t,n,r,o,i=void 0===e?E$3:e,s=i.options,a=void 0===s?E$3:s,c=i.plugins,u=void 0===c?w$2:c,l=new stylis_min(a),d=[],h=function(e){function t(t){if(t)try{e(t+"}");}catch(e){}}return function(n,r,o,i,s,a,c,u,l,d){switch(n){case 1:if(0===l&&64===r.charCodeAt(0))return e(r+";"),"";break;case 2:if(0===u)return r+"/*|*/";break;case 3:switch(u){case 102:case 112:return e(o[0]+r),"";default:return r+(0===d?"/*|*/":"")}case-2:r.split("/*|*/}").forEach(t);}}}((function(e){d.push(e);})),f=function(e,r,i){return 0===r&&-1!==ae.indexOf(i[n.length])||i.match(o)?e:"."+t};function m(e,i,s,a){void 0===a&&(a="&");var c=e.replace(se,""),u=i&&s?s+" "+i+" { "+c+" }":c;return t=a,n=i,r=new RegExp("\\"+n+"\\b","g"),o=new RegExp("(\\"+n+"\\b){2,}"),l(s||!i?"":i,u)}return l.use([].concat(u,[function(e,t,o){2===e&&o.length&&o[0].lastIndexOf(n)>0&&(o[0]=o[0].replace(r,f));},h,function(e){if(-2===e){var t=d;return d=[],t}}])),m.hash=u.length?u.reduce((function(e,t){return t.name||j$3(15),te(e,t.name)}),5381).toString():"",m}var ue=react.createContext();ue.Consumer;var de=react.createContext(),he=(de.Consumer,new Z$1),pe=ce();function fe(){return react.useContext(ue)||he}function me(){return react.useContext(de)||pe}var ve=function(){function e(e,t){var n=this;this.inject=function(e,t){void 0===t&&(t=pe);var r=n.name+t.hash;e.hasNameForId(n.id,r)||e.insertRules(n.id,r,t(n.rules,r,"@keyframes"));},this.toString=function(){return j$3(12,String(n.name))},this.name=e,this.id="sc-keyframes-"+e,this.rules=t;}return e.prototype.getName=function(e){return void 0===e&&(e=pe),this.name+e.hash},e}(),ge=/([A-Z])/,Se=/([A-Z])/g,we=/^ms-/,Ee=function(e){return "-"+e.toLowerCase()};function be(e){return ge.test(e)?e.replace(Se,Ee).replace(we,"-ms-"):e}var _e=function(e){return null==e||!1===e||""===e};function Ne(e,n,r,o){if(Array.isArray(e)){for(var i,s=[],a=0,c=e.length;a<c;a+=1)""!==(i=Ne(e[a],n,r,o))&&(Array.isArray(i)?s.push.apply(s,i):s.push(i));return s}if(_e(e))return "";if(N(e))return "."+e.styledComponentId;if(b$2(e)){if("function"!=typeof(l=e)||l.prototype&&l.prototype.isReactComponent||!n)return e;var u=e(n);return reactIs.isElement(u)&&console.warn(_$1(e)+" is not a styled component and cannot be referred to via component selector. See https://www.styled-components.com/docs/advanced#referring-to-other-components for more details."),Ne(u,n,r,o)}var l;return e instanceof ve?r?(e.inject(r,o),e.getName(o)):e:S$2(e)?function e(t,n){var r,o,i=[];for(var s in t)t.hasOwnProperty(s)&&!_e(t[s])&&(S$2(t[s])?i.push.apply(i,e(t[s],s)):b$2(t[s])?i.push(be(s)+":",t[s],";"):i.push(be(s)+": "+(r=s,null==(o=t[s])||"boolean"==typeof o||""===o?"":"number"!=typeof o||0===o||r in unitlessKeys?String(o).trim():o+"px")+";"));return n?[n+" {"].concat(i,["}"]):i}(e):e.toString()}function Ae(e){for(var t=arguments.length,n=new Array(t>1?t-1:0),r=1;r<t;r++)n[r-1]=arguments[r];return b$2(e)||S$2(e)?Ne(g$2(w$2,[e].concat(n))):0===n.length&&1===e.length&&"string"==typeof e[0]?e:Ne(g$2(e,n))}var Ce=/invalid hook call/i,Ie=new Set,Pe=function(e,t){{var n="The component "+e+(t?' with the id of "'+t+'"':"")+" has been created dynamically.\nYou may see this warning because you've called styled inside another component.\nTo resolve this only create new StyledComponents outside of any render method and function component.";try{react.useRef(),Ie.has(n)||(console.warn(n),Ie.add(n));}catch(e){Ce.test(e.message)&&Ie.delete(n);}}},Oe=function(e,t,n){return void 0===n&&(n=E$3),e.theme!==n.theme&&e.theme||t||n.theme},Re=/[!"#$%&'()*+,./:;<=>?@[\\\]^`{|}~-]+/g,De=/(^-|-$)/g;function je(e){return e.replace(Re,"-").replace(De,"")}var Te=function(e){return ee(ne(e)>>>0)};function ke(e){return "string"==typeof e&&(e.charAt(0)===e.charAt(0).toLowerCase())}var xe=function(e){return "function"==typeof e||"object"==typeof e&&null!==e&&!Array.isArray(e)},Ve=function(e){return "__proto__"!==e&&"constructor"!==e&&"prototype"!==e};function Be(e,t,n){var r=e[n];xe(t)&&xe(r)?Me(r,t):e[n]=t;}function Me(e){for(var t=arguments.length,n=new Array(t>1?t-1:0),r=1;r<t;r++)n[r-1]=arguments[r];for(var o=0,i=n;o<i.length;o++){var s=i[o];if(xe(s))for(var a in s)Ve(a)&&Be(e,s[a],a);}return e}var ze=react.createContext();ze.Consumer;function Ge(e){var t=react.useContext(ze),n=react.useMemo((function(){return function(e,t){if(!e)return j$3(14);if(b$2(e)){var n=e(t);return null!==n&&!Array.isArray(n)&&"object"==typeof n?n:j$3(7)}return Array.isArray(e)||"object"!=typeof e?j$3(8):t?v$1({},t,{},e):e}(e.theme,t)}),[e.theme,t]);return e.children?react.createElement(ze.Provider,{value:n},e.children):null}var Fe={};function Ye(e,t,n){var o=N(e),s=!ke(e),a=t.attrs,c=void 0===a?w$2:a,d=t.componentId,h=void 0===d?function(e,t){var n="string"!=typeof e?"sc":je(e);Fe[n]=(Fe[n]||0)+1;var r=n+"-"+Te("5.3.0"+n+Fe[n]);return t?t+"-"+r:r}(t.displayName,t.parentComponentId):d,p=t.displayName,f=void 0===p?function(e){return ke(e)?"styled."+e:"Styled("+_$1(e)+")"}(e):p,g=t.displayName&&t.componentId?je(t.displayName)+"-"+t.componentId:t.componentId||h,S=o&&e.attrs?Array.prototype.concat(e.attrs,c).filter(Boolean):c,A=t.shouldForwardProp;o&&e.shouldForwardProp&&(A=t.shouldForwardProp?function(n,r,o){return e.shouldForwardProp(n,r,o)&&t.shouldForwardProp(n,r,o)}:e.shouldForwardProp);var C,I=new ie(n,g,o?e.componentStyle:void 0),P=I.isStatic&&0===c.length,O=function(e,t){return function(e,t,n,r){var o=e.attrs,s=e.componentStyle,a=e.defaultProps,c=e.foldedComponentIds,d=e.shouldForwardProp,h=e.styledComponentId,p=e.target;react.useDebugValue(h);var f=function(e,t,n){void 0===e&&(e=E$3);var r=v$1({},t,{theme:e}),o={};return n.forEach((function(e){var t,n,i,s=e;for(t in b$2(s)&&(s=s(r)),s)r[t]=o[t]="className"===t?(n=o[t],i=s[t],n&&i?n+" "+i:n||i):s[t];})),[r,o]}(Oe(t,react.useContext(ze),a)||E$3,t,o),y=f[0],g=f[1],S=function(e,t,n,r){var o=fe(),i=me(),s=t?e.generateAndInjectStyles(E$3,o,i):e.generateAndInjectStyles(n,o,i);return react.useDebugValue(s),!t&&r&&r(s),s}(s,r,y,e.warnTooManyClasses),w=n,_=g.$as||t.$as||g.as||t.as||p,N=ke(_),A=g!==t?v$1({},t,{},g):t,C={};for(var I in A)"$"!==I[0]&&"as"!==I&&("forwardedAs"===I?C.as=A[I]:(d?d(I,index$1,_):!N||index$1(I))&&(C[I]=A[I]));return t.style&&g.style!==t.style&&(C.style=v$1({},t.style,{},g.style)),C.className=Array.prototype.concat(c,h,S!==h?S:null,t.className,g.className).filter(Boolean).join(" "),C.ref=w,react.createElement(_,C)}(C,e,t,P)};return O.displayName=f,(C=react.forwardRef(O)).attrs=S,C.componentStyle=I,C.displayName=f,C.shouldForwardProp=A,C.foldedComponentIds=o?Array.prototype.concat(e.foldedComponentIds,e.styledComponentId):w$2,C.styledComponentId=g,C.target=o?e.target:e,C.withComponent=function(e){var r=t.componentId,o=function(e,t){if(null==e)return {};var n,r,o={},i=Object.keys(e);for(r=0;r<i.length;r++)n=i[r],t.indexOf(n)>=0||(o[n]=e[n]);return o}(t,["componentId"]),i=r&&r+"-"+(ke(e)?e:je(_$1(e)));return Ye(e,v$1({},o,{attrs:S,componentId:i}),n)},Object.defineProperty(C,"defaultProps",{get:function(){return this._foldedDefaultProps},set:function(t){this._foldedDefaultProps=o?Me({},e.defaultProps,t):t;}}),(Pe(f,g),C.warnTooManyClasses=function(e,t){var n={},r=!1;return function(o){if(!r&&(n[o]=!0,Object.keys(n).length>=200)){var i=t?' with the id of "'+t+'"':"";console.warn("Over 200 classes were generated for component "+e+i+".\nConsider using the attrs method, together with a style object for frequently changed styles.\nExample:\n  const Component = styled.div.attrs(props => ({\n    style: {\n      background: props.background,\n    },\n  }))`width: 100%;`\n\n  <Component />"),r=!0,n={};}}}(f,g)),C.toString=function(){return "."+C.styledComponentId},s&&hoistNonReactStatics_cjs(C,e,{attrs:!0,componentStyle:!0,displayName:!0,foldedComponentIds:!0,shouldForwardProp:!0,styledComponentId:!0,target:!0,withComponent:!0}),C}var qe=function(e){return function e(t,r,o){if(void 0===o&&(o=E$3),!reactIs.isValidElementType(r))return j$3(1,String(r));var i=function(){return t(r,o,Ae.apply(void 0,arguments))};return i.withConfig=function(n){return e(t,r,v$1({},o,{},n))},i.attrs=function(n){return e(t,r,v$1({},o,{attrs:Array.prototype.concat(o.attrs,n).filter(Boolean)}))},i}(Ye,e)};["a","abbr","address","area","article","aside","audio","b","base","bdi","bdo","big","blockquote","body","br","button","canvas","caption","cite","code","col","colgroup","data","datalist","dd","del","details","dfn","dialog","div","dl","dt","em","embed","fieldset","figcaption","figure","footer","form","h1","h2","h3","h4","h5","h6","head","header","hgroup","hr","html","i","iframe","img","input","ins","kbd","keygen","label","legend","li","link","main","map","mark","marquee","menu","menuitem","meta","meter","nav","noscript","object","ol","optgroup","option","output","p","param","picture","pre","progress","q","rp","rt","ruby","s","samp","script","section","select","small","source","span","strong","style","sub","summary","sup","table","tbody","td","textarea","tfoot","th","thead","time","title","tr","track","u","ul","var","video","wbr","circle","clipPath","defs","ellipse","foreignObject","g","image","line","linearGradient","marker","mask","path","pattern","polygon","polyline","radialGradient","rect","stop","svg","text","textPath","tspan"].forEach((function(e){qe[e]=qe(e);}));var He=function(){function e(e,t){this.rules=e,this.componentId=t,this.isStatic=re(e),Z$1.registerId(this.componentId+1);}var t=e.prototype;return t.createStyles=function(e,t,n,r){var o=r(Ne(this.rules,t,n,r).join(""),""),i=this.componentId+e;n.insertRules(i,i,o);},t.removeStyles=function(e,t){t.clearRules(this.componentId+e);},t.renderStyles=function(e,t,n,r){e>2&&Z$1.registerId(this.componentId+e),this.removeStyles(e,n),this.createStyles(e,t,n,r);},e}();function $e(e){for(var t=arguments.length,n=new Array(t>1?t-1:0),o=1;o<t;o++)n[o-1]=arguments[o];var s=Ae.apply(void 0,[e].concat(n)),a="sc-global-"+Te(JSON.stringify(s)),u=new He(s,a);function l(e){var t=fe(),n=me(),o=react.useContext(ze),l=react.useRef(t.allocateGSInstance(a)).current;return react.Children.count(e.children)&&console.warn("The global style component "+a+" was given child JSX. createGlobalStyle does not render children."),s.some((function(e){return "string"==typeof e&&-1!==e.indexOf("@import")}))&&console.warn("Please do not use @import CSS syntax in createGlobalStyle at this time, as the CSSOM APIs we use in production do not handle it well. Instead, we recommend using a library such as react-helmet to inject a typical <link> meta tag to the stylesheet, or simply embedding it manually in your index.html <head> section for a simpler app."),react.useLayoutEffect((function(){return h(l,e,t,o,n),function(){return u.removeStyles(l,t)}}),[l,e,t,o,n]),null}function h(e,t,n,r,o){if(u.isStatic)u.renderStyles(e,O$2,n,o);else {var i=v$1({},t,{theme:Oe(t,r,l.defaultProps)});u.renderStyles(e,i,n,o);}}return Pe(a),react.memo(l)}function We(e){"undefined"!=typeof navigator&&"ReactNative"===navigator.product&&console.warn("`keyframes` cannot be used on ReactNative, only on the web. To do animation in ReactNative please use Animated.");for(var t=arguments.length,n=new Array(t>1?t-1:0),r=1;r<t;r++)n[r-1]=arguments[r];var o=Ae.apply(void 0,[e].concat(n)).join(""),i=Te(o);return new ve(i,o)}"undefined"!=typeof navigator&&"ReactNative"===navigator.product&&console.warn("It looks like you've imported 'styled-components' on React Native.\nPerhaps you're looking to import 'styled-components/native'?\nRead more about this at https://www.styled-components.com/docs/basics#react-native"),(window["__styled-components-init__"]=window["__styled-components-init__"]||0,1===window["__styled-components-init__"]&&console.warn("It looks like there are several instances of 'styled-components' initialized in this application. This may cause dynamic styles to not render properly, errors during the rehydration process, a missing theme prop, and makes your application bigger without good reason.\n\nSee https://s-c.sh/2BAXzed for more info."),window["__styled-components-init__"]+=1);

            const GlobalStyle = $e `
  html,
  body,
  div,
  p,
  img,
  h1, h2, h3, h4, h5, h6,
  input, button,
  ul, li {
    border: 0;
    margin: 0;
    padding: 0;
  }

  *, *::before, *::after {
    box-sizing: border-box;
  }

  body {
    background-color: ${(props) => props.theme.colors.primary.background};
    color: ${(props) => props.theme.colors.primary.foreground};
    font-family: ${({ theme: { fonts } }) => fonts.manrope};
    font-weight: 400;
    height: 100vh;
    width: 100vw;
  }

  div:hover {
    cursor: default;
  }

  textarea:focus, input:focus, button:focus {
    outline: none;
  }
`;

            const common = ['link', 'enabled', 'hotkey'];
            const standardConfig = [...common, 'buttonChoice', 'path'];
            const customConfig = [...common, 'label'];
            const isStandardConfig = (type, unknown) => type === 'standard';
            const isCustomConfig = (type, unknown) => type === 'custom';
            const isConfigKey = (unknown) => standardConfig.includes(unknown) || customConfig.includes(unknown);
            const isThemeColor$1 = (unknown) => {
                switch (unknown) {
                    case 'primary':
                    case 'secondary':
                    case 'tertiary':
                    case 'quaternary': {
                        return true;
                    }
                    default: return false;
                }
            };

            const capitalize = (s) => {
                if (typeof s !== 'string') {
                    return '';
                }
                return s.charAt(0).toUpperCase() + s.slice(1);
            };

            const isObject$1 = (item) => {
                return (item === Object(item) && !Array.isArray(item));
            };
            const deepMerge = (arrayMergeKeys, target, ...sources) => {
                if (!sources.length) {
                    return target;
                }
                const result = target;
                if (isObject$1(result)) {
                    const len = sources.length;
                    for (let i = 0; i < len; i += 1) {
                        const elm = sources[i];
                        if (isObject$1(elm)) {
                            for (const key in elm) {
                                if (elm.hasOwnProperty(key)) {
                                    const mergeKey = arrayMergeKeys ? arrayMergeKeys[key] : undefined;
                                    if (isObject$1(elm[key])) {
                                        if (!result[key] || !isObject$1(result[key])) {
                                            result[key] = {};
                                        }
                                        deepMerge(mergeKey, result[key], elm[key]);
                                    }
                                    else {
                                        if (Array.isArray(result[key]) && Array.isArray(elm[key])) {
                                            if (typeof mergeKey === 'string') {
                                                result[key] = Array.from(result[key]).filter((item) => {
                                                    if (typeof item === 'object' && item !== null) {
                                                        return elm[key].findIndex((el) => el[mergeKey] === item[mergeKey]) < 0;
                                                    }
                                                    return true;
                                                });
                                                result[key].concat(elm[key]);
                                            }
                                            result[key] = Array.from(new Set(result[key].concat(elm[key])));
                                        }
                                        else {
                                            result[key] = elm[key];
                                        }
                                    }
                                }
                            }
                        }
                    }
                }
                return result;
            };

            const entries = (obj) => Object.entries(obj);

            (() => {
                const date = new Date();
                date.setMonth(date.getMonth() - 1);
                return Math.ceil(date.getTime() / 1000);
            })();
            (() => {
                const date = new Date();
                date.setFullYear(date.getFullYear() - 1);
                return Math.ceil(date.getTime() / 1000);
            })();

            const nor = (first, second) => {
                if (first && !second) {
                    return false;
                }
                if (!first && second) {
                    return false;
                }
                return true;
            };

            const baseChecker = () => true;
            class Memoize {
                constructor() {
                    this.basicFns = {};
                    this.add = (config) => {
                        const { id, resetFn, ...rest } = config;
                        const resetKey = typeof resetFn === 'undefined' ? resetFn : resetFn();
                        const fnIndex = this.basicFns[id];
                        if (!fnIndex) {
                            this.basicFns[id] = {
                                ...rest,
                                resetFn,
                                resetKey,
                            };
                        }
                        const func = this.basicFns[id];
                        if (!nor(!!func.checker, !!rest.checker)) {
                            throw new Error(`${id} was instantiated without a checker at least once and with a checker at least once`);
                        }
                        return this.build(func);
                    };
                    this.build = (config) => {
                        const check = config.checker || baseChecker;
                        if (!config.keyFn) {
                            return this.buildBase(config, check);
                        }
                        return this.buildFancy(config, check, config.keyFn);
                    };
                    this.buildFancy = (mapConfig, checker, keyFn) => {
                        const mapping = {};
                        return (...args) => {
                            const key = keyFn(...args);
                            if (!mapping[key] || mapping[key].resetKey !== mapConfig.resetKey) {
                                mapping[key] = {
                                    previousArgs: args,
                                    previousReturn: mapConfig.fn(...args),
                                    resetKey: mapConfig.resetKey,
                                };
                                return mapping[key].previousReturn;
                            }
                            const { previousArgs, previousReturn } = mapping[key];
                            const { nextArgs, nextReturn } = this.fnRun({
                                checker,
                                previousArgs,
                                previousReturn,
                                args,
                                mapConfig,
                            });
                            mapping[key].previousArgs = nextArgs;
                            mapping[key].previousReturn = nextReturn;
                            return nextReturn;
                        };
                    };
                    this.buildBase = (mapConfig, checker) => {
                        let previousArgs;
                        let previousReturn;
                        return (...args) => {
                            if (!previousArgs) {
                                previousArgs = args;
                                previousReturn = mapConfig.fn(...args);
                                return previousReturn;
                            }
                            const { nextArgs, nextReturn } = this.fnRun({
                                checker,
                                previousArgs,
                                previousReturn,
                                args,
                                mapConfig,
                            });
                            previousReturn = nextReturn;
                            previousArgs = nextArgs;
                            return nextReturn;
                        };
                    };
                    this.fnRun = (config) => {
                        const { previousArgs, previousReturn, checker, args, mapConfig } = config;
                        const { resetFn, fn, resetKey } = mapConfig;
                        const newResetKey = typeof resetFn === 'undefined' ? resetFn : resetFn();
                        if (newResetKey !== resetKey) {
                            return {
                                nextArgs: args,
                                nextReturn: fn(...args),
                            };
                        }
                        const needsCall = checker({ current: args, previous: previousArgs });
                        return {
                            nextArgs: args,
                            nextReturn: needsCall ? fn(...args) : previousReturn,
                        };
                    };
                }
            }
            const instance = new Memoize();
            Object.freeze(instance);

            const validURL = (str) => {
                const pattern = new RegExp('^(https?:\\/\\/)?' +
                    '((([a-z\\d]([a-z\\d-]*[a-z\\d])*)\\.)+[a-z]{2,}|' +
                    '((\\d{1,3}\\.){3}\\d{1,3}))' +
                    '(\\:\\d+)?(\\/[-a-z\\d%_.~+]*)*' +
                    '(\\?[;&a-z\\d%_.~+=-]*)?' +
                    '(\\#[-a-z\\d_]*)?$', 'i');
                return !!pattern.test(str);
            };

            const lightOrDark = (color) => {
                const RGB = getRGB(color);
                const { r, g, b } = RGB;
                const hsp = Math.sqrt(0.299 * (r * r) + 0.587 * (g * g) + 0.114 * (b * b));
                if (hsp > 150) {
                    return 'light';
                }
                return 'dark';
            };

            const mergeRefs = (refs) => (value) => {
                refs.forEach((ref) => {
                    if (typeof ref === "function") {
                        ref(value);
                    }
                    else if (ref != null) {
                        ref.current = value;
                    }
                });
            };

            const isAuthenticated = (unit) => {
                switch (unit) {
                    case 'github': return 'github/IS_AUTHENTICATED';
                    case 'jira': return 'jira/IS_AUTHENTICATED';
                    default: throw new Error(`Bad Unit provided to getListenMessage: ${unit}`);
                }
            };
            const authenticateCheck = (unit) => {
                switch (unit) {
                    case 'github': return 'github/AUTHENTICATE_CHECK';
                    case 'jira': return 'jira/AUTHENTICATE_CHECK';
                    default: throw new Error(`Bad Unit provided to getAuthenticateCheckMessage: ${unit}`);
                }
            };
            const logout = (unit) => {
                switch (unit) {
                    case 'github': return 'github/LOGOUT';
                    case 'jira': return 'jira/LOGOUT';
                    default: throw new Error('Bad Unit');
                }
            };
            var messageTypes = {
                authenticateCheck,
                isAuthenticated,
                logout,
            };

            class ReactorEvent {
                constructor(name) {
                    this.registerCallback = (callback) => {
                        this.callbacks.push(callback);
                    };
                    this.removeCallback = (callback) => {
                        const current = this.callbacks.findIndex((cb) => cb === callback);
                        if (current > -1) {
                            this.callbacks.splice(current, 1);
                        }
                    };
                    this.name = name;
                    this.callbacks = [];
                }
            }

            class Reactor {
                constructor() {
                    this.registerEvent = (eventName) => {
                        const event = new ReactorEvent(eventName);
                        this.events[eventName] = event;
                    };
                    this.dispatchEvent = (eventName, eventArgs) => {
                        if (this.events[eventName]) {
                            this.events[eventName].callbacks.forEach((callback) => {
                                callback(eventArgs);
                            });
                            return;
                        }
                    };
                    this.addEventListener = (eventName, callback) => {
                        if (!this.events[eventName]) {
                            this.registerEvent(eventName);
                        }
                        if (this.events[eventName]) {
                            this.events[eventName].registerCallback(callback);
                            return;
                        }
                        throw new Error(`Attempted to listen to unregistered event: ${eventName}`);
                    };
                    this.removeEventListener = (eventName, callback) => {
                        if (this.events[eventName]) {
                            this.events[eventName].removeCallback(callback);
                        }
                    };
                    this.events = {};
                }
            }

            const eventMatchers = {
                'HTMLEvents': /^(?:load|unload|abort|error|select|change|submit|reset|focus|blur|resize|scroll)$/,
                'MouseEvents': /^(?:click|dblclick|mouse(?:down|up|over|move|out))$/,
            };
            const defaultOptions = {
                pointerX: 0,
                pointerY: 0,
                button: 0,
                ctrlKey: false,
                altKey: false,
                shiftKey: false,
                metaKey: false,
                bubbles: true,
                cancelable: true,
            };
            const simulate = (element, eventName, options) => {
                const localOptions = deepMerge(undefined, defaultOptions, options || {});
                let eventType = null;
                for (const name in eventMatchers) {
                    if (eventMatchers[name].test(eventName)) {
                        eventType = name;
                        break;
                    }
                }
                if (!eventType) {
                    throw new SyntaxError('Only HTMLEvents and MouseEvents interfaces are supported');
                }
                if (document.createEvent) {
                    const oEvent = document.createEvent(eventType);
                    oEvent.initMouseEvent(eventName, localOptions.bubbles || false, localOptions.cancelable || false, window, localOptions.button || 0, localOptions.pointerX || 0, localOptions.pointerY || 0, localOptions.pointerX || 0, localOptions.pointerY || 0, localOptions.ctrlKey || false, localOptions.altKey || false, localOptions.shiftKey || false, localOptions.metaKey || false, localOptions.button || 0, element);
                    element.dispatchEvent(oEvent);
                }
                return element;
            };

            const baseColorsBase = {
                black: '#010203',
                'blue-light': '#0096FF',
                'blue-dark': '#4169e1',
                blue: '#007FFF',
                green: '#26FF64',
                grey: '#696969',
                'grey-dark': '#3D4035',
                'grey-light': '#DBD7D2',
                red: '#FF2626',
                'red-dark': '#710C04',
                'red-light': '#FF8484',
                white: '#F8F8FF',
                yellow: '#FEFE22',
            };
            const isBaseColor = (unknown) => !!baseColorsBase[unknown];
            const isThemeColor = (unknown) => !!themeColorsBase[unknown];
            const themeColorsBase = {
                primary: {
                    background: '#00371D',
                    foreground: baseColorsBase.white,
                    accent: '#DDDDDD',
                },
                secondary: {
                    background: '#FFB4B3',
                    foreground: '#000000',
                    accent: '#333333',
                },
                tertiary: {
                    background: '#00522C',
                    foreground: '#FFFFFF',
                    accent: '#5D6B66',
                },
                quaternary: {
                    background: '#FFD5D4',
                    foreground: '#000000',
                    accent: '#ff8c8a',
                },
            };
            const buildRGB = (colors) => Object
                .entries(colors)
                .reduce((acc, cur) => {
                const [colorName, colorValue] = cur;
                acc[colorName] = colorValue;
                acc[`${colorName}-rgb`] = getRGB(colorValue);
                return acc;
            }, {});
            const colors = Object
                .entries(themeColorsBase)
                .reduce((acc, [color, gradient]) => {
                acc[color] = buildRGB(gradient);
                return acc;
            }, {});
            const baseColors = buildRGB(baseColorsBase);
            const sizes = {
                xs: {
                    fontSize: '10px',
                    borderRadius: '2px',
                    padding: '1px 2px',
                    paddingX: '2px',
                    paddingY: '1px',
                    margin: '2px',
                    marginX: '2px',
                    marginY: '2px',
                    fontWeight: '300',
                },
                sm: {
                    fontSize: '12px',
                    borderRadius: '3px',
                    padding: '2px 4px',
                    paddingX: '4px',
                    paddingY: '2px',
                    margin: '4px',
                    marginX: '4px',
                    marginY: '4px',
                    fontWeight: '300',
                },
                md: {
                    fontSize: '14px',
                    borderRadius: '4px',
                    padding: '4px 6px',
                    paddingX: '6px',
                    paddingY: '4px',
                    margin: '4px 6px',
                    marginX: '6px',
                    marginY: '4px',
                    fontWeight: '400',
                },
                lg: {
                    fontSize: '18px',
                    borderRadius: '6px',
                    padding: '4px 8px',
                    paddingX: '8px',
                    paddingY: '4px',
                    margin: '4px 8px',
                    marginX: '8px',
                    marginY: '4px',
                    fontWeight: '400',
                },
                xl: {
                    fontSize: '26px',
                    borderRadius: '12px',
                    padding: '8px 12px',
                    paddingX: '12px',
                    paddingY: '8px',
                    margin: '10px 12px',
                    marginX: '12px',
                    marginY: '10px',
                    fontWeight: '600',
                },
                xxl: {
                    fontSize: '30px',
                    borderRadius: '16px',
                    padding: '10px 14px',
                    paddingX: '14px',
                    paddingY: '10px',
                    margin: '10px 14px',
                    marginX: '14px',
                    marginY: '10px',
                    fontWeight: '800',
                },
            };
            const fonts = {
                nunito: '\'Nunito Sans\', sans-serif',
                heebo: '\'Heebo\', sans-serif',
                inconsolata: '\'Inconsolata\',monospace',
                manrope: '\'Manrope\', sans-serif;',
            };
            const theme = {
                colors,
                sizes,
                baseColors,
                fonts,
            };
            const convertToRGBA = (color, alpha$1) => {
                if (!alpha$1 || alpha$1 > 1) {
                    return color;
                }
                if (typeof color === 'string') {
                    return alpha(color, alpha$1);
                }
                return {
                    background: alpha(color.background, alpha$1),
                    foreground: alpha(color.foreground, alpha$1),
                    accent: alpha(color.accent, alpha$1),
                };
            };
            function getThemeColor(color, gradient, alpha) {
                if (color && !gradient) {
                    return convertToRGBA(colors[color], alpha);
                }
                if (!gradient) {
                    return convertToRGBA(colors.primary, alpha);
                }
                if (!color) {
                    return convertToRGBA(colors[gradient], alpha);
                }
                return convertToRGBA(colors[color][gradient], alpha);
            }

            var byteLength_1 = byteLength;
            var toByteArray_1 = toByteArray;
            var fromByteArray_1 = fromByteArray;

            var lookup = [];
            var revLookup = [];
            var Arr = typeof Uint8Array !== 'undefined' ? Uint8Array : Array;

            var code = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/';
            for (var i$4 = 0, len = code.length; i$4 < len; ++i$4) {
              lookup[i$4] = code[i$4];
              revLookup[code.charCodeAt(i$4)] = i$4;
            }

            // Support decoding URL-safe base64 strings, as Node.js does.
            // See: https://en.wikipedia.org/wiki/Base64#URL_applications
            revLookup['-'.charCodeAt(0)] = 62;
            revLookup['_'.charCodeAt(0)] = 63;

            function getLens (b64) {
              var len = b64.length;

              if (len % 4 > 0) {
                throw new Error('Invalid string. Length must be a multiple of 4')
              }

              // Trim off extra bytes after placeholder bytes are found
              // See: https://github.com/beatgammit/base64-js/issues/42
              var validLen = b64.indexOf('=');
              if (validLen === -1) validLen = len;

              var placeHoldersLen = validLen === len
                ? 0
                : 4 - (validLen % 4);

              return [validLen, placeHoldersLen]
            }

            // base64 is 4/3 + up to two characters of the original data
            function byteLength (b64) {
              var lens = getLens(b64);
              var validLen = lens[0];
              var placeHoldersLen = lens[1];
              return ((validLen + placeHoldersLen) * 3 / 4) - placeHoldersLen
            }

            function _byteLength (b64, validLen, placeHoldersLen) {
              return ((validLen + placeHoldersLen) * 3 / 4) - placeHoldersLen
            }

            function toByteArray (b64) {
              var tmp;
              var lens = getLens(b64);
              var validLen = lens[0];
              var placeHoldersLen = lens[1];

              var arr = new Arr(_byteLength(b64, validLen, placeHoldersLen));

              var curByte = 0;

              // if there are placeholders, only get up to the last complete 4 chars
              var len = placeHoldersLen > 0
                ? validLen - 4
                : validLen;

              var i;
              for (i = 0; i < len; i += 4) {
                tmp =
                  (revLookup[b64.charCodeAt(i)] << 18) |
                  (revLookup[b64.charCodeAt(i + 1)] << 12) |
                  (revLookup[b64.charCodeAt(i + 2)] << 6) |
                  revLookup[b64.charCodeAt(i + 3)];
                arr[curByte++] = (tmp >> 16) & 0xFF;
                arr[curByte++] = (tmp >> 8) & 0xFF;
                arr[curByte++] = tmp & 0xFF;
              }

              if (placeHoldersLen === 2) {
                tmp =
                  (revLookup[b64.charCodeAt(i)] << 2) |
                  (revLookup[b64.charCodeAt(i + 1)] >> 4);
                arr[curByte++] = tmp & 0xFF;
              }

              if (placeHoldersLen === 1) {
                tmp =
                  (revLookup[b64.charCodeAt(i)] << 10) |
                  (revLookup[b64.charCodeAt(i + 1)] << 4) |
                  (revLookup[b64.charCodeAt(i + 2)] >> 2);
                arr[curByte++] = (tmp >> 8) & 0xFF;
                arr[curByte++] = tmp & 0xFF;
              }

              return arr
            }

            function tripletToBase64 (num) {
              return lookup[num >> 18 & 0x3F] +
                lookup[num >> 12 & 0x3F] +
                lookup[num >> 6 & 0x3F] +
                lookup[num & 0x3F]
            }

            function encodeChunk (uint8, start, end) {
              var tmp;
              var output = [];
              for (var i = start; i < end; i += 3) {
                tmp =
                  ((uint8[i] << 16) & 0xFF0000) +
                  ((uint8[i + 1] << 8) & 0xFF00) +
                  (uint8[i + 2] & 0xFF);
                output.push(tripletToBase64(tmp));
              }
              return output.join('')
            }

            function fromByteArray (uint8) {
              var tmp;
              var len = uint8.length;
              var extraBytes = len % 3; // if we have 1 byte left, pad 2 bytes
              var parts = [];
              var maxChunkLength = 16383; // must be multiple of 3

              // go through the array every three bytes, we'll deal with trailing stuff later
              for (var i = 0, len2 = len - extraBytes; i < len2; i += maxChunkLength) {
                parts.push(encodeChunk(uint8, i, (i + maxChunkLength) > len2 ? len2 : (i + maxChunkLength)));
              }

              // pad the end with zeros, but make sure to not forget the extra bytes
              if (extraBytes === 1) {
                tmp = uint8[len - 1];
                parts.push(
                  lookup[tmp >> 2] +
                  lookup[(tmp << 4) & 0x3F] +
                  '=='
                );
              } else if (extraBytes === 2) {
                tmp = (uint8[len - 2] << 8) + uint8[len - 1];
                parts.push(
                  lookup[tmp >> 10] +
                  lookup[(tmp >> 4) & 0x3F] +
                  lookup[(tmp << 2) & 0x3F] +
                  '='
                );
              }

              return parts.join('')
            }

            var base64Js = {
            	byteLength: byteLength_1,
            	toByteArray: toByteArray_1,
            	fromByteArray: fromByteArray_1
            };

            /*! ieee754. BSD-3-Clause License. Feross Aboukhadijeh <https://feross.org/opensource> */
            var read$1 = function (buffer, offset, isLE, mLen, nBytes) {
              var e, m;
              var eLen = (nBytes * 8) - mLen - 1;
              var eMax = (1 << eLen) - 1;
              var eBias = eMax >> 1;
              var nBits = -7;
              var i = isLE ? (nBytes - 1) : 0;
              var d = isLE ? -1 : 1;
              var s = buffer[offset + i];

              i += d;

              e = s & ((1 << (-nBits)) - 1);
              s >>= (-nBits);
              nBits += eLen;
              for (; nBits > 0; e = (e * 256) + buffer[offset + i], i += d, nBits -= 8) {}

              m = e & ((1 << (-nBits)) - 1);
              e >>= (-nBits);
              nBits += mLen;
              for (; nBits > 0; m = (m * 256) + buffer[offset + i], i += d, nBits -= 8) {}

              if (e === 0) {
                e = 1 - eBias;
              } else if (e === eMax) {
                return m ? NaN : ((s ? -1 : 1) * Infinity)
              } else {
                m = m + Math.pow(2, mLen);
                e = e - eBias;
              }
              return (s ? -1 : 1) * m * Math.pow(2, e - mLen)
            };

            var write$1 = function (buffer, value, offset, isLE, mLen, nBytes) {
              var e, m, c;
              var eLen = (nBytes * 8) - mLen - 1;
              var eMax = (1 << eLen) - 1;
              var eBias = eMax >> 1;
              var rt = (mLen === 23 ? Math.pow(2, -24) - Math.pow(2, -77) : 0);
              var i = isLE ? 0 : (nBytes - 1);
              var d = isLE ? 1 : -1;
              var s = value < 0 || (value === 0 && 1 / value < 0) ? 1 : 0;

              value = Math.abs(value);

              if (isNaN(value) || value === Infinity) {
                m = isNaN(value) ? 1 : 0;
                e = eMax;
              } else {
                e = Math.floor(Math.log(value) / Math.LN2);
                if (value * (c = Math.pow(2, -e)) < 1) {
                  e--;
                  c *= 2;
                }
                if (e + eBias >= 1) {
                  value += rt / c;
                } else {
                  value += rt * Math.pow(2, 1 - eBias);
                }
                if (value * c >= 2) {
                  e++;
                  c /= 2;
                }

                if (e + eBias >= eMax) {
                  m = 0;
                  e = eMax;
                } else if (e + eBias >= 1) {
                  m = ((value * c) - 1) * Math.pow(2, mLen);
                  e = e + eBias;
                } else {
                  m = value * Math.pow(2, eBias - 1) * Math.pow(2, mLen);
                  e = 0;
                }
              }

              for (; mLen >= 8; buffer[offset + i] = m & 0xff, i += d, m /= 256, mLen -= 8) {}

              e = (e << mLen) | m;
              eLen += mLen;
              for (; eLen > 0; buffer[offset + i] = e & 0xff, i += d, e /= 256, eLen -= 8) {}

              buffer[offset + i - d] |= s * 128;
            };

            var ieee754 = {
            	read: read$1,
            	write: write$1
            };

            /*!
             * The buffer module from node.js, for the browser.
             *
             * @author   Feross Aboukhadijeh <https://feross.org>
             * @license  MIT
             */

            var buffer = createCommonjsModule(function (module, exports) {



            var customInspectSymbol =
              (typeof Symbol === 'function' && typeof Symbol['for'] === 'function') // eslint-disable-line dot-notation
                ? Symbol['for']('nodejs.util.inspect.custom') // eslint-disable-line dot-notation
                : null;

            exports.Buffer = Buffer;
            exports.SlowBuffer = SlowBuffer;
            exports.INSPECT_MAX_BYTES = 50;

            var K_MAX_LENGTH = 0x7fffffff;
            exports.kMaxLength = K_MAX_LENGTH;

            /**
             * If `Buffer.TYPED_ARRAY_SUPPORT`:
             *   === true    Use Uint8Array implementation (fastest)
             *   === false   Print warning and recommend using `buffer` v4.x which has an Object
             *               implementation (most compatible, even IE6)
             *
             * Browsers that support typed arrays are IE 10+, Firefox 4+, Chrome 7+, Safari 5.1+,
             * Opera 11.6+, iOS 4.2+.
             *
             * We report that the browser does not support typed arrays if the are not subclassable
             * using __proto__. Firefox 4-29 lacks support for adding new properties to `Uint8Array`
             * (See: https://bugzilla.mozilla.org/show_bug.cgi?id=695438). IE 10 lacks support
             * for __proto__ and has a buggy typed array implementation.
             */
            Buffer.TYPED_ARRAY_SUPPORT = typedArraySupport();

            if (!Buffer.TYPED_ARRAY_SUPPORT && typeof console !== 'undefined' &&
                typeof console.error === 'function') {
              console.error(
                'This browser lacks typed array (Uint8Array) support which is required by ' +
                '`buffer` v5.x. Use `buffer` v4.x if you require old browser support.'
              );
            }

            function typedArraySupport () {
              // Can typed array instances can be augmented?
              try {
                var arr = new Uint8Array(1);
                var proto = { foo: function () { return 42 } };
                Object.setPrototypeOf(proto, Uint8Array.prototype);
                Object.setPrototypeOf(arr, proto);
                return arr.foo() === 42
              } catch (e) {
                return false
              }
            }

            Object.defineProperty(Buffer.prototype, 'parent', {
              enumerable: true,
              get: function () {
                if (!Buffer.isBuffer(this)) return undefined
                return this.buffer
              }
            });

            Object.defineProperty(Buffer.prototype, 'offset', {
              enumerable: true,
              get: function () {
                if (!Buffer.isBuffer(this)) return undefined
                return this.byteOffset
              }
            });

            function createBuffer (length) {
              if (length > K_MAX_LENGTH) {
                throw new RangeError('The value "' + length + '" is invalid for option "size"')
              }
              // Return an augmented `Uint8Array` instance
              var buf = new Uint8Array(length);
              Object.setPrototypeOf(buf, Buffer.prototype);
              return buf
            }

            /**
             * The Buffer constructor returns instances of `Uint8Array` that have their
             * prototype changed to `Buffer.prototype`. Furthermore, `Buffer` is a subclass of
             * `Uint8Array`, so the returned instances will have all the node `Buffer` methods
             * and the `Uint8Array` methods. Square bracket notation works as expected -- it
             * returns a single octet.
             *
             * The `Uint8Array` prototype remains unmodified.
             */

            function Buffer (arg, encodingOrOffset, length) {
              // Common case.
              if (typeof arg === 'number') {
                if (typeof encodingOrOffset === 'string') {
                  throw new TypeError(
                    'The "string" argument must be of type string. Received type number'
                  )
                }
                return allocUnsafe(arg)
              }
              return from(arg, encodingOrOffset, length)
            }

            Buffer.poolSize = 8192; // not used by this implementation

            function from (value, encodingOrOffset, length) {
              if (typeof value === 'string') {
                return fromString(value, encodingOrOffset)
              }

              if (ArrayBuffer.isView(value)) {
                return fromArrayView(value)
              }

              if (value == null) {
                throw new TypeError(
                  'The first argument must be one of type string, Buffer, ArrayBuffer, Array, ' +
                  'or Array-like Object. Received type ' + (typeof value)
                )
              }

              if (isInstance(value, ArrayBuffer) ||
                  (value && isInstance(value.buffer, ArrayBuffer))) {
                return fromArrayBuffer(value, encodingOrOffset, length)
              }

              if (typeof SharedArrayBuffer !== 'undefined' &&
                  (isInstance(value, SharedArrayBuffer) ||
                  (value && isInstance(value.buffer, SharedArrayBuffer)))) {
                return fromArrayBuffer(value, encodingOrOffset, length)
              }

              if (typeof value === 'number') {
                throw new TypeError(
                  'The "value" argument must not be of type number. Received type number'
                )
              }

              var valueOf = value.valueOf && value.valueOf();
              if (valueOf != null && valueOf !== value) {
                return Buffer.from(valueOf, encodingOrOffset, length)
              }

              var b = fromObject(value);
              if (b) return b

              if (typeof Symbol !== 'undefined' && Symbol.toPrimitive != null &&
                  typeof value[Symbol.toPrimitive] === 'function') {
                return Buffer.from(
                  value[Symbol.toPrimitive]('string'), encodingOrOffset, length
                )
              }

              throw new TypeError(
                'The first argument must be one of type string, Buffer, ArrayBuffer, Array, ' +
                'or Array-like Object. Received type ' + (typeof value)
              )
            }

            /**
             * Functionally equivalent to Buffer(arg, encoding) but throws a TypeError
             * if value is a number.
             * Buffer.from(str[, encoding])
             * Buffer.from(array)
             * Buffer.from(buffer)
             * Buffer.from(arrayBuffer[, byteOffset[, length]])
             **/
            Buffer.from = function (value, encodingOrOffset, length) {
              return from(value, encodingOrOffset, length)
            };

            // Note: Change prototype *after* Buffer.from is defined to workaround Chrome bug:
            // https://github.com/feross/buffer/pull/148
            Object.setPrototypeOf(Buffer.prototype, Uint8Array.prototype);
            Object.setPrototypeOf(Buffer, Uint8Array);

            function assertSize (size) {
              if (typeof size !== 'number') {
                throw new TypeError('"size" argument must be of type number')
              } else if (size < 0) {
                throw new RangeError('The value "' + size + '" is invalid for option "size"')
              }
            }

            function alloc (size, fill, encoding) {
              assertSize(size);
              if (size <= 0) {
                return createBuffer(size)
              }
              if (fill !== undefined) {
                // Only pay attention to encoding if it's a string. This
                // prevents accidentally sending in a number that would
                // be interpreted as a start offset.
                return typeof encoding === 'string'
                  ? createBuffer(size).fill(fill, encoding)
                  : createBuffer(size).fill(fill)
              }
              return createBuffer(size)
            }

            /**
             * Creates a new filled Buffer instance.
             * alloc(size[, fill[, encoding]])
             **/
            Buffer.alloc = function (size, fill, encoding) {
              return alloc(size, fill, encoding)
            };

            function allocUnsafe (size) {
              assertSize(size);
              return createBuffer(size < 0 ? 0 : checked(size) | 0)
            }

            /**
             * Equivalent to Buffer(num), by default creates a non-zero-filled Buffer instance.
             * */
            Buffer.allocUnsafe = function (size) {
              return allocUnsafe(size)
            };
            /**
             * Equivalent to SlowBuffer(num), by default creates a non-zero-filled Buffer instance.
             */
            Buffer.allocUnsafeSlow = function (size) {
              return allocUnsafe(size)
            };

            function fromString (string, encoding) {
              if (typeof encoding !== 'string' || encoding === '') {
                encoding = 'utf8';
              }

              if (!Buffer.isEncoding(encoding)) {
                throw new TypeError('Unknown encoding: ' + encoding)
              }

              var length = byteLength(string, encoding) | 0;
              var buf = createBuffer(length);

              var actual = buf.write(string, encoding);

              if (actual !== length) {
                // Writing a hex string, for example, that contains invalid characters will
                // cause everything after the first invalid character to be ignored. (e.g.
                // 'abxxcd' will be treated as 'ab')
                buf = buf.slice(0, actual);
              }

              return buf
            }

            function fromArrayLike (array) {
              var length = array.length < 0 ? 0 : checked(array.length) | 0;
              var buf = createBuffer(length);
              for (var i = 0; i < length; i += 1) {
                buf[i] = array[i] & 255;
              }
              return buf
            }

            function fromArrayView (arrayView) {
              if (isInstance(arrayView, Uint8Array)) {
                var copy = new Uint8Array(arrayView);
                return fromArrayBuffer(copy.buffer, copy.byteOffset, copy.byteLength)
              }
              return fromArrayLike(arrayView)
            }

            function fromArrayBuffer (array, byteOffset, length) {
              if (byteOffset < 0 || array.byteLength < byteOffset) {
                throw new RangeError('"offset" is outside of buffer bounds')
              }

              if (array.byteLength < byteOffset + (length || 0)) {
                throw new RangeError('"length" is outside of buffer bounds')
              }

              var buf;
              if (byteOffset === undefined && length === undefined) {
                buf = new Uint8Array(array);
              } else if (length === undefined) {
                buf = new Uint8Array(array, byteOffset);
              } else {
                buf = new Uint8Array(array, byteOffset, length);
              }

              // Return an augmented `Uint8Array` instance
              Object.setPrototypeOf(buf, Buffer.prototype);

              return buf
            }

            function fromObject (obj) {
              if (Buffer.isBuffer(obj)) {
                var len = checked(obj.length) | 0;
                var buf = createBuffer(len);

                if (buf.length === 0) {
                  return buf
                }

                obj.copy(buf, 0, 0, len);
                return buf
              }

              if (obj.length !== undefined) {
                if (typeof obj.length !== 'number' || numberIsNaN(obj.length)) {
                  return createBuffer(0)
                }
                return fromArrayLike(obj)
              }

              if (obj.type === 'Buffer' && Array.isArray(obj.data)) {
                return fromArrayLike(obj.data)
              }
            }

            function checked (length) {
              // Note: cannot use `length < K_MAX_LENGTH` here because that fails when
              // length is NaN (which is otherwise coerced to zero.)
              if (length >= K_MAX_LENGTH) {
                throw new RangeError('Attempt to allocate Buffer larger than maximum ' +
                                     'size: 0x' + K_MAX_LENGTH.toString(16) + ' bytes')
              }
              return length | 0
            }

            function SlowBuffer (length) {
              if (+length != length) { // eslint-disable-line eqeqeq
                length = 0;
              }
              return Buffer.alloc(+length)
            }

            Buffer.isBuffer = function isBuffer (b) {
              return b != null && b._isBuffer === true &&
                b !== Buffer.prototype // so Buffer.isBuffer(Buffer.prototype) will be false
            };

            Buffer.compare = function compare (a, b) {
              if (isInstance(a, Uint8Array)) a = Buffer.from(a, a.offset, a.byteLength);
              if (isInstance(b, Uint8Array)) b = Buffer.from(b, b.offset, b.byteLength);
              if (!Buffer.isBuffer(a) || !Buffer.isBuffer(b)) {
                throw new TypeError(
                  'The "buf1", "buf2" arguments must be one of type Buffer or Uint8Array'
                )
              }

              if (a === b) return 0

              var x = a.length;
              var y = b.length;

              for (var i = 0, len = Math.min(x, y); i < len; ++i) {
                if (a[i] !== b[i]) {
                  x = a[i];
                  y = b[i];
                  break
                }
              }

              if (x < y) return -1
              if (y < x) return 1
              return 0
            };

            Buffer.isEncoding = function isEncoding (encoding) {
              switch (String(encoding).toLowerCase()) {
                case 'hex':
                case 'utf8':
                case 'utf-8':
                case 'ascii':
                case 'latin1':
                case 'binary':
                case 'base64':
                case 'ucs2':
                case 'ucs-2':
                case 'utf16le':
                case 'utf-16le':
                  return true
                default:
                  return false
              }
            };

            Buffer.concat = function concat (list, length) {
              if (!Array.isArray(list)) {
                throw new TypeError('"list" argument must be an Array of Buffers')
              }

              if (list.length === 0) {
                return Buffer.alloc(0)
              }

              var i;
              if (length === undefined) {
                length = 0;
                for (i = 0; i < list.length; ++i) {
                  length += list[i].length;
                }
              }

              var buffer = Buffer.allocUnsafe(length);
              var pos = 0;
              for (i = 0; i < list.length; ++i) {
                var buf = list[i];
                if (isInstance(buf, Uint8Array)) {
                  if (pos + buf.length > buffer.length) {
                    Buffer.from(buf).copy(buffer, pos);
                  } else {
                    Uint8Array.prototype.set.call(
                      buffer,
                      buf,
                      pos
                    );
                  }
                } else if (!Buffer.isBuffer(buf)) {
                  throw new TypeError('"list" argument must be an Array of Buffers')
                } else {
                  buf.copy(buffer, pos);
                }
                pos += buf.length;
              }
              return buffer
            };

            function byteLength (string, encoding) {
              if (Buffer.isBuffer(string)) {
                return string.length
              }
              if (ArrayBuffer.isView(string) || isInstance(string, ArrayBuffer)) {
                return string.byteLength
              }
              if (typeof string !== 'string') {
                throw new TypeError(
                  'The "string" argument must be one of type string, Buffer, or ArrayBuffer. ' +
                  'Received type ' + typeof string
                )
              }

              var len = string.length;
              var mustMatch = (arguments.length > 2 && arguments[2] === true);
              if (!mustMatch && len === 0) return 0

              // Use a for loop to avoid recursion
              var loweredCase = false;
              for (;;) {
                switch (encoding) {
                  case 'ascii':
                  case 'latin1':
                  case 'binary':
                    return len
                  case 'utf8':
                  case 'utf-8':
                    return utf8ToBytes(string).length
                  case 'ucs2':
                  case 'ucs-2':
                  case 'utf16le':
                  case 'utf-16le':
                    return len * 2
                  case 'hex':
                    return len >>> 1
                  case 'base64':
                    return base64ToBytes(string).length
                  default:
                    if (loweredCase) {
                      return mustMatch ? -1 : utf8ToBytes(string).length // assume utf8
                    }
                    encoding = ('' + encoding).toLowerCase();
                    loweredCase = true;
                }
              }
            }
            Buffer.byteLength = byteLength;

            function slowToString (encoding, start, end) {
              var loweredCase = false;

              // No need to verify that "this.length <= MAX_UINT32" since it's a read-only
              // property of a typed array.

              // This behaves neither like String nor Uint8Array in that we set start/end
              // to their upper/lower bounds if the value passed is out of range.
              // undefined is handled specially as per ECMA-262 6th Edition,
              // Section 13.3.3.7 Runtime Semantics: KeyedBindingInitialization.
              if (start === undefined || start < 0) {
                start = 0;
              }
              // Return early if start > this.length. Done here to prevent potential uint32
              // coercion fail below.
              if (start > this.length) {
                return ''
              }

              if (end === undefined || end > this.length) {
                end = this.length;
              }

              if (end <= 0) {
                return ''
              }

              // Force coercion to uint32. This will also coerce falsey/NaN values to 0.
              end >>>= 0;
              start >>>= 0;

              if (end <= start) {
                return ''
              }

              if (!encoding) encoding = 'utf8';

              while (true) {
                switch (encoding) {
                  case 'hex':
                    return hexSlice(this, start, end)

                  case 'utf8':
                  case 'utf-8':
                    return utf8Slice(this, start, end)

                  case 'ascii':
                    return asciiSlice(this, start, end)

                  case 'latin1':
                  case 'binary':
                    return latin1Slice(this, start, end)

                  case 'base64':
                    return base64Slice(this, start, end)

                  case 'ucs2':
                  case 'ucs-2':
                  case 'utf16le':
                  case 'utf-16le':
                    return utf16leSlice(this, start, end)

                  default:
                    if (loweredCase) throw new TypeError('Unknown encoding: ' + encoding)
                    encoding = (encoding + '').toLowerCase();
                    loweredCase = true;
                }
              }
            }

            // This property is used by `Buffer.isBuffer` (and the `is-buffer` npm package)
            // to detect a Buffer instance. It's not possible to use `instanceof Buffer`
            // reliably in a browserify context because there could be multiple different
            // copies of the 'buffer' package in use. This method works even for Buffer
            // instances that were created from another copy of the `buffer` package.
            // See: https://github.com/feross/buffer/issues/154
            Buffer.prototype._isBuffer = true;

            function swap (b, n, m) {
              var i = b[n];
              b[n] = b[m];
              b[m] = i;
            }

            Buffer.prototype.swap16 = function swap16 () {
              var len = this.length;
              if (len % 2 !== 0) {
                throw new RangeError('Buffer size must be a multiple of 16-bits')
              }
              for (var i = 0; i < len; i += 2) {
                swap(this, i, i + 1);
              }
              return this
            };

            Buffer.prototype.swap32 = function swap32 () {
              var len = this.length;
              if (len % 4 !== 0) {
                throw new RangeError('Buffer size must be a multiple of 32-bits')
              }
              for (var i = 0; i < len; i += 4) {
                swap(this, i, i + 3);
                swap(this, i + 1, i + 2);
              }
              return this
            };

            Buffer.prototype.swap64 = function swap64 () {
              var len = this.length;
              if (len % 8 !== 0) {
                throw new RangeError('Buffer size must be a multiple of 64-bits')
              }
              for (var i = 0; i < len; i += 8) {
                swap(this, i, i + 7);
                swap(this, i + 1, i + 6);
                swap(this, i + 2, i + 5);
                swap(this, i + 3, i + 4);
              }
              return this
            };

            Buffer.prototype.toString = function toString () {
              var length = this.length;
              if (length === 0) return ''
              if (arguments.length === 0) return utf8Slice(this, 0, length)
              return slowToString.apply(this, arguments)
            };

            Buffer.prototype.toLocaleString = Buffer.prototype.toString;

            Buffer.prototype.equals = function equals (b) {
              if (!Buffer.isBuffer(b)) throw new TypeError('Argument must be a Buffer')
              if (this === b) return true
              return Buffer.compare(this, b) === 0
            };

            Buffer.prototype.inspect = function inspect () {
              var str = '';
              var max = exports.INSPECT_MAX_BYTES;
              str = this.toString('hex', 0, max).replace(/(.{2})/g, '$1 ').trim();
              if (this.length > max) str += ' ... ';
              return '<Buffer ' + str + '>'
            };
            if (customInspectSymbol) {
              Buffer.prototype[customInspectSymbol] = Buffer.prototype.inspect;
            }

            Buffer.prototype.compare = function compare (target, start, end, thisStart, thisEnd) {
              if (isInstance(target, Uint8Array)) {
                target = Buffer.from(target, target.offset, target.byteLength);
              }
              if (!Buffer.isBuffer(target)) {
                throw new TypeError(
                  'The "target" argument must be one of type Buffer or Uint8Array. ' +
                  'Received type ' + (typeof target)
                )
              }

              if (start === undefined) {
                start = 0;
              }
              if (end === undefined) {
                end = target ? target.length : 0;
              }
              if (thisStart === undefined) {
                thisStart = 0;
              }
              if (thisEnd === undefined) {
                thisEnd = this.length;
              }

              if (start < 0 || end > target.length || thisStart < 0 || thisEnd > this.length) {
                throw new RangeError('out of range index')
              }

              if (thisStart >= thisEnd && start >= end) {
                return 0
              }
              if (thisStart >= thisEnd) {
                return -1
              }
              if (start >= end) {
                return 1
              }

              start >>>= 0;
              end >>>= 0;
              thisStart >>>= 0;
              thisEnd >>>= 0;

              if (this === target) return 0

              var x = thisEnd - thisStart;
              var y = end - start;
              var len = Math.min(x, y);

              var thisCopy = this.slice(thisStart, thisEnd);
              var targetCopy = target.slice(start, end);

              for (var i = 0; i < len; ++i) {
                if (thisCopy[i] !== targetCopy[i]) {
                  x = thisCopy[i];
                  y = targetCopy[i];
                  break
                }
              }

              if (x < y) return -1
              if (y < x) return 1
              return 0
            };

            // Finds either the first index of `val` in `buffer` at offset >= `byteOffset`,
            // OR the last index of `val` in `buffer` at offset <= `byteOffset`.
            //
            // Arguments:
            // - buffer - a Buffer to search
            // - val - a string, Buffer, or number
            // - byteOffset - an index into `buffer`; will be clamped to an int32
            // - encoding - an optional encoding, relevant is val is a string
            // - dir - true for indexOf, false for lastIndexOf
            function bidirectionalIndexOf (buffer, val, byteOffset, encoding, dir) {
              // Empty buffer means no match
              if (buffer.length === 0) return -1

              // Normalize byteOffset
              if (typeof byteOffset === 'string') {
                encoding = byteOffset;
                byteOffset = 0;
              } else if (byteOffset > 0x7fffffff) {
                byteOffset = 0x7fffffff;
              } else if (byteOffset < -0x80000000) {
                byteOffset = -0x80000000;
              }
              byteOffset = +byteOffset; // Coerce to Number.
              if (numberIsNaN(byteOffset)) {
                // byteOffset: it it's undefined, null, NaN, "foo", etc, search whole buffer
                byteOffset = dir ? 0 : (buffer.length - 1);
              }

              // Normalize byteOffset: negative offsets start from the end of the buffer
              if (byteOffset < 0) byteOffset = buffer.length + byteOffset;
              if (byteOffset >= buffer.length) {
                if (dir) return -1
                else byteOffset = buffer.length - 1;
              } else if (byteOffset < 0) {
                if (dir) byteOffset = 0;
                else return -1
              }

              // Normalize val
              if (typeof val === 'string') {
                val = Buffer.from(val, encoding);
              }

              // Finally, search either indexOf (if dir is true) or lastIndexOf
              if (Buffer.isBuffer(val)) {
                // Special case: looking for empty string/buffer always fails
                if (val.length === 0) {
                  return -1
                }
                return arrayIndexOf(buffer, val, byteOffset, encoding, dir)
              } else if (typeof val === 'number') {
                val = val & 0xFF; // Search for a byte value [0-255]
                if (typeof Uint8Array.prototype.indexOf === 'function') {
                  if (dir) {
                    return Uint8Array.prototype.indexOf.call(buffer, val, byteOffset)
                  } else {
                    return Uint8Array.prototype.lastIndexOf.call(buffer, val, byteOffset)
                  }
                }
                return arrayIndexOf(buffer, [val], byteOffset, encoding, dir)
              }

              throw new TypeError('val must be string, number or Buffer')
            }

            function arrayIndexOf (arr, val, byteOffset, encoding, dir) {
              var indexSize = 1;
              var arrLength = arr.length;
              var valLength = val.length;

              if (encoding !== undefined) {
                encoding = String(encoding).toLowerCase();
                if (encoding === 'ucs2' || encoding === 'ucs-2' ||
                    encoding === 'utf16le' || encoding === 'utf-16le') {
                  if (arr.length < 2 || val.length < 2) {
                    return -1
                  }
                  indexSize = 2;
                  arrLength /= 2;
                  valLength /= 2;
                  byteOffset /= 2;
                }
              }

              function read (buf, i) {
                if (indexSize === 1) {
                  return buf[i]
                } else {
                  return buf.readUInt16BE(i * indexSize)
                }
              }

              var i;
              if (dir) {
                var foundIndex = -1;
                for (i = byteOffset; i < arrLength; i++) {
                  if (read(arr, i) === read(val, foundIndex === -1 ? 0 : i - foundIndex)) {
                    if (foundIndex === -1) foundIndex = i;
                    if (i - foundIndex + 1 === valLength) return foundIndex * indexSize
                  } else {
                    if (foundIndex !== -1) i -= i - foundIndex;
                    foundIndex = -1;
                  }
                }
              } else {
                if (byteOffset + valLength > arrLength) byteOffset = arrLength - valLength;
                for (i = byteOffset; i >= 0; i--) {
                  var found = true;
                  for (var j = 0; j < valLength; j++) {
                    if (read(arr, i + j) !== read(val, j)) {
                      found = false;
                      break
                    }
                  }
                  if (found) return i
                }
              }

              return -1
            }

            Buffer.prototype.includes = function includes (val, byteOffset, encoding) {
              return this.indexOf(val, byteOffset, encoding) !== -1
            };

            Buffer.prototype.indexOf = function indexOf (val, byteOffset, encoding) {
              return bidirectionalIndexOf(this, val, byteOffset, encoding, true)
            };

            Buffer.prototype.lastIndexOf = function lastIndexOf (val, byteOffset, encoding) {
              return bidirectionalIndexOf(this, val, byteOffset, encoding, false)
            };

            function hexWrite (buf, string, offset, length) {
              offset = Number(offset) || 0;
              var remaining = buf.length - offset;
              if (!length) {
                length = remaining;
              } else {
                length = Number(length);
                if (length > remaining) {
                  length = remaining;
                }
              }

              var strLen = string.length;

              if (length > strLen / 2) {
                length = strLen / 2;
              }
              for (var i = 0; i < length; ++i) {
                var parsed = parseInt(string.substr(i * 2, 2), 16);
                if (numberIsNaN(parsed)) return i
                buf[offset + i] = parsed;
              }
              return i
            }

            function utf8Write (buf, string, offset, length) {
              return blitBuffer(utf8ToBytes(string, buf.length - offset), buf, offset, length)
            }

            function asciiWrite (buf, string, offset, length) {
              return blitBuffer(asciiToBytes(string), buf, offset, length)
            }

            function base64Write (buf, string, offset, length) {
              return blitBuffer(base64ToBytes(string), buf, offset, length)
            }

            function ucs2Write (buf, string, offset, length) {
              return blitBuffer(utf16leToBytes(string, buf.length - offset), buf, offset, length)
            }

            Buffer.prototype.write = function write (string, offset, length, encoding) {
              // Buffer#write(string)
              if (offset === undefined) {
                encoding = 'utf8';
                length = this.length;
                offset = 0;
              // Buffer#write(string, encoding)
              } else if (length === undefined && typeof offset === 'string') {
                encoding = offset;
                length = this.length;
                offset = 0;
              // Buffer#write(string, offset[, length][, encoding])
              } else if (isFinite(offset)) {
                offset = offset >>> 0;
                if (isFinite(length)) {
                  length = length >>> 0;
                  if (encoding === undefined) encoding = 'utf8';
                } else {
                  encoding = length;
                  length = undefined;
                }
              } else {
                throw new Error(
                  'Buffer.write(string, encoding, offset[, length]) is no longer supported'
                )
              }

              var remaining = this.length - offset;
              if (length === undefined || length > remaining) length = remaining;

              if ((string.length > 0 && (length < 0 || offset < 0)) || offset > this.length) {
                throw new RangeError('Attempt to write outside buffer bounds')
              }

              if (!encoding) encoding = 'utf8';

              var loweredCase = false;
              for (;;) {
                switch (encoding) {
                  case 'hex':
                    return hexWrite(this, string, offset, length)

                  case 'utf8':
                  case 'utf-8':
                    return utf8Write(this, string, offset, length)

                  case 'ascii':
                  case 'latin1':
                  case 'binary':
                    return asciiWrite(this, string, offset, length)

                  case 'base64':
                    // Warning: maxLength not taken into account in base64Write
                    return base64Write(this, string, offset, length)

                  case 'ucs2':
                  case 'ucs-2':
                  case 'utf16le':
                  case 'utf-16le':
                    return ucs2Write(this, string, offset, length)

                  default:
                    if (loweredCase) throw new TypeError('Unknown encoding: ' + encoding)
                    encoding = ('' + encoding).toLowerCase();
                    loweredCase = true;
                }
              }
            };

            Buffer.prototype.toJSON = function toJSON () {
              return {
                type: 'Buffer',
                data: Array.prototype.slice.call(this._arr || this, 0)
              }
            };

            function base64Slice (buf, start, end) {
              if (start === 0 && end === buf.length) {
                return base64Js.fromByteArray(buf)
              } else {
                return base64Js.fromByteArray(buf.slice(start, end))
              }
            }

            function utf8Slice (buf, start, end) {
              end = Math.min(buf.length, end);
              var res = [];

              var i = start;
              while (i < end) {
                var firstByte = buf[i];
                var codePoint = null;
                var bytesPerSequence = (firstByte > 0xEF)
                  ? 4
                  : (firstByte > 0xDF)
                      ? 3
                      : (firstByte > 0xBF)
                          ? 2
                          : 1;

                if (i + bytesPerSequence <= end) {
                  var secondByte, thirdByte, fourthByte, tempCodePoint;

                  switch (bytesPerSequence) {
                    case 1:
                      if (firstByte < 0x80) {
                        codePoint = firstByte;
                      }
                      break
                    case 2:
                      secondByte = buf[i + 1];
                      if ((secondByte & 0xC0) === 0x80) {
                        tempCodePoint = (firstByte & 0x1F) << 0x6 | (secondByte & 0x3F);
                        if (tempCodePoint > 0x7F) {
                          codePoint = tempCodePoint;
                        }
                      }
                      break
                    case 3:
                      secondByte = buf[i + 1];
                      thirdByte = buf[i + 2];
                      if ((secondByte & 0xC0) === 0x80 && (thirdByte & 0xC0) === 0x80) {
                        tempCodePoint = (firstByte & 0xF) << 0xC | (secondByte & 0x3F) << 0x6 | (thirdByte & 0x3F);
                        if (tempCodePoint > 0x7FF && (tempCodePoint < 0xD800 || tempCodePoint > 0xDFFF)) {
                          codePoint = tempCodePoint;
                        }
                      }
                      break
                    case 4:
                      secondByte = buf[i + 1];
                      thirdByte = buf[i + 2];
                      fourthByte = buf[i + 3];
                      if ((secondByte & 0xC0) === 0x80 && (thirdByte & 0xC0) === 0x80 && (fourthByte & 0xC0) === 0x80) {
                        tempCodePoint = (firstByte & 0xF) << 0x12 | (secondByte & 0x3F) << 0xC | (thirdByte & 0x3F) << 0x6 | (fourthByte & 0x3F);
                        if (tempCodePoint > 0xFFFF && tempCodePoint < 0x110000) {
                          codePoint = tempCodePoint;
                        }
                      }
                  }
                }

                if (codePoint === null) {
                  // we did not generate a valid codePoint so insert a
                  // replacement char (U+FFFD) and advance only 1 byte
                  codePoint = 0xFFFD;
                  bytesPerSequence = 1;
                } else if (codePoint > 0xFFFF) {
                  // encode to utf16 (surrogate pair dance)
                  codePoint -= 0x10000;
                  res.push(codePoint >>> 10 & 0x3FF | 0xD800);
                  codePoint = 0xDC00 | codePoint & 0x3FF;
                }

                res.push(codePoint);
                i += bytesPerSequence;
              }

              return decodeCodePointsArray(res)
            }

            // Based on http://stackoverflow.com/a/22747272/680742, the browser with
            // the lowest limit is Chrome, with 0x10000 args.
            // We go 1 magnitude less, for safety
            var MAX_ARGUMENTS_LENGTH = 0x1000;

            function decodeCodePointsArray (codePoints) {
              var len = codePoints.length;
              if (len <= MAX_ARGUMENTS_LENGTH) {
                return String.fromCharCode.apply(String, codePoints) // avoid extra slice()
              }

              // Decode in chunks to avoid "call stack size exceeded".
              var res = '';
              var i = 0;
              while (i < len) {
                res += String.fromCharCode.apply(
                  String,
                  codePoints.slice(i, i += MAX_ARGUMENTS_LENGTH)
                );
              }
              return res
            }

            function asciiSlice (buf, start, end) {
              var ret = '';
              end = Math.min(buf.length, end);

              for (var i = start; i < end; ++i) {
                ret += String.fromCharCode(buf[i] & 0x7F);
              }
              return ret
            }

            function latin1Slice (buf, start, end) {
              var ret = '';
              end = Math.min(buf.length, end);

              for (var i = start; i < end; ++i) {
                ret += String.fromCharCode(buf[i]);
              }
              return ret
            }

            function hexSlice (buf, start, end) {
              var len = buf.length;

              if (!start || start < 0) start = 0;
              if (!end || end < 0 || end > len) end = len;

              var out = '';
              for (var i = start; i < end; ++i) {
                out += hexSliceLookupTable[buf[i]];
              }
              return out
            }

            function utf16leSlice (buf, start, end) {
              var bytes = buf.slice(start, end);
              var res = '';
              // If bytes.length is odd, the last 8 bits must be ignored (same as node.js)
              for (var i = 0; i < bytes.length - 1; i += 2) {
                res += String.fromCharCode(bytes[i] + (bytes[i + 1] * 256));
              }
              return res
            }

            Buffer.prototype.slice = function slice (start, end) {
              var len = this.length;
              start = ~~start;
              end = end === undefined ? len : ~~end;

              if (start < 0) {
                start += len;
                if (start < 0) start = 0;
              } else if (start > len) {
                start = len;
              }

              if (end < 0) {
                end += len;
                if (end < 0) end = 0;
              } else if (end > len) {
                end = len;
              }

              if (end < start) end = start;

              var newBuf = this.subarray(start, end);
              // Return an augmented `Uint8Array` instance
              Object.setPrototypeOf(newBuf, Buffer.prototype);

              return newBuf
            };

            /*
             * Need to make sure that buffer isn't trying to write out of bounds.
             */
            function checkOffset (offset, ext, length) {
              if ((offset % 1) !== 0 || offset < 0) throw new RangeError('offset is not uint')
              if (offset + ext > length) throw new RangeError('Trying to access beyond buffer length')
            }

            Buffer.prototype.readUintLE =
            Buffer.prototype.readUIntLE = function readUIntLE (offset, byteLength, noAssert) {
              offset = offset >>> 0;
              byteLength = byteLength >>> 0;
              if (!noAssert) checkOffset(offset, byteLength, this.length);

              var val = this[offset];
              var mul = 1;
              var i = 0;
              while (++i < byteLength && (mul *= 0x100)) {
                val += this[offset + i] * mul;
              }

              return val
            };

            Buffer.prototype.readUintBE =
            Buffer.prototype.readUIntBE = function readUIntBE (offset, byteLength, noAssert) {
              offset = offset >>> 0;
              byteLength = byteLength >>> 0;
              if (!noAssert) {
                checkOffset(offset, byteLength, this.length);
              }

              var val = this[offset + --byteLength];
              var mul = 1;
              while (byteLength > 0 && (mul *= 0x100)) {
                val += this[offset + --byteLength] * mul;
              }

              return val
            };

            Buffer.prototype.readUint8 =
            Buffer.prototype.readUInt8 = function readUInt8 (offset, noAssert) {
              offset = offset >>> 0;
              if (!noAssert) checkOffset(offset, 1, this.length);
              return this[offset]
            };

            Buffer.prototype.readUint16LE =
            Buffer.prototype.readUInt16LE = function readUInt16LE (offset, noAssert) {
              offset = offset >>> 0;
              if (!noAssert) checkOffset(offset, 2, this.length);
              return this[offset] | (this[offset + 1] << 8)
            };

            Buffer.prototype.readUint16BE =
            Buffer.prototype.readUInt16BE = function readUInt16BE (offset, noAssert) {
              offset = offset >>> 0;
              if (!noAssert) checkOffset(offset, 2, this.length);
              return (this[offset] << 8) | this[offset + 1]
            };

            Buffer.prototype.readUint32LE =
            Buffer.prototype.readUInt32LE = function readUInt32LE (offset, noAssert) {
              offset = offset >>> 0;
              if (!noAssert) checkOffset(offset, 4, this.length);

              return ((this[offset]) |
                  (this[offset + 1] << 8) |
                  (this[offset + 2] << 16)) +
                  (this[offset + 3] * 0x1000000)
            };

            Buffer.prototype.readUint32BE =
            Buffer.prototype.readUInt32BE = function readUInt32BE (offset, noAssert) {
              offset = offset >>> 0;
              if (!noAssert) checkOffset(offset, 4, this.length);

              return (this[offset] * 0x1000000) +
                ((this[offset + 1] << 16) |
                (this[offset + 2] << 8) |
                this[offset + 3])
            };

            Buffer.prototype.readIntLE = function readIntLE (offset, byteLength, noAssert) {
              offset = offset >>> 0;
              byteLength = byteLength >>> 0;
              if (!noAssert) checkOffset(offset, byteLength, this.length);

              var val = this[offset];
              var mul = 1;
              var i = 0;
              while (++i < byteLength && (mul *= 0x100)) {
                val += this[offset + i] * mul;
              }
              mul *= 0x80;

              if (val >= mul) val -= Math.pow(2, 8 * byteLength);

              return val
            };

            Buffer.prototype.readIntBE = function readIntBE (offset, byteLength, noAssert) {
              offset = offset >>> 0;
              byteLength = byteLength >>> 0;
              if (!noAssert) checkOffset(offset, byteLength, this.length);

              var i = byteLength;
              var mul = 1;
              var val = this[offset + --i];
              while (i > 0 && (mul *= 0x100)) {
                val += this[offset + --i] * mul;
              }
              mul *= 0x80;

              if (val >= mul) val -= Math.pow(2, 8 * byteLength);

              return val
            };

            Buffer.prototype.readInt8 = function readInt8 (offset, noAssert) {
              offset = offset >>> 0;
              if (!noAssert) checkOffset(offset, 1, this.length);
              if (!(this[offset] & 0x80)) return (this[offset])
              return ((0xff - this[offset] + 1) * -1)
            };

            Buffer.prototype.readInt16LE = function readInt16LE (offset, noAssert) {
              offset = offset >>> 0;
              if (!noAssert) checkOffset(offset, 2, this.length);
              var val = this[offset] | (this[offset + 1] << 8);
              return (val & 0x8000) ? val | 0xFFFF0000 : val
            };

            Buffer.prototype.readInt16BE = function readInt16BE (offset, noAssert) {
              offset = offset >>> 0;
              if (!noAssert) checkOffset(offset, 2, this.length);
              var val = this[offset + 1] | (this[offset] << 8);
              return (val & 0x8000) ? val | 0xFFFF0000 : val
            };

            Buffer.prototype.readInt32LE = function readInt32LE (offset, noAssert) {
              offset = offset >>> 0;
              if (!noAssert) checkOffset(offset, 4, this.length);

              return (this[offset]) |
                (this[offset + 1] << 8) |
                (this[offset + 2] << 16) |
                (this[offset + 3] << 24)
            };

            Buffer.prototype.readInt32BE = function readInt32BE (offset, noAssert) {
              offset = offset >>> 0;
              if (!noAssert) checkOffset(offset, 4, this.length);

              return (this[offset] << 24) |
                (this[offset + 1] << 16) |
                (this[offset + 2] << 8) |
                (this[offset + 3])
            };

            Buffer.prototype.readFloatLE = function readFloatLE (offset, noAssert) {
              offset = offset >>> 0;
              if (!noAssert) checkOffset(offset, 4, this.length);
              return ieee754.read(this, offset, true, 23, 4)
            };

            Buffer.prototype.readFloatBE = function readFloatBE (offset, noAssert) {
              offset = offset >>> 0;
              if (!noAssert) checkOffset(offset, 4, this.length);
              return ieee754.read(this, offset, false, 23, 4)
            };

            Buffer.prototype.readDoubleLE = function readDoubleLE (offset, noAssert) {
              offset = offset >>> 0;
              if (!noAssert) checkOffset(offset, 8, this.length);
              return ieee754.read(this, offset, true, 52, 8)
            };

            Buffer.prototype.readDoubleBE = function readDoubleBE (offset, noAssert) {
              offset = offset >>> 0;
              if (!noAssert) checkOffset(offset, 8, this.length);
              return ieee754.read(this, offset, false, 52, 8)
            };

            function checkInt (buf, value, offset, ext, max, min) {
              if (!Buffer.isBuffer(buf)) throw new TypeError('"buffer" argument must be a Buffer instance')
              if (value > max || value < min) throw new RangeError('"value" argument is out of bounds')
              if (offset + ext > buf.length) throw new RangeError('Index out of range')
            }

            Buffer.prototype.writeUintLE =
            Buffer.prototype.writeUIntLE = function writeUIntLE (value, offset, byteLength, noAssert) {
              value = +value;
              offset = offset >>> 0;
              byteLength = byteLength >>> 0;
              if (!noAssert) {
                var maxBytes = Math.pow(2, 8 * byteLength) - 1;
                checkInt(this, value, offset, byteLength, maxBytes, 0);
              }

              var mul = 1;
              var i = 0;
              this[offset] = value & 0xFF;
              while (++i < byteLength && (mul *= 0x100)) {
                this[offset + i] = (value / mul) & 0xFF;
              }

              return offset + byteLength
            };

            Buffer.prototype.writeUintBE =
            Buffer.prototype.writeUIntBE = function writeUIntBE (value, offset, byteLength, noAssert) {
              value = +value;
              offset = offset >>> 0;
              byteLength = byteLength >>> 0;
              if (!noAssert) {
                var maxBytes = Math.pow(2, 8 * byteLength) - 1;
                checkInt(this, value, offset, byteLength, maxBytes, 0);
              }

              var i = byteLength - 1;
              var mul = 1;
              this[offset + i] = value & 0xFF;
              while (--i >= 0 && (mul *= 0x100)) {
                this[offset + i] = (value / mul) & 0xFF;
              }

              return offset + byteLength
            };

            Buffer.prototype.writeUint8 =
            Buffer.prototype.writeUInt8 = function writeUInt8 (value, offset, noAssert) {
              value = +value;
              offset = offset >>> 0;
              if (!noAssert) checkInt(this, value, offset, 1, 0xff, 0);
              this[offset] = (value & 0xff);
              return offset + 1
            };

            Buffer.prototype.writeUint16LE =
            Buffer.prototype.writeUInt16LE = function writeUInt16LE (value, offset, noAssert) {
              value = +value;
              offset = offset >>> 0;
              if (!noAssert) checkInt(this, value, offset, 2, 0xffff, 0);
              this[offset] = (value & 0xff);
              this[offset + 1] = (value >>> 8);
              return offset + 2
            };

            Buffer.prototype.writeUint16BE =
            Buffer.prototype.writeUInt16BE = function writeUInt16BE (value, offset, noAssert) {
              value = +value;
              offset = offset >>> 0;
              if (!noAssert) checkInt(this, value, offset, 2, 0xffff, 0);
              this[offset] = (value >>> 8);
              this[offset + 1] = (value & 0xff);
              return offset + 2
            };

            Buffer.prototype.writeUint32LE =
            Buffer.prototype.writeUInt32LE = function writeUInt32LE (value, offset, noAssert) {
              value = +value;
              offset = offset >>> 0;
              if (!noAssert) checkInt(this, value, offset, 4, 0xffffffff, 0);
              this[offset + 3] = (value >>> 24);
              this[offset + 2] = (value >>> 16);
              this[offset + 1] = (value >>> 8);
              this[offset] = (value & 0xff);
              return offset + 4
            };

            Buffer.prototype.writeUint32BE =
            Buffer.prototype.writeUInt32BE = function writeUInt32BE (value, offset, noAssert) {
              value = +value;
              offset = offset >>> 0;
              if (!noAssert) checkInt(this, value, offset, 4, 0xffffffff, 0);
              this[offset] = (value >>> 24);
              this[offset + 1] = (value >>> 16);
              this[offset + 2] = (value >>> 8);
              this[offset + 3] = (value & 0xff);
              return offset + 4
            };

            Buffer.prototype.writeIntLE = function writeIntLE (value, offset, byteLength, noAssert) {
              value = +value;
              offset = offset >>> 0;
              if (!noAssert) {
                var limit = Math.pow(2, (8 * byteLength) - 1);

                checkInt(this, value, offset, byteLength, limit - 1, -limit);
              }

              var i = 0;
              var mul = 1;
              var sub = 0;
              this[offset] = value & 0xFF;
              while (++i < byteLength && (mul *= 0x100)) {
                if (value < 0 && sub === 0 && this[offset + i - 1] !== 0) {
                  sub = 1;
                }
                this[offset + i] = ((value / mul) >> 0) - sub & 0xFF;
              }

              return offset + byteLength
            };

            Buffer.prototype.writeIntBE = function writeIntBE (value, offset, byteLength, noAssert) {
              value = +value;
              offset = offset >>> 0;
              if (!noAssert) {
                var limit = Math.pow(2, (8 * byteLength) - 1);

                checkInt(this, value, offset, byteLength, limit - 1, -limit);
              }

              var i = byteLength - 1;
              var mul = 1;
              var sub = 0;
              this[offset + i] = value & 0xFF;
              while (--i >= 0 && (mul *= 0x100)) {
                if (value < 0 && sub === 0 && this[offset + i + 1] !== 0) {
                  sub = 1;
                }
                this[offset + i] = ((value / mul) >> 0) - sub & 0xFF;
              }

              return offset + byteLength
            };

            Buffer.prototype.writeInt8 = function writeInt8 (value, offset, noAssert) {
              value = +value;
              offset = offset >>> 0;
              if (!noAssert) checkInt(this, value, offset, 1, 0x7f, -0x80);
              if (value < 0) value = 0xff + value + 1;
              this[offset] = (value & 0xff);
              return offset + 1
            };

            Buffer.prototype.writeInt16LE = function writeInt16LE (value, offset, noAssert) {
              value = +value;
              offset = offset >>> 0;
              if (!noAssert) checkInt(this, value, offset, 2, 0x7fff, -0x8000);
              this[offset] = (value & 0xff);
              this[offset + 1] = (value >>> 8);
              return offset + 2
            };

            Buffer.prototype.writeInt16BE = function writeInt16BE (value, offset, noAssert) {
              value = +value;
              offset = offset >>> 0;
              if (!noAssert) checkInt(this, value, offset, 2, 0x7fff, -0x8000);
              this[offset] = (value >>> 8);
              this[offset + 1] = (value & 0xff);
              return offset + 2
            };

            Buffer.prototype.writeInt32LE = function writeInt32LE (value, offset, noAssert) {
              value = +value;
              offset = offset >>> 0;
              if (!noAssert) checkInt(this, value, offset, 4, 0x7fffffff, -0x80000000);
              this[offset] = (value & 0xff);
              this[offset + 1] = (value >>> 8);
              this[offset + 2] = (value >>> 16);
              this[offset + 3] = (value >>> 24);
              return offset + 4
            };

            Buffer.prototype.writeInt32BE = function writeInt32BE (value, offset, noAssert) {
              value = +value;
              offset = offset >>> 0;
              if (!noAssert) checkInt(this, value, offset, 4, 0x7fffffff, -0x80000000);
              if (value < 0) value = 0xffffffff + value + 1;
              this[offset] = (value >>> 24);
              this[offset + 1] = (value >>> 16);
              this[offset + 2] = (value >>> 8);
              this[offset + 3] = (value & 0xff);
              return offset + 4
            };

            function checkIEEE754 (buf, value, offset, ext, max, min) {
              if (offset + ext > buf.length) throw new RangeError('Index out of range')
              if (offset < 0) throw new RangeError('Index out of range')
            }

            function writeFloat (buf, value, offset, littleEndian, noAssert) {
              value = +value;
              offset = offset >>> 0;
              if (!noAssert) {
                checkIEEE754(buf, value, offset, 4);
              }
              ieee754.write(buf, value, offset, littleEndian, 23, 4);
              return offset + 4
            }

            Buffer.prototype.writeFloatLE = function writeFloatLE (value, offset, noAssert) {
              return writeFloat(this, value, offset, true, noAssert)
            };

            Buffer.prototype.writeFloatBE = function writeFloatBE (value, offset, noAssert) {
              return writeFloat(this, value, offset, false, noAssert)
            };

            function writeDouble (buf, value, offset, littleEndian, noAssert) {
              value = +value;
              offset = offset >>> 0;
              if (!noAssert) {
                checkIEEE754(buf, value, offset, 8);
              }
              ieee754.write(buf, value, offset, littleEndian, 52, 8);
              return offset + 8
            }

            Buffer.prototype.writeDoubleLE = function writeDoubleLE (value, offset, noAssert) {
              return writeDouble(this, value, offset, true, noAssert)
            };

            Buffer.prototype.writeDoubleBE = function writeDoubleBE (value, offset, noAssert) {
              return writeDouble(this, value, offset, false, noAssert)
            };

            // copy(targetBuffer, targetStart=0, sourceStart=0, sourceEnd=buffer.length)
            Buffer.prototype.copy = function copy (target, targetStart, start, end) {
              if (!Buffer.isBuffer(target)) throw new TypeError('argument should be a Buffer')
              if (!start) start = 0;
              if (!end && end !== 0) end = this.length;
              if (targetStart >= target.length) targetStart = target.length;
              if (!targetStart) targetStart = 0;
              if (end > 0 && end < start) end = start;

              // Copy 0 bytes; we're done
              if (end === start) return 0
              if (target.length === 0 || this.length === 0) return 0

              // Fatal error conditions
              if (targetStart < 0) {
                throw new RangeError('targetStart out of bounds')
              }
              if (start < 0 || start >= this.length) throw new RangeError('Index out of range')
              if (end < 0) throw new RangeError('sourceEnd out of bounds')

              // Are we oob?
              if (end > this.length) end = this.length;
              if (target.length - targetStart < end - start) {
                end = target.length - targetStart + start;
              }

              var len = end - start;

              if (this === target && typeof Uint8Array.prototype.copyWithin === 'function') {
                // Use built-in when available, missing from IE11
                this.copyWithin(targetStart, start, end);
              } else {
                Uint8Array.prototype.set.call(
                  target,
                  this.subarray(start, end),
                  targetStart
                );
              }

              return len
            };

            // Usage:
            //    buffer.fill(number[, offset[, end]])
            //    buffer.fill(buffer[, offset[, end]])
            //    buffer.fill(string[, offset[, end]][, encoding])
            Buffer.prototype.fill = function fill (val, start, end, encoding) {
              // Handle string cases:
              if (typeof val === 'string') {
                if (typeof start === 'string') {
                  encoding = start;
                  start = 0;
                  end = this.length;
                } else if (typeof end === 'string') {
                  encoding = end;
                  end = this.length;
                }
                if (encoding !== undefined && typeof encoding !== 'string') {
                  throw new TypeError('encoding must be a string')
                }
                if (typeof encoding === 'string' && !Buffer.isEncoding(encoding)) {
                  throw new TypeError('Unknown encoding: ' + encoding)
                }
                if (val.length === 1) {
                  var code = val.charCodeAt(0);
                  if ((encoding === 'utf8' && code < 128) ||
                      encoding === 'latin1') {
                    // Fast path: If `val` fits into a single byte, use that numeric value.
                    val = code;
                  }
                }
              } else if (typeof val === 'number') {
                val = val & 255;
              } else if (typeof val === 'boolean') {
                val = Number(val);
              }

              // Invalid ranges are not set to a default, so can range check early.
              if (start < 0 || this.length < start || this.length < end) {
                throw new RangeError('Out of range index')
              }

              if (end <= start) {
                return this
              }

              start = start >>> 0;
              end = end === undefined ? this.length : end >>> 0;

              if (!val) val = 0;

              var i;
              if (typeof val === 'number') {
                for (i = start; i < end; ++i) {
                  this[i] = val;
                }
              } else {
                var bytes = Buffer.isBuffer(val)
                  ? val
                  : Buffer.from(val, encoding);
                var len = bytes.length;
                if (len === 0) {
                  throw new TypeError('The value "' + val +
                    '" is invalid for argument "value"')
                }
                for (i = 0; i < end - start; ++i) {
                  this[i + start] = bytes[i % len];
                }
              }

              return this
            };

            // HELPER FUNCTIONS
            // ================

            var INVALID_BASE64_RE = /[^+/0-9A-Za-z-_]/g;

            function base64clean (str) {
              // Node takes equal signs as end of the Base64 encoding
              str = str.split('=')[0];
              // Node strips out invalid characters like \n and \t from the string, base64-js does not
              str = str.trim().replace(INVALID_BASE64_RE, '');
              // Node converts strings with length < 2 to ''
              if (str.length < 2) return ''
              // Node allows for non-padded base64 strings (missing trailing ===), base64-js does not
              while (str.length % 4 !== 0) {
                str = str + '=';
              }
              return str
            }

            function utf8ToBytes (string, units) {
              units = units || Infinity;
              var codePoint;
              var length = string.length;
              var leadSurrogate = null;
              var bytes = [];

              for (var i = 0; i < length; ++i) {
                codePoint = string.charCodeAt(i);

                // is surrogate component
                if (codePoint > 0xD7FF && codePoint < 0xE000) {
                  // last char was a lead
                  if (!leadSurrogate) {
                    // no lead yet
                    if (codePoint > 0xDBFF) {
                      // unexpected trail
                      if ((units -= 3) > -1) bytes.push(0xEF, 0xBF, 0xBD);
                      continue
                    } else if (i + 1 === length) {
                      // unpaired lead
                      if ((units -= 3) > -1) bytes.push(0xEF, 0xBF, 0xBD);
                      continue
                    }

                    // valid lead
                    leadSurrogate = codePoint;

                    continue
                  }

                  // 2 leads in a row
                  if (codePoint < 0xDC00) {
                    if ((units -= 3) > -1) bytes.push(0xEF, 0xBF, 0xBD);
                    leadSurrogate = codePoint;
                    continue
                  }

                  // valid surrogate pair
                  codePoint = (leadSurrogate - 0xD800 << 10 | codePoint - 0xDC00) + 0x10000;
                } else if (leadSurrogate) {
                  // valid bmp char, but last char was a lead
                  if ((units -= 3) > -1) bytes.push(0xEF, 0xBF, 0xBD);
                }

                leadSurrogate = null;

                // encode utf8
                if (codePoint < 0x80) {
                  if ((units -= 1) < 0) break
                  bytes.push(codePoint);
                } else if (codePoint < 0x800) {
                  if ((units -= 2) < 0) break
                  bytes.push(
                    codePoint >> 0x6 | 0xC0,
                    codePoint & 0x3F | 0x80
                  );
                } else if (codePoint < 0x10000) {
                  if ((units -= 3) < 0) break
                  bytes.push(
                    codePoint >> 0xC | 0xE0,
                    codePoint >> 0x6 & 0x3F | 0x80,
                    codePoint & 0x3F | 0x80
                  );
                } else if (codePoint < 0x110000) {
                  if ((units -= 4) < 0) break
                  bytes.push(
                    codePoint >> 0x12 | 0xF0,
                    codePoint >> 0xC & 0x3F | 0x80,
                    codePoint >> 0x6 & 0x3F | 0x80,
                    codePoint & 0x3F | 0x80
                  );
                } else {
                  throw new Error('Invalid code point')
                }
              }

              return bytes
            }

            function asciiToBytes (str) {
              var byteArray = [];
              for (var i = 0; i < str.length; ++i) {
                // Node's code seems to be doing this and not & 0x7F..
                byteArray.push(str.charCodeAt(i) & 0xFF);
              }
              return byteArray
            }

            function utf16leToBytes (str, units) {
              var c, hi, lo;
              var byteArray = [];
              for (var i = 0; i < str.length; ++i) {
                if ((units -= 2) < 0) break

                c = str.charCodeAt(i);
                hi = c >> 8;
                lo = c % 256;
                byteArray.push(lo);
                byteArray.push(hi);
              }

              return byteArray
            }

            function base64ToBytes (str) {
              return base64Js.toByteArray(base64clean(str))
            }

            function blitBuffer (src, dst, offset, length) {
              for (var i = 0; i < length; ++i) {
                if ((i + offset >= dst.length) || (i >= src.length)) break
                dst[i + offset] = src[i];
              }
              return i
            }

            // ArrayBuffer or Uint8Array objects from other contexts (i.e. iframes) do not pass
            // the `instanceof` check but they should be treated as of that type.
            // See: https://github.com/feross/buffer/issues/166
            function isInstance (obj, type) {
              return obj instanceof type ||
                (obj != null && obj.constructor != null && obj.constructor.name != null &&
                  obj.constructor.name === type.name)
            }
            function numberIsNaN (obj) {
              // For IE11 support
              return obj !== obj // eslint-disable-line no-self-compare
            }

            // Create lookup table for `toString('hex')`
            // See: https://github.com/feross/buffer/issues/219
            var hexSliceLookupTable = (function () {
              var alphabet = '0123456789abcdef';
              var table = new Array(256);
              for (var i = 0; i < 16; ++i) {
                var i16 = i * 16;
                for (var j = 0; j < 16; ++j) {
                  table[i16 + j] = alphabet[i] + alphabet[j];
                }
              }
              return table
            })();
            });

            var Buffer$7 = buffer.Buffer;

            var safer = {};

            var key;

            for (key in buffer) {
              if (!buffer.hasOwnProperty(key)) continue
              if (key === 'SlowBuffer' || key === 'Buffer') continue
              safer[key] = buffer[key];
            }

            var Safer = safer.Buffer = {};
            for (key in Buffer$7) {
              if (!Buffer$7.hasOwnProperty(key)) continue
              if (key === 'allocUnsafe' || key === 'allocUnsafeSlow') continue
              Safer[key] = Buffer$7[key];
            }

            safer.Buffer.prototype = Buffer$7.prototype;

            if (!Safer.from || Safer.from === Uint8Array.from) {
              Safer.from = function (value, encodingOrOffset, length) {
                if (typeof value === 'number') {
                  throw new TypeError('The "value" argument must not be of type number. Received type ' + typeof value)
                }
                if (value && typeof value.length === 'undefined') {
                  throw new TypeError('The first argument must be one of type string, Buffer, ArrayBuffer, Array, or Array-like Object. Received type ' + typeof value)
                }
                return Buffer$7(value, encodingOrOffset, length)
              };
            }

            if (!Safer.alloc) {
              Safer.alloc = function (size, fill, encoding) {
                if (typeof size !== 'number') {
                  throw new TypeError('The "size" argument must be of type number. Received type ' + typeof size)
                }
                if (size < 0 || size >= 2 * (1 << 30)) {
                  throw new RangeError('The value "' + size + '" is invalid for option "size"')
                }
                var buf = Buffer$7(size);
                if (!fill || fill.length === 0) {
                  buf.fill(0);
                } else if (typeof encoding === 'string') {
                  buf.fill(fill, encoding);
                } else {
                  buf.fill(fill);
                }
                return buf
              };
            }

            if (!safer.kStringMaxLength) {
              try {
                safer.kStringMaxLength = process.binding('buffer').kStringMaxLength;
              } catch (e) {
                // we can't determine kStringMaxLength in environments where process.binding
                // is unsupported, so let's not set it
              }
            }

            if (!safer.constants) {
              safer.constants = {
                MAX_LENGTH: safer.kMaxLength
              };
              if (safer.kStringMaxLength) {
                safer.constants.MAX_STRING_LENGTH = safer.kStringMaxLength;
              }
            }

            var safer_1 = safer;

            var BOMChar = '\uFEFF';

            var PrependBOM = PrependBOMWrapper;
            function PrependBOMWrapper(encoder, options) {
                this.encoder = encoder;
                this.addBOM = true;
            }

            PrependBOMWrapper.prototype.write = function(str) {
                if (this.addBOM) {
                    str = BOMChar + str;
                    this.addBOM = false;
                }

                return this.encoder.write(str);
            };

            PrependBOMWrapper.prototype.end = function() {
                return this.encoder.end();
            };


            //------------------------------------------------------------------------------

            var StripBOM = StripBOMWrapper;
            function StripBOMWrapper(decoder, options) {
                this.decoder = decoder;
                this.pass = false;
                this.options = options || {};
            }

            StripBOMWrapper.prototype.write = function(buf) {
                var res = this.decoder.write(buf);
                if (this.pass || !res)
                    return res;

                if (res[0] === BOMChar) {
                    res = res.slice(1);
                    if (typeof this.options.stripBOM === 'function')
                        this.options.stripBOM();
                }

                this.pass = true;
                return res;
            };

            StripBOMWrapper.prototype.end = function() {
                return this.decoder.end();
            };

            var bomHandling = {
            	PrependBOM: PrependBOM,
            	StripBOM: StripBOM
            };

            var string_decoder = createCommonjsModule(function (module, exports) {
            // Copyright Joyent, Inc. and other Node contributors.
            //
            // Permission is hereby granted, free of charge, to any person obtaining a
            // copy of this software and associated documentation files (the
            // "Software"), to deal in the Software without restriction, including
            // without limitation the rights to use, copy, modify, merge, publish,
            // distribute, sublicense, and/or sell copies of the Software, and to permit
            // persons to whom the Software is furnished to do so, subject to the
            // following conditions:
            //
            // The above copyright notice and this permission notice shall be included
            // in all copies or substantial portions of the Software.
            //
            // THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS
            // OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
            // MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN
            // NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,
            // DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR
            // OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE
            // USE OR OTHER DEALINGS IN THE SOFTWARE.

            var Buffer = buffer.Buffer;

            var isBufferEncoding = Buffer.isEncoding
              || function(encoding) {
                   switch (encoding && encoding.toLowerCase()) {
                     case 'hex': case 'utf8': case 'utf-8': case 'ascii': case 'binary': case 'base64': case 'ucs2': case 'ucs-2': case 'utf16le': case 'utf-16le': case 'raw': return true;
                     default: return false;
                   }
                 };


            function assertEncoding(encoding) {
              if (encoding && !isBufferEncoding(encoding)) {
                throw new Error('Unknown encoding: ' + encoding);
              }
            }

            // StringDecoder provides an interface for efficiently splitting a series of
            // buffers into a series of JS strings without breaking apart multi-byte
            // characters. CESU-8 is handled as part of the UTF-8 encoding.
            //
            // @TODO Handling all encodings inside a single object makes it very difficult
            // to reason about this code, so it should be split up in the future.
            // @TODO There should be a utf8-strict encoding that rejects invalid UTF-8 code
            // points as used by CESU-8.
            var StringDecoder = exports.StringDecoder = function(encoding) {
              this.encoding = (encoding || 'utf8').toLowerCase().replace(/[-_]/, '');
              assertEncoding(encoding);
              switch (this.encoding) {
                case 'utf8':
                  // CESU-8 represents each of Surrogate Pair by 3-bytes
                  this.surrogateSize = 3;
                  break;
                case 'ucs2':
                case 'utf16le':
                  // UTF-16 represents each of Surrogate Pair by 2-bytes
                  this.surrogateSize = 2;
                  this.detectIncompleteChar = utf16DetectIncompleteChar;
                  break;
                case 'base64':
                  // Base-64 stores 3 bytes in 4 chars, and pads the remainder.
                  this.surrogateSize = 3;
                  this.detectIncompleteChar = base64DetectIncompleteChar;
                  break;
                default:
                  this.write = passThroughWrite;
                  return;
              }

              // Enough space to store all bytes of a single character. UTF-8 needs 4
              // bytes, but CESU-8 may require up to 6 (3 bytes per surrogate).
              this.charBuffer = new Buffer(6);
              // Number of bytes received for the current incomplete multi-byte character.
              this.charReceived = 0;
              // Number of bytes expected for the current incomplete multi-byte character.
              this.charLength = 0;
            };


            // write decodes the given buffer and returns it as JS string that is
            // guaranteed to not contain any partial multi-byte characters. Any partial
            // character found at the end of the buffer is buffered up, and will be
            // returned when calling write again with the remaining bytes.
            //
            // Note: Converting a Buffer containing an orphan surrogate to a String
            // currently works, but converting a String to a Buffer (via `new Buffer`, or
            // Buffer#write) will replace incomplete surrogates with the unicode
            // replacement character. See https://codereview.chromium.org/121173009/ .
            StringDecoder.prototype.write = function(buffer) {
              var charStr = '';
              // if our last write ended with an incomplete multibyte character
              while (this.charLength) {
                // determine how many remaining bytes this buffer has to offer for this char
                var available = (buffer.length >= this.charLength - this.charReceived) ?
                    this.charLength - this.charReceived :
                    buffer.length;

                // add the new bytes to the char buffer
                buffer.copy(this.charBuffer, this.charReceived, 0, available);
                this.charReceived += available;

                if (this.charReceived < this.charLength) {
                  // still not enough chars in this buffer? wait for more ...
                  return '';
                }

                // remove bytes belonging to the current character from the buffer
                buffer = buffer.slice(available, buffer.length);

                // get the character that was split
                charStr = this.charBuffer.slice(0, this.charLength).toString(this.encoding);

                // CESU-8: lead surrogate (D800-DBFF) is also the incomplete character
                var charCode = charStr.charCodeAt(charStr.length - 1);
                if (charCode >= 0xD800 && charCode <= 0xDBFF) {
                  this.charLength += this.surrogateSize;
                  charStr = '';
                  continue;
                }
                this.charReceived = this.charLength = 0;

                // if there are no more bytes in this buffer, just emit our char
                if (buffer.length === 0) {
                  return charStr;
                }
                break;
              }

              // determine and set charLength / charReceived
              this.detectIncompleteChar(buffer);

              var end = buffer.length;
              if (this.charLength) {
                // buffer the incomplete character bytes we got
                buffer.copy(this.charBuffer, 0, buffer.length - this.charReceived, end);
                end -= this.charReceived;
              }

              charStr += buffer.toString(this.encoding, 0, end);

              var end = charStr.length - 1;
              var charCode = charStr.charCodeAt(end);
              // CESU-8: lead surrogate (D800-DBFF) is also the incomplete character
              if (charCode >= 0xD800 && charCode <= 0xDBFF) {
                var size = this.surrogateSize;
                this.charLength += size;
                this.charReceived += size;
                this.charBuffer.copy(this.charBuffer, size, 0, size);
                buffer.copy(this.charBuffer, 0, 0, size);
                return charStr.substring(0, end);
              }

              // or just emit the charStr
              return charStr;
            };

            // detectIncompleteChar determines if there is an incomplete UTF-8 character at
            // the end of the given buffer. If so, it sets this.charLength to the byte
            // length that character, and sets this.charReceived to the number of bytes
            // that are available for this character.
            StringDecoder.prototype.detectIncompleteChar = function(buffer) {
              // determine how many bytes we have to check at the end of this buffer
              var i = (buffer.length >= 3) ? 3 : buffer.length;

              // Figure out if one of the last i bytes of our buffer announces an
              // incomplete char.
              for (; i > 0; i--) {
                var c = buffer[buffer.length - i];

                // See http://en.wikipedia.org/wiki/UTF-8#Description

                // 110XXXXX
                if (i == 1 && c >> 5 == 0x06) {
                  this.charLength = 2;
                  break;
                }

                // 1110XXXX
                if (i <= 2 && c >> 4 == 0x0E) {
                  this.charLength = 3;
                  break;
                }

                // 11110XXX
                if (i <= 3 && c >> 3 == 0x1E) {
                  this.charLength = 4;
                  break;
                }
              }
              this.charReceived = i;
            };

            StringDecoder.prototype.end = function(buffer) {
              var res = '';
              if (buffer && buffer.length)
                res = this.write(buffer);

              if (this.charReceived) {
                var cr = this.charReceived;
                var buf = this.charBuffer;
                var enc = this.encoding;
                res += buf.slice(0, cr).toString(enc);
              }

              return res;
            };

            function passThroughWrite(buffer) {
              return buffer.toString(this.encoding);
            }

            function utf16DetectIncompleteChar(buffer) {
              this.charReceived = buffer.length % 2;
              this.charLength = this.charReceived ? 2 : 0;
            }

            function base64DetectIncompleteChar(buffer) {
              this.charReceived = buffer.length % 3;
              this.charLength = this.charReceived ? 3 : 0;
            }
            });

            var Buffer$6 = safer_1.Buffer;

            // Export Node.js internal encodings.

            var internal = {
                // Encodings
                utf8:   { type: "_internal", bomAware: true},
                cesu8:  { type: "_internal", bomAware: true},
                unicode11utf8: "utf8",

                ucs2:   { type: "_internal", bomAware: true},
                utf16le: "ucs2",

                binary: { type: "_internal" },
                base64: { type: "_internal" },
                hex:    { type: "_internal" },

                // Codec.
                _internal: InternalCodec,
            };

            //------------------------------------------------------------------------------

            function InternalCodec(codecOptions, iconv) {
                this.enc = codecOptions.encodingName;
                this.bomAware = codecOptions.bomAware;

                if (this.enc === "base64")
                    this.encoder = InternalEncoderBase64;
                else if (this.enc === "cesu8") {
                    this.enc = "utf8"; // Use utf8 for decoding.
                    this.encoder = InternalEncoderCesu8;

                    // Add decoder for versions of Node not supporting CESU-8
                    if (Buffer$6.from('eda0bdedb2a9', 'hex').toString() !== '💩') {
                        this.decoder = InternalDecoderCesu8;
                        this.defaultCharUnicode = iconv.defaultCharUnicode;
                    }
                }
            }

            InternalCodec.prototype.encoder = InternalEncoder;
            InternalCodec.prototype.decoder = InternalDecoder;

            //------------------------------------------------------------------------------

            // We use node.js internal decoder. Its signature is the same as ours.
            var StringDecoder = string_decoder.StringDecoder;

            if (!StringDecoder.prototype.end) // Node v0.8 doesn't have this method.
                StringDecoder.prototype.end = function() {};


            function InternalDecoder(options, codec) {
                this.decoder = new StringDecoder(codec.enc);
            }

            InternalDecoder.prototype.write = function(buf) {
                if (!Buffer$6.isBuffer(buf)) {
                    buf = Buffer$6.from(buf);
                }

                return this.decoder.write(buf);
            };

            InternalDecoder.prototype.end = function() {
                return this.decoder.end();
            };


            //------------------------------------------------------------------------------
            // Encoder is mostly trivial

            function InternalEncoder(options, codec) {
                this.enc = codec.enc;
            }

            InternalEncoder.prototype.write = function(str) {
                return Buffer$6.from(str, this.enc);
            };

            InternalEncoder.prototype.end = function() {
            };


            //------------------------------------------------------------------------------
            // Except base64 encoder, which must keep its state.

            function InternalEncoderBase64(options, codec) {
                this.prevStr = '';
            }

            InternalEncoderBase64.prototype.write = function(str) {
                str = this.prevStr + str;
                var completeQuads = str.length - (str.length % 4);
                this.prevStr = str.slice(completeQuads);
                str = str.slice(0, completeQuads);

                return Buffer$6.from(str, "base64");
            };

            InternalEncoderBase64.prototype.end = function() {
                return Buffer$6.from(this.prevStr, "base64");
            };


            //------------------------------------------------------------------------------
            // CESU-8 encoder is also special.

            function InternalEncoderCesu8(options, codec) {
            }

            InternalEncoderCesu8.prototype.write = function(str) {
                var buf = Buffer$6.alloc(str.length * 3), bufIdx = 0;
                for (var i = 0; i < str.length; i++) {
                    var charCode = str.charCodeAt(i);
                    // Naive implementation, but it works because CESU-8 is especially easy
                    // to convert from UTF-16 (which all JS strings are encoded in).
                    if (charCode < 0x80)
                        buf[bufIdx++] = charCode;
                    else if (charCode < 0x800) {
                        buf[bufIdx++] = 0xC0 + (charCode >>> 6);
                        buf[bufIdx++] = 0x80 + (charCode & 0x3f);
                    }
                    else { // charCode will always be < 0x10000 in javascript.
                        buf[bufIdx++] = 0xE0 + (charCode >>> 12);
                        buf[bufIdx++] = 0x80 + ((charCode >>> 6) & 0x3f);
                        buf[bufIdx++] = 0x80 + (charCode & 0x3f);
                    }
                }
                return buf.slice(0, bufIdx);
            };

            InternalEncoderCesu8.prototype.end = function() {
            };

            //------------------------------------------------------------------------------
            // CESU-8 decoder is not implemented in Node v4.0+

            function InternalDecoderCesu8(options, codec) {
                this.acc = 0;
                this.contBytes = 0;
                this.accBytes = 0;
                this.defaultCharUnicode = codec.defaultCharUnicode;
            }

            InternalDecoderCesu8.prototype.write = function(buf) {
                var acc = this.acc, contBytes = this.contBytes, accBytes = this.accBytes, 
                    res = '';
                for (var i = 0; i < buf.length; i++) {
                    var curByte = buf[i];
                    if ((curByte & 0xC0) !== 0x80) { // Leading byte
                        if (contBytes > 0) { // Previous code is invalid
                            res += this.defaultCharUnicode;
                            contBytes = 0;
                        }

                        if (curByte < 0x80) { // Single-byte code
                            res += String.fromCharCode(curByte);
                        } else if (curByte < 0xE0) { // Two-byte code
                            acc = curByte & 0x1F;
                            contBytes = 1; accBytes = 1;
                        } else if (curByte < 0xF0) { // Three-byte code
                            acc = curByte & 0x0F;
                            contBytes = 2; accBytes = 1;
                        } else { // Four or more are not supported for CESU-8.
                            res += this.defaultCharUnicode;
                        }
                    } else { // Continuation byte
                        if (contBytes > 0) { // We're waiting for it.
                            acc = (acc << 6) | (curByte & 0x3f);
                            contBytes--; accBytes++;
                            if (contBytes === 0) {
                                // Check for overlong encoding, but support Modified UTF-8 (encoding NULL as C0 80)
                                if (accBytes === 2 && acc < 0x80 && acc > 0)
                                    res += this.defaultCharUnicode;
                                else if (accBytes === 3 && acc < 0x800)
                                    res += this.defaultCharUnicode;
                                else
                                    // Actually add character.
                                    res += String.fromCharCode(acc);
                            }
                        } else { // Unexpected continuation byte
                            res += this.defaultCharUnicode;
                        }
                    }
                }
                this.acc = acc; this.contBytes = contBytes; this.accBytes = accBytes;
                return res;
            };

            InternalDecoderCesu8.prototype.end = function() {
                var res = 0;
                if (this.contBytes > 0)
                    res += this.defaultCharUnicode;
                return res;
            };

            var Buffer$5 = safer_1.Buffer;

            // == UTF32-LE/BE codec. ==========================================================

            var _utf32 = Utf32Codec;

            function Utf32Codec(codecOptions, iconv) {
                this.iconv = iconv;
                this.bomAware = true;
                this.isLE = codecOptions.isLE;
            }

            var utf32le = { type: '_utf32', isLE: true };
            var utf32be = { type: '_utf32', isLE: false };

            // Aliases
            var ucs4le = 'utf32le';
            var ucs4be = 'utf32be';

            Utf32Codec.prototype.encoder = Utf32Encoder;
            Utf32Codec.prototype.decoder = Utf32Decoder;

            // -- Encoding

            function Utf32Encoder(options, codec) {
                this.isLE = codec.isLE;
                this.highSurrogate = 0;
            }

            Utf32Encoder.prototype.write = function(str) {
                var src = Buffer$5.from(str, 'ucs2');
                var dst = Buffer$5.alloc(src.length * 2);
                var write32 = this.isLE ? dst.writeUInt32LE : dst.writeUInt32BE;
                var offset = 0;

                for (var i = 0; i < src.length; i += 2) {
                    var code = src.readUInt16LE(i);
                    var isHighSurrogate = (0xD800 <= code && code < 0xDC00);
                    var isLowSurrogate = (0xDC00 <= code && code < 0xE000);

                    if (this.highSurrogate) {
                        if (isHighSurrogate || !isLowSurrogate) {
                            // There shouldn't be two high surrogates in a row, nor a high surrogate which isn't followed by a low
                            // surrogate. If this happens, keep the pending high surrogate as a stand-alone semi-invalid character
                            // (technically wrong, but expected by some applications, like Windows file names).
                            write32.call(dst, this.highSurrogate, offset);
                            offset += 4;
                        }
                        else {
                            // Create 32-bit value from high and low surrogates;
                            var codepoint = (((this.highSurrogate - 0xD800) << 10) | (code - 0xDC00)) + 0x10000;

                            write32.call(dst, codepoint, offset);
                            offset += 4;
                            this.highSurrogate = 0;

                            continue;
                        }
                    }

                    if (isHighSurrogate)
                        this.highSurrogate = code;
                    else {
                        // Even if the current character is a low surrogate, with no previous high surrogate, we'll
                        // encode it as a semi-invalid stand-alone character for the same reasons expressed above for
                        // unpaired high surrogates.
                        write32.call(dst, code, offset);
                        offset += 4;
                        this.highSurrogate = 0;
                    }
                }

                if (offset < dst.length)
                    dst = dst.slice(0, offset);

                return dst;
            };

            Utf32Encoder.prototype.end = function() {
                // Treat any leftover high surrogate as a semi-valid independent character.
                if (!this.highSurrogate)
                    return;

                var buf = Buffer$5.alloc(4);

                if (this.isLE)
                    buf.writeUInt32LE(this.highSurrogate, 0);
                else
                    buf.writeUInt32BE(this.highSurrogate, 0);

                this.highSurrogate = 0;

                return buf;
            };

            // -- Decoding

            function Utf32Decoder(options, codec) {
                this.isLE = codec.isLE;
                this.badChar = codec.iconv.defaultCharUnicode.charCodeAt(0);
                this.overflow = [];
            }

            Utf32Decoder.prototype.write = function(src) {
                if (src.length === 0)
                    return '';

                var i = 0;
                var codepoint = 0;
                var dst = Buffer$5.alloc(src.length + 4);
                var offset = 0;
                var isLE = this.isLE;
                var overflow = this.overflow;
                var badChar = this.badChar;

                if (overflow.length > 0) {
                    for (; i < src.length && overflow.length < 4; i++)
                        overflow.push(src[i]);
                    
                    if (overflow.length === 4) {
                        // NOTE: codepoint is a signed int32 and can be negative.
                        // NOTE: We copied this block from below to help V8 optimize it (it works with array, not buffer).
                        if (isLE) {
                            codepoint = overflow[i] | (overflow[i+1] << 8) | (overflow[i+2] << 16) | (overflow[i+3] << 24);
                        } else {
                            codepoint = overflow[i+3] | (overflow[i+2] << 8) | (overflow[i+1] << 16) | (overflow[i] << 24);
                        }
                        overflow.length = 0;

                        offset = _writeCodepoint(dst, offset, codepoint, badChar);
                    }
                }

                // Main loop. Should be as optimized as possible.
                for (; i < src.length - 3; i += 4) {
                    // NOTE: codepoint is a signed int32 and can be negative.
                    if (isLE) {
                        codepoint = src[i] | (src[i+1] << 8) | (src[i+2] << 16) | (src[i+3] << 24);
                    } else {
                        codepoint = src[i+3] | (src[i+2] << 8) | (src[i+1] << 16) | (src[i] << 24);
                    }
                    offset = _writeCodepoint(dst, offset, codepoint, badChar);
                }

                // Keep overflowing bytes.
                for (; i < src.length; i++) {
                    overflow.push(src[i]);
                }

                return dst.slice(0, offset).toString('ucs2');
            };

            function _writeCodepoint(dst, offset, codepoint, badChar) {
                // NOTE: codepoint is signed int32 and can be negative. We keep it that way to help V8 with optimizations.
                if (codepoint < 0 || codepoint > 0x10FFFF) {
                    // Not a valid Unicode codepoint
                    codepoint = badChar;
                } 

                // Ephemeral Planes: Write high surrogate.
                if (codepoint >= 0x10000) {
                    codepoint -= 0x10000;

                    var high = 0xD800 | (codepoint >> 10);
                    dst[offset++] = high & 0xff;
                    dst[offset++] = high >> 8;

                    // Low surrogate is written below.
                    var codepoint = 0xDC00 | (codepoint & 0x3FF);
                }

                // Write BMP char or low surrogate.
                dst[offset++] = codepoint & 0xff;
                dst[offset++] = codepoint >> 8;

                return offset;
            }
            Utf32Decoder.prototype.end = function() {
                this.overflow.length = 0;
            };

            // == UTF-32 Auto codec =============================================================
            // Decoder chooses automatically from UTF-32LE and UTF-32BE using BOM and space-based heuristic.
            // Defaults to UTF-32LE. http://en.wikipedia.org/wiki/UTF-32
            // Encoder/decoder default can be changed: iconv.decode(buf, 'utf32', {defaultEncoding: 'utf-32be'});

            // Encoder prepends BOM (which can be overridden with (addBOM: false}).

            var utf32_1 = Utf32AutoCodec;
            var ucs4 = 'utf32';

            function Utf32AutoCodec(options, iconv) {
                this.iconv = iconv;
            }

            Utf32AutoCodec.prototype.encoder = Utf32AutoEncoder;
            Utf32AutoCodec.prototype.decoder = Utf32AutoDecoder;

            // -- Encoding

            function Utf32AutoEncoder(options, codec) {
                options = options || {};

                if (options.addBOM === undefined)
                    options.addBOM = true;

                this.encoder = codec.iconv.getEncoder(options.defaultEncoding || 'utf-32le', options);
            }

            Utf32AutoEncoder.prototype.write = function(str) {
                return this.encoder.write(str);
            };

            Utf32AutoEncoder.prototype.end = function() {
                return this.encoder.end();
            };

            // -- Decoding

            function Utf32AutoDecoder(options, codec) {
                this.decoder = null;
                this.initialBufs = [];
                this.initialBufsLen = 0;
                this.options = options || {};
                this.iconv = codec.iconv;
            }

            Utf32AutoDecoder.prototype.write = function(buf) {
                if (!this.decoder) { 
                    // Codec is not chosen yet. Accumulate initial bytes.
                    this.initialBufs.push(buf);
                    this.initialBufsLen += buf.length;

                    if (this.initialBufsLen < 32) // We need more bytes to use space heuristic (see below)
                        return '';

                    // We have enough bytes -> detect endianness.
                    var encoding = detectEncoding$1(this.initialBufs, this.options.defaultEncoding);
                    this.decoder = this.iconv.getDecoder(encoding, this.options);

                    var resStr = '';
                    for (var i = 0; i < this.initialBufs.length; i++)
                        resStr += this.decoder.write(this.initialBufs[i]);

                    this.initialBufs.length = this.initialBufsLen = 0;
                    return resStr;
                }

                return this.decoder.write(buf);
            };

            Utf32AutoDecoder.prototype.end = function() {
                if (!this.decoder) {
                    var encoding = detectEncoding$1(this.initialBufs, this.options.defaultEncoding);
                    this.decoder = this.iconv.getDecoder(encoding, this.options);

                    var resStr = '';
                    for (var i = 0; i < this.initialBufs.length; i++)
                        resStr += this.decoder.write(this.initialBufs[i]);

                    var trail = this.decoder.end();
                    if (trail)
                        resStr += trail;

                    this.initialBufs.length = this.initialBufsLen = 0;
                    return resStr;
                }

                return this.decoder.end();
            };

            function detectEncoding$1(bufs, defaultEncoding) {
                var b = [];
                var charsProcessed = 0;
                var invalidLE = 0, invalidBE = 0;   // Number of invalid chars when decoded as LE or BE.
                var bmpCharsLE = 0, bmpCharsBE = 0; // Number of BMP chars when decoded as LE or BE.

                outer_loop:
                for (var i = 0; i < bufs.length; i++) {
                    var buf = bufs[i];
                    for (var j = 0; j < buf.length; j++) {
                        b.push(buf[j]);
                        if (b.length === 4) {
                            if (charsProcessed === 0) {
                                // Check BOM first.
                                if (b[0] === 0xFF && b[1] === 0xFE && b[2] === 0 && b[3] === 0) {
                                    return 'utf-32le';
                                }
                                if (b[0] === 0 && b[1] === 0 && b[2] === 0xFE && b[3] === 0xFF) {
                                    return 'utf-32be';
                                }
                            }

                            if (b[0] !== 0 || b[1] > 0x10) invalidBE++;
                            if (b[3] !== 0 || b[2] > 0x10) invalidLE++;

                            if (b[0] === 0 && b[1] === 0 && (b[2] !== 0 || b[3] !== 0)) bmpCharsBE++;
                            if ((b[0] !== 0 || b[1] !== 0) && b[2] === 0 && b[3] === 0) bmpCharsLE++;

                            b.length = 0;
                            charsProcessed++;

                            if (charsProcessed >= 100) {
                                break outer_loop;
                            }
                        }
                    }
                }

                // Make decisions.
                if (bmpCharsBE - invalidBE > bmpCharsLE - invalidLE)  return 'utf-32be';
                if (bmpCharsBE - invalidBE < bmpCharsLE - invalidLE)  return 'utf-32le';

                // Couldn't decide (likely all zeros or not enough data).
                return defaultEncoding || 'utf-32le';
            }

            var utf32 = {
            	_utf32: _utf32,
            	utf32le: utf32le,
            	utf32be: utf32be,
            	ucs4le: ucs4le,
            	ucs4be: ucs4be,
            	utf32: utf32_1,
            	ucs4: ucs4
            };

            var Buffer$4 = safer_1.Buffer;

            // Note: UTF16-LE (or UCS2) codec is Node.js native. See encodings/internal.js

            // == UTF16-BE codec. ==========================================================

            var utf16be = Utf16BECodec;
            function Utf16BECodec() {
            }

            Utf16BECodec.prototype.encoder = Utf16BEEncoder;
            Utf16BECodec.prototype.decoder = Utf16BEDecoder;
            Utf16BECodec.prototype.bomAware = true;


            // -- Encoding

            function Utf16BEEncoder() {
            }

            Utf16BEEncoder.prototype.write = function(str) {
                var buf = Buffer$4.from(str, 'ucs2');
                for (var i = 0; i < buf.length; i += 2) {
                    var tmp = buf[i]; buf[i] = buf[i+1]; buf[i+1] = tmp;
                }
                return buf;
            };

            Utf16BEEncoder.prototype.end = function() {
            };


            // -- Decoding

            function Utf16BEDecoder() {
                this.overflowByte = -1;
            }

            Utf16BEDecoder.prototype.write = function(buf) {
                if (buf.length == 0)
                    return '';

                var buf2 = Buffer$4.alloc(buf.length + 1),
                    i = 0, j = 0;

                if (this.overflowByte !== -1) {
                    buf2[0] = buf[0];
                    buf2[1] = this.overflowByte;
                    i = 1; j = 2;
                }

                for (; i < buf.length-1; i += 2, j+= 2) {
                    buf2[j] = buf[i+1];
                    buf2[j+1] = buf[i];
                }

                this.overflowByte = (i == buf.length-1) ? buf[buf.length-1] : -1;

                return buf2.slice(0, j).toString('ucs2');
            };

            Utf16BEDecoder.prototype.end = function() {
                this.overflowByte = -1;
            };


            // == UTF-16 codec =============================================================
            // Decoder chooses automatically from UTF-16LE and UTF-16BE using BOM and space-based heuristic.
            // Defaults to UTF-16LE, as it's prevalent and default in Node.
            // http://en.wikipedia.org/wiki/UTF-16 and http://encoding.spec.whatwg.org/#utf-16le
            // Decoder default can be changed: iconv.decode(buf, 'utf16', {defaultEncoding: 'utf-16be'});

            // Encoder uses UTF-16LE and prepends BOM (which can be overridden with addBOM: false).

            var utf16_1 = Utf16Codec;
            function Utf16Codec(codecOptions, iconv) {
                this.iconv = iconv;
            }

            Utf16Codec.prototype.encoder = Utf16Encoder;
            Utf16Codec.prototype.decoder = Utf16Decoder;


            // -- Encoding (pass-through)

            function Utf16Encoder(options, codec) {
                options = options || {};
                if (options.addBOM === undefined)
                    options.addBOM = true;
                this.encoder = codec.iconv.getEncoder('utf-16le', options);
            }

            Utf16Encoder.prototype.write = function(str) {
                return this.encoder.write(str);
            };

            Utf16Encoder.prototype.end = function() {
                return this.encoder.end();
            };


            // -- Decoding

            function Utf16Decoder(options, codec) {
                this.decoder = null;
                this.initialBufs = [];
                this.initialBufsLen = 0;

                this.options = options || {};
                this.iconv = codec.iconv;
            }

            Utf16Decoder.prototype.write = function(buf) {
                if (!this.decoder) {
                    // Codec is not chosen yet. Accumulate initial bytes.
                    this.initialBufs.push(buf);
                    this.initialBufsLen += buf.length;
                    
                    if (this.initialBufsLen < 16) // We need more bytes to use space heuristic (see below)
                        return '';

                    // We have enough bytes -> detect endianness.
                    var encoding = detectEncoding(this.initialBufs, this.options.defaultEncoding);
                    this.decoder = this.iconv.getDecoder(encoding, this.options);

                    var resStr = '';
                    for (var i = 0; i < this.initialBufs.length; i++)
                        resStr += this.decoder.write(this.initialBufs[i]);

                    this.initialBufs.length = this.initialBufsLen = 0;
                    return resStr;
                }

                return this.decoder.write(buf);
            };

            Utf16Decoder.prototype.end = function() {
                if (!this.decoder) {
                    var encoding = detectEncoding(this.initialBufs, this.options.defaultEncoding);
                    this.decoder = this.iconv.getDecoder(encoding, this.options);

                    var resStr = '';
                    for (var i = 0; i < this.initialBufs.length; i++)
                        resStr += this.decoder.write(this.initialBufs[i]);

                    var trail = this.decoder.end();
                    if (trail)
                        resStr += trail;

                    this.initialBufs.length = this.initialBufsLen = 0;
                    return resStr;
                }
                return this.decoder.end();
            };

            function detectEncoding(bufs, defaultEncoding) {
                var b = [];
                var charsProcessed = 0;
                var asciiCharsLE = 0, asciiCharsBE = 0; // Number of ASCII chars when decoded as LE or BE.

                outer_loop:
                for (var i = 0; i < bufs.length; i++) {
                    var buf = bufs[i];
                    for (var j = 0; j < buf.length; j++) {
                        b.push(buf[j]);
                        if (b.length === 2) {
                            if (charsProcessed === 0) {
                                // Check BOM first.
                                if (b[0] === 0xFF && b[1] === 0xFE) return 'utf-16le';
                                if (b[0] === 0xFE && b[1] === 0xFF) return 'utf-16be';
                            }

                            if (b[0] === 0 && b[1] !== 0) asciiCharsBE++;
                            if (b[0] !== 0 && b[1] === 0) asciiCharsLE++;

                            b.length = 0;
                            charsProcessed++;

                            if (charsProcessed >= 100) {
                                break outer_loop;
                            }
                        }
                    }
                }

                // Make decisions.
                // Most of the time, the content has ASCII chars (U+00**), but the opposite (U+**00) is uncommon.
                // So, we count ASCII as if it was LE or BE, and decide from that.
                if (asciiCharsBE > asciiCharsLE) return 'utf-16be';
                if (asciiCharsBE < asciiCharsLE) return 'utf-16le';

                // Couldn't decide (likely all zeros or not enough data).
                return defaultEncoding || 'utf-16le';
            }

            var utf16 = {
            	utf16be: utf16be,
            	utf16: utf16_1
            };

            var Buffer$3 = safer_1.Buffer;

            // UTF-7 codec, according to https://tools.ietf.org/html/rfc2152
            // See also below a UTF-7-IMAP codec, according to http://tools.ietf.org/html/rfc3501#section-5.1.3

            var utf7_1 = Utf7Codec;
            var unicode11utf7 = 'utf7'; // Alias UNICODE-1-1-UTF-7
            function Utf7Codec(codecOptions, iconv) {
                this.iconv = iconv;
            }
            Utf7Codec.prototype.encoder = Utf7Encoder;
            Utf7Codec.prototype.decoder = Utf7Decoder;
            Utf7Codec.prototype.bomAware = true;


            // -- Encoding

            var nonDirectChars = /[^A-Za-z0-9'\(\),-\.\/:\? \n\r\t]+/g;

            function Utf7Encoder(options, codec) {
                this.iconv = codec.iconv;
            }

            Utf7Encoder.prototype.write = function(str) {
                // Naive implementation.
                // Non-direct chars are encoded as "+<base64>-"; single "+" char is encoded as "+-".
                return Buffer$3.from(str.replace(nonDirectChars, function(chunk) {
                    return "+" + (chunk === '+' ? '' : 
                        this.iconv.encode(chunk, 'utf16-be').toString('base64').replace(/=+$/, '')) 
                        + "-";
                }.bind(this)));
            };

            Utf7Encoder.prototype.end = function() {
            };


            // -- Decoding

            function Utf7Decoder(options, codec) {
                this.iconv = codec.iconv;
                this.inBase64 = false;
                this.base64Accum = '';
            }

            var base64Regex = /[A-Za-z0-9\/+]/;
            var base64Chars = [];
            for (var i$3 = 0; i$3 < 256; i$3++)
                base64Chars[i$3] = base64Regex.test(String.fromCharCode(i$3));

            var plusChar = '+'.charCodeAt(0), 
                minusChar = '-'.charCodeAt(0),
                andChar = '&'.charCodeAt(0);

            Utf7Decoder.prototype.write = function(buf) {
                var res = "", lastI = 0,
                    inBase64 = this.inBase64,
                    base64Accum = this.base64Accum;

                // The decoder is more involved as we must handle chunks in stream.

                for (var i = 0; i < buf.length; i++) {
                    if (!inBase64) { // We're in direct mode.
                        // Write direct chars until '+'
                        if (buf[i] == plusChar) {
                            res += this.iconv.decode(buf.slice(lastI, i), "ascii"); // Write direct chars.
                            lastI = i+1;
                            inBase64 = true;
                        }
                    } else { // We decode base64.
                        if (!base64Chars[buf[i]]) { // Base64 ended.
                            if (i == lastI && buf[i] == minusChar) {// "+-" -> "+"
                                res += "+";
                            } else {
                                var b64str = base64Accum + this.iconv.decode(buf.slice(lastI, i), "ascii");
                                res += this.iconv.decode(Buffer$3.from(b64str, 'base64'), "utf16-be");
                            }

                            if (buf[i] != minusChar) // Minus is absorbed after base64.
                                i--;

                            lastI = i+1;
                            inBase64 = false;
                            base64Accum = '';
                        }
                    }
                }

                if (!inBase64) {
                    res += this.iconv.decode(buf.slice(lastI), "ascii"); // Write direct chars.
                } else {
                    var b64str = base64Accum + this.iconv.decode(buf.slice(lastI), "ascii");

                    var canBeDecoded = b64str.length - (b64str.length % 8); // Minimal chunk: 2 quads -> 2x3 bytes -> 3 chars.
                    base64Accum = b64str.slice(canBeDecoded); // The rest will be decoded in future.
                    b64str = b64str.slice(0, canBeDecoded);

                    res += this.iconv.decode(Buffer$3.from(b64str, 'base64'), "utf16-be");
                }

                this.inBase64 = inBase64;
                this.base64Accum = base64Accum;

                return res;
            };

            Utf7Decoder.prototype.end = function() {
                var res = "";
                if (this.inBase64 && this.base64Accum.length > 0)
                    res = this.iconv.decode(Buffer$3.from(this.base64Accum, 'base64'), "utf16-be");

                this.inBase64 = false;
                this.base64Accum = '';
                return res;
            };


            // UTF-7-IMAP codec.
            // RFC3501 Sec. 5.1.3 Modified UTF-7 (http://tools.ietf.org/html/rfc3501#section-5.1.3)
            // Differences:
            //  * Base64 part is started by "&" instead of "+"
            //  * Direct characters are 0x20-0x7E, except "&" (0x26)
            //  * In Base64, "," is used instead of "/"
            //  * Base64 must not be used to represent direct characters.
            //  * No implicit shift back from Base64 (should always end with '-')
            //  * String must end in non-shifted position.
            //  * "-&" while in base64 is not allowed.


            var utf7imap = Utf7IMAPCodec;
            function Utf7IMAPCodec(codecOptions, iconv) {
                this.iconv = iconv;
            }
            Utf7IMAPCodec.prototype.encoder = Utf7IMAPEncoder;
            Utf7IMAPCodec.prototype.decoder = Utf7IMAPDecoder;
            Utf7IMAPCodec.prototype.bomAware = true;


            // -- Encoding

            function Utf7IMAPEncoder(options, codec) {
                this.iconv = codec.iconv;
                this.inBase64 = false;
                this.base64Accum = Buffer$3.alloc(6);
                this.base64AccumIdx = 0;
            }

            Utf7IMAPEncoder.prototype.write = function(str) {
                var inBase64 = this.inBase64,
                    base64Accum = this.base64Accum,
                    base64AccumIdx = this.base64AccumIdx,
                    buf = Buffer$3.alloc(str.length*5 + 10), bufIdx = 0;

                for (var i = 0; i < str.length; i++) {
                    var uChar = str.charCodeAt(i);
                    if (0x20 <= uChar && uChar <= 0x7E) { // Direct character or '&'.
                        if (inBase64) {
                            if (base64AccumIdx > 0) {
                                bufIdx += buf.write(base64Accum.slice(0, base64AccumIdx).toString('base64').replace(/\//g, ',').replace(/=+$/, ''), bufIdx);
                                base64AccumIdx = 0;
                            }

                            buf[bufIdx++] = minusChar; // Write '-', then go to direct mode.
                            inBase64 = false;
                        }

                        if (!inBase64) {
                            buf[bufIdx++] = uChar; // Write direct character

                            if (uChar === andChar)  // Ampersand -> '&-'
                                buf[bufIdx++] = minusChar;
                        }

                    } else { // Non-direct character
                        if (!inBase64) {
                            buf[bufIdx++] = andChar; // Write '&', then go to base64 mode.
                            inBase64 = true;
                        }
                        if (inBase64) {
                            base64Accum[base64AccumIdx++] = uChar >> 8;
                            base64Accum[base64AccumIdx++] = uChar & 0xFF;

                            if (base64AccumIdx == base64Accum.length) {
                                bufIdx += buf.write(base64Accum.toString('base64').replace(/\//g, ','), bufIdx);
                                base64AccumIdx = 0;
                            }
                        }
                    }
                }

                this.inBase64 = inBase64;
                this.base64AccumIdx = base64AccumIdx;

                return buf.slice(0, bufIdx);
            };

            Utf7IMAPEncoder.prototype.end = function() {
                var buf = Buffer$3.alloc(10), bufIdx = 0;
                if (this.inBase64) {
                    if (this.base64AccumIdx > 0) {
                        bufIdx += buf.write(this.base64Accum.slice(0, this.base64AccumIdx).toString('base64').replace(/\//g, ',').replace(/=+$/, ''), bufIdx);
                        this.base64AccumIdx = 0;
                    }

                    buf[bufIdx++] = minusChar; // Write '-', then go to direct mode.
                    this.inBase64 = false;
                }

                return buf.slice(0, bufIdx);
            };


            // -- Decoding

            function Utf7IMAPDecoder(options, codec) {
                this.iconv = codec.iconv;
                this.inBase64 = false;
                this.base64Accum = '';
            }

            var base64IMAPChars = base64Chars.slice();
            base64IMAPChars[','.charCodeAt(0)] = true;

            Utf7IMAPDecoder.prototype.write = function(buf) {
                var res = "", lastI = 0,
                    inBase64 = this.inBase64,
                    base64Accum = this.base64Accum;

                // The decoder is more involved as we must handle chunks in stream.
                // It is forgiving, closer to standard UTF-7 (for example, '-' is optional at the end).

                for (var i = 0; i < buf.length; i++) {
                    if (!inBase64) { // We're in direct mode.
                        // Write direct chars until '&'
                        if (buf[i] == andChar) {
                            res += this.iconv.decode(buf.slice(lastI, i), "ascii"); // Write direct chars.
                            lastI = i+1;
                            inBase64 = true;
                        }
                    } else { // We decode base64.
                        if (!base64IMAPChars[buf[i]]) { // Base64 ended.
                            if (i == lastI && buf[i] == minusChar) { // "&-" -> "&"
                                res += "&";
                            } else {
                                var b64str = base64Accum + this.iconv.decode(buf.slice(lastI, i), "ascii").replace(/,/g, '/');
                                res += this.iconv.decode(Buffer$3.from(b64str, 'base64'), "utf16-be");
                            }

                            if (buf[i] != minusChar) // Minus may be absorbed after base64.
                                i--;

                            lastI = i+1;
                            inBase64 = false;
                            base64Accum = '';
                        }
                    }
                }

                if (!inBase64) {
                    res += this.iconv.decode(buf.slice(lastI), "ascii"); // Write direct chars.
                } else {
                    var b64str = base64Accum + this.iconv.decode(buf.slice(lastI), "ascii").replace(/,/g, '/');

                    var canBeDecoded = b64str.length - (b64str.length % 8); // Minimal chunk: 2 quads -> 2x3 bytes -> 3 chars.
                    base64Accum = b64str.slice(canBeDecoded); // The rest will be decoded in future.
                    b64str = b64str.slice(0, canBeDecoded);

                    res += this.iconv.decode(Buffer$3.from(b64str, 'base64'), "utf16-be");
                }

                this.inBase64 = inBase64;
                this.base64Accum = base64Accum;

                return res;
            };

            Utf7IMAPDecoder.prototype.end = function() {
                var res = "";
                if (this.inBase64 && this.base64Accum.length > 0)
                    res = this.iconv.decode(Buffer$3.from(this.base64Accum, 'base64'), "utf16-be");

                this.inBase64 = false;
                this.base64Accum = '';
                return res;
            };

            var utf7 = {
            	utf7: utf7_1,
            	unicode11utf7: unicode11utf7,
            	utf7imap: utf7imap
            };

            var Buffer$2 = safer_1.Buffer;

            // Single-byte codec. Needs a 'chars' string parameter that contains 256 or 128 chars that
            // correspond to encoded bytes (if 128 - then lower half is ASCII). 

            var _sbcs = SBCSCodec;
            function SBCSCodec(codecOptions, iconv) {
                if (!codecOptions)
                    throw new Error("SBCS codec is called without the data.")
                
                // Prepare char buffer for decoding.
                if (!codecOptions.chars || (codecOptions.chars.length !== 128 && codecOptions.chars.length !== 256))
                    throw new Error("Encoding '"+codecOptions.type+"' has incorrect 'chars' (must be of len 128 or 256)");
                
                if (codecOptions.chars.length === 128) {
                    var asciiString = "";
                    for (var i = 0; i < 128; i++)
                        asciiString += String.fromCharCode(i);
                    codecOptions.chars = asciiString + codecOptions.chars;
                }

                this.decodeBuf = Buffer$2.from(codecOptions.chars, 'ucs2');
                
                // Encoding buffer.
                var encodeBuf = Buffer$2.alloc(65536, iconv.defaultCharSingleByte.charCodeAt(0));

                for (var i = 0; i < codecOptions.chars.length; i++)
                    encodeBuf[codecOptions.chars.charCodeAt(i)] = i;

                this.encodeBuf = encodeBuf;
            }

            SBCSCodec.prototype.encoder = SBCSEncoder;
            SBCSCodec.prototype.decoder = SBCSDecoder;


            function SBCSEncoder(options, codec) {
                this.encodeBuf = codec.encodeBuf;
            }

            SBCSEncoder.prototype.write = function(str) {
                var buf = Buffer$2.alloc(str.length);
                for (var i = 0; i < str.length; i++)
                    buf[i] = this.encodeBuf[str.charCodeAt(i)];
                
                return buf;
            };

            SBCSEncoder.prototype.end = function() {
            };


            function SBCSDecoder(options, codec) {
                this.decodeBuf = codec.decodeBuf;
            }

            SBCSDecoder.prototype.write = function(buf) {
                // Strings are immutable in JS -> we use ucs2 buffer to speed up computations.
                var decodeBuf = this.decodeBuf;
                var newBuf = Buffer$2.alloc(buf.length*2);
                var idx1 = 0, idx2 = 0;
                for (var i = 0; i < buf.length; i++) {
                    idx1 = buf[i]*2; idx2 = i*2;
                    newBuf[idx2] = decodeBuf[idx1];
                    newBuf[idx2+1] = decodeBuf[idx1+1];
                }
                return newBuf.toString('ucs2');
            };

            SBCSDecoder.prototype.end = function() {
            };

            var sbcsCodec = {
            	_sbcs: _sbcs
            };

            // Manually added data to be used by sbcs codec in addition to generated one.

            var sbcsData = {
                // Not supported by iconv, not sure why.
                "10029": "maccenteuro",
                "maccenteuro": {
                    "type": "_sbcs",
                    "chars": "ÄĀāÉĄÖÜáąČäčĆćéŹźĎíďĒēĖóėôöõúĚěü†°Ę£§•¶ß®©™ę¨≠ģĮįĪ≤≥īĶ∂∑łĻļĽľĹĺŅņŃ¬√ńŇ∆«»… ňŐÕőŌ–—“”‘’÷◊ōŔŕŘ‹›řŖŗŠ‚„šŚśÁŤťÍŽžŪÓÔūŮÚůŰűŲųÝýķŻŁżĢˇ"
                },

                "808": "cp808",
                "ibm808": "cp808",
                "cp808": {
                    "type": "_sbcs",
                    "chars": "АБВГДЕЖЗИЙКЛМНОПРСТУФХЦЧШЩЪЫЬЭЮЯабвгдежзийклмноп░▒▓│┤╡╢╖╕╣║╗╝╜╛┐└┴┬├─┼╞╟╚╔╩╦╠═╬╧╨╤╥╙╘╒╓╫╪┘┌█▄▌▐▀рстуфхцчшщъыьэюяЁёЄєЇїЎў°∙·√№€■ "
                },

                "mik": {
                    "type": "_sbcs",
                    "chars": "АБВГДЕЖЗИЙКЛМНОПРСТУФХЦЧШЩЪЫЬЭЮЯабвгдежзийклмнопрстуфхцчшщъыьэюя└┴┬├─┼╣║╚╔╩╦╠═╬┐░▒▓│┤№§╗╝┘┌█▄▌▐▀αßΓπΣσµτΦΘΩδ∞φε∩≡±≥≤⌠⌡÷≈°∙·√ⁿ²■ "
                },

                "cp720": {
                    "type": "_sbcs",
                    "chars": "\x80\x81éâ\x84à\x86çêëèïî\x8d\x8e\x8f\x90\u0651\u0652ô¤ـûùءآأؤ£إئابةتثجحخدذرزسشص«»░▒▓│┤╡╢╖╕╣║╗╝╜╛┐└┴┬├─┼╞╟╚╔╩╦╠═╬╧╨╤╥╙╘╒╓╫╪┘┌█▄▌▐▀ضطظعغفµقكلمنهوىي≡\u064b\u064c\u064d\u064e\u064f\u0650≈°∙·√ⁿ²■\u00a0"
                },

                // Aliases of generated encodings.
                "ascii8bit": "ascii",
                "usascii": "ascii",
                "ansix34": "ascii",
                "ansix341968": "ascii",
                "ansix341986": "ascii",
                "csascii": "ascii",
                "cp367": "ascii",
                "ibm367": "ascii",
                "isoir6": "ascii",
                "iso646us": "ascii",
                "iso646irv": "ascii",
                "us": "ascii",

                "latin1": "iso88591",
                "latin2": "iso88592",
                "latin3": "iso88593",
                "latin4": "iso88594",
                "latin5": "iso88599",
                "latin6": "iso885910",
                "latin7": "iso885913",
                "latin8": "iso885914",
                "latin9": "iso885915",
                "latin10": "iso885916",

                "csisolatin1": "iso88591",
                "csisolatin2": "iso88592",
                "csisolatin3": "iso88593",
                "csisolatin4": "iso88594",
                "csisolatincyrillic": "iso88595",
                "csisolatinarabic": "iso88596",
                "csisolatingreek" : "iso88597",
                "csisolatinhebrew": "iso88598",
                "csisolatin5": "iso88599",
                "csisolatin6": "iso885910",

                "l1": "iso88591",
                "l2": "iso88592",
                "l3": "iso88593",
                "l4": "iso88594",
                "l5": "iso88599",
                "l6": "iso885910",
                "l7": "iso885913",
                "l8": "iso885914",
                "l9": "iso885915",
                "l10": "iso885916",

                "isoir14": "iso646jp",
                "isoir57": "iso646cn",
                "isoir100": "iso88591",
                "isoir101": "iso88592",
                "isoir109": "iso88593",
                "isoir110": "iso88594",
                "isoir144": "iso88595",
                "isoir127": "iso88596",
                "isoir126": "iso88597",
                "isoir138": "iso88598",
                "isoir148": "iso88599",
                "isoir157": "iso885910",
                "isoir166": "tis620",
                "isoir179": "iso885913",
                "isoir199": "iso885914",
                "isoir203": "iso885915",
                "isoir226": "iso885916",

                "cp819": "iso88591",
                "ibm819": "iso88591",

                "cyrillic": "iso88595",

                "arabic": "iso88596",
                "arabic8": "iso88596",
                "ecma114": "iso88596",
                "asmo708": "iso88596",

                "greek" : "iso88597",
                "greek8" : "iso88597",
                "ecma118" : "iso88597",
                "elot928" : "iso88597",

                "hebrew": "iso88598",
                "hebrew8": "iso88598",

                "turkish": "iso88599",
                "turkish8": "iso88599",

                "thai": "iso885911",
                "thai8": "iso885911",

                "celtic": "iso885914",
                "celtic8": "iso885914",
                "isoceltic": "iso885914",

                "tis6200": "tis620",
                "tis62025291": "tis620",
                "tis62025330": "tis620",

                "10000": "macroman",
                "10006": "macgreek",
                "10007": "maccyrillic",
                "10079": "maciceland",
                "10081": "macturkish",

                "cspc8codepage437": "cp437",
                "cspc775baltic": "cp775",
                "cspc850multilingual": "cp850",
                "cspcp852": "cp852",
                "cspc862latinhebrew": "cp862",
                "cpgr": "cp869",

                "msee": "cp1250",
                "mscyrl": "cp1251",
                "msansi": "cp1252",
                "msgreek": "cp1253",
                "msturk": "cp1254",
                "mshebr": "cp1255",
                "msarab": "cp1256",
                "winbaltrim": "cp1257",

                "cp20866": "koi8r",
                "20866": "koi8r",
                "ibm878": "koi8r",
                "cskoi8r": "koi8r",

                "cp21866": "koi8u",
                "21866": "koi8u",
                "ibm1168": "koi8u",

                "strk10482002": "rk1048",

                "tcvn5712": "tcvn",
                "tcvn57121": "tcvn",

                "gb198880": "iso646cn",
                "cn": "iso646cn",

                "csiso14jisc6220ro": "iso646jp",
                "jisc62201969ro": "iso646jp",
                "jp": "iso646jp",

                "cshproman8": "hproman8",
                "r8": "hproman8",
                "roman8": "hproman8",
                "xroman8": "hproman8",
                "ibm1051": "hproman8",

                "mac": "macintosh",
                "csmacintosh": "macintosh",
            };

            // Generated data for sbcs codec. Don't edit manually. Regenerate using generation/gen-sbcs.js script.
            var sbcsDataGenerated = {
              "437": "cp437",
              "737": "cp737",
              "775": "cp775",
              "850": "cp850",
              "852": "cp852",
              "855": "cp855",
              "856": "cp856",
              "857": "cp857",
              "858": "cp858",
              "860": "cp860",
              "861": "cp861",
              "862": "cp862",
              "863": "cp863",
              "864": "cp864",
              "865": "cp865",
              "866": "cp866",
              "869": "cp869",
              "874": "windows874",
              "922": "cp922",
              "1046": "cp1046",
              "1124": "cp1124",
              "1125": "cp1125",
              "1129": "cp1129",
              "1133": "cp1133",
              "1161": "cp1161",
              "1162": "cp1162",
              "1163": "cp1163",
              "1250": "windows1250",
              "1251": "windows1251",
              "1252": "windows1252",
              "1253": "windows1253",
              "1254": "windows1254",
              "1255": "windows1255",
              "1256": "windows1256",
              "1257": "windows1257",
              "1258": "windows1258",
              "28591": "iso88591",
              "28592": "iso88592",
              "28593": "iso88593",
              "28594": "iso88594",
              "28595": "iso88595",
              "28596": "iso88596",
              "28597": "iso88597",
              "28598": "iso88598",
              "28599": "iso88599",
              "28600": "iso885910",
              "28601": "iso885911",
              "28603": "iso885913",
              "28604": "iso885914",
              "28605": "iso885915",
              "28606": "iso885916",
              "windows874": {
                "type": "_sbcs",
                "chars": "€����…�����������‘’“”•–—�������� กขฃคฅฆงจฉชซฌญฎฏฐฑฒณดตถทธนบปผฝพฟภมยรฤลฦวศษสหฬอฮฯะัาำิีึืฺุู����฿เแโใไๅๆ็่้๊๋์ํ๎๏๐๑๒๓๔๕๖๗๘๙๚๛����"
              },
              "win874": "windows874",
              "cp874": "windows874",
              "windows1250": {
                "type": "_sbcs",
                "chars": "€�‚�„…†‡�‰Š‹ŚŤŽŹ�‘’“”•–—�™š›śťžź ˇ˘Ł¤Ą¦§¨©Ş«¬­®Ż°±˛ł´µ¶·¸ąş»Ľ˝ľżŔÁÂĂÄĹĆÇČÉĘËĚÍÎĎĐŃŇÓÔŐÖ×ŘŮÚŰÜÝŢßŕáâăäĺćçčéęëěíîďđńňóôőö÷řůúűüýţ˙"
              },
              "win1250": "windows1250",
              "cp1250": "windows1250",
              "windows1251": {
                "type": "_sbcs",
                "chars": "ЂЃ‚ѓ„…†‡€‰Љ‹ЊЌЋЏђ‘’“”•–—�™љ›њќћџ ЎўЈ¤Ґ¦§Ё©Є«¬­®Ї°±Ііґµ¶·ё№є»јЅѕїАБВГДЕЖЗИЙКЛМНОПРСТУФХЦЧШЩЪЫЬЭЮЯабвгдежзийклмнопрстуфхцчшщъыьэюя"
              },
              "win1251": "windows1251",
              "cp1251": "windows1251",
              "windows1252": {
                "type": "_sbcs",
                "chars": "€�‚ƒ„…†‡ˆ‰Š‹Œ�Ž��‘’“”•–—˜™š›œ�žŸ ¡¢£¤¥¦§¨©ª«¬­®¯°±²³´µ¶·¸¹º»¼½¾¿ÀÁÂÃÄÅÆÇÈÉÊËÌÍÎÏÐÑÒÓÔÕÖ×ØÙÚÛÜÝÞßàáâãäåæçèéêëìíîïðñòóôõö÷øùúûüýþÿ"
              },
              "win1252": "windows1252",
              "cp1252": "windows1252",
              "windows1253": {
                "type": "_sbcs",
                "chars": "€�‚ƒ„…†‡�‰�‹�����‘’“”•–—�™�›���� ΅Ά£¤¥¦§¨©�«¬­®―°±²³΄µ¶·ΈΉΊ»Ό½ΎΏΐΑΒΓΔΕΖΗΘΙΚΛΜΝΞΟΠΡ�ΣΤΥΦΧΨΩΪΫάέήίΰαβγδεζηθικλμνξοπρςστυφχψωϊϋόύώ�"
              },
              "win1253": "windows1253",
              "cp1253": "windows1253",
              "windows1254": {
                "type": "_sbcs",
                "chars": "€�‚ƒ„…†‡ˆ‰Š‹Œ����‘’“”•–—˜™š›œ��Ÿ ¡¢£¤¥¦§¨©ª«¬­®¯°±²³´µ¶·¸¹º»¼½¾¿ÀÁÂÃÄÅÆÇÈÉÊËÌÍÎÏĞÑÒÓÔÕÖ×ØÙÚÛÜİŞßàáâãäåæçèéêëìíîïğñòóôõö÷øùúûüışÿ"
              },
              "win1254": "windows1254",
              "cp1254": "windows1254",
              "windows1255": {
                "type": "_sbcs",
                "chars": "€�‚ƒ„…†‡ˆ‰�‹�����‘’“”•–—˜™�›���� ¡¢£₪¥¦§¨©×«¬­®¯°±²³´µ¶·¸¹÷»¼½¾¿ְֱֲֳִֵֶַָֹֺֻּֽ־ֿ׀ׁׂ׃װױײ׳״�������אבגדהוזחטיךכלםמןנסעףפץצקרשת��‎‏�"
              },
              "win1255": "windows1255",
              "cp1255": "windows1255",
              "windows1256": {
                "type": "_sbcs",
                "chars": "€پ‚ƒ„…†‡ˆ‰ٹ‹Œچژڈگ‘’“”•–—ک™ڑ›œ‌‍ں ،¢£¤¥¦§¨©ھ«¬­®¯°±²³´µ¶·¸¹؛»¼½¾؟ہءآأؤإئابةتثجحخدذرزسشصض×طظعغـفقكàلâمنهوçèéêëىيîïًٌٍَôُِ÷ّùْûü‎‏ے"
              },
              "win1256": "windows1256",
              "cp1256": "windows1256",
              "windows1257": {
                "type": "_sbcs",
                "chars": "€�‚�„…†‡�‰�‹�¨ˇ¸�‘’“”•–—�™�›�¯˛� �¢£¤�¦§Ø©Ŗ«¬­®Æ°±²³´µ¶·ø¹ŗ»¼½¾æĄĮĀĆÄÅĘĒČÉŹĖĢĶĪĻŠŃŅÓŌÕÖ×ŲŁŚŪÜŻŽßąįāćäåęēčéźėģķīļšńņóōõö÷ųłśūüżž˙"
              },
              "win1257": "windows1257",
              "cp1257": "windows1257",
              "windows1258": {
                "type": "_sbcs",
                "chars": "€�‚ƒ„…†‡ˆ‰�‹Œ����‘’“”•–—˜™�›œ��Ÿ ¡¢£¤¥¦§¨©ª«¬­®¯°±²³´µ¶·¸¹º»¼½¾¿ÀÁÂĂÄÅÆÇÈÉÊË̀ÍÎÏĐÑ̉ÓÔƠÖ×ØÙÚÛÜỮßàáâăäåæçèéêë́íîïđṇ̃óôơö÷øùúûüư₫ÿ"
              },
              "win1258": "windows1258",
              "cp1258": "windows1258",
              "iso88591": {
                "type": "_sbcs",
                "chars": " ¡¢£¤¥¦§¨©ª«¬­®¯°±²³´µ¶·¸¹º»¼½¾¿ÀÁÂÃÄÅÆÇÈÉÊËÌÍÎÏÐÑÒÓÔÕÖ×ØÙÚÛÜÝÞßàáâãäåæçèéêëìíîïðñòóôõö÷øùúûüýþÿ"
              },
              "cp28591": "iso88591",
              "iso88592": {
                "type": "_sbcs",
                "chars": " Ą˘Ł¤ĽŚ§¨ŠŞŤŹ­ŽŻ°ą˛ł´ľśˇ¸šşťź˝žżŔÁÂĂÄĹĆÇČÉĘËĚÍÎĎĐŃŇÓÔŐÖ×ŘŮÚŰÜÝŢßŕáâăäĺćçčéęëěíîďđńňóôőö÷řůúűüýţ˙"
              },
              "cp28592": "iso88592",
              "iso88593": {
                "type": "_sbcs",
                "chars": " Ħ˘£¤�Ĥ§¨İŞĞĴ­�Ż°ħ²³´µĥ·¸ışğĵ½�żÀÁÂ�ÄĊĈÇÈÉÊËÌÍÎÏ�ÑÒÓÔĠÖ×ĜÙÚÛÜŬŜßàáâ�äċĉçèéêëìíîï�ñòóôġö÷ĝùúûüŭŝ˙"
              },
              "cp28593": "iso88593",
              "iso88594": {
                "type": "_sbcs",
                "chars": " ĄĸŖ¤ĨĻ§¨ŠĒĢŦ­Ž¯°ą˛ŗ´ĩļˇ¸šēģŧŊžŋĀÁÂÃÄÅÆĮČÉĘËĖÍÎĪĐŅŌĶÔÕÖ×ØŲÚÛÜŨŪßāáâãäåæįčéęëėíîīđņōķôõö÷øųúûüũū˙"
              },
              "cp28594": "iso88594",
              "iso88595": {
                "type": "_sbcs",
                "chars": " ЁЂЃЄЅІЇЈЉЊЋЌ­ЎЏАБВГДЕЖЗИЙКЛМНОПРСТУФХЦЧШЩЪЫЬЭЮЯабвгдежзийклмнопрстуфхцчшщъыьэюя№ёђѓєѕіїјљњћќ§ўџ"
              },
              "cp28595": "iso88595",
              "iso88596": {
                "type": "_sbcs",
                "chars": " ���¤�������،­�������������؛���؟�ءآأؤإئابةتثجحخدذرزسشصضطظعغ�����ـفقكلمنهوىيًٌٍَُِّْ�������������"
              },
              "cp28596": "iso88596",
              "iso88597": {
                "type": "_sbcs",
                "chars": " ‘’£€₯¦§¨©ͺ«¬­�―°±²³΄΅Ά·ΈΉΊ»Ό½ΎΏΐΑΒΓΔΕΖΗΘΙΚΛΜΝΞΟΠΡ�ΣΤΥΦΧΨΩΪΫάέήίΰαβγδεζηθικλμνξοπρςστυφχψωϊϋόύώ�"
              },
              "cp28597": "iso88597",
              "iso88598": {
                "type": "_sbcs",
                "chars": " �¢£¤¥¦§¨©×«¬­®¯°±²³´µ¶·¸¹÷»¼½¾��������������������������������‗אבגדהוזחטיךכלםמןנסעףפץצקרשת��‎‏�"
              },
              "cp28598": "iso88598",
              "iso88599": {
                "type": "_sbcs",
                "chars": " ¡¢£¤¥¦§¨©ª«¬­®¯°±²³´µ¶·¸¹º»¼½¾¿ÀÁÂÃÄÅÆÇÈÉÊËÌÍÎÏĞÑÒÓÔÕÖ×ØÙÚÛÜİŞßàáâãäåæçèéêëìíîïğñòóôõö÷øùúûüışÿ"
              },
              "cp28599": "iso88599",
              "iso885910": {
                "type": "_sbcs",
                "chars": " ĄĒĢĪĨĶ§ĻĐŠŦŽ­ŪŊ°ąēģīĩķ·ļđšŧž―ūŋĀÁÂÃÄÅÆĮČÉĘËĖÍÎÏÐŅŌÓÔÕÖŨØŲÚÛÜÝÞßāáâãäåæįčéęëėíîïðņōóôõöũøųúûüýþĸ"
              },
              "cp28600": "iso885910",
              "iso885911": {
                "type": "_sbcs",
                "chars": " กขฃคฅฆงจฉชซฌญฎฏฐฑฒณดตถทธนบปผฝพฟภมยรฤลฦวศษสหฬอฮฯะัาำิีึืฺุู����฿เแโใไๅๆ็่้๊๋์ํ๎๏๐๑๒๓๔๕๖๗๘๙๚๛����"
              },
              "cp28601": "iso885911",
              "iso885913": {
                "type": "_sbcs",
                "chars": " ”¢£¤„¦§Ø©Ŗ«¬­®Æ°±²³“µ¶·ø¹ŗ»¼½¾æĄĮĀĆÄÅĘĒČÉŹĖĢĶĪĻŠŃŅÓŌÕÖ×ŲŁŚŪÜŻŽßąįāćäåęēčéźėģķīļšńņóōõö÷ųłśūüżž’"
              },
              "cp28603": "iso885913",
              "iso885914": {
                "type": "_sbcs",
                "chars": " Ḃḃ£ĊċḊ§Ẁ©ẂḋỲ­®ŸḞḟĠġṀṁ¶ṖẁṗẃṠỳẄẅṡÀÁÂÃÄÅÆÇÈÉÊËÌÍÎÏŴÑÒÓÔÕÖṪØÙÚÛÜÝŶßàáâãäåæçèéêëìíîïŵñòóôõöṫøùúûüýŷÿ"
              },
              "cp28604": "iso885914",
              "iso885915": {
                "type": "_sbcs",
                "chars": " ¡¢£€¥Š§š©ª«¬­®¯°±²³Žµ¶·ž¹º»ŒœŸ¿ÀÁÂÃÄÅÆÇÈÉÊËÌÍÎÏÐÑÒÓÔÕÖ×ØÙÚÛÜÝÞßàáâãäåæçèéêëìíîïðñòóôõö÷øùúûüýþÿ"
              },
              "cp28605": "iso885915",
              "iso885916": {
                "type": "_sbcs",
                "chars": " ĄąŁ€„Š§š©Ș«Ź­źŻ°±ČłŽ”¶·žčș»ŒœŸżÀÁÂĂÄĆÆÇÈÉÊËÌÍÎÏĐŃÒÓÔŐÖŚŰÙÚÛÜĘȚßàáâăäćæçèéêëìíîïđńòóôőöśűùúûüęțÿ"
              },
              "cp28606": "iso885916",
              "cp437": {
                "type": "_sbcs",
                "chars": "ÇüéâäàåçêëèïîìÄÅÉæÆôöòûùÿÖÜ¢£¥₧ƒáíóúñÑªº¿⌐¬½¼¡«»░▒▓│┤╡╢╖╕╣║╗╝╜╛┐└┴┬├─┼╞╟╚╔╩╦╠═╬╧╨╤╥╙╘╒╓╫╪┘┌█▄▌▐▀αßΓπΣσµτΦΘΩδ∞φε∩≡±≥≤⌠⌡÷≈°∙·√ⁿ²■ "
              },
              "ibm437": "cp437",
              "csibm437": "cp437",
              "cp737": {
                "type": "_sbcs",
                "chars": "ΑΒΓΔΕΖΗΘΙΚΛΜΝΞΟΠΡΣΤΥΦΧΨΩαβγδεζηθικλμνξοπρσςτυφχψ░▒▓│┤╡╢╖╕╣║╗╝╜╛┐└┴┬├─┼╞╟╚╔╩╦╠═╬╧╨╤╥╙╘╒╓╫╪┘┌█▄▌▐▀ωάέήϊίόύϋώΆΈΉΊΌΎΏ±≥≤ΪΫ÷≈°∙·√ⁿ²■ "
              },
              "ibm737": "cp737",
              "csibm737": "cp737",
              "cp775": {
                "type": "_sbcs",
                "chars": "ĆüéāäģåćłēŖŗīŹÄÅÉæÆōöĢ¢ŚśÖÜø£Ø×¤ĀĪóŻżź”¦©®¬½¼Ł«»░▒▓│┤ĄČĘĖ╣║╗╝ĮŠ┐└┴┬├─┼ŲŪ╚╔╩╦╠═╬Žąčęėįšųūž┘┌█▄▌▐▀ÓßŌŃõÕµńĶķĻļņĒŅ’­±“¾¶§÷„°∙·¹³²■ "
              },
              "ibm775": "cp775",
              "csibm775": "cp775",
              "cp850": {
                "type": "_sbcs",
                "chars": "ÇüéâäàåçêëèïîìÄÅÉæÆôöòûùÿÖÜø£Ø×ƒáíóúñÑªº¿®¬½¼¡«»░▒▓│┤ÁÂÀ©╣║╗╝¢¥┐└┴┬├─┼ãÃ╚╔╩╦╠═╬¤ðÐÊËÈıÍÎÏ┘┌█▄¦Ì▀ÓßÔÒõÕµþÞÚÛÙýÝ¯´­±‗¾¶§÷¸°¨·¹³²■ "
              },
              "ibm850": "cp850",
              "csibm850": "cp850",
              "cp852": {
                "type": "_sbcs",
                "chars": "ÇüéâäůćçłëŐőîŹÄĆÉĹĺôöĽľŚśÖÜŤťŁ×čáíóúĄąŽžĘę¬źČş«»░▒▓│┤ÁÂĚŞ╣║╗╝Żż┐└┴┬├─┼Ăă╚╔╩╦╠═╬¤đĐĎËďŇÍÎě┘┌█▄ŢŮ▀ÓßÔŃńňŠšŔÚŕŰýÝţ´­˝˛ˇ˘§÷¸°¨˙űŘř■ "
              },
              "ibm852": "cp852",
              "csibm852": "cp852",
              "cp855": {
                "type": "_sbcs",
                "chars": "ђЂѓЃёЁєЄѕЅіІїЇјЈљЉњЊћЋќЌўЎџЏюЮъЪаАбБцЦдДеЕфФгГ«»░▒▓│┤хХиИ╣║╗╝йЙ┐└┴┬├─┼кК╚╔╩╦╠═╬¤лЛмМнНоОп┘┌█▄Пя▀ЯрРсСтТуУжЖвВьЬ№­ыЫзЗшШэЭщЩчЧ§■ "
              },
              "ibm855": "cp855",
              "csibm855": "cp855",
              "cp856": {
                "type": "_sbcs",
                "chars": "אבגדהוזחטיךכלםמןנסעףפץצקרשת�£�×����������®¬½¼�«»░▒▓│┤���©╣║╗╝¢¥┐└┴┬├─┼��╚╔╩╦╠═╬¤���������┘┌█▄¦�▀������µ�������¯´­±‗¾¶§÷¸°¨·¹³²■ "
              },
              "ibm856": "cp856",
              "csibm856": "cp856",
              "cp857": {
                "type": "_sbcs",
                "chars": "ÇüéâäàåçêëèïîıÄÅÉæÆôöòûùİÖÜø£ØŞşáíóúñÑĞğ¿®¬½¼¡«»░▒▓│┤ÁÂÀ©╣║╗╝¢¥┐└┴┬├─┼ãÃ╚╔╩╦╠═╬¤ºªÊËÈ�ÍÎÏ┘┌█▄¦Ì▀ÓßÔÒõÕµ�×ÚÛÙìÿ¯´­±�¾¶§÷¸°¨·¹³²■ "
              },
              "ibm857": "cp857",
              "csibm857": "cp857",
              "cp858": {
                "type": "_sbcs",
                "chars": "ÇüéâäàåçêëèïîìÄÅÉæÆôöòûùÿÖÜø£Ø×ƒáíóúñÑªº¿®¬½¼¡«»░▒▓│┤ÁÂÀ©╣║╗╝¢¥┐└┴┬├─┼ãÃ╚╔╩╦╠═╬¤ðÐÊËÈ€ÍÎÏ┘┌█▄¦Ì▀ÓßÔÒõÕµþÞÚÛÙýÝ¯´­±‗¾¶§÷¸°¨·¹³²■ "
              },
              "ibm858": "cp858",
              "csibm858": "cp858",
              "cp860": {
                "type": "_sbcs",
                "chars": "ÇüéâãàÁçêÊèÍÔìÃÂÉÀÈôõòÚùÌÕÜ¢£Ù₧ÓáíóúñÑªº¿Ò¬½¼¡«»░▒▓│┤╡╢╖╕╣║╗╝╜╛┐└┴┬├─┼╞╟╚╔╩╦╠═╬╧╨╤╥╙╘╒╓╫╪┘┌█▄▌▐▀αßΓπΣσµτΦΘΩδ∞φε∩≡±≥≤⌠⌡÷≈°∙·√ⁿ²■ "
              },
              "ibm860": "cp860",
              "csibm860": "cp860",
              "cp861": {
                "type": "_sbcs",
                "chars": "ÇüéâäàåçêëèÐðÞÄÅÉæÆôöþûÝýÖÜø£Ø₧ƒáíóúÁÍÓÚ¿⌐¬½¼¡«»░▒▓│┤╡╢╖╕╣║╗╝╜╛┐└┴┬├─┼╞╟╚╔╩╦╠═╬╧╨╤╥╙╘╒╓╫╪┘┌█▄▌▐▀αßΓπΣσµτΦΘΩδ∞φε∩≡±≥≤⌠⌡÷≈°∙·√ⁿ²■ "
              },
              "ibm861": "cp861",
              "csibm861": "cp861",
              "cp862": {
                "type": "_sbcs",
                "chars": "אבגדהוזחטיךכלםמןנסעףפץצקרשת¢£¥₧ƒáíóúñÑªº¿⌐¬½¼¡«»░▒▓│┤╡╢╖╕╣║╗╝╜╛┐└┴┬├─┼╞╟╚╔╩╦╠═╬╧╨╤╥╙╘╒╓╫╪┘┌█▄▌▐▀αßΓπΣσµτΦΘΩδ∞φε∩≡±≥≤⌠⌡÷≈°∙·√ⁿ²■ "
              },
              "ibm862": "cp862",
              "csibm862": "cp862",
              "cp863": {
                "type": "_sbcs",
                "chars": "ÇüéâÂà¶çêëèïî‗À§ÉÈÊôËÏûù¤ÔÜ¢£ÙÛƒ¦´óú¨¸³¯Î⌐¬½¼¾«»░▒▓│┤╡╢╖╕╣║╗╝╜╛┐└┴┬├─┼╞╟╚╔╩╦╠═╬╧╨╤╥╙╘╒╓╫╪┘┌█▄▌▐▀αßΓπΣσµτΦΘΩδ∞φε∩≡±≥≤⌠⌡÷≈°∙·√ⁿ²■ "
              },
              "ibm863": "cp863",
              "csibm863": "cp863",
              "cp864": {
                "type": "_sbcs",
                "chars": "\u0000\u0001\u0002\u0003\u0004\u0005\u0006\u0007\b\t\n\u000b\f\r\u000e\u000f\u0010\u0011\u0012\u0013\u0014\u0015\u0016\u0017\u0018\u0019\u001a\u001b\u001c\u001d\u001e\u001f !\"#$٪&'()*+,-./0123456789:;<=>?@ABCDEFGHIJKLMNOPQRSTUVWXYZ[\\]^_`abcdefghijklmnopqrstuvwxyz{|}~°·∙√▒─│┼┤┬├┴┐┌└┘β∞φ±½¼≈«»ﻷﻸ��ﻻﻼ� ­ﺂ£¤ﺄ��ﺎﺏﺕﺙ،ﺝﺡﺥ٠١٢٣٤٥٦٧٨٩ﻑ؛ﺱﺵﺹ؟¢ﺀﺁﺃﺅﻊﺋﺍﺑﺓﺗﺛﺟﺣﺧﺩﺫﺭﺯﺳﺷﺻﺿﻁﻅﻋﻏ¦¬÷×ﻉـﻓﻗﻛﻟﻣﻧﻫﻭﻯﻳﺽﻌﻎﻍﻡﹽّﻥﻩﻬﻰﻲﻐﻕﻵﻶﻝﻙﻱ■�"
              },
              "ibm864": "cp864",
              "csibm864": "cp864",
              "cp865": {
                "type": "_sbcs",
                "chars": "ÇüéâäàåçêëèïîìÄÅÉæÆôöòûùÿÖÜø£Ø₧ƒáíóúñÑªº¿⌐¬½¼¡«¤░▒▓│┤╡╢╖╕╣║╗╝╜╛┐└┴┬├─┼╞╟╚╔╩╦╠═╬╧╨╤╥╙╘╒╓╫╪┘┌█▄▌▐▀αßΓπΣσµτΦΘΩδ∞φε∩≡±≥≤⌠⌡÷≈°∙·√ⁿ²■ "
              },
              "ibm865": "cp865",
              "csibm865": "cp865",
              "cp866": {
                "type": "_sbcs",
                "chars": "АБВГДЕЖЗИЙКЛМНОПРСТУФХЦЧШЩЪЫЬЭЮЯабвгдежзийклмноп░▒▓│┤╡╢╖╕╣║╗╝╜╛┐└┴┬├─┼╞╟╚╔╩╦╠═╬╧╨╤╥╙╘╒╓╫╪┘┌█▄▌▐▀рстуфхцчшщъыьэюяЁёЄєЇїЎў°∙·√№¤■ "
              },
              "ibm866": "cp866",
              "csibm866": "cp866",
              "cp869": {
                "type": "_sbcs",
                "chars": "������Ά�·¬¦‘’Έ―ΉΊΪΌ��ΎΫ©Ώ²³ά£έήίϊΐόύΑΒΓΔΕΖΗ½ΘΙ«»░▒▓│┤ΚΛΜΝ╣║╗╝ΞΟ┐└┴┬├─┼ΠΡ╚╔╩╦╠═╬ΣΤΥΦΧΨΩαβγ┘┌█▄δε▀ζηθικλμνξοπρσςτ΄­±υφχ§ψ΅°¨ωϋΰώ■ "
              },
              "ibm869": "cp869",
              "csibm869": "cp869",
              "cp922": {
                "type": "_sbcs",
                "chars": " ¡¢£¤¥¦§¨©ª«¬­®‾°±²³´µ¶·¸¹º»¼½¾¿ÀÁÂÃÄÅÆÇÈÉÊËÌÍÎÏŠÑÒÓÔÕÖ×ØÙÚÛÜÝŽßàáâãäåæçèéêëìíîïšñòóôõö÷øùúûüýžÿ"
              },
              "ibm922": "cp922",
              "csibm922": "cp922",
              "cp1046": {
                "type": "_sbcs",
                "chars": "ﺈ×÷ﹱ■│─┐┌└┘ﹹﹻﹽﹿﹷﺊﻰﻳﻲﻎﻏﻐﻶﻸﻺﻼ ¤ﺋﺑﺗﺛﺟﺣ،­ﺧﺳ٠١٢٣٤٥٦٧٨٩ﺷ؛ﺻﺿﻊ؟ﻋءآأؤإئابةتثجحخدذرزسشصضطﻇعغﻌﺂﺄﺎﻓـفقكلمنهوىيًٌٍَُِّْﻗﻛﻟﻵﻷﻹﻻﻣﻧﻬﻩ�"
              },
              "ibm1046": "cp1046",
              "csibm1046": "cp1046",
              "cp1124": {
                "type": "_sbcs",
                "chars": " ЁЂҐЄЅІЇЈЉЊЋЌ­ЎЏАБВГДЕЖЗИЙКЛМНОПРСТУФХЦЧШЩЪЫЬЭЮЯабвгдежзийклмнопрстуфхцчшщъыьэюя№ёђґєѕіїјљњћќ§ўџ"
              },
              "ibm1124": "cp1124",
              "csibm1124": "cp1124",
              "cp1125": {
                "type": "_sbcs",
                "chars": "АБВГДЕЖЗИЙКЛМНОПРСТУФХЦЧШЩЪЫЬЭЮЯабвгдежзийклмноп░▒▓│┤╡╢╖╕╣║╗╝╜╛┐└┴┬├─┼╞╟╚╔╩╦╠═╬╧╨╤╥╙╘╒╓╫╪┘┌█▄▌▐▀рстуфхцчшщъыьэюяЁёҐґЄєІіЇї·√№¤■ "
              },
              "ibm1125": "cp1125",
              "csibm1125": "cp1125",
              "cp1129": {
                "type": "_sbcs",
                "chars": " ¡¢£¤¥¦§œ©ª«¬­®¯°±²³Ÿµ¶·Œ¹º»¼½¾¿ÀÁÂĂÄÅÆÇÈÉÊË̀ÍÎÏĐÑ̉ÓÔƠÖ×ØÙÚÛÜỮßàáâăäåæçèéêë́íîïđṇ̃óôơö÷øùúûüư₫ÿ"
              },
              "ibm1129": "cp1129",
              "csibm1129": "cp1129",
              "cp1133": {
                "type": "_sbcs",
                "chars": " ກຂຄງຈສຊຍດຕຖທນບປຜຝພຟມຢຣລວຫອຮ���ຯະາຳິີຶືຸູຼັົຽ���ເແໂໃໄ່້໊໋໌ໍໆ�ໜໝ₭����������������໐໑໒໓໔໕໖໗໘໙��¢¬¦�"
              },
              "ibm1133": "cp1133",
              "csibm1133": "cp1133",
              "cp1161": {
                "type": "_sbcs",
                "chars": "��������������������������������่กขฃคฅฆงจฉชซฌญฎฏฐฑฒณดตถทธนบปผฝพฟภมยรฤลฦวศษสหฬอฮฯะัาำิีึืฺุู้๊๋€฿เแโใไๅๆ็่้๊๋์ํ๎๏๐๑๒๓๔๕๖๗๘๙๚๛¢¬¦ "
              },
              "ibm1161": "cp1161",
              "csibm1161": "cp1161",
              "cp1162": {
                "type": "_sbcs",
                "chars": "€…‘’“”•–— กขฃคฅฆงจฉชซฌญฎฏฐฑฒณดตถทธนบปผฝพฟภมยรฤลฦวศษสหฬอฮฯะัาำิีึืฺุู����฿เแโใไๅๆ็่้๊๋์ํ๎๏๐๑๒๓๔๕๖๗๘๙๚๛����"
              },
              "ibm1162": "cp1162",
              "csibm1162": "cp1162",
              "cp1163": {
                "type": "_sbcs",
                "chars": " ¡¢£€¥¦§œ©ª«¬­®¯°±²³Ÿµ¶·Œ¹º»¼½¾¿ÀÁÂĂÄÅÆÇÈÉÊË̀ÍÎÏĐÑ̉ÓÔƠÖ×ØÙÚÛÜỮßàáâăäåæçèéêë́íîïđṇ̃óôơö÷øùúûüư₫ÿ"
              },
              "ibm1163": "cp1163",
              "csibm1163": "cp1163",
              "maccroatian": {
                "type": "_sbcs",
                "chars": "ÄÅÇÉÑÖÜáàâäãåçéèêëíìîïñóòôöõúùûü†°¢£§•¶ß®Š™´¨≠ŽØ∞±≤≥∆µ∂∑∏š∫ªºΩžø¿¡¬√ƒ≈Ć«Č… ÀÃÕŒœĐ—“”‘’÷◊�©⁄¤‹›Æ»–·‚„‰ÂćÁčÈÍÎÏÌÓÔđÒÚÛÙıˆ˜¯πË˚¸Êæˇ"
              },
              "maccyrillic": {
                "type": "_sbcs",
                "chars": "АБВГДЕЖЗИЙКЛМНОПРСТУФХЦЧШЩЪЫЬЭЮЯ†°¢£§•¶І®©™Ђђ≠Ѓѓ∞±≤≥іµ∂ЈЄєЇїЉљЊњјЅ¬√ƒ≈∆«»… ЋћЌќѕ–—“”‘’÷„ЎўЏџ№Ёёяабвгдежзийклмнопрстуфхцчшщъыьэю¤"
              },
              "macgreek": {
                "type": "_sbcs",
                "chars": "Ä¹²É³ÖÜ΅àâä΄¨çéèêë£™îï•½‰ôö¦­ùûü†ΓΔΘΛΞΠß®©ΣΪ§≠°·Α±≤≥¥ΒΕΖΗΙΚΜΦΫΨΩάΝ¬ΟΡ≈Τ«»… ΥΧΆΈœ–―“”‘’÷ΉΊΌΎέήίόΏύαβψδεφγηιξκλμνοπώρστθωςχυζϊϋΐΰ�"
              },
              "maciceland": {
                "type": "_sbcs",
                "chars": "ÄÅÇÉÑÖÜáàâäãåçéèêëíìîïñóòôöõúùûüÝ°¢£§•¶ß®©™´¨≠ÆØ∞±≤≥¥µ∂∑∏π∫ªºΩæø¿¡¬√ƒ≈∆«»… ÀÃÕŒœ–—“”‘’÷◊ÿŸ⁄¤ÐðÞþý·‚„‰ÂÊÁËÈÍÎÏÌÓÔ�ÒÚÛÙıˆ˜¯˘˙˚¸˝˛ˇ"
              },
              "macroman": {
                "type": "_sbcs",
                "chars": "ÄÅÇÉÑÖÜáàâäãåçéèêëíìîïñóòôöõúùûü†°¢£§•¶ß®©™´¨≠ÆØ∞±≤≥¥µ∂∑∏π∫ªºΩæø¿¡¬√ƒ≈∆«»… ÀÃÕŒœ–—“”‘’÷◊ÿŸ⁄¤‹›ﬁﬂ‡·‚„‰ÂÊÁËÈÍÎÏÌÓÔ�ÒÚÛÙıˆ˜¯˘˙˚¸˝˛ˇ"
              },
              "macromania": {
                "type": "_sbcs",
                "chars": "ÄÅÇÉÑÖÜáàâäãåçéèêëíìîïñóòôöõúùûü†°¢£§•¶ß®©™´¨≠ĂŞ∞±≤≥¥µ∂∑∏π∫ªºΩăş¿¡¬√ƒ≈∆«»… ÀÃÕŒœ–—“”‘’÷◊ÿŸ⁄¤‹›Ţţ‡·‚„‰ÂÊÁËÈÍÎÏÌÓÔ�ÒÚÛÙıˆ˜¯˘˙˚¸˝˛ˇ"
              },
              "macthai": {
                "type": "_sbcs",
                "chars": "«»…“”�•‘’� กขฃคฅฆงจฉชซฌญฎฏฐฑฒณดตถทธนบปผฝพฟภมยรฤลฦวศษสหฬอฮฯะัาำิีึืฺุู﻿​–—฿เแโใไๅๆ็่้๊๋์ํ™๏๐๑๒๓๔๕๖๗๘๙®©����"
              },
              "macturkish": {
                "type": "_sbcs",
                "chars": "ÄÅÇÉÑÖÜáàâäãåçéèêëíìîïñóòôöõúùûü†°¢£§•¶ß®©™´¨≠ÆØ∞±≤≥¥µ∂∑∏π∫ªºΩæø¿¡¬√ƒ≈∆«»… ÀÃÕŒœ–—“”‘’÷◊ÿŸĞğİıŞş‡·‚„‰ÂÊÁËÈÍÎÏÌÓÔ�ÒÚÛÙ�ˆ˜¯˘˙˚¸˝˛ˇ"
              },
              "macukraine": {
                "type": "_sbcs",
                "chars": "АБВГДЕЖЗИЙКЛМНОПРСТУФХЦЧШЩЪЫЬЭЮЯ†°Ґ£§•¶І®©™Ђђ≠Ѓѓ∞±≤≥іµґЈЄєЇїЉљЊњјЅ¬√ƒ≈∆«»… ЋћЌќѕ–—“”‘’÷„ЎўЏџ№Ёёяабвгдежзийклмнопрстуфхцчшщъыьэю¤"
              },
              "koi8r": {
                "type": "_sbcs",
                "chars": "─│┌┐└┘├┤┬┴┼▀▄█▌▐░▒▓⌠■∙√≈≤≥ ⌡°²·÷═║╒ё╓╔╕╖╗╘╙╚╛╜╝╞╟╠╡Ё╢╣╤╥╦╧╨╩╪╫╬©юабцдефгхийклмнопярстужвьызшэщчъЮАБЦДЕФГХИЙКЛМНОПЯРСТУЖВЬЫЗШЭЩЧЪ"
              },
              "koi8u": {
                "type": "_sbcs",
                "chars": "─│┌┐└┘├┤┬┴┼▀▄█▌▐░▒▓⌠■∙√≈≤≥ ⌡°²·÷═║╒ёє╔ії╗╘╙╚╛ґ╝╞╟╠╡ЁЄ╣ІЇ╦╧╨╩╪Ґ╬©юабцдефгхийклмнопярстужвьызшэщчъЮАБЦДЕФГХИЙКЛМНОПЯРСТУЖВЬЫЗШЭЩЧЪ"
              },
              "koi8ru": {
                "type": "_sbcs",
                "chars": "─│┌┐└┘├┤┬┴┼▀▄█▌▐░▒▓⌠■∙√≈≤≥ ⌡°²·÷═║╒ёє╔ії╗╘╙╚╛ґў╞╟╠╡ЁЄ╣ІЇ╦╧╨╩╪ҐЎ©юабцдефгхийклмнопярстужвьызшэщчъЮАБЦДЕФГХИЙКЛМНОПЯРСТУЖВЬЫЗШЭЩЧЪ"
              },
              "koi8t": {
                "type": "_sbcs",
                "chars": "қғ‚Ғ„…†‡�‰ҳ‹ҲҷҶ�Қ‘’“”•–—�™�›�����ӯӮё¤ӣ¦§���«¬­®�°±²Ё�Ӣ¶·�№�»���©юабцдефгхийклмнопярстужвьызшэщчъЮАБЦДЕФГХИЙКЛМНОПЯРСТУЖВЬЫЗШЭЩЧЪ"
              },
              "armscii8": {
                "type": "_sbcs",
                "chars": " �և։)(»«—.՝,-֊…՜՛՞ԱաԲբԳգԴդԵեԶզԷէԸըԹթԺժԻիԼլԽխԾծԿկՀհՁձՂղՃճՄմՅյՆնՇշՈոՉչՊպՋջՌռՍսՎվՏտՐրՑցՒւՓփՔքՕօՖֆ՚�"
              },
              "rk1048": {
                "type": "_sbcs",
                "chars": "ЂЃ‚ѓ„…†‡€‰Љ‹ЊҚҺЏђ‘’“”•–—�™љ›њқһџ ҰұӘ¤Ө¦§Ё©Ғ«¬­®Ү°±Ііөµ¶·ё№ғ»әҢңүАБВГДЕЖЗИЙКЛМНОПРСТУФХЦЧШЩЪЫЬЭЮЯабвгдежзийклмнопрстуфхцчшщъыьэюя"
              },
              "tcvn": {
                "type": "_sbcs",
                "chars": "\u0000ÚỤ\u0003ỪỬỮ\u0007\b\t\n\u000b\f\r\u000e\u000f\u0010ỨỰỲỶỸÝỴ\u0018\u0019\u001a\u001b\u001c\u001d\u001e\u001f !\"#$%&'()*+,-./0123456789:;<=>?@ABCDEFGHIJKLMNOPQRSTUVWXYZ[\\]^_`abcdefghijklmnopqrstuvwxyz{|}~ÀẢÃÁẠẶẬÈẺẼÉẸỆÌỈĨÍỊÒỎÕÓỌỘỜỞỠỚỢÙỦŨ ĂÂÊÔƠƯĐăâêôơưđẶ̀̀̉̃́àảãáạẲằẳẵắẴẮẦẨẪẤỀặầẩẫấậèỂẻẽéẹềểễếệìỉỄẾỒĩíịòỔỏõóọồổỗốộờởỡớợùỖủũúụừửữứựỳỷỹýỵỐ"
              },
              "georgianacademy": {
                "type": "_sbcs",
                "chars": "‚ƒ„…†‡ˆ‰Š‹Œ‘’“”•–—˜™š›œŸ ¡¢£¤¥¦§¨©ª«¬­®¯°±²³´µ¶·¸¹º»¼½¾¿აბგდევზთიკლმნოპჟრსტუფქღყშჩცძწჭხჯჰჱჲჳჴჵჶçèéêëìíîïðñòóôõö÷øùúûüýþÿ"
              },
              "georgianps": {
                "type": "_sbcs",
                "chars": "‚ƒ„…†‡ˆ‰Š‹Œ‘’“”•–—˜™š›œŸ ¡¢£¤¥¦§¨©ª«¬­®¯°±²³´µ¶·¸¹º»¼½¾¿აბგდევზჱთიკლმნჲოპჟრსტჳუფქღყშჩცძწჭხჴჯჰჵæçèéêëìíîïðñòóôõö÷øùúûüýþÿ"
              },
              "pt154": {
                "type": "_sbcs",
                "chars": "ҖҒӮғ„…ҶҮҲүҠӢҢҚҺҸҗ‘’“”•–—ҳҷҡӣңқһҹ ЎўЈӨҘҰ§Ё©Ә«¬ӯ®Ҝ°ұІіҙө¶·ё№ә»јҪҫҝАБВГДЕЖЗИЙКЛМНОПРСТУФХЦЧШЩЪЫЬЭЮЯабвгдежзийклмнопрстуфхцчшщъыьэюя"
              },
              "viscii": {
                "type": "_sbcs",
                "chars": "\u0000\u0001Ẳ\u0003\u0004ẴẪ\u0007\b\t\n\u000b\f\r\u000e\u000f\u0010\u0011\u0012\u0013Ỷ\u0015\u0016\u0017\u0018Ỹ\u001a\u001b\u001c\u001dỴ\u001f !\"#$%&'()*+,-./0123456789:;<=>?@ABCDEFGHIJKLMNOPQRSTUVWXYZ[\\]^_`abcdefghijklmnopqrstuvwxyz{|}~ẠẮẰẶẤẦẨẬẼẸẾỀỂỄỆỐỒỔỖỘỢỚỜỞỊỎỌỈỦŨỤỲÕắằặấầẩậẽẹếềểễệốồổỗỠƠộờởịỰỨỪỬơớƯÀÁÂÃẢĂẳẵÈÉÊẺÌÍĨỳĐứÒÓÔạỷừửÙÚỹỵÝỡưàáâãảăữẫèéêẻìíĩỉđựòóôõỏọụùúũủýợỮ"
              },
              "iso646cn": {
                "type": "_sbcs",
                "chars": "\u0000\u0001\u0002\u0003\u0004\u0005\u0006\u0007\b\t\n\u000b\f\r\u000e\u000f\u0010\u0011\u0012\u0013\u0014\u0015\u0016\u0017\u0018\u0019\u001a\u001b\u001c\u001d\u001e\u001f !\"#¥%&'()*+,-./0123456789:;<=>?@ABCDEFGHIJKLMNOPQRSTUVWXYZ[\\]^_`abcdefghijklmnopqrstuvwxyz{|}‾��������������������������������������������������������������������������������������������������������������������������������"
              },
              "iso646jp": {
                "type": "_sbcs",
                "chars": "\u0000\u0001\u0002\u0003\u0004\u0005\u0006\u0007\b\t\n\u000b\f\r\u000e\u000f\u0010\u0011\u0012\u0013\u0014\u0015\u0016\u0017\u0018\u0019\u001a\u001b\u001c\u001d\u001e\u001f !\"#$%&'()*+,-./0123456789:;<=>?@ABCDEFGHIJKLMNOPQRSTUVWXYZ[¥]^_`abcdefghijklmnopqrstuvwxyz{|}‾��������������������������������������������������������������������������������������������������������������������������������"
              },
              "hproman8": {
                "type": "_sbcs",
                "chars": " ÀÂÈÊËÎÏ´ˋˆ¨˜ÙÛ₤¯Ýý°ÇçÑñ¡¿¤£¥§ƒ¢âêôûáéóúàèòùäëöüÅîØÆåíøæÄìÖÜÉïßÔÁÃãÐðÍÌÓÒÕõŠšÚŸÿÞþ·µ¶¾—¼½ªº«■»±�"
              },
              "macintosh": {
                "type": "_sbcs",
                "chars": "ÄÅÇÉÑÖÜáàâäãåçéèêëíìîïñóòôöõúùûü†°¢£§•¶ß®©™´¨≠ÆØ∞±≤≥¥µ∂∑∏π∫ªºΩæø¿¡¬√ƒ≈∆«»… ÀÃÕŒœ–—“”‘’÷◊ÿŸ⁄¤‹›ﬁﬂ‡·‚„‰ÂÊÁËÈÍÎÏÌÓÔ�ÒÚÛÙıˆ˜¯˘˙˚¸˝˛ˇ"
              },
              "ascii": {
                "type": "_sbcs",
                "chars": "��������������������������������������������������������������������������������������������������������������������������������"
              },
              "tis620": {
                "type": "_sbcs",
                "chars": "���������������������������������กขฃคฅฆงจฉชซฌญฎฏฐฑฒณดตถทธนบปผฝพฟภมยรฤลฦวศษสหฬอฮฯะัาำิีึืฺุู����฿เแโใไๅๆ็่้๊๋์ํ๎๏๐๑๒๓๔๕๖๗๘๙๚๛����"
              }
            };

            var Buffer$1 = safer_1.Buffer;

            // Multibyte codec. In this scheme, a character is represented by 1 or more bytes.
            // Our codec supports UTF-16 surrogates, extensions for GB18030 and unicode sequences.
            // To save memory and loading time, we read table files only when requested.

            var _dbcs = DBCSCodec;

            var UNASSIGNED$1 = -1,
                GB18030_CODE = -2,
                SEQ_START  = -10,
                NODE_START = -1000,
                UNASSIGNED_NODE = new Array(0x100),
                DEF_CHAR = -1;

            for (var i$2 = 0; i$2 < 0x100; i$2++)
                UNASSIGNED_NODE[i$2] = UNASSIGNED$1;


            // Class DBCSCodec reads and initializes mapping tables.
            function DBCSCodec(codecOptions, iconv) {
                this.encodingName = codecOptions.encodingName;
                if (!codecOptions)
                    throw new Error("DBCS codec is called without the data.")
                if (!codecOptions.table)
                    throw new Error("Encoding '" + this.encodingName + "' has no data.");

                // Load tables.
                var mappingTable = codecOptions.table();


                // Decode tables: MBCS -> Unicode.

                // decodeTables is a trie, encoded as an array of arrays of integers. Internal arrays are trie nodes and all have len = 256.
                // Trie root is decodeTables[0].
                // Values: >=  0 -> unicode character code. can be > 0xFFFF
                //         == UNASSIGNED -> unknown/unassigned sequence.
                //         == GB18030_CODE -> this is the end of a GB18030 4-byte sequence.
                //         <= NODE_START -> index of the next node in our trie to process next byte.
                //         <= SEQ_START  -> index of the start of a character code sequence, in decodeTableSeq.
                this.decodeTables = [];
                this.decodeTables[0] = UNASSIGNED_NODE.slice(0); // Create root node.

                // Sometimes a MBCS char corresponds to a sequence of unicode chars. We store them as arrays of integers here. 
                this.decodeTableSeq = [];

                // Actual mapping tables consist of chunks. Use them to fill up decode tables.
                for (var i = 0; i < mappingTable.length; i++)
                    this._addDecodeChunk(mappingTable[i]);

                // Load & create GB18030 tables when needed.
                if (typeof codecOptions.gb18030 === 'function') {
                    this.gb18030 = codecOptions.gb18030(); // Load GB18030 ranges.

                    // Add GB18030 common decode nodes.
                    var commonThirdByteNodeIdx = this.decodeTables.length;
                    this.decodeTables.push(UNASSIGNED_NODE.slice(0));

                    var commonFourthByteNodeIdx = this.decodeTables.length;
                    this.decodeTables.push(UNASSIGNED_NODE.slice(0));

                    // Fill out the tree
                    var firstByteNode = this.decodeTables[0];
                    for (var i = 0x81; i <= 0xFE; i++) {
                        var secondByteNode = this.decodeTables[NODE_START - firstByteNode[i]];
                        for (var j = 0x30; j <= 0x39; j++) {
                            if (secondByteNode[j] === UNASSIGNED$1) {
                                secondByteNode[j] = NODE_START - commonThirdByteNodeIdx;
                            } else if (secondByteNode[j] > NODE_START) {
                                throw new Error("gb18030 decode tables conflict at byte 2");
                            }

                            var thirdByteNode = this.decodeTables[NODE_START - secondByteNode[j]];
                            for (var k = 0x81; k <= 0xFE; k++) {
                                if (thirdByteNode[k] === UNASSIGNED$1) {
                                    thirdByteNode[k] = NODE_START - commonFourthByteNodeIdx;
                                } else if (thirdByteNode[k] === NODE_START - commonFourthByteNodeIdx) {
                                    continue;
                                } else if (thirdByteNode[k] > NODE_START) {
                                    throw new Error("gb18030 decode tables conflict at byte 3");
                                }

                                var fourthByteNode = this.decodeTables[NODE_START - thirdByteNode[k]];
                                for (var l = 0x30; l <= 0x39; l++) {
                                    if (fourthByteNode[l] === UNASSIGNED$1)
                                        fourthByteNode[l] = GB18030_CODE;
                                }
                            }
                        }
                    }
                }

                this.defaultCharUnicode = iconv.defaultCharUnicode;

                
                // Encode tables: Unicode -> DBCS.

                // `encodeTable` is array mapping from unicode char to encoded char. All its values are integers for performance.
                // Because it can be sparse, it is represented as array of buckets by 256 chars each. Bucket can be null.
                // Values: >=  0 -> it is a normal char. Write the value (if <=256 then 1 byte, if <=65536 then 2 bytes, etc.).
                //         == UNASSIGNED -> no conversion found. Output a default char.
                //         <= SEQ_START  -> it's an index in encodeTableSeq, see below. The character starts a sequence.
                this.encodeTable = [];
                
                // `encodeTableSeq` is used when a sequence of unicode characters is encoded as a single code. We use a tree of
                // objects where keys correspond to characters in sequence and leafs are the encoded dbcs values. A special DEF_CHAR key
                // means end of sequence (needed when one sequence is a strict subsequence of another).
                // Objects are kept separately from encodeTable to increase performance.
                this.encodeTableSeq = [];

                // Some chars can be decoded, but need not be encoded.
                var skipEncodeChars = {};
                if (codecOptions.encodeSkipVals)
                    for (var i = 0; i < codecOptions.encodeSkipVals.length; i++) {
                        var val = codecOptions.encodeSkipVals[i];
                        if (typeof val === 'number')
                            skipEncodeChars[val] = true;
                        else
                            for (var j = val.from; j <= val.to; j++)
                                skipEncodeChars[j] = true;
                    }
                    
                // Use decode trie to recursively fill out encode tables.
                this._fillEncodeTable(0, 0, skipEncodeChars);

                // Add more encoding pairs when needed.
                if (codecOptions.encodeAdd) {
                    for (var uChar in codecOptions.encodeAdd)
                        if (Object.prototype.hasOwnProperty.call(codecOptions.encodeAdd, uChar))
                            this._setEncodeChar(uChar.charCodeAt(0), codecOptions.encodeAdd[uChar]);
                }

                this.defCharSB  = this.encodeTable[0][iconv.defaultCharSingleByte.charCodeAt(0)];
                if (this.defCharSB === UNASSIGNED$1) this.defCharSB = this.encodeTable[0]['?'];
                if (this.defCharSB === UNASSIGNED$1) this.defCharSB = "?".charCodeAt(0);
            }

            DBCSCodec.prototype.encoder = DBCSEncoder;
            DBCSCodec.prototype.decoder = DBCSDecoder;

            // Decoder helpers
            DBCSCodec.prototype._getDecodeTrieNode = function(addr) {
                var bytes = [];
                for (; addr > 0; addr >>>= 8)
                    bytes.push(addr & 0xFF);
                if (bytes.length == 0)
                    bytes.push(0);

                var node = this.decodeTables[0];
                for (var i = bytes.length-1; i > 0; i--) { // Traverse nodes deeper into the trie.
                    var val = node[bytes[i]];

                    if (val == UNASSIGNED$1) { // Create new node.
                        node[bytes[i]] = NODE_START - this.decodeTables.length;
                        this.decodeTables.push(node = UNASSIGNED_NODE.slice(0));
                    }
                    else if (val <= NODE_START) { // Existing node.
                        node = this.decodeTables[NODE_START - val];
                    }
                    else
                        throw new Error("Overwrite byte in " + this.encodingName + ", addr: " + addr.toString(16));
                }
                return node;
            };


            DBCSCodec.prototype._addDecodeChunk = function(chunk) {
                // First element of chunk is the hex mbcs code where we start.
                var curAddr = parseInt(chunk[0], 16);

                // Choose the decoding node where we'll write our chars.
                var writeTable = this._getDecodeTrieNode(curAddr);
                curAddr = curAddr & 0xFF;

                // Write all other elements of the chunk to the table.
                for (var k = 1; k < chunk.length; k++) {
                    var part = chunk[k];
                    if (typeof part === "string") { // String, write as-is.
                        for (var l = 0; l < part.length;) {
                            var code = part.charCodeAt(l++);
                            if (0xD800 <= code && code < 0xDC00) { // Decode surrogate
                                var codeTrail = part.charCodeAt(l++);
                                if (0xDC00 <= codeTrail && codeTrail < 0xE000)
                                    writeTable[curAddr++] = 0x10000 + (code - 0xD800) * 0x400 + (codeTrail - 0xDC00);
                                else
                                    throw new Error("Incorrect surrogate pair in "  + this.encodingName + " at chunk " + chunk[0]);
                            }
                            else if (0x0FF0 < code && code <= 0x0FFF) { // Character sequence (our own encoding used)
                                var len = 0xFFF - code + 2;
                                var seq = [];
                                for (var m = 0; m < len; m++)
                                    seq.push(part.charCodeAt(l++)); // Simple variation: don't support surrogates or subsequences in seq.

                                writeTable[curAddr++] = SEQ_START - this.decodeTableSeq.length;
                                this.decodeTableSeq.push(seq);
                            }
                            else
                                writeTable[curAddr++] = code; // Basic char
                        }
                    } 
                    else if (typeof part === "number") { // Integer, meaning increasing sequence starting with prev character.
                        var charCode = writeTable[curAddr - 1] + 1;
                        for (var l = 0; l < part; l++)
                            writeTable[curAddr++] = charCode++;
                    }
                    else
                        throw new Error("Incorrect type '" + typeof part + "' given in "  + this.encodingName + " at chunk " + chunk[0]);
                }
                if (curAddr > 0xFF)
                    throw new Error("Incorrect chunk in "  + this.encodingName + " at addr " + chunk[0] + ": too long" + curAddr);
            };

            // Encoder helpers
            DBCSCodec.prototype._getEncodeBucket = function(uCode) {
                var high = uCode >> 8; // This could be > 0xFF because of astral characters.
                if (this.encodeTable[high] === undefined)
                    this.encodeTable[high] = UNASSIGNED_NODE.slice(0); // Create bucket on demand.
                return this.encodeTable[high];
            };

            DBCSCodec.prototype._setEncodeChar = function(uCode, dbcsCode) {
                var bucket = this._getEncodeBucket(uCode);
                var low = uCode & 0xFF;
                if (bucket[low] <= SEQ_START)
                    this.encodeTableSeq[SEQ_START-bucket[low]][DEF_CHAR] = dbcsCode; // There's already a sequence, set a single-char subsequence of it.
                else if (bucket[low] == UNASSIGNED$1)
                    bucket[low] = dbcsCode;
            };

            DBCSCodec.prototype._setEncodeSequence = function(seq, dbcsCode) {
                
                // Get the root of character tree according to first character of the sequence.
                var uCode = seq[0];
                var bucket = this._getEncodeBucket(uCode);
                var low = uCode & 0xFF;

                var node;
                if (bucket[low] <= SEQ_START) {
                    // There's already a sequence with  - use it.
                    node = this.encodeTableSeq[SEQ_START-bucket[low]];
                }
                else {
                    // There was no sequence object - allocate a new one.
                    node = {};
                    if (bucket[low] !== UNASSIGNED$1) node[DEF_CHAR] = bucket[low]; // If a char was set before - make it a single-char subsequence.
                    bucket[low] = SEQ_START - this.encodeTableSeq.length;
                    this.encodeTableSeq.push(node);
                }

                // Traverse the character tree, allocating new nodes as needed.
                for (var j = 1; j < seq.length-1; j++) {
                    var oldVal = node[uCode];
                    if (typeof oldVal === 'object')
                        node = oldVal;
                    else {
                        node = node[uCode] = {};
                        if (oldVal !== undefined)
                            node[DEF_CHAR] = oldVal;
                    }
                }

                // Set the leaf to given dbcsCode.
                uCode = seq[seq.length-1];
                node[uCode] = dbcsCode;
            };

            DBCSCodec.prototype._fillEncodeTable = function(nodeIdx, prefix, skipEncodeChars) {
                var node = this.decodeTables[nodeIdx];
                var hasValues = false;
                var subNodeEmpty = {};
                for (var i = 0; i < 0x100; i++) {
                    var uCode = node[i];
                    var mbCode = prefix + i;
                    if (skipEncodeChars[mbCode])
                        continue;

                    if (uCode >= 0) {
                        this._setEncodeChar(uCode, mbCode);
                        hasValues = true;
                    } else if (uCode <= NODE_START) {
                        var subNodeIdx = NODE_START - uCode;
                        if (!subNodeEmpty[subNodeIdx]) {  // Skip empty subtrees (they are too large in gb18030).
                            var newPrefix = (mbCode << 8) >>> 0;  // NOTE: '>>> 0' keeps 32-bit num positive.
                            if (this._fillEncodeTable(subNodeIdx, newPrefix, skipEncodeChars))
                                hasValues = true;
                            else
                                subNodeEmpty[subNodeIdx] = true;
                        }
                    } else if (uCode <= SEQ_START) {
                        this._setEncodeSequence(this.decodeTableSeq[SEQ_START - uCode], mbCode);
                        hasValues = true;
                    }
                }
                return hasValues;
            };



            // == Encoder ==================================================================

            function DBCSEncoder(options, codec) {
                // Encoder state
                this.leadSurrogate = -1;
                this.seqObj = undefined;
                
                // Static data
                this.encodeTable = codec.encodeTable;
                this.encodeTableSeq = codec.encodeTableSeq;
                this.defaultCharSingleByte = codec.defCharSB;
                this.gb18030 = codec.gb18030;
            }

            DBCSEncoder.prototype.write = function(str) {
                var newBuf = Buffer$1.alloc(str.length * (this.gb18030 ? 4 : 3)),
                    leadSurrogate = this.leadSurrogate,
                    seqObj = this.seqObj, nextChar = -1,
                    i = 0, j = 0;

                while (true) {
                    // 0. Get next character.
                    if (nextChar === -1) {
                        if (i == str.length) break;
                        var uCode = str.charCodeAt(i++);
                    }
                    else {
                        var uCode = nextChar;
                        nextChar = -1;    
                    }

                    // 1. Handle surrogates.
                    if (0xD800 <= uCode && uCode < 0xE000) { // Char is one of surrogates.
                        if (uCode < 0xDC00) { // We've got lead surrogate.
                            if (leadSurrogate === -1) {
                                leadSurrogate = uCode;
                                continue;
                            } else {
                                leadSurrogate = uCode;
                                // Double lead surrogate found.
                                uCode = UNASSIGNED$1;
                            }
                        } else { // We've got trail surrogate.
                            if (leadSurrogate !== -1) {
                                uCode = 0x10000 + (leadSurrogate - 0xD800) * 0x400 + (uCode - 0xDC00);
                                leadSurrogate = -1;
                            } else {
                                // Incomplete surrogate pair - only trail surrogate found.
                                uCode = UNASSIGNED$1;
                            }
                            
                        }
                    }
                    else if (leadSurrogate !== -1) {
                        // Incomplete surrogate pair - only lead surrogate found.
                        nextChar = uCode; uCode = UNASSIGNED$1; // Write an error, then current char.
                        leadSurrogate = -1;
                    }

                    // 2. Convert uCode character.
                    var dbcsCode = UNASSIGNED$1;
                    if (seqObj !== undefined && uCode != UNASSIGNED$1) { // We are in the middle of the sequence
                        var resCode = seqObj[uCode];
                        if (typeof resCode === 'object') { // Sequence continues.
                            seqObj = resCode;
                            continue;

                        } else if (typeof resCode == 'number') { // Sequence finished. Write it.
                            dbcsCode = resCode;

                        } else if (resCode == undefined) { // Current character is not part of the sequence.

                            // Try default character for this sequence
                            resCode = seqObj[DEF_CHAR];
                            if (resCode !== undefined) {
                                dbcsCode = resCode; // Found. Write it.
                                nextChar = uCode; // Current character will be written too in the next iteration.

                            }
                        }
                        seqObj = undefined;
                    }
                    else if (uCode >= 0) {  // Regular character
                        var subtable = this.encodeTable[uCode >> 8];
                        if (subtable !== undefined)
                            dbcsCode = subtable[uCode & 0xFF];
                        
                        if (dbcsCode <= SEQ_START) { // Sequence start
                            seqObj = this.encodeTableSeq[SEQ_START-dbcsCode];
                            continue;
                        }

                        if (dbcsCode == UNASSIGNED$1 && this.gb18030) {
                            // Use GB18030 algorithm to find character(s) to write.
                            var idx = findIdx(this.gb18030.uChars, uCode);
                            if (idx != -1) {
                                var dbcsCode = this.gb18030.gbChars[idx] + (uCode - this.gb18030.uChars[idx]);
                                newBuf[j++] = 0x81 + Math.floor(dbcsCode / 12600); dbcsCode = dbcsCode % 12600;
                                newBuf[j++] = 0x30 + Math.floor(dbcsCode / 1260); dbcsCode = dbcsCode % 1260;
                                newBuf[j++] = 0x81 + Math.floor(dbcsCode / 10); dbcsCode = dbcsCode % 10;
                                newBuf[j++] = 0x30 + dbcsCode;
                                continue;
                            }
                        }
                    }

                    // 3. Write dbcsCode character.
                    if (dbcsCode === UNASSIGNED$1)
                        dbcsCode = this.defaultCharSingleByte;
                    
                    if (dbcsCode < 0x100) {
                        newBuf[j++] = dbcsCode;
                    }
                    else if (dbcsCode < 0x10000) {
                        newBuf[j++] = dbcsCode >> 8;   // high byte
                        newBuf[j++] = dbcsCode & 0xFF; // low byte
                    }
                    else if (dbcsCode < 0x1000000) {
                        newBuf[j++] = dbcsCode >> 16;
                        newBuf[j++] = (dbcsCode >> 8) & 0xFF;
                        newBuf[j++] = dbcsCode & 0xFF;
                    } else {
                        newBuf[j++] = dbcsCode >>> 24;
                        newBuf[j++] = (dbcsCode >>> 16) & 0xFF;
                        newBuf[j++] = (dbcsCode >>> 8) & 0xFF;
                        newBuf[j++] = dbcsCode & 0xFF;
                    }
                }

                this.seqObj = seqObj;
                this.leadSurrogate = leadSurrogate;
                return newBuf.slice(0, j);
            };

            DBCSEncoder.prototype.end = function() {
                if (this.leadSurrogate === -1 && this.seqObj === undefined)
                    return; // All clean. Most often case.

                var newBuf = Buffer$1.alloc(10), j = 0;

                if (this.seqObj) { // We're in the sequence.
                    var dbcsCode = this.seqObj[DEF_CHAR];
                    if (dbcsCode !== undefined) { // Write beginning of the sequence.
                        if (dbcsCode < 0x100) {
                            newBuf[j++] = dbcsCode;
                        }
                        else {
                            newBuf[j++] = dbcsCode >> 8;   // high byte
                            newBuf[j++] = dbcsCode & 0xFF; // low byte
                        }
                    }
                    this.seqObj = undefined;
                }

                if (this.leadSurrogate !== -1) {
                    // Incomplete surrogate pair - only lead surrogate found.
                    newBuf[j++] = this.defaultCharSingleByte;
                    this.leadSurrogate = -1;
                }
                
                return newBuf.slice(0, j);
            };

            // Export for testing
            DBCSEncoder.prototype.findIdx = findIdx;


            // == Decoder ==================================================================

            function DBCSDecoder(options, codec) {
                // Decoder state
                this.nodeIdx = 0;
                this.prevBytes = [];

                // Static data
                this.decodeTables = codec.decodeTables;
                this.decodeTableSeq = codec.decodeTableSeq;
                this.defaultCharUnicode = codec.defaultCharUnicode;
                this.gb18030 = codec.gb18030;
            }

            DBCSDecoder.prototype.write = function(buf) {
                var newBuf = Buffer$1.alloc(buf.length*2),
                    nodeIdx = this.nodeIdx, 
                    prevBytes = this.prevBytes, prevOffset = this.prevBytes.length,
                    seqStart = -this.prevBytes.length, // idx of the start of current parsed sequence.
                    uCode;

                for (var i = 0, j = 0; i < buf.length; i++) {
                    var curByte = (i >= 0) ? buf[i] : prevBytes[i + prevOffset];

                    // Lookup in current trie node.
                    var uCode = this.decodeTables[nodeIdx][curByte];

                    if (uCode >= 0) ;
                    else if (uCode === UNASSIGNED$1) { // Unknown char.
                        // TODO: Callback with seq.
                        uCode = this.defaultCharUnicode.charCodeAt(0);
                        i = seqStart; // Skip one byte ('i' will be incremented by the for loop) and try to parse again.
                    }
                    else if (uCode === GB18030_CODE) {
                        if (i >= 3) {
                            var ptr = (buf[i-3]-0x81)*12600 + (buf[i-2]-0x30)*1260 + (buf[i-1]-0x81)*10 + (curByte-0x30);
                        } else {
                            var ptr = (prevBytes[i-3+prevOffset]-0x81)*12600 + 
                                      (((i-2 >= 0) ? buf[i-2] : prevBytes[i-2+prevOffset])-0x30)*1260 + 
                                      (((i-1 >= 0) ? buf[i-1] : prevBytes[i-1+prevOffset])-0x81)*10 + 
                                      (curByte-0x30);
                        }
                        var idx = findIdx(this.gb18030.gbChars, ptr);
                        uCode = this.gb18030.uChars[idx] + ptr - this.gb18030.gbChars[idx];
                    }
                    else if (uCode <= NODE_START) { // Go to next trie node.
                        nodeIdx = NODE_START - uCode;
                        continue;
                    }
                    else if (uCode <= SEQ_START) { // Output a sequence of chars.
                        var seq = this.decodeTableSeq[SEQ_START - uCode];
                        for (var k = 0; k < seq.length - 1; k++) {
                            uCode = seq[k];
                            newBuf[j++] = uCode & 0xFF;
                            newBuf[j++] = uCode >> 8;
                        }
                        uCode = seq[seq.length-1];
                    }
                    else
                        throw new Error("iconv-lite internal error: invalid decoding table value " + uCode + " at " + nodeIdx + "/" + curByte);

                    // Write the character to buffer, handling higher planes using surrogate pair.
                    if (uCode >= 0x10000) { 
                        uCode -= 0x10000;
                        var uCodeLead = 0xD800 | (uCode >> 10);
                        newBuf[j++] = uCodeLead & 0xFF;
                        newBuf[j++] = uCodeLead >> 8;

                        uCode = 0xDC00 | (uCode & 0x3FF);
                    }
                    newBuf[j++] = uCode & 0xFF;
                    newBuf[j++] = uCode >> 8;

                    // Reset trie node.
                    nodeIdx = 0; seqStart = i+1;
                }

                this.nodeIdx = nodeIdx;
                this.prevBytes = (seqStart >= 0)
                    ? Array.prototype.slice.call(buf, seqStart)
                    : prevBytes.slice(seqStart + prevOffset).concat(Array.prototype.slice.call(buf));

                return newBuf.slice(0, j).toString('ucs2');
            };

            DBCSDecoder.prototype.end = function() {
                var ret = '';

                // Try to parse all remaining chars.
                while (this.prevBytes.length > 0) {
                    // Skip 1 character in the buffer.
                    ret += this.defaultCharUnicode;
                    var bytesArr = this.prevBytes.slice(1);

                    // Parse remaining as usual.
                    this.prevBytes = [];
                    this.nodeIdx = 0;
                    if (bytesArr.length > 0)
                        ret += this.write(bytesArr);
                }

                this.prevBytes = [];
                this.nodeIdx = 0;
                return ret;
            };

            // Binary search for GB18030. Returns largest i such that table[i] <= val.
            function findIdx(table, val) {
                if (table[0] > val)
                    return -1;

                var l = 0, r = table.length;
                while (l < r-1) { // always table[l] <= val < table[r]
                    var mid = l + ((r-l+1) >> 1);
                    if (table[mid] <= val)
                        l = mid;
                    else
                        r = mid;
                }
                return l;
            }

            var dbcsCodec = {
            	_dbcs: _dbcs
            };

            var require$$0 = [
            	[
            		"0",
            		"\u0000",
            		128
            	],
            	[
            		"a1",
            		"｡",
            		62
            	],
            	[
            		"8140",
            		"　、。，．・：；？！゛゜´｀¨＾￣＿ヽヾゝゞ〃仝々〆〇ー―‐／＼～∥｜…‥‘’“”（）〔〕［］｛｝〈",
            		9,
            		"＋－±×"
            	],
            	[
            		"8180",
            		"÷＝≠＜＞≦≧∞∴♂♀°′″℃￥＄￠￡％＃＆＊＠§☆★○●◎◇◆□■△▲▽▼※〒→←↑↓〓"
            	],
            	[
            		"81b8",
            		"∈∋⊆⊇⊂⊃∪∩"
            	],
            	[
            		"81c8",
            		"∧∨￢⇒⇔∀∃"
            	],
            	[
            		"81da",
            		"∠⊥⌒∂∇≡≒≪≫√∽∝∵∫∬"
            	],
            	[
            		"81f0",
            		"Å‰♯♭♪†‡¶"
            	],
            	[
            		"81fc",
            		"◯"
            	],
            	[
            		"824f",
            		"０",
            		9
            	],
            	[
            		"8260",
            		"Ａ",
            		25
            	],
            	[
            		"8281",
            		"ａ",
            		25
            	],
            	[
            		"829f",
            		"ぁ",
            		82
            	],
            	[
            		"8340",
            		"ァ",
            		62
            	],
            	[
            		"8380",
            		"ム",
            		22
            	],
            	[
            		"839f",
            		"Α",
            		16,
            		"Σ",
            		6
            	],
            	[
            		"83bf",
            		"α",
            		16,
            		"σ",
            		6
            	],
            	[
            		"8440",
            		"А",
            		5,
            		"ЁЖ",
            		25
            	],
            	[
            		"8470",
            		"а",
            		5,
            		"ёж",
            		7
            	],
            	[
            		"8480",
            		"о",
            		17
            	],
            	[
            		"849f",
            		"─│┌┐┘└├┬┤┴┼━┃┏┓┛┗┣┳┫┻╋┠┯┨┷┿┝┰┥┸╂"
            	],
            	[
            		"8740",
            		"①",
            		19,
            		"Ⅰ",
            		9
            	],
            	[
            		"875f",
            		"㍉㌔㌢㍍㌘㌧㌃㌶㍑㍗㌍㌦㌣㌫㍊㌻㎜㎝㎞㎎㎏㏄㎡"
            	],
            	[
            		"877e",
            		"㍻"
            	],
            	[
            		"8780",
            		"〝〟№㏍℡㊤",
            		4,
            		"㈱㈲㈹㍾㍽㍼≒≡∫∮∑√⊥∠∟⊿∵∩∪"
            	],
            	[
            		"889f",
            		"亜唖娃阿哀愛挨姶逢葵茜穐悪握渥旭葦芦鯵梓圧斡扱宛姐虻飴絢綾鮎或粟袷安庵按暗案闇鞍杏以伊位依偉囲夷委威尉惟意慰易椅為畏異移維緯胃萎衣謂違遺医井亥域育郁磯一壱溢逸稲茨芋鰯允印咽員因姻引飲淫胤蔭"
            	],
            	[
            		"8940",
            		"院陰隠韻吋右宇烏羽迂雨卯鵜窺丑碓臼渦嘘唄欝蔚鰻姥厩浦瓜閏噂云運雲荏餌叡営嬰影映曳栄永泳洩瑛盈穎頴英衛詠鋭液疫益駅悦謁越閲榎厭円"
            	],
            	[
            		"8980",
            		"園堰奄宴延怨掩援沿演炎焔煙燕猿縁艶苑薗遠鉛鴛塩於汚甥凹央奥往応押旺横欧殴王翁襖鴬鴎黄岡沖荻億屋憶臆桶牡乙俺卸恩温穏音下化仮何伽価佳加可嘉夏嫁家寡科暇果架歌河火珂禍禾稼箇花苛茄荷華菓蝦課嘩貨迦過霞蚊俄峨我牙画臥芽蛾賀雅餓駕介会解回塊壊廻快怪悔恢懐戒拐改"
            	],
            	[
            		"8a40",
            		"魁晦械海灰界皆絵芥蟹開階貝凱劾外咳害崖慨概涯碍蓋街該鎧骸浬馨蛙垣柿蛎鈎劃嚇各廓拡撹格核殻獲確穫覚角赫較郭閣隔革学岳楽額顎掛笠樫"
            	],
            	[
            		"8a80",
            		"橿梶鰍潟割喝恰括活渇滑葛褐轄且鰹叶椛樺鞄株兜竃蒲釜鎌噛鴨栢茅萱粥刈苅瓦乾侃冠寒刊勘勧巻喚堪姦完官寛干幹患感慣憾換敢柑桓棺款歓汗漢澗潅環甘監看竿管簡緩缶翰肝艦莞観諌貫還鑑間閑関陥韓館舘丸含岸巌玩癌眼岩翫贋雁頑顔願企伎危喜器基奇嬉寄岐希幾忌揮机旗既期棋棄"
            	],
            	[
            		"8b40",
            		"機帰毅気汽畿祈季稀紀徽規記貴起軌輝飢騎鬼亀偽儀妓宜戯技擬欺犠疑祇義蟻誼議掬菊鞠吉吃喫桔橘詰砧杵黍却客脚虐逆丘久仇休及吸宮弓急救"
            	],
            	[
            		"8b80",
            		"朽求汲泣灸球究窮笈級糾給旧牛去居巨拒拠挙渠虚許距鋸漁禦魚亨享京供侠僑兇競共凶協匡卿叫喬境峡強彊怯恐恭挟教橋況狂狭矯胸脅興蕎郷鏡響饗驚仰凝尭暁業局曲極玉桐粁僅勤均巾錦斤欣欽琴禁禽筋緊芹菌衿襟謹近金吟銀九倶句区狗玖矩苦躯駆駈駒具愚虞喰空偶寓遇隅串櫛釧屑屈"
            	],
            	[
            		"8c40",
            		"掘窟沓靴轡窪熊隈粂栗繰桑鍬勲君薫訓群軍郡卦袈祁係傾刑兄啓圭珪型契形径恵慶慧憩掲携敬景桂渓畦稽系経継繋罫茎荊蛍計詣警軽頚鶏芸迎鯨"
            	],
            	[
            		"8c80",
            		"劇戟撃激隙桁傑欠決潔穴結血訣月件倹倦健兼券剣喧圏堅嫌建憲懸拳捲検権牽犬献研硯絹県肩見謙賢軒遣鍵険顕験鹸元原厳幻弦減源玄現絃舷言諺限乎個古呼固姑孤己庫弧戸故枯湖狐糊袴股胡菰虎誇跨鈷雇顧鼓五互伍午呉吾娯後御悟梧檎瑚碁語誤護醐乞鯉交佼侯候倖光公功効勾厚口向"
            	],
            	[
            		"8d40",
            		"后喉坑垢好孔孝宏工巧巷幸広庚康弘恒慌抗拘控攻昂晃更杭校梗構江洪浩港溝甲皇硬稿糠紅紘絞綱耕考肯肱腔膏航荒行衡講貢購郊酵鉱砿鋼閤降"
            	],
            	[
            		"8d80",
            		"項香高鴻剛劫号合壕拷濠豪轟麹克刻告国穀酷鵠黒獄漉腰甑忽惚骨狛込此頃今困坤墾婚恨懇昏昆根梱混痕紺艮魂些佐叉唆嵯左差査沙瑳砂詐鎖裟坐座挫債催再最哉塞妻宰彩才採栽歳済災采犀砕砦祭斎細菜裁載際剤在材罪財冴坂阪堺榊肴咲崎埼碕鷺作削咋搾昨朔柵窄策索錯桜鮭笹匙冊刷"
            	],
            	[
            		"8e40",
            		"察拶撮擦札殺薩雑皐鯖捌錆鮫皿晒三傘参山惨撒散桟燦珊産算纂蚕讃賛酸餐斬暫残仕仔伺使刺司史嗣四士始姉姿子屍市師志思指支孜斯施旨枝止"
            	],
            	[
            		"8e80",
            		"死氏獅祉私糸紙紫肢脂至視詞詩試誌諮資賜雌飼歯事似侍児字寺慈持時次滋治爾璽痔磁示而耳自蒔辞汐鹿式識鴫竺軸宍雫七叱執失嫉室悉湿漆疾質実蔀篠偲柴芝屡蕊縞舎写射捨赦斜煮社紗者謝車遮蛇邪借勺尺杓灼爵酌釈錫若寂弱惹主取守手朱殊狩珠種腫趣酒首儒受呪寿授樹綬需囚収周"
            	],
            	[
            		"8f40",
            		"宗就州修愁拾洲秀秋終繍習臭舟蒐衆襲讐蹴輯週酋酬集醜什住充十従戎柔汁渋獣縦重銃叔夙宿淑祝縮粛塾熟出術述俊峻春瞬竣舜駿准循旬楯殉淳"
            	],
            	[
            		"8f80",
            		"準潤盾純巡遵醇順処初所暑曙渚庶緒署書薯藷諸助叙女序徐恕鋤除傷償勝匠升召哨商唱嘗奨妾娼宵将小少尚庄床廠彰承抄招掌捷昇昌昭晶松梢樟樵沼消渉湘焼焦照症省硝礁祥称章笑粧紹肖菖蒋蕉衝裳訟証詔詳象賞醤鉦鍾鐘障鞘上丈丞乗冗剰城場壌嬢常情擾条杖浄状畳穣蒸譲醸錠嘱埴飾"
            	],
            	[
            		"9040",
            		"拭植殖燭織職色触食蝕辱尻伸信侵唇娠寝審心慎振新晋森榛浸深申疹真神秦紳臣芯薪親診身辛進針震人仁刃塵壬尋甚尽腎訊迅陣靭笥諏須酢図厨"
            	],
            	[
            		"9080",
            		"逗吹垂帥推水炊睡粋翠衰遂酔錐錘随瑞髄崇嵩数枢趨雛据杉椙菅頗雀裾澄摺寸世瀬畝是凄制勢姓征性成政整星晴棲栖正清牲生盛精聖声製西誠誓請逝醒青静斉税脆隻席惜戚斥昔析石積籍績脊責赤跡蹟碩切拙接摂折設窃節説雪絶舌蝉仙先千占宣専尖川戦扇撰栓栴泉浅洗染潜煎煽旋穿箭線"
            	],
            	[
            		"9140",
            		"繊羨腺舛船薦詮賎践選遷銭銑閃鮮前善漸然全禅繕膳糎噌塑岨措曾曽楚狙疏疎礎祖租粗素組蘇訴阻遡鼠僧創双叢倉喪壮奏爽宋層匝惣想捜掃挿掻"
            	],
            	[
            		"9180",
            		"操早曹巣槍槽漕燥争痩相窓糟総綜聡草荘葬蒼藻装走送遭鎗霜騒像増憎臓蔵贈造促側則即息捉束測足速俗属賊族続卒袖其揃存孫尊損村遜他多太汰詑唾堕妥惰打柁舵楕陀駄騨体堆対耐岱帯待怠態戴替泰滞胎腿苔袋貸退逮隊黛鯛代台大第醍題鷹滝瀧卓啄宅托択拓沢濯琢託鐸濁諾茸凧蛸只"
            	],
            	[
            		"9240",
            		"叩但達辰奪脱巽竪辿棚谷狸鱈樽誰丹単嘆坦担探旦歎淡湛炭短端箪綻耽胆蛋誕鍛団壇弾断暖檀段男談値知地弛恥智池痴稚置致蜘遅馳築畜竹筑蓄"
            	],
            	[
            		"9280",
            		"逐秩窒茶嫡着中仲宙忠抽昼柱注虫衷註酎鋳駐樗瀦猪苧著貯丁兆凋喋寵帖帳庁弔張彫徴懲挑暢朝潮牒町眺聴脹腸蝶調諜超跳銚長頂鳥勅捗直朕沈珍賃鎮陳津墜椎槌追鎚痛通塚栂掴槻佃漬柘辻蔦綴鍔椿潰坪壷嬬紬爪吊釣鶴亭低停偵剃貞呈堤定帝底庭廷弟悌抵挺提梯汀碇禎程締艇訂諦蹄逓"
            	],
            	[
            		"9340",
            		"邸鄭釘鼎泥摘擢敵滴的笛適鏑溺哲徹撤轍迭鉄典填天展店添纏甜貼転顛点伝殿澱田電兎吐堵塗妬屠徒斗杜渡登菟賭途都鍍砥砺努度土奴怒倒党冬"
            	],
            	[
            		"9380",
            		"凍刀唐塔塘套宕島嶋悼投搭東桃梼棟盗淘湯涛灯燈当痘祷等答筒糖統到董蕩藤討謄豆踏逃透鐙陶頭騰闘働動同堂導憧撞洞瞳童胴萄道銅峠鴇匿得徳涜特督禿篤毒独読栃橡凸突椴届鳶苫寅酉瀞噸屯惇敦沌豚遁頓呑曇鈍奈那内乍凪薙謎灘捺鍋楢馴縄畷南楠軟難汝二尼弐迩匂賑肉虹廿日乳入"
            	],
            	[
            		"9440",
            		"如尿韮任妊忍認濡禰祢寧葱猫熱年念捻撚燃粘乃廼之埜嚢悩濃納能脳膿農覗蚤巴把播覇杷波派琶破婆罵芭馬俳廃拝排敗杯盃牌背肺輩配倍培媒梅"
            	],
            	[
            		"9480",
            		"楳煤狽買売賠陪這蝿秤矧萩伯剥博拍柏泊白箔粕舶薄迫曝漠爆縛莫駁麦函箱硲箸肇筈櫨幡肌畑畠八鉢溌発醗髪伐罰抜筏閥鳩噺塙蛤隼伴判半反叛帆搬斑板氾汎版犯班畔繁般藩販範釆煩頒飯挽晩番盤磐蕃蛮匪卑否妃庇彼悲扉批披斐比泌疲皮碑秘緋罷肥被誹費避非飛樋簸備尾微枇毘琵眉美"
            	],
            	[
            		"9540",
            		"鼻柊稗匹疋髭彦膝菱肘弼必畢筆逼桧姫媛紐百謬俵彪標氷漂瓢票表評豹廟描病秒苗錨鋲蒜蛭鰭品彬斌浜瀕貧賓頻敏瓶不付埠夫婦富冨布府怖扶敷"
            	],
            	[
            		"9580",
            		"斧普浮父符腐膚芙譜負賦赴阜附侮撫武舞葡蕪部封楓風葺蕗伏副復幅服福腹複覆淵弗払沸仏物鮒分吻噴墳憤扮焚奮粉糞紛雰文聞丙併兵塀幣平弊柄並蔽閉陛米頁僻壁癖碧別瞥蔑箆偏変片篇編辺返遍便勉娩弁鞭保舗鋪圃捕歩甫補輔穂募墓慕戊暮母簿菩倣俸包呆報奉宝峰峯崩庖抱捧放方朋"
            	],
            	[
            		"9640",
            		"法泡烹砲縫胞芳萌蓬蜂褒訪豊邦鋒飽鳳鵬乏亡傍剖坊妨帽忘忙房暴望某棒冒紡肪膨謀貌貿鉾防吠頬北僕卜墨撲朴牧睦穆釦勃没殆堀幌奔本翻凡盆"
            	],
            	[
            		"9680",
            		"摩磨魔麻埋妹昧枚毎哩槙幕膜枕鮪柾鱒桝亦俣又抹末沫迄侭繭麿万慢満漫蔓味未魅巳箕岬密蜜湊蓑稔脈妙粍民眠務夢無牟矛霧鵡椋婿娘冥名命明盟迷銘鳴姪牝滅免棉綿緬面麺摸模茂妄孟毛猛盲網耗蒙儲木黙目杢勿餅尤戻籾貰問悶紋門匁也冶夜爺耶野弥矢厄役約薬訳躍靖柳薮鑓愉愈油癒"
            	],
            	[
            		"9740",
            		"諭輸唯佑優勇友宥幽悠憂揖有柚湧涌猶猷由祐裕誘遊邑郵雄融夕予余与誉輿預傭幼妖容庸揚揺擁曜楊様洋溶熔用窯羊耀葉蓉要謡踊遥陽養慾抑欲"
            	],
            	[
            		"9780",
            		"沃浴翌翼淀羅螺裸来莱頼雷洛絡落酪乱卵嵐欄濫藍蘭覧利吏履李梨理璃痢裏裡里離陸律率立葎掠略劉流溜琉留硫粒隆竜龍侶慮旅虜了亮僚両凌寮料梁涼猟療瞭稜糧良諒遼量陵領力緑倫厘林淋燐琳臨輪隣鱗麟瑠塁涙累類令伶例冷励嶺怜玲礼苓鈴隷零霊麗齢暦歴列劣烈裂廉恋憐漣煉簾練聯"
            	],
            	[
            		"9840",
            		"蓮連錬呂魯櫓炉賂路露労婁廊弄朗楼榔浪漏牢狼篭老聾蝋郎六麓禄肋録論倭和話歪賄脇惑枠鷲亙亘鰐詫藁蕨椀湾碗腕"
            	],
            	[
            		"989f",
            		"弌丐丕个丱丶丼丿乂乖乘亂亅豫亊舒弍于亞亟亠亢亰亳亶从仍仄仆仂仗仞仭仟价伉佚估佛佝佗佇佶侈侏侘佻佩佰侑佯來侖儘俔俟俎俘俛俑俚俐俤俥倚倨倔倪倥倅伜俶倡倩倬俾俯們倆偃假會偕偐偈做偖偬偸傀傚傅傴傲"
            	],
            	[
            		"9940",
            		"僉僊傳僂僖僞僥僭僣僮價僵儉儁儂儖儕儔儚儡儺儷儼儻儿兀兒兌兔兢竸兩兪兮冀冂囘册冉冏冑冓冕冖冤冦冢冩冪冫决冱冲冰况冽凅凉凛几處凩凭"
            	],
            	[
            		"9980",
            		"凰凵凾刄刋刔刎刧刪刮刳刹剏剄剋剌剞剔剪剴剩剳剿剽劍劔劒剱劈劑辨辧劬劭劼劵勁勍勗勞勣勦飭勠勳勵勸勹匆匈甸匍匐匏匕匚匣匯匱匳匸區卆卅丗卉卍凖卞卩卮夘卻卷厂厖厠厦厥厮厰厶參簒雙叟曼燮叮叨叭叺吁吽呀听吭吼吮吶吩吝呎咏呵咎呟呱呷呰咒呻咀呶咄咐咆哇咢咸咥咬哄哈咨"
            	],
            	[
            		"9a40",
            		"咫哂咤咾咼哘哥哦唏唔哽哮哭哺哢唹啀啣啌售啜啅啖啗唸唳啝喙喀咯喊喟啻啾喘喞單啼喃喩喇喨嗚嗅嗟嗄嗜嗤嗔嘔嗷嘖嗾嗽嘛嗹噎噐營嘴嘶嘲嘸"
            	],
            	[
            		"9a80",
            		"噫噤嘯噬噪嚆嚀嚊嚠嚔嚏嚥嚮嚶嚴囂嚼囁囃囀囈囎囑囓囗囮囹圀囿圄圉圈國圍圓團圖嗇圜圦圷圸坎圻址坏坩埀垈坡坿垉垓垠垳垤垪垰埃埆埔埒埓堊埖埣堋堙堝塲堡塢塋塰毀塒堽塹墅墹墟墫墺壞墻墸墮壅壓壑壗壙壘壥壜壤壟壯壺壹壻壼壽夂夊夐夛梦夥夬夭夲夸夾竒奕奐奎奚奘奢奠奧奬奩"
            	],
            	[
            		"9b40",
            		"奸妁妝佞侫妣妲姆姨姜妍姙姚娥娟娑娜娉娚婀婬婉娵娶婢婪媚媼媾嫋嫂媽嫣嫗嫦嫩嫖嫺嫻嬌嬋嬖嬲嫐嬪嬶嬾孃孅孀孑孕孚孛孥孩孰孳孵學斈孺宀"
            	],
            	[
            		"9b80",
            		"它宦宸寃寇寉寔寐寤實寢寞寥寫寰寶寳尅將專對尓尠尢尨尸尹屁屆屎屓屐屏孱屬屮乢屶屹岌岑岔妛岫岻岶岼岷峅岾峇峙峩峽峺峭嶌峪崋崕崗嵜崟崛崑崔崢崚崙崘嵌嵒嵎嵋嵬嵳嵶嶇嶄嶂嶢嶝嶬嶮嶽嶐嶷嶼巉巍巓巒巖巛巫已巵帋帚帙帑帛帶帷幄幃幀幎幗幔幟幢幤幇幵并幺麼广庠廁廂廈廐廏"
            	],
            	[
            		"9c40",
            		"廖廣廝廚廛廢廡廨廩廬廱廳廰廴廸廾弃弉彝彜弋弑弖弩弭弸彁彈彌彎弯彑彖彗彙彡彭彳彷徃徂彿徊很徑徇從徙徘徠徨徭徼忖忻忤忸忱忝悳忿怡恠"
            	],
            	[
            		"9c80",
            		"怙怐怩怎怱怛怕怫怦怏怺恚恁恪恷恟恊恆恍恣恃恤恂恬恫恙悁悍惧悃悚悄悛悖悗悒悧悋惡悸惠惓悴忰悽惆悵惘慍愕愆惶惷愀惴惺愃愡惻惱愍愎慇愾愨愧慊愿愼愬愴愽慂慄慳慷慘慙慚慫慴慯慥慱慟慝慓慵憙憖憇憬憔憚憊憑憫憮懌懊應懷懈懃懆憺懋罹懍懦懣懶懺懴懿懽懼懾戀戈戉戍戌戔戛"
            	],
            	[
            		"9d40",
            		"戞戡截戮戰戲戳扁扎扞扣扛扠扨扼抂抉找抒抓抖拔抃抔拗拑抻拏拿拆擔拈拜拌拊拂拇抛拉挌拮拱挧挂挈拯拵捐挾捍搜捏掖掎掀掫捶掣掏掉掟掵捫"
            	],
            	[
            		"9d80",
            		"捩掾揩揀揆揣揉插揶揄搖搴搆搓搦搶攝搗搨搏摧摯摶摎攪撕撓撥撩撈撼據擒擅擇撻擘擂擱擧舉擠擡抬擣擯攬擶擴擲擺攀擽攘攜攅攤攣攫攴攵攷收攸畋效敖敕敍敘敞敝敲數斂斃變斛斟斫斷旃旆旁旄旌旒旛旙无旡旱杲昊昃旻杳昵昶昴昜晏晄晉晁晞晝晤晧晨晟晢晰暃暈暎暉暄暘暝曁暹曉暾暼"
            	],
            	[
            		"9e40",
            		"曄暸曖曚曠昿曦曩曰曵曷朏朖朞朦朧霸朮朿朶杁朸朷杆杞杠杙杣杤枉杰枩杼杪枌枋枦枡枅枷柯枴柬枳柩枸柤柞柝柢柮枹柎柆柧檜栞框栩桀桍栲桎"
            	],
            	[
            		"9e80",
            		"梳栫桙档桷桿梟梏梭梔條梛梃檮梹桴梵梠梺椏梍桾椁棊椈棘椢椦棡椌棍棔棧棕椶椒椄棗棣椥棹棠棯椨椪椚椣椡棆楹楷楜楸楫楔楾楮椹楴椽楙椰楡楞楝榁楪榲榮槐榿槁槓榾槎寨槊槝榻槃榧樮榑榠榜榕榴槞槨樂樛槿權槹槲槧樅榱樞槭樔槫樊樒櫁樣樓橄樌橲樶橸橇橢橙橦橈樸樢檐檍檠檄檢檣"
            	],
            	[
            		"9f40",
            		"檗蘗檻櫃櫂檸檳檬櫞櫑櫟檪櫚櫪櫻欅蘖櫺欒欖鬱欟欸欷盜欹飮歇歃歉歐歙歔歛歟歡歸歹歿殀殄殃殍殘殕殞殤殪殫殯殲殱殳殷殼毆毋毓毟毬毫毳毯"
            	],
            	[
            		"9f80",
            		"麾氈氓气氛氤氣汞汕汢汪沂沍沚沁沛汾汨汳沒沐泄泱泓沽泗泅泝沮沱沾沺泛泯泙泪洟衍洶洫洽洸洙洵洳洒洌浣涓浤浚浹浙涎涕濤涅淹渕渊涵淇淦涸淆淬淞淌淨淒淅淺淙淤淕淪淮渭湮渮渙湲湟渾渣湫渫湶湍渟湃渺湎渤滿渝游溂溪溘滉溷滓溽溯滄溲滔滕溏溥滂溟潁漑灌滬滸滾漿滲漱滯漲滌"
            	],
            	[
            		"e040",
            		"漾漓滷澆潺潸澁澀潯潛濳潭澂潼潘澎澑濂潦澳澣澡澤澹濆澪濟濕濬濔濘濱濮濛瀉瀋濺瀑瀁瀏濾瀛瀚潴瀝瀘瀟瀰瀾瀲灑灣炙炒炯烱炬炸炳炮烟烋烝"
            	],
            	[
            		"e080",
            		"烙焉烽焜焙煥煕熈煦煢煌煖煬熏燻熄熕熨熬燗熹熾燒燉燔燎燠燬燧燵燼燹燿爍爐爛爨爭爬爰爲爻爼爿牀牆牋牘牴牾犂犁犇犒犖犢犧犹犲狃狆狄狎狒狢狠狡狹狷倏猗猊猜猖猝猴猯猩猥猾獎獏默獗獪獨獰獸獵獻獺珈玳珎玻珀珥珮珞璢琅瑯琥珸琲琺瑕琿瑟瑙瑁瑜瑩瑰瑣瑪瑶瑾璋璞璧瓊瓏瓔珱"
            	],
            	[
            		"e140",
            		"瓠瓣瓧瓩瓮瓲瓰瓱瓸瓷甄甃甅甌甎甍甕甓甞甦甬甼畄畍畊畉畛畆畚畩畤畧畫畭畸當疆疇畴疊疉疂疔疚疝疥疣痂疳痃疵疽疸疼疱痍痊痒痙痣痞痾痿"
            	],
            	[
            		"e180",
            		"痼瘁痰痺痲痳瘋瘍瘉瘟瘧瘠瘡瘢瘤瘴瘰瘻癇癈癆癜癘癡癢癨癩癪癧癬癰癲癶癸發皀皃皈皋皎皖皓皙皚皰皴皸皹皺盂盍盖盒盞盡盥盧盪蘯盻眈眇眄眩眤眞眥眦眛眷眸睇睚睨睫睛睥睿睾睹瞎瞋瞑瞠瞞瞰瞶瞹瞿瞼瞽瞻矇矍矗矚矜矣矮矼砌砒礦砠礪硅碎硴碆硼碚碌碣碵碪碯磑磆磋磔碾碼磅磊磬"
            	],
            	[
            		"e240",
            		"磧磚磽磴礇礒礑礙礬礫祀祠祗祟祚祕祓祺祿禊禝禧齋禪禮禳禹禺秉秕秧秬秡秣稈稍稘稙稠稟禀稱稻稾稷穃穗穉穡穢穩龝穰穹穽窈窗窕窘窖窩竈窰"
            	],
            	[
            		"e280",
            		"窶竅竄窿邃竇竊竍竏竕竓站竚竝竡竢竦竭竰笂笏笊笆笳笘笙笞笵笨笶筐筺笄筍笋筌筅筵筥筴筧筰筱筬筮箝箘箟箍箜箚箋箒箏筝箙篋篁篌篏箴篆篝篩簑簔篦篥籠簀簇簓篳篷簗簍篶簣簧簪簟簷簫簽籌籃籔籏籀籐籘籟籤籖籥籬籵粃粐粤粭粢粫粡粨粳粲粱粮粹粽糀糅糂糘糒糜糢鬻糯糲糴糶糺紆"
            	],
            	[
            		"e340",
            		"紂紜紕紊絅絋紮紲紿紵絆絳絖絎絲絨絮絏絣經綉絛綏絽綛綺綮綣綵緇綽綫總綢綯緜綸綟綰緘緝緤緞緻緲緡縅縊縣縡縒縱縟縉縋縢繆繦縻縵縹繃縷"
            	],
            	[
            		"e380",
            		"縲縺繧繝繖繞繙繚繹繪繩繼繻纃緕繽辮繿纈纉續纒纐纓纔纖纎纛纜缸缺罅罌罍罎罐网罕罔罘罟罠罨罩罧罸羂羆羃羈羇羌羔羞羝羚羣羯羲羹羮羶羸譱翅翆翊翕翔翡翦翩翳翹飜耆耄耋耒耘耙耜耡耨耿耻聊聆聒聘聚聟聢聨聳聲聰聶聹聽聿肄肆肅肛肓肚肭冐肬胛胥胙胝胄胚胖脉胯胱脛脩脣脯腋"
            	],
            	[
            		"e440",
            		"隋腆脾腓腑胼腱腮腥腦腴膃膈膊膀膂膠膕膤膣腟膓膩膰膵膾膸膽臀臂膺臉臍臑臙臘臈臚臟臠臧臺臻臾舁舂舅與舊舍舐舖舩舫舸舳艀艙艘艝艚艟艤"
            	],
            	[
            		"e480",
            		"艢艨艪艫舮艱艷艸艾芍芒芫芟芻芬苡苣苟苒苴苳苺莓范苻苹苞茆苜茉苙茵茴茖茲茱荀茹荐荅茯茫茗茘莅莚莪莟莢莖茣莎莇莊荼莵荳荵莠莉莨菴萓菫菎菽萃菘萋菁菷萇菠菲萍萢萠莽萸蔆菻葭萪萼蕚蒄葷葫蒭葮蒂葩葆萬葯葹萵蓊葢蒹蒿蒟蓙蓍蒻蓚蓐蓁蓆蓖蒡蔡蓿蓴蔗蔘蔬蔟蔕蔔蓼蕀蕣蕘蕈"
            	],
            	[
            		"e540",
            		"蕁蘂蕋蕕薀薤薈薑薊薨蕭薔薛藪薇薜蕷蕾薐藉薺藏薹藐藕藝藥藜藹蘊蘓蘋藾藺蘆蘢蘚蘰蘿虍乕虔號虧虱蚓蚣蚩蚪蚋蚌蚶蚯蛄蛆蚰蛉蠣蚫蛔蛞蛩蛬"
            	],
            	[
            		"e580",
            		"蛟蛛蛯蜒蜆蜈蜀蜃蛻蜑蜉蜍蛹蜊蜴蜿蜷蜻蜥蜩蜚蝠蝟蝸蝌蝎蝴蝗蝨蝮蝙蝓蝣蝪蠅螢螟螂螯蟋螽蟀蟐雖螫蟄螳蟇蟆螻蟯蟲蟠蠏蠍蟾蟶蟷蠎蟒蠑蠖蠕蠢蠡蠱蠶蠹蠧蠻衄衂衒衙衞衢衫袁衾袞衵衽袵衲袂袗袒袮袙袢袍袤袰袿袱裃裄裔裘裙裝裹褂裼裴裨裲褄褌褊褓襃褞褥褪褫襁襄褻褶褸襌褝襠襞"
            	],
            	[
            		"e640",
            		"襦襤襭襪襯襴襷襾覃覈覊覓覘覡覩覦覬覯覲覺覽覿觀觚觜觝觧觴觸訃訖訐訌訛訝訥訶詁詛詒詆詈詼詭詬詢誅誂誄誨誡誑誥誦誚誣諄諍諂諚諫諳諧"
            	],
            	[
            		"e680",
            		"諤諱謔諠諢諷諞諛謌謇謚諡謖謐謗謠謳鞫謦謫謾謨譁譌譏譎證譖譛譚譫譟譬譯譴譽讀讌讎讒讓讖讙讚谺豁谿豈豌豎豐豕豢豬豸豺貂貉貅貊貍貎貔豼貘戝貭貪貽貲貳貮貶賈賁賤賣賚賽賺賻贄贅贊贇贏贍贐齎贓賍贔贖赧赭赱赳趁趙跂趾趺跏跚跖跌跛跋跪跫跟跣跼踈踉跿踝踞踐踟蹂踵踰踴蹊"
            	],
            	[
            		"e740",
            		"蹇蹉蹌蹐蹈蹙蹤蹠踪蹣蹕蹶蹲蹼躁躇躅躄躋躊躓躑躔躙躪躡躬躰軆躱躾軅軈軋軛軣軼軻軫軾輊輅輕輒輙輓輜輟輛輌輦輳輻輹轅轂輾轌轉轆轎轗轜"
            	],
            	[
            		"e780",
            		"轢轣轤辜辟辣辭辯辷迚迥迢迪迯邇迴逅迹迺逑逕逡逍逞逖逋逧逶逵逹迸遏遐遑遒逎遉逾遖遘遞遨遯遶隨遲邂遽邁邀邊邉邏邨邯邱邵郢郤扈郛鄂鄒鄙鄲鄰酊酖酘酣酥酩酳酲醋醉醂醢醫醯醪醵醴醺釀釁釉釋釐釖釟釡釛釼釵釶鈞釿鈔鈬鈕鈑鉞鉗鉅鉉鉤鉈銕鈿鉋鉐銜銖銓銛鉚鋏銹銷鋩錏鋺鍄錮"
            	],
            	[
            		"e840",
            		"錙錢錚錣錺錵錻鍜鍠鍼鍮鍖鎰鎬鎭鎔鎹鏖鏗鏨鏥鏘鏃鏝鏐鏈鏤鐚鐔鐓鐃鐇鐐鐶鐫鐵鐡鐺鑁鑒鑄鑛鑠鑢鑞鑪鈩鑰鑵鑷鑽鑚鑼鑾钁鑿閂閇閊閔閖閘閙"
            	],
            	[
            		"e880",
            		"閠閨閧閭閼閻閹閾闊濶闃闍闌闕闔闖關闡闥闢阡阨阮阯陂陌陏陋陷陜陞陝陟陦陲陬隍隘隕隗險隧隱隲隰隴隶隸隹雎雋雉雍襍雜霍雕雹霄霆霈霓霎霑霏霖霙霤霪霰霹霽霾靄靆靈靂靉靜靠靤靦靨勒靫靱靹鞅靼鞁靺鞆鞋鞏鞐鞜鞨鞦鞣鞳鞴韃韆韈韋韜韭齏韲竟韶韵頏頌頸頤頡頷頽顆顏顋顫顯顰"
            	],
            	[
            		"e940",
            		"顱顴顳颪颯颱颶飄飃飆飩飫餃餉餒餔餘餡餝餞餤餠餬餮餽餾饂饉饅饐饋饑饒饌饕馗馘馥馭馮馼駟駛駝駘駑駭駮駱駲駻駸騁騏騅駢騙騫騷驅驂驀驃"
            	],
            	[
            		"e980",
            		"騾驕驍驛驗驟驢驥驤驩驫驪骭骰骼髀髏髑髓體髞髟髢髣髦髯髫髮髴髱髷髻鬆鬘鬚鬟鬢鬣鬥鬧鬨鬩鬪鬮鬯鬲魄魃魏魍魎魑魘魴鮓鮃鮑鮖鮗鮟鮠鮨鮴鯀鯊鮹鯆鯏鯑鯒鯣鯢鯤鯔鯡鰺鯲鯱鯰鰕鰔鰉鰓鰌鰆鰈鰒鰊鰄鰮鰛鰥鰤鰡鰰鱇鰲鱆鰾鱚鱠鱧鱶鱸鳧鳬鳰鴉鴈鳫鴃鴆鴪鴦鶯鴣鴟鵄鴕鴒鵁鴿鴾鵆鵈"
            	],
            	[
            		"ea40",
            		"鵝鵞鵤鵑鵐鵙鵲鶉鶇鶫鵯鵺鶚鶤鶩鶲鷄鷁鶻鶸鶺鷆鷏鷂鷙鷓鷸鷦鷭鷯鷽鸚鸛鸞鹵鹹鹽麁麈麋麌麒麕麑麝麥麩麸麪麭靡黌黎黏黐黔黜點黝黠黥黨黯"
            	],
            	[
            		"ea80",
            		"黴黶黷黹黻黼黽鼇鼈皷鼕鼡鼬鼾齊齒齔齣齟齠齡齦齧齬齪齷齲齶龕龜龠堯槇遙瑤凜熙"
            	],
            	[
            		"ed40",
            		"纊褜鍈銈蓜俉炻昱棈鋹曻彅丨仡仼伀伃伹佖侒侊侚侔俍偀倢俿倞偆偰偂傔僴僘兊兤冝冾凬刕劜劦勀勛匀匇匤卲厓厲叝﨎咜咊咩哿喆坙坥垬埈埇﨏"
            	],
            	[
            		"ed80",
            		"塚增墲夋奓奛奝奣妤妺孖寀甯寘寬尞岦岺峵崧嵓﨑嵂嵭嶸嶹巐弡弴彧德忞恝悅悊惞惕愠惲愑愷愰憘戓抦揵摠撝擎敎昀昕昻昉昮昞昤晥晗晙晴晳暙暠暲暿曺朎朗杦枻桒柀栁桄棏﨓楨﨔榘槢樰橫橆橳橾櫢櫤毖氿汜沆汯泚洄涇浯涖涬淏淸淲淼渹湜渧渼溿澈澵濵瀅瀇瀨炅炫焏焄煜煆煇凞燁燾犱"
            	],
            	[
            		"ee40",
            		"犾猤猪獷玽珉珖珣珒琇珵琦琪琩琮瑢璉璟甁畯皂皜皞皛皦益睆劯砡硎硤硺礰礼神祥禔福禛竑竧靖竫箞精絈絜綷綠緖繒罇羡羽茁荢荿菇菶葈蒴蕓蕙"
            	],
            	[
            		"ee80",
            		"蕫﨟薰蘒﨡蠇裵訒訷詹誧誾諟諸諶譓譿賰賴贒赶﨣軏﨤逸遧郞都鄕鄧釚釗釞釭釮釤釥鈆鈐鈊鈺鉀鈼鉎鉙鉑鈹鉧銧鉷鉸鋧鋗鋙鋐﨧鋕鋠鋓錥錡鋻﨨錞鋿錝錂鍰鍗鎤鏆鏞鏸鐱鑅鑈閒隆﨩隝隯霳霻靃靍靏靑靕顗顥飯飼餧館馞驎髙髜魵魲鮏鮱鮻鰀鵰鵫鶴鸙黑"
            	],
            	[
            		"eeef",
            		"ⅰ",
            		9,
            		"￢￤＇＂"
            	],
            	[
            		"f040",
            		"",
            		62
            	],
            	[
            		"f080",
            		"",
            		124
            	],
            	[
            		"f140",
            		"",
            		62
            	],
            	[
            		"f180",
            		"",
            		124
            	],
            	[
            		"f240",
            		"",
            		62
            	],
            	[
            		"f280",
            		"",
            		124
            	],
            	[
            		"f340",
            		"",
            		62
            	],
            	[
            		"f380",
            		"",
            		124
            	],
            	[
            		"f440",
            		"",
            		62
            	],
            	[
            		"f480",
            		"",
            		124
            	],
            	[
            		"f540",
            		"",
            		62
            	],
            	[
            		"f580",
            		"",
            		124
            	],
            	[
            		"f640",
            		"",
            		62
            	],
            	[
            		"f680",
            		"",
            		124
            	],
            	[
            		"f740",
            		"",
            		62
            	],
            	[
            		"f780",
            		"",
            		124
            	],
            	[
            		"f840",
            		"",
            		62
            	],
            	[
            		"f880",
            		"",
            		124
            	],
            	[
            		"f940",
            		""
            	],
            	[
            		"fa40",
            		"ⅰ",
            		9,
            		"Ⅰ",
            		9,
            		"￢￤＇＂㈱№℡∵纊褜鍈銈蓜俉炻昱棈鋹曻彅丨仡仼伀伃伹佖侒侊侚侔俍偀倢俿倞偆偰偂傔僴僘兊"
            	],
            	[
            		"fa80",
            		"兤冝冾凬刕劜劦勀勛匀匇匤卲厓厲叝﨎咜咊咩哿喆坙坥垬埈埇﨏塚增墲夋奓奛奝奣妤妺孖寀甯寘寬尞岦岺峵崧嵓﨑嵂嵭嶸嶹巐弡弴彧德忞恝悅悊惞惕愠惲愑愷愰憘戓抦揵摠撝擎敎昀昕昻昉昮昞昤晥晗晙晴晳暙暠暲暿曺朎朗杦枻桒柀栁桄棏﨓楨﨔榘槢樰橫橆橳橾櫢櫤毖氿汜沆汯泚洄涇浯"
            	],
            	[
            		"fb40",
            		"涖涬淏淸淲淼渹湜渧渼溿澈澵濵瀅瀇瀨炅炫焏焄煜煆煇凞燁燾犱犾猤猪獷玽珉珖珣珒琇珵琦琪琩琮瑢璉璟甁畯皂皜皞皛皦益睆劯砡硎硤硺礰礼神"
            	],
            	[
            		"fb80",
            		"祥禔福禛竑竧靖竫箞精絈絜綷綠緖繒罇羡羽茁荢荿菇菶葈蒴蕓蕙蕫﨟薰蘒﨡蠇裵訒訷詹誧誾諟諸諶譓譿賰賴贒赶﨣軏﨤逸遧郞都鄕鄧釚釗釞釭釮釤釥鈆鈐鈊鈺鉀鈼鉎鉙鉑鈹鉧銧鉷鉸鋧鋗鋙鋐﨧鋕鋠鋓錥錡鋻﨨錞鋿錝錂鍰鍗鎤鏆鏞鏸鐱鑅鑈閒隆﨩隝隯霳霻靃靍靏靑靕顗顥飯飼餧館馞驎髙"
            	],
            	[
            		"fc40",
            		"髜魵魲鮏鮱鮻鰀鵰鵫鶴鸙黑"
            	]
            ];

            var require$$1 = [
            	[
            		"0",
            		"\u0000",
            		127
            	],
            	[
            		"8ea1",
            		"｡",
            		62
            	],
            	[
            		"a1a1",
            		"　、。，．・：；？！゛゜´｀¨＾￣＿ヽヾゝゞ〃仝々〆〇ー―‐／＼～∥｜…‥‘’“”（）〔〕［］｛｝〈",
            		9,
            		"＋－±×÷＝≠＜＞≦≧∞∴♂♀°′″℃￥＄￠￡％＃＆＊＠§☆★○●◎◇"
            	],
            	[
            		"a2a1",
            		"◆□■△▲▽▼※〒→←↑↓〓"
            	],
            	[
            		"a2ba",
            		"∈∋⊆⊇⊂⊃∪∩"
            	],
            	[
            		"a2ca",
            		"∧∨￢⇒⇔∀∃"
            	],
            	[
            		"a2dc",
            		"∠⊥⌒∂∇≡≒≪≫√∽∝∵∫∬"
            	],
            	[
            		"a2f2",
            		"Å‰♯♭♪†‡¶"
            	],
            	[
            		"a2fe",
            		"◯"
            	],
            	[
            		"a3b0",
            		"０",
            		9
            	],
            	[
            		"a3c1",
            		"Ａ",
            		25
            	],
            	[
            		"a3e1",
            		"ａ",
            		25
            	],
            	[
            		"a4a1",
            		"ぁ",
            		82
            	],
            	[
            		"a5a1",
            		"ァ",
            		85
            	],
            	[
            		"a6a1",
            		"Α",
            		16,
            		"Σ",
            		6
            	],
            	[
            		"a6c1",
            		"α",
            		16,
            		"σ",
            		6
            	],
            	[
            		"a7a1",
            		"А",
            		5,
            		"ЁЖ",
            		25
            	],
            	[
            		"a7d1",
            		"а",
            		5,
            		"ёж",
            		25
            	],
            	[
            		"a8a1",
            		"─│┌┐┘└├┬┤┴┼━┃┏┓┛┗┣┳┫┻╋┠┯┨┷┿┝┰┥┸╂"
            	],
            	[
            		"ada1",
            		"①",
            		19,
            		"Ⅰ",
            		9
            	],
            	[
            		"adc0",
            		"㍉㌔㌢㍍㌘㌧㌃㌶㍑㍗㌍㌦㌣㌫㍊㌻㎜㎝㎞㎎㎏㏄㎡"
            	],
            	[
            		"addf",
            		"㍻〝〟№㏍℡㊤",
            		4,
            		"㈱㈲㈹㍾㍽㍼≒≡∫∮∑√⊥∠∟⊿∵∩∪"
            	],
            	[
            		"b0a1",
            		"亜唖娃阿哀愛挨姶逢葵茜穐悪握渥旭葦芦鯵梓圧斡扱宛姐虻飴絢綾鮎或粟袷安庵按暗案闇鞍杏以伊位依偉囲夷委威尉惟意慰易椅為畏異移維緯胃萎衣謂違遺医井亥域育郁磯一壱溢逸稲茨芋鰯允印咽員因姻引飲淫胤蔭"
            	],
            	[
            		"b1a1",
            		"院陰隠韻吋右宇烏羽迂雨卯鵜窺丑碓臼渦嘘唄欝蔚鰻姥厩浦瓜閏噂云運雲荏餌叡営嬰影映曳栄永泳洩瑛盈穎頴英衛詠鋭液疫益駅悦謁越閲榎厭円園堰奄宴延怨掩援沿演炎焔煙燕猿縁艶苑薗遠鉛鴛塩於汚甥凹央奥往応"
            	],
            	[
            		"b2a1",
            		"押旺横欧殴王翁襖鴬鴎黄岡沖荻億屋憶臆桶牡乙俺卸恩温穏音下化仮何伽価佳加可嘉夏嫁家寡科暇果架歌河火珂禍禾稼箇花苛茄荷華菓蝦課嘩貨迦過霞蚊俄峨我牙画臥芽蛾賀雅餓駕介会解回塊壊廻快怪悔恢懐戒拐改"
            	],
            	[
            		"b3a1",
            		"魁晦械海灰界皆絵芥蟹開階貝凱劾外咳害崖慨概涯碍蓋街該鎧骸浬馨蛙垣柿蛎鈎劃嚇各廓拡撹格核殻獲確穫覚角赫較郭閣隔革学岳楽額顎掛笠樫橿梶鰍潟割喝恰括活渇滑葛褐轄且鰹叶椛樺鞄株兜竃蒲釜鎌噛鴨栢茅萱"
            	],
            	[
            		"b4a1",
            		"粥刈苅瓦乾侃冠寒刊勘勧巻喚堪姦完官寛干幹患感慣憾換敢柑桓棺款歓汗漢澗潅環甘監看竿管簡緩缶翰肝艦莞観諌貫還鑑間閑関陥韓館舘丸含岸巌玩癌眼岩翫贋雁頑顔願企伎危喜器基奇嬉寄岐希幾忌揮机旗既期棋棄"
            	],
            	[
            		"b5a1",
            		"機帰毅気汽畿祈季稀紀徽規記貴起軌輝飢騎鬼亀偽儀妓宜戯技擬欺犠疑祇義蟻誼議掬菊鞠吉吃喫桔橘詰砧杵黍却客脚虐逆丘久仇休及吸宮弓急救朽求汲泣灸球究窮笈級糾給旧牛去居巨拒拠挙渠虚許距鋸漁禦魚亨享京"
            	],
            	[
            		"b6a1",
            		"供侠僑兇競共凶協匡卿叫喬境峡強彊怯恐恭挟教橋況狂狭矯胸脅興蕎郷鏡響饗驚仰凝尭暁業局曲極玉桐粁僅勤均巾錦斤欣欽琴禁禽筋緊芹菌衿襟謹近金吟銀九倶句区狗玖矩苦躯駆駈駒具愚虞喰空偶寓遇隅串櫛釧屑屈"
            	],
            	[
            		"b7a1",
            		"掘窟沓靴轡窪熊隈粂栗繰桑鍬勲君薫訓群軍郡卦袈祁係傾刑兄啓圭珪型契形径恵慶慧憩掲携敬景桂渓畦稽系経継繋罫茎荊蛍計詣警軽頚鶏芸迎鯨劇戟撃激隙桁傑欠決潔穴結血訣月件倹倦健兼券剣喧圏堅嫌建憲懸拳捲"
            	],
            	[
            		"b8a1",
            		"検権牽犬献研硯絹県肩見謙賢軒遣鍵険顕験鹸元原厳幻弦減源玄現絃舷言諺限乎個古呼固姑孤己庫弧戸故枯湖狐糊袴股胡菰虎誇跨鈷雇顧鼓五互伍午呉吾娯後御悟梧檎瑚碁語誤護醐乞鯉交佼侯候倖光公功効勾厚口向"
            	],
            	[
            		"b9a1",
            		"后喉坑垢好孔孝宏工巧巷幸広庚康弘恒慌抗拘控攻昂晃更杭校梗構江洪浩港溝甲皇硬稿糠紅紘絞綱耕考肯肱腔膏航荒行衡講貢購郊酵鉱砿鋼閤降項香高鴻剛劫号合壕拷濠豪轟麹克刻告国穀酷鵠黒獄漉腰甑忽惚骨狛込"
            	],
            	[
            		"baa1",
            		"此頃今困坤墾婚恨懇昏昆根梱混痕紺艮魂些佐叉唆嵯左差査沙瑳砂詐鎖裟坐座挫債催再最哉塞妻宰彩才採栽歳済災采犀砕砦祭斎細菜裁載際剤在材罪財冴坂阪堺榊肴咲崎埼碕鷺作削咋搾昨朔柵窄策索錯桜鮭笹匙冊刷"
            	],
            	[
            		"bba1",
            		"察拶撮擦札殺薩雑皐鯖捌錆鮫皿晒三傘参山惨撒散桟燦珊産算纂蚕讃賛酸餐斬暫残仕仔伺使刺司史嗣四士始姉姿子屍市師志思指支孜斯施旨枝止死氏獅祉私糸紙紫肢脂至視詞詩試誌諮資賜雌飼歯事似侍児字寺慈持時"
            	],
            	[
            		"bca1",
            		"次滋治爾璽痔磁示而耳自蒔辞汐鹿式識鴫竺軸宍雫七叱執失嫉室悉湿漆疾質実蔀篠偲柴芝屡蕊縞舎写射捨赦斜煮社紗者謝車遮蛇邪借勺尺杓灼爵酌釈錫若寂弱惹主取守手朱殊狩珠種腫趣酒首儒受呪寿授樹綬需囚収周"
            	],
            	[
            		"bda1",
            		"宗就州修愁拾洲秀秋終繍習臭舟蒐衆襲讐蹴輯週酋酬集醜什住充十従戎柔汁渋獣縦重銃叔夙宿淑祝縮粛塾熟出術述俊峻春瞬竣舜駿准循旬楯殉淳準潤盾純巡遵醇順処初所暑曙渚庶緒署書薯藷諸助叙女序徐恕鋤除傷償"
            	],
            	[
            		"bea1",
            		"勝匠升召哨商唱嘗奨妾娼宵将小少尚庄床廠彰承抄招掌捷昇昌昭晶松梢樟樵沼消渉湘焼焦照症省硝礁祥称章笑粧紹肖菖蒋蕉衝裳訟証詔詳象賞醤鉦鍾鐘障鞘上丈丞乗冗剰城場壌嬢常情擾条杖浄状畳穣蒸譲醸錠嘱埴飾"
            	],
            	[
            		"bfa1",
            		"拭植殖燭織職色触食蝕辱尻伸信侵唇娠寝審心慎振新晋森榛浸深申疹真神秦紳臣芯薪親診身辛進針震人仁刃塵壬尋甚尽腎訊迅陣靭笥諏須酢図厨逗吹垂帥推水炊睡粋翠衰遂酔錐錘随瑞髄崇嵩数枢趨雛据杉椙菅頗雀裾"
            	],
            	[
            		"c0a1",
            		"澄摺寸世瀬畝是凄制勢姓征性成政整星晴棲栖正清牲生盛精聖声製西誠誓請逝醒青静斉税脆隻席惜戚斥昔析石積籍績脊責赤跡蹟碩切拙接摂折設窃節説雪絶舌蝉仙先千占宣専尖川戦扇撰栓栴泉浅洗染潜煎煽旋穿箭線"
            	],
            	[
            		"c1a1",
            		"繊羨腺舛船薦詮賎践選遷銭銑閃鮮前善漸然全禅繕膳糎噌塑岨措曾曽楚狙疏疎礎祖租粗素組蘇訴阻遡鼠僧創双叢倉喪壮奏爽宋層匝惣想捜掃挿掻操早曹巣槍槽漕燥争痩相窓糟総綜聡草荘葬蒼藻装走送遭鎗霜騒像増憎"
            	],
            	[
            		"c2a1",
            		"臓蔵贈造促側則即息捉束測足速俗属賊族続卒袖其揃存孫尊損村遜他多太汰詑唾堕妥惰打柁舵楕陀駄騨体堆対耐岱帯待怠態戴替泰滞胎腿苔袋貸退逮隊黛鯛代台大第醍題鷹滝瀧卓啄宅托択拓沢濯琢託鐸濁諾茸凧蛸只"
            	],
            	[
            		"c3a1",
            		"叩但達辰奪脱巽竪辿棚谷狸鱈樽誰丹単嘆坦担探旦歎淡湛炭短端箪綻耽胆蛋誕鍛団壇弾断暖檀段男談値知地弛恥智池痴稚置致蜘遅馳築畜竹筑蓄逐秩窒茶嫡着中仲宙忠抽昼柱注虫衷註酎鋳駐樗瀦猪苧著貯丁兆凋喋寵"
            	],
            	[
            		"c4a1",
            		"帖帳庁弔張彫徴懲挑暢朝潮牒町眺聴脹腸蝶調諜超跳銚長頂鳥勅捗直朕沈珍賃鎮陳津墜椎槌追鎚痛通塚栂掴槻佃漬柘辻蔦綴鍔椿潰坪壷嬬紬爪吊釣鶴亭低停偵剃貞呈堤定帝底庭廷弟悌抵挺提梯汀碇禎程締艇訂諦蹄逓"
            	],
            	[
            		"c5a1",
            		"邸鄭釘鼎泥摘擢敵滴的笛適鏑溺哲徹撤轍迭鉄典填天展店添纏甜貼転顛点伝殿澱田電兎吐堵塗妬屠徒斗杜渡登菟賭途都鍍砥砺努度土奴怒倒党冬凍刀唐塔塘套宕島嶋悼投搭東桃梼棟盗淘湯涛灯燈当痘祷等答筒糖統到"
            	],
            	[
            		"c6a1",
            		"董蕩藤討謄豆踏逃透鐙陶頭騰闘働動同堂導憧撞洞瞳童胴萄道銅峠鴇匿得徳涜特督禿篤毒独読栃橡凸突椴届鳶苫寅酉瀞噸屯惇敦沌豚遁頓呑曇鈍奈那内乍凪薙謎灘捺鍋楢馴縄畷南楠軟難汝二尼弐迩匂賑肉虹廿日乳入"
            	],
            	[
            		"c7a1",
            		"如尿韮任妊忍認濡禰祢寧葱猫熱年念捻撚燃粘乃廼之埜嚢悩濃納能脳膿農覗蚤巴把播覇杷波派琶破婆罵芭馬俳廃拝排敗杯盃牌背肺輩配倍培媒梅楳煤狽買売賠陪這蝿秤矧萩伯剥博拍柏泊白箔粕舶薄迫曝漠爆縛莫駁麦"
            	],
            	[
            		"c8a1",
            		"函箱硲箸肇筈櫨幡肌畑畠八鉢溌発醗髪伐罰抜筏閥鳩噺塙蛤隼伴判半反叛帆搬斑板氾汎版犯班畔繁般藩販範釆煩頒飯挽晩番盤磐蕃蛮匪卑否妃庇彼悲扉批披斐比泌疲皮碑秘緋罷肥被誹費避非飛樋簸備尾微枇毘琵眉美"
            	],
            	[
            		"c9a1",
            		"鼻柊稗匹疋髭彦膝菱肘弼必畢筆逼桧姫媛紐百謬俵彪標氷漂瓢票表評豹廟描病秒苗錨鋲蒜蛭鰭品彬斌浜瀕貧賓頻敏瓶不付埠夫婦富冨布府怖扶敷斧普浮父符腐膚芙譜負賦赴阜附侮撫武舞葡蕪部封楓風葺蕗伏副復幅服"
            	],
            	[
            		"caa1",
            		"福腹複覆淵弗払沸仏物鮒分吻噴墳憤扮焚奮粉糞紛雰文聞丙併兵塀幣平弊柄並蔽閉陛米頁僻壁癖碧別瞥蔑箆偏変片篇編辺返遍便勉娩弁鞭保舗鋪圃捕歩甫補輔穂募墓慕戊暮母簿菩倣俸包呆報奉宝峰峯崩庖抱捧放方朋"
            	],
            	[
            		"cba1",
            		"法泡烹砲縫胞芳萌蓬蜂褒訪豊邦鋒飽鳳鵬乏亡傍剖坊妨帽忘忙房暴望某棒冒紡肪膨謀貌貿鉾防吠頬北僕卜墨撲朴牧睦穆釦勃没殆堀幌奔本翻凡盆摩磨魔麻埋妹昧枚毎哩槙幕膜枕鮪柾鱒桝亦俣又抹末沫迄侭繭麿万慢満"
            	],
            	[
            		"cca1",
            		"漫蔓味未魅巳箕岬密蜜湊蓑稔脈妙粍民眠務夢無牟矛霧鵡椋婿娘冥名命明盟迷銘鳴姪牝滅免棉綿緬面麺摸模茂妄孟毛猛盲網耗蒙儲木黙目杢勿餅尤戻籾貰問悶紋門匁也冶夜爺耶野弥矢厄役約薬訳躍靖柳薮鑓愉愈油癒"
            	],
            	[
            		"cda1",
            		"諭輸唯佑優勇友宥幽悠憂揖有柚湧涌猶猷由祐裕誘遊邑郵雄融夕予余与誉輿預傭幼妖容庸揚揺擁曜楊様洋溶熔用窯羊耀葉蓉要謡踊遥陽養慾抑欲沃浴翌翼淀羅螺裸来莱頼雷洛絡落酪乱卵嵐欄濫藍蘭覧利吏履李梨理璃"
            	],
            	[
            		"cea1",
            		"痢裏裡里離陸律率立葎掠略劉流溜琉留硫粒隆竜龍侶慮旅虜了亮僚両凌寮料梁涼猟療瞭稜糧良諒遼量陵領力緑倫厘林淋燐琳臨輪隣鱗麟瑠塁涙累類令伶例冷励嶺怜玲礼苓鈴隷零霊麗齢暦歴列劣烈裂廉恋憐漣煉簾練聯"
            	],
            	[
            		"cfa1",
            		"蓮連錬呂魯櫓炉賂路露労婁廊弄朗楼榔浪漏牢狼篭老聾蝋郎六麓禄肋録論倭和話歪賄脇惑枠鷲亙亘鰐詫藁蕨椀湾碗腕"
            	],
            	[
            		"d0a1",
            		"弌丐丕个丱丶丼丿乂乖乘亂亅豫亊舒弍于亞亟亠亢亰亳亶从仍仄仆仂仗仞仭仟价伉佚估佛佝佗佇佶侈侏侘佻佩佰侑佯來侖儘俔俟俎俘俛俑俚俐俤俥倚倨倔倪倥倅伜俶倡倩倬俾俯們倆偃假會偕偐偈做偖偬偸傀傚傅傴傲"
            	],
            	[
            		"d1a1",
            		"僉僊傳僂僖僞僥僭僣僮價僵儉儁儂儖儕儔儚儡儺儷儼儻儿兀兒兌兔兢竸兩兪兮冀冂囘册冉冏冑冓冕冖冤冦冢冩冪冫决冱冲冰况冽凅凉凛几處凩凭凰凵凾刄刋刔刎刧刪刮刳刹剏剄剋剌剞剔剪剴剩剳剿剽劍劔劒剱劈劑辨"
            	],
            	[
            		"d2a1",
            		"辧劬劭劼劵勁勍勗勞勣勦飭勠勳勵勸勹匆匈甸匍匐匏匕匚匣匯匱匳匸區卆卅丗卉卍凖卞卩卮夘卻卷厂厖厠厦厥厮厰厶參簒雙叟曼燮叮叨叭叺吁吽呀听吭吼吮吶吩吝呎咏呵咎呟呱呷呰咒呻咀呶咄咐咆哇咢咸咥咬哄哈咨"
            	],
            	[
            		"d3a1",
            		"咫哂咤咾咼哘哥哦唏唔哽哮哭哺哢唹啀啣啌售啜啅啖啗唸唳啝喙喀咯喊喟啻啾喘喞單啼喃喩喇喨嗚嗅嗟嗄嗜嗤嗔嘔嗷嘖嗾嗽嘛嗹噎噐營嘴嘶嘲嘸噫噤嘯噬噪嚆嚀嚊嚠嚔嚏嚥嚮嚶嚴囂嚼囁囃囀囈囎囑囓囗囮囹圀囿圄圉"
            	],
            	[
            		"d4a1",
            		"圈國圍圓團圖嗇圜圦圷圸坎圻址坏坩埀垈坡坿垉垓垠垳垤垪垰埃埆埔埒埓堊埖埣堋堙堝塲堡塢塋塰毀塒堽塹墅墹墟墫墺壞墻墸墮壅壓壑壗壙壘壥壜壤壟壯壺壹壻壼壽夂夊夐夛梦夥夬夭夲夸夾竒奕奐奎奚奘奢奠奧奬奩"
            	],
            	[
            		"d5a1",
            		"奸妁妝佞侫妣妲姆姨姜妍姙姚娥娟娑娜娉娚婀婬婉娵娶婢婪媚媼媾嫋嫂媽嫣嫗嫦嫩嫖嫺嫻嬌嬋嬖嬲嫐嬪嬶嬾孃孅孀孑孕孚孛孥孩孰孳孵學斈孺宀它宦宸寃寇寉寔寐寤實寢寞寥寫寰寶寳尅將專對尓尠尢尨尸尹屁屆屎屓"
            	],
            	[
            		"d6a1",
            		"屐屏孱屬屮乢屶屹岌岑岔妛岫岻岶岼岷峅岾峇峙峩峽峺峭嶌峪崋崕崗嵜崟崛崑崔崢崚崙崘嵌嵒嵎嵋嵬嵳嵶嶇嶄嶂嶢嶝嶬嶮嶽嶐嶷嶼巉巍巓巒巖巛巫已巵帋帚帙帑帛帶帷幄幃幀幎幗幔幟幢幤幇幵并幺麼广庠廁廂廈廐廏"
            	],
            	[
            		"d7a1",
            		"廖廣廝廚廛廢廡廨廩廬廱廳廰廴廸廾弃弉彝彜弋弑弖弩弭弸彁彈彌彎弯彑彖彗彙彡彭彳彷徃徂彿徊很徑徇從徙徘徠徨徭徼忖忻忤忸忱忝悳忿怡恠怙怐怩怎怱怛怕怫怦怏怺恚恁恪恷恟恊恆恍恣恃恤恂恬恫恙悁悍惧悃悚"
            	],
            	[
            		"d8a1",
            		"悄悛悖悗悒悧悋惡悸惠惓悴忰悽惆悵惘慍愕愆惶惷愀惴惺愃愡惻惱愍愎慇愾愨愧慊愿愼愬愴愽慂慄慳慷慘慙慚慫慴慯慥慱慟慝慓慵憙憖憇憬憔憚憊憑憫憮懌懊應懷懈懃懆憺懋罹懍懦懣懶懺懴懿懽懼懾戀戈戉戍戌戔戛"
            	],
            	[
            		"d9a1",
            		"戞戡截戮戰戲戳扁扎扞扣扛扠扨扼抂抉找抒抓抖拔抃抔拗拑抻拏拿拆擔拈拜拌拊拂拇抛拉挌拮拱挧挂挈拯拵捐挾捍搜捏掖掎掀掫捶掣掏掉掟掵捫捩掾揩揀揆揣揉插揶揄搖搴搆搓搦搶攝搗搨搏摧摯摶摎攪撕撓撥撩撈撼"
            	],
            	[
            		"daa1",
            		"據擒擅擇撻擘擂擱擧舉擠擡抬擣擯攬擶擴擲擺攀擽攘攜攅攤攣攫攴攵攷收攸畋效敖敕敍敘敞敝敲數斂斃變斛斟斫斷旃旆旁旄旌旒旛旙无旡旱杲昊昃旻杳昵昶昴昜晏晄晉晁晞晝晤晧晨晟晢晰暃暈暎暉暄暘暝曁暹曉暾暼"
            	],
            	[
            		"dba1",
            		"曄暸曖曚曠昿曦曩曰曵曷朏朖朞朦朧霸朮朿朶杁朸朷杆杞杠杙杣杤枉杰枩杼杪枌枋枦枡枅枷柯枴柬枳柩枸柤柞柝柢柮枹柎柆柧檜栞框栩桀桍栲桎梳栫桙档桷桿梟梏梭梔條梛梃檮梹桴梵梠梺椏梍桾椁棊椈棘椢椦棡椌棍"
            	],
            	[
            		"dca1",
            		"棔棧棕椶椒椄棗棣椥棹棠棯椨椪椚椣椡棆楹楷楜楸楫楔楾楮椹楴椽楙椰楡楞楝榁楪榲榮槐榿槁槓榾槎寨槊槝榻槃榧樮榑榠榜榕榴槞槨樂樛槿權槹槲槧樅榱樞槭樔槫樊樒櫁樣樓橄樌橲樶橸橇橢橙橦橈樸樢檐檍檠檄檢檣"
            	],
            	[
            		"dda1",
            		"檗蘗檻櫃櫂檸檳檬櫞櫑櫟檪櫚櫪櫻欅蘖櫺欒欖鬱欟欸欷盜欹飮歇歃歉歐歙歔歛歟歡歸歹歿殀殄殃殍殘殕殞殤殪殫殯殲殱殳殷殼毆毋毓毟毬毫毳毯麾氈氓气氛氤氣汞汕汢汪沂沍沚沁沛汾汨汳沒沐泄泱泓沽泗泅泝沮沱沾"
            	],
            	[
            		"dea1",
            		"沺泛泯泙泪洟衍洶洫洽洸洙洵洳洒洌浣涓浤浚浹浙涎涕濤涅淹渕渊涵淇淦涸淆淬淞淌淨淒淅淺淙淤淕淪淮渭湮渮渙湲湟渾渣湫渫湶湍渟湃渺湎渤滿渝游溂溪溘滉溷滓溽溯滄溲滔滕溏溥滂溟潁漑灌滬滸滾漿滲漱滯漲滌"
            	],
            	[
            		"dfa1",
            		"漾漓滷澆潺潸澁澀潯潛濳潭澂潼潘澎澑濂潦澳澣澡澤澹濆澪濟濕濬濔濘濱濮濛瀉瀋濺瀑瀁瀏濾瀛瀚潴瀝瀘瀟瀰瀾瀲灑灣炙炒炯烱炬炸炳炮烟烋烝烙焉烽焜焙煥煕熈煦煢煌煖煬熏燻熄熕熨熬燗熹熾燒燉燔燎燠燬燧燵燼"
            	],
            	[
            		"e0a1",
            		"燹燿爍爐爛爨爭爬爰爲爻爼爿牀牆牋牘牴牾犂犁犇犒犖犢犧犹犲狃狆狄狎狒狢狠狡狹狷倏猗猊猜猖猝猴猯猩猥猾獎獏默獗獪獨獰獸獵獻獺珈玳珎玻珀珥珮珞璢琅瑯琥珸琲琺瑕琿瑟瑙瑁瑜瑩瑰瑣瑪瑶瑾璋璞璧瓊瓏瓔珱"
            	],
            	[
            		"e1a1",
            		"瓠瓣瓧瓩瓮瓲瓰瓱瓸瓷甄甃甅甌甎甍甕甓甞甦甬甼畄畍畊畉畛畆畚畩畤畧畫畭畸當疆疇畴疊疉疂疔疚疝疥疣痂疳痃疵疽疸疼疱痍痊痒痙痣痞痾痿痼瘁痰痺痲痳瘋瘍瘉瘟瘧瘠瘡瘢瘤瘴瘰瘻癇癈癆癜癘癡癢癨癩癪癧癬癰"
            	],
            	[
            		"e2a1",
            		"癲癶癸發皀皃皈皋皎皖皓皙皚皰皴皸皹皺盂盍盖盒盞盡盥盧盪蘯盻眈眇眄眩眤眞眥眦眛眷眸睇睚睨睫睛睥睿睾睹瞎瞋瞑瞠瞞瞰瞶瞹瞿瞼瞽瞻矇矍矗矚矜矣矮矼砌砒礦砠礪硅碎硴碆硼碚碌碣碵碪碯磑磆磋磔碾碼磅磊磬"
            	],
            	[
            		"e3a1",
            		"磧磚磽磴礇礒礑礙礬礫祀祠祗祟祚祕祓祺祿禊禝禧齋禪禮禳禹禺秉秕秧秬秡秣稈稍稘稙稠稟禀稱稻稾稷穃穗穉穡穢穩龝穰穹穽窈窗窕窘窖窩竈窰窶竅竄窿邃竇竊竍竏竕竓站竚竝竡竢竦竭竰笂笏笊笆笳笘笙笞笵笨笶筐"
            	],
            	[
            		"e4a1",
            		"筺笄筍笋筌筅筵筥筴筧筰筱筬筮箝箘箟箍箜箚箋箒箏筝箙篋篁篌篏箴篆篝篩簑簔篦篥籠簀簇簓篳篷簗簍篶簣簧簪簟簷簫簽籌籃籔籏籀籐籘籟籤籖籥籬籵粃粐粤粭粢粫粡粨粳粲粱粮粹粽糀糅糂糘糒糜糢鬻糯糲糴糶糺紆"
            	],
            	[
            		"e5a1",
            		"紂紜紕紊絅絋紮紲紿紵絆絳絖絎絲絨絮絏絣經綉絛綏絽綛綺綮綣綵緇綽綫總綢綯緜綸綟綰緘緝緤緞緻緲緡縅縊縣縡縒縱縟縉縋縢繆繦縻縵縹繃縷縲縺繧繝繖繞繙繚繹繪繩繼繻纃緕繽辮繿纈纉續纒纐纓纔纖纎纛纜缸缺"
            	],
            	[
            		"e6a1",
            		"罅罌罍罎罐网罕罔罘罟罠罨罩罧罸羂羆羃羈羇羌羔羞羝羚羣羯羲羹羮羶羸譱翅翆翊翕翔翡翦翩翳翹飜耆耄耋耒耘耙耜耡耨耿耻聊聆聒聘聚聟聢聨聳聲聰聶聹聽聿肄肆肅肛肓肚肭冐肬胛胥胙胝胄胚胖脉胯胱脛脩脣脯腋"
            	],
            	[
            		"e7a1",
            		"隋腆脾腓腑胼腱腮腥腦腴膃膈膊膀膂膠膕膤膣腟膓膩膰膵膾膸膽臀臂膺臉臍臑臙臘臈臚臟臠臧臺臻臾舁舂舅與舊舍舐舖舩舫舸舳艀艙艘艝艚艟艤艢艨艪艫舮艱艷艸艾芍芒芫芟芻芬苡苣苟苒苴苳苺莓范苻苹苞茆苜茉苙"
            	],
            	[
            		"e8a1",
            		"茵茴茖茲茱荀茹荐荅茯茫茗茘莅莚莪莟莢莖茣莎莇莊荼莵荳荵莠莉莨菴萓菫菎菽萃菘萋菁菷萇菠菲萍萢萠莽萸蔆菻葭萪萼蕚蒄葷葫蒭葮蒂葩葆萬葯葹萵蓊葢蒹蒿蒟蓙蓍蒻蓚蓐蓁蓆蓖蒡蔡蓿蓴蔗蔘蔬蔟蔕蔔蓼蕀蕣蕘蕈"
            	],
            	[
            		"e9a1",
            		"蕁蘂蕋蕕薀薤薈薑薊薨蕭薔薛藪薇薜蕷蕾薐藉薺藏薹藐藕藝藥藜藹蘊蘓蘋藾藺蘆蘢蘚蘰蘿虍乕虔號虧虱蚓蚣蚩蚪蚋蚌蚶蚯蛄蛆蚰蛉蠣蚫蛔蛞蛩蛬蛟蛛蛯蜒蜆蜈蜀蜃蛻蜑蜉蜍蛹蜊蜴蜿蜷蜻蜥蜩蜚蝠蝟蝸蝌蝎蝴蝗蝨蝮蝙"
            	],
            	[
            		"eaa1",
            		"蝓蝣蝪蠅螢螟螂螯蟋螽蟀蟐雖螫蟄螳蟇蟆螻蟯蟲蟠蠏蠍蟾蟶蟷蠎蟒蠑蠖蠕蠢蠡蠱蠶蠹蠧蠻衄衂衒衙衞衢衫袁衾袞衵衽袵衲袂袗袒袮袙袢袍袤袰袿袱裃裄裔裘裙裝裹褂裼裴裨裲褄褌褊褓襃褞褥褪褫襁襄褻褶褸襌褝襠襞"
            	],
            	[
            		"eba1",
            		"襦襤襭襪襯襴襷襾覃覈覊覓覘覡覩覦覬覯覲覺覽覿觀觚觜觝觧觴觸訃訖訐訌訛訝訥訶詁詛詒詆詈詼詭詬詢誅誂誄誨誡誑誥誦誚誣諄諍諂諚諫諳諧諤諱謔諠諢諷諞諛謌謇謚諡謖謐謗謠謳鞫謦謫謾謨譁譌譏譎證譖譛譚譫"
            	],
            	[
            		"eca1",
            		"譟譬譯譴譽讀讌讎讒讓讖讙讚谺豁谿豈豌豎豐豕豢豬豸豺貂貉貅貊貍貎貔豼貘戝貭貪貽貲貳貮貶賈賁賤賣賚賽賺賻贄贅贊贇贏贍贐齎贓賍贔贖赧赭赱赳趁趙跂趾趺跏跚跖跌跛跋跪跫跟跣跼踈踉跿踝踞踐踟蹂踵踰踴蹊"
            	],
            	[
            		"eda1",
            		"蹇蹉蹌蹐蹈蹙蹤蹠踪蹣蹕蹶蹲蹼躁躇躅躄躋躊躓躑躔躙躪躡躬躰軆躱躾軅軈軋軛軣軼軻軫軾輊輅輕輒輙輓輜輟輛輌輦輳輻輹轅轂輾轌轉轆轎轗轜轢轣轤辜辟辣辭辯辷迚迥迢迪迯邇迴逅迹迺逑逕逡逍逞逖逋逧逶逵逹迸"
            	],
            	[
            		"eea1",
            		"遏遐遑遒逎遉逾遖遘遞遨遯遶隨遲邂遽邁邀邊邉邏邨邯邱邵郢郤扈郛鄂鄒鄙鄲鄰酊酖酘酣酥酩酳酲醋醉醂醢醫醯醪醵醴醺釀釁釉釋釐釖釟釡釛釼釵釶鈞釿鈔鈬鈕鈑鉞鉗鉅鉉鉤鉈銕鈿鉋鉐銜銖銓銛鉚鋏銹銷鋩錏鋺鍄錮"
            	],
            	[
            		"efa1",
            		"錙錢錚錣錺錵錻鍜鍠鍼鍮鍖鎰鎬鎭鎔鎹鏖鏗鏨鏥鏘鏃鏝鏐鏈鏤鐚鐔鐓鐃鐇鐐鐶鐫鐵鐡鐺鑁鑒鑄鑛鑠鑢鑞鑪鈩鑰鑵鑷鑽鑚鑼鑾钁鑿閂閇閊閔閖閘閙閠閨閧閭閼閻閹閾闊濶闃闍闌闕闔闖關闡闥闢阡阨阮阯陂陌陏陋陷陜陞"
            	],
            	[
            		"f0a1",
            		"陝陟陦陲陬隍隘隕隗險隧隱隲隰隴隶隸隹雎雋雉雍襍雜霍雕雹霄霆霈霓霎霑霏霖霙霤霪霰霹霽霾靄靆靈靂靉靜靠靤靦靨勒靫靱靹鞅靼鞁靺鞆鞋鞏鞐鞜鞨鞦鞣鞳鞴韃韆韈韋韜韭齏韲竟韶韵頏頌頸頤頡頷頽顆顏顋顫顯顰"
            	],
            	[
            		"f1a1",
            		"顱顴顳颪颯颱颶飄飃飆飩飫餃餉餒餔餘餡餝餞餤餠餬餮餽餾饂饉饅饐饋饑饒饌饕馗馘馥馭馮馼駟駛駝駘駑駭駮駱駲駻駸騁騏騅駢騙騫騷驅驂驀驃騾驕驍驛驗驟驢驥驤驩驫驪骭骰骼髀髏髑髓體髞髟髢髣髦髯髫髮髴髱髷"
            	],
            	[
            		"f2a1",
            		"髻鬆鬘鬚鬟鬢鬣鬥鬧鬨鬩鬪鬮鬯鬲魄魃魏魍魎魑魘魴鮓鮃鮑鮖鮗鮟鮠鮨鮴鯀鯊鮹鯆鯏鯑鯒鯣鯢鯤鯔鯡鰺鯲鯱鯰鰕鰔鰉鰓鰌鰆鰈鰒鰊鰄鰮鰛鰥鰤鰡鰰鱇鰲鱆鰾鱚鱠鱧鱶鱸鳧鳬鳰鴉鴈鳫鴃鴆鴪鴦鶯鴣鴟鵄鴕鴒鵁鴿鴾鵆鵈"
            	],
            	[
            		"f3a1",
            		"鵝鵞鵤鵑鵐鵙鵲鶉鶇鶫鵯鵺鶚鶤鶩鶲鷄鷁鶻鶸鶺鷆鷏鷂鷙鷓鷸鷦鷭鷯鷽鸚鸛鸞鹵鹹鹽麁麈麋麌麒麕麑麝麥麩麸麪麭靡黌黎黏黐黔黜點黝黠黥黨黯黴黶黷黹黻黼黽鼇鼈皷鼕鼡鼬鼾齊齒齔齣齟齠齡齦齧齬齪齷齲齶龕龜龠"
            	],
            	[
            		"f4a1",
            		"堯槇遙瑤凜熙"
            	],
            	[
            		"f9a1",
            		"纊褜鍈銈蓜俉炻昱棈鋹曻彅丨仡仼伀伃伹佖侒侊侚侔俍偀倢俿倞偆偰偂傔僴僘兊兤冝冾凬刕劜劦勀勛匀匇匤卲厓厲叝﨎咜咊咩哿喆坙坥垬埈埇﨏塚增墲夋奓奛奝奣妤妺孖寀甯寘寬尞岦岺峵崧嵓﨑嵂嵭嶸嶹巐弡弴彧德"
            	],
            	[
            		"faa1",
            		"忞恝悅悊惞惕愠惲愑愷愰憘戓抦揵摠撝擎敎昀昕昻昉昮昞昤晥晗晙晴晳暙暠暲暿曺朎朗杦枻桒柀栁桄棏﨓楨﨔榘槢樰橫橆橳橾櫢櫤毖氿汜沆汯泚洄涇浯涖涬淏淸淲淼渹湜渧渼溿澈澵濵瀅瀇瀨炅炫焏焄煜煆煇凞燁燾犱"
            	],
            	[
            		"fba1",
            		"犾猤猪獷玽珉珖珣珒琇珵琦琪琩琮瑢璉璟甁畯皂皜皞皛皦益睆劯砡硎硤硺礰礼神祥禔福禛竑竧靖竫箞精絈絜綷綠緖繒罇羡羽茁荢荿菇菶葈蒴蕓蕙蕫﨟薰蘒﨡蠇裵訒訷詹誧誾諟諸諶譓譿賰賴贒赶﨣軏﨤逸遧郞都鄕鄧釚"
            	],
            	[
            		"fca1",
            		"釗釞釭釮釤釥鈆鈐鈊鈺鉀鈼鉎鉙鉑鈹鉧銧鉷鉸鋧鋗鋙鋐﨧鋕鋠鋓錥錡鋻﨨錞鋿錝錂鍰鍗鎤鏆鏞鏸鐱鑅鑈閒隆﨩隝隯霳霻靃靍靏靑靕顗顥飯飼餧館馞驎髙髜魵魲鮏鮱鮻鰀鵰鵫鶴鸙黑"
            	],
            	[
            		"fcf1",
            		"ⅰ",
            		9,
            		"￢￤＇＂"
            	],
            	[
            		"8fa2af",
            		"˘ˇ¸˙˝¯˛˚～΄΅"
            	],
            	[
            		"8fa2c2",
            		"¡¦¿"
            	],
            	[
            		"8fa2eb",
            		"ºª©®™¤№"
            	],
            	[
            		"8fa6e1",
            		"ΆΈΉΊΪ"
            	],
            	[
            		"8fa6e7",
            		"Ό"
            	],
            	[
            		"8fa6e9",
            		"ΎΫ"
            	],
            	[
            		"8fa6ec",
            		"Ώ"
            	],
            	[
            		"8fa6f1",
            		"άέήίϊΐόςύϋΰώ"
            	],
            	[
            		"8fa7c2",
            		"Ђ",
            		10,
            		"ЎЏ"
            	],
            	[
            		"8fa7f2",
            		"ђ",
            		10,
            		"ўџ"
            	],
            	[
            		"8fa9a1",
            		"ÆĐ"
            	],
            	[
            		"8fa9a4",
            		"Ħ"
            	],
            	[
            		"8fa9a6",
            		"Ĳ"
            	],
            	[
            		"8fa9a8",
            		"ŁĿ"
            	],
            	[
            		"8fa9ab",
            		"ŊØŒ"
            	],
            	[
            		"8fa9af",
            		"ŦÞ"
            	],
            	[
            		"8fa9c1",
            		"æđðħıĳĸłŀŉŋøœßŧþ"
            	],
            	[
            		"8faaa1",
            		"ÁÀÄÂĂǍĀĄÅÃĆĈČÇĊĎÉÈËÊĚĖĒĘ"
            	],
            	[
            		"8faaba",
            		"ĜĞĢĠĤÍÌÏÎǏİĪĮĨĴĶĹĽĻŃŇŅÑÓÒÖÔǑŐŌÕŔŘŖŚŜŠŞŤŢÚÙÜÛŬǓŰŪŲŮŨǗǛǙǕŴÝŸŶŹŽŻ"
            	],
            	[
            		"8faba1",
            		"áàäâăǎāąåãćĉčçċďéèëêěėēęǵĝğ"
            	],
            	[
            		"8fabbd",
            		"ġĥíìïîǐ"
            	],
            	[
            		"8fabc5",
            		"īįĩĵķĺľļńňņñóòöôǒőōõŕřŗśŝšşťţúùüûŭǔűūųůũǘǜǚǖŵýÿŷźžż"
            	],
            	[
            		"8fb0a1",
            		"丂丄丅丌丒丟丣两丨丫丮丯丰丵乀乁乄乇乑乚乜乣乨乩乴乵乹乿亍亖亗亝亯亹仃仐仚仛仠仡仢仨仯仱仳仵份仾仿伀伂伃伈伋伌伒伕伖众伙伮伱你伳伵伷伹伻伾佀佂佈佉佋佌佒佔佖佘佟佣佪佬佮佱佷佸佹佺佽佾侁侂侄"
            	],
            	[
            		"8fb1a1",
            		"侅侉侊侌侎侐侒侓侔侗侙侚侞侟侲侷侹侻侼侽侾俀俁俅俆俈俉俋俌俍俏俒俜俠俢俰俲俼俽俿倀倁倄倇倊倌倎倐倓倗倘倛倜倝倞倢倧倮倰倲倳倵偀偁偂偅偆偊偌偎偑偒偓偗偙偟偠偢偣偦偧偪偭偰偱倻傁傃傄傆傊傎傏傐"
            	],
            	[
            		"8fb2a1",
            		"傒傓傔傖傛傜傞",
            		4,
            		"傪傯傰傹傺傽僀僃僄僇僌僎僐僓僔僘僜僝僟僢僤僦僨僩僯僱僶僺僾儃儆儇儈儋儌儍儎僲儐儗儙儛儜儝儞儣儧儨儬儭儯儱儳儴儵儸儹兂兊兏兓兕兗兘兟兤兦兾冃冄冋冎冘冝冡冣冭冸冺冼冾冿凂"
            	],
            	[
            		"8fb3a1",
            		"凈减凑凒凓凕凘凞凢凥凮凲凳凴凷刁刂刅划刓刕刖刘刢刨刱刲刵刼剅剉剕剗剘剚剜剟剠剡剦剮剷剸剹劀劂劅劊劌劓劕劖劗劘劚劜劤劥劦劧劯劰劶劷劸劺劻劽勀勄勆勈勌勏勑勔勖勛勜勡勥勨勩勪勬勰勱勴勶勷匀匃匊匋"
            	],
            	[
            		"8fb4a1",
            		"匌匑匓匘匛匜匞匟匥匧匨匩匫匬匭匰匲匵匼匽匾卂卌卋卙卛卡卣卥卬卭卲卹卾厃厇厈厎厓厔厙厝厡厤厪厫厯厲厴厵厷厸厺厽叀叅叏叒叓叕叚叝叞叠另叧叵吂吓吚吡吧吨吪启吱吴吵呃呄呇呍呏呞呢呤呦呧呩呫呭呮呴呿"
            	],
            	[
            		"8fb5a1",
            		"咁咃咅咈咉咍咑咕咖咜咟咡咦咧咩咪咭咮咱咷咹咺咻咿哆哊响哎哠哪哬哯哶哼哾哿唀唁唅唈唉唌唍唎唕唪唫唲唵唶唻唼唽啁啇啉啊啍啐啑啘啚啛啞啠啡啤啦啿喁喂喆喈喎喏喑喒喓喔喗喣喤喭喲喿嗁嗃嗆嗉嗋嗌嗎嗑嗒"
            	],
            	[
            		"8fb6a1",
            		"嗓嗗嗘嗛嗞嗢嗩嗶嗿嘅嘈嘊嘍",
            		5,
            		"嘙嘬嘰嘳嘵嘷嘹嘻嘼嘽嘿噀噁噃噄噆噉噋噍噏噔噞噠噡噢噣噦噩噭噯噱噲噵嚄嚅嚈嚋嚌嚕嚙嚚嚝嚞嚟嚦嚧嚨嚩嚫嚬嚭嚱嚳嚷嚾囅囉囊囋囏囐囌囍囙囜囝囟囡囤",
            		4,
            		"囱囫园"
            	],
            	[
            		"8fb7a1",
            		"囶囷圁圂圇圊圌圑圕圚圛圝圠圢圣圤圥圩圪圬圮圯圳圴圽圾圿坅坆坌坍坒坢坥坧坨坫坭",
            		4,
            		"坳坴坵坷坹坺坻坼坾垁垃垌垔垗垙垚垜垝垞垟垡垕垧垨垩垬垸垽埇埈埌埏埕埝埞埤埦埧埩埭埰埵埶埸埽埾埿堃堄堈堉埡"
            	],
            	[
            		"8fb8a1",
            		"堌堍堛堞堟堠堦堧堭堲堹堿塉塌塍塏塐塕塟塡塤塧塨塸塼塿墀墁墇墈墉墊墌墍墏墐墔墖墝墠墡墢墦墩墱墲壄墼壂壈壍壎壐壒壔壖壚壝壡壢壩壳夅夆夋夌夒夓夔虁夝夡夣夤夨夯夰夳夵夶夿奃奆奒奓奙奛奝奞奟奡奣奫奭"
            	],
            	[
            		"8fb9a1",
            		"奯奲奵奶她奻奼妋妌妎妒妕妗妟妤妧妭妮妯妰妳妷妺妼姁姃姄姈姊姍姒姝姞姟姣姤姧姮姯姱姲姴姷娀娄娌娍娎娒娓娞娣娤娧娨娪娭娰婄婅婇婈婌婐婕婞婣婥婧婭婷婺婻婾媋媐媓媖媙媜媞媟媠媢媧媬媱媲媳媵媸媺媻媿"
            	],
            	[
            		"8fbaa1",
            		"嫄嫆嫈嫏嫚嫜嫠嫥嫪嫮嫵嫶嫽嬀嬁嬈嬗嬴嬙嬛嬝嬡嬥嬭嬸孁孋孌孒孖孞孨孮孯孼孽孾孿宁宄宆宊宎宐宑宓宔宖宨宩宬宭宯宱宲宷宺宼寀寁寍寏寖",
            		4,
            		"寠寯寱寴寽尌尗尞尟尣尦尩尫尬尮尰尲尵尶屙屚屜屢屣屧屨屩"
            	],
            	[
            		"8fbba1",
            		"屭屰屴屵屺屻屼屽岇岈岊岏岒岝岟岠岢岣岦岪岲岴岵岺峉峋峒峝峗峮峱峲峴崁崆崍崒崫崣崤崦崧崱崴崹崽崿嵂嵃嵆嵈嵕嵑嵙嵊嵟嵠嵡嵢嵤嵪嵭嵰嵹嵺嵾嵿嶁嶃嶈嶊嶒嶓嶔嶕嶙嶛嶟嶠嶧嶫嶰嶴嶸嶹巃巇巋巐巎巘巙巠巤"
            	],
            	[
            		"8fbca1",
            		"巩巸巹帀帇帍帒帔帕帘帟帠帮帨帲帵帾幋幐幉幑幖幘幛幜幞幨幪",
            		4,
            		"幰庀庋庎庢庤庥庨庪庬庱庳庽庾庿廆廌廋廎廑廒廔廕廜廞廥廫异弆弇弈弎弙弜弝弡弢弣弤弨弫弬弮弰弴弶弻弽弿彀彄彅彇彍彐彔彘彛彠彣彤彧"
            	],
            	[
            		"8fbda1",
            		"彯彲彴彵彸彺彽彾徉徍徏徖徜徝徢徧徫徤徬徯徰徱徸忄忇忈忉忋忐",
            		4,
            		"忞忡忢忨忩忪忬忭忮忯忲忳忶忺忼怇怊怍怓怔怗怘怚怟怤怭怳怵恀恇恈恉恌恑恔恖恗恝恡恧恱恾恿悂悆悈悊悎悑悓悕悘悝悞悢悤悥您悰悱悷"
            	],
            	[
            		"8fbea1",
            		"悻悾惂惄惈惉惊惋惎惏惔惕惙惛惝惞惢惥惲惵惸惼惽愂愇愊愌愐",
            		4,
            		"愖愗愙愜愞愢愪愫愰愱愵愶愷愹慁慅慆慉慞慠慬慲慸慻慼慿憀憁憃憄憋憍憒憓憗憘憜憝憟憠憥憨憪憭憸憹憼懀懁懂懎懏懕懜懝懞懟懡懢懧懩懥"
            	],
            	[
            		"8fbfa1",
            		"懬懭懯戁戃戄戇戓戕戜戠戢戣戧戩戫戹戽扂扃扄扆扌扐扑扒扔扖扚扜扤扭扯扳扺扽抍抎抏抐抦抨抳抶抷抺抾抿拄拎拕拖拚拪拲拴拼拽挃挄挊挋挍挐挓挖挘挩挪挭挵挶挹挼捁捂捃捄捆捊捋捎捒捓捔捘捛捥捦捬捭捱捴捵"
            	],
            	[
            		"8fc0a1",
            		"捸捼捽捿掂掄掇掊掐掔掕掙掚掞掤掦掭掮掯掽揁揅揈揎揑揓揔揕揜揠揥揪揬揲揳揵揸揹搉搊搐搒搔搘搞搠搢搤搥搩搪搯搰搵搽搿摋摏摑摒摓摔摚摛摜摝摟摠摡摣摭摳摴摻摽撅撇撏撐撑撘撙撛撝撟撡撣撦撨撬撳撽撾撿"
            	],
            	[
            		"8fc1a1",
            		"擄擉擊擋擌擎擐擑擕擗擤擥擩擪擭擰擵擷擻擿攁攄攈攉攊攏攓攔攖攙攛攞攟攢攦攩攮攱攺攼攽敃敇敉敐敒敔敟敠敧敫敺敽斁斅斊斒斕斘斝斠斣斦斮斲斳斴斿旂旈旉旎旐旔旖旘旟旰旲旴旵旹旾旿昀昄昈昉昍昑昒昕昖昝"
            	],
            	[
            		"8fc2a1",
            		"昞昡昢昣昤昦昩昪昫昬昮昰昱昳昹昷晀晅晆晊晌晑晎晗晘晙晛晜晠晡曻晪晫晬晾晳晵晿晷晸晹晻暀晼暋暌暍暐暒暙暚暛暜暟暠暤暭暱暲暵暻暿曀曂曃曈曌曎曏曔曛曟曨曫曬曮曺朅朇朎朓朙朜朠朢朳朾杅杇杈杌杔杕杝"
            	],
            	[
            		"8fc3a1",
            		"杦杬杮杴杶杻极构枎枏枑枓枖枘枙枛枰枱枲枵枻枼枽柹柀柂柃柅柈柉柒柗柙柜柡柦柰柲柶柷桒栔栙栝栟栨栧栬栭栯栰栱栳栻栿桄桅桊桌桕桗桘桛桫桮",
            		4,
            		"桵桹桺桻桼梂梄梆梈梖梘梚梜梡梣梥梩梪梮梲梻棅棈棌棏"
            	],
            	[
            		"8fc4a1",
            		"棐棑棓棖棙棜棝棥棨棪棫棬棭棰棱棵棶棻棼棽椆椉椊椐椑椓椖椗椱椳椵椸椻楂楅楉楎楗楛楣楤楥楦楨楩楬楰楱楲楺楻楿榀榍榒榖榘榡榥榦榨榫榭榯榷榸榺榼槅槈槑槖槗槢槥槮槯槱槳槵槾樀樁樃樏樑樕樚樝樠樤樨樰樲"
            	],
            	[
            		"8fc5a1",
            		"樴樷樻樾樿橅橆橉橊橎橐橑橒橕橖橛橤橧橪橱橳橾檁檃檆檇檉檋檑檛檝檞檟檥檫檯檰檱檴檽檾檿櫆櫉櫈櫌櫐櫔櫕櫖櫜櫝櫤櫧櫬櫰櫱櫲櫼櫽欂欃欆欇欉欏欐欑欗欛欞欤欨欫欬欯欵欶欻欿歆歊歍歒歖歘歝歠歧歫歮歰歵歽"
            	],
            	[
            		"8fc6a1",
            		"歾殂殅殗殛殟殠殢殣殨殩殬殭殮殰殸殹殽殾毃毄毉毌毖毚毡毣毦毧毮毱毷毹毿氂氄氅氉氍氎氐氒氙氟氦氧氨氬氮氳氵氶氺氻氿汊汋汍汏汒汔汙汛汜汫汭汯汴汶汸汹汻沅沆沇沉沔沕沗沘沜沟沰沲沴泂泆泍泏泐泑泒泔泖"
            	],
            	[
            		"8fc7a1",
            		"泚泜泠泧泩泫泬泮泲泴洄洇洊洎洏洑洓洚洦洧洨汧洮洯洱洹洼洿浗浞浟浡浥浧浯浰浼涂涇涑涒涔涖涗涘涪涬涴涷涹涽涿淄淈淊淎淏淖淛淝淟淠淢淥淩淯淰淴淶淼渀渄渞渢渧渲渶渹渻渼湄湅湈湉湋湏湑湒湓湔湗湜湝湞"
            	],
            	[
            		"8fc8a1",
            		"湢湣湨湳湻湽溍溓溙溠溧溭溮溱溳溻溿滀滁滃滇滈滊滍滎滏滫滭滮滹滻滽漄漈漊漌漍漖漘漚漛漦漩漪漯漰漳漶漻漼漭潏潑潒潓潗潙潚潝潞潡潢潨潬潽潾澃澇澈澋澌澍澐澒澓澔澖澚澟澠澥澦澧澨澮澯澰澵澶澼濅濇濈濊"
            	],
            	[
            		"8fc9a1",
            		"濚濞濨濩濰濵濹濼濽瀀瀅瀆瀇瀍瀗瀠瀣瀯瀴瀷瀹瀼灃灄灈灉灊灋灔灕灝灞灎灤灥灬灮灵灶灾炁炅炆炔",
            		4,
            		"炛炤炫炰炱炴炷烊烑烓烔烕烖烘烜烤烺焃",
            		4,
            		"焋焌焏焞焠焫焭焯焰焱焸煁煅煆煇煊煋煐煒煗煚煜煞煠"
            	],
            	[
            		"8fcaa1",
            		"煨煹熀熅熇熌熒熚熛熠熢熯熰熲熳熺熿燀燁燄燋燌燓燖燙燚燜燸燾爀爇爈爉爓爗爚爝爟爤爫爯爴爸爹牁牂牃牅牎牏牐牓牕牖牚牜牞牠牣牨牫牮牯牱牷牸牻牼牿犄犉犍犎犓犛犨犭犮犱犴犾狁狇狉狌狕狖狘狟狥狳狴狺狻"
            	],
            	[
            		"8fcba1",
            		"狾猂猄猅猇猋猍猒猓猘猙猞猢猤猧猨猬猱猲猵猺猻猽獃獍獐獒獖獘獝獞獟獠獦獧獩獫獬獮獯獱獷獹獼玀玁玃玅玆玎玐玓玕玗玘玜玞玟玠玢玥玦玪玫玭玵玷玹玼玽玿珅珆珉珋珌珏珒珓珖珙珝珡珣珦珧珩珴珵珷珹珺珻珽"
            	],
            	[
            		"8fcca1",
            		"珿琀琁琄琇琊琑琚琛琤琦琨",
            		9,
            		"琹瑀瑃瑄瑆瑇瑋瑍瑑瑒瑗瑝瑢瑦瑧瑨瑫瑭瑮瑱瑲璀璁璅璆璇璉璏璐璑璒璘璙璚璜璟璠璡璣璦璨璩璪璫璮璯璱璲璵璹璻璿瓈瓉瓌瓐瓓瓘瓚瓛瓞瓟瓤瓨瓪瓫瓯瓴瓺瓻瓼瓿甆"
            	],
            	[
            		"8fcda1",
            		"甒甖甗甠甡甤甧甩甪甯甶甹甽甾甿畀畃畇畈畎畐畒畗畞畟畡畯畱畹",
            		5,
            		"疁疅疐疒疓疕疙疜疢疤疴疺疿痀痁痄痆痌痎痏痗痜痟痠痡痤痧痬痮痯痱痹瘀瘂瘃瘄瘇瘈瘊瘌瘏瘒瘓瘕瘖瘙瘛瘜瘝瘞瘣瘥瘦瘩瘭瘲瘳瘵瘸瘹"
            	],
            	[
            		"8fcea1",
            		"瘺瘼癊癀癁癃癄癅癉癋癕癙癟癤癥癭癮癯癱癴皁皅皌皍皕皛皜皝皟皠皢",
            		6,
            		"皪皭皽盁盅盉盋盌盎盔盙盠盦盨盬盰盱盶盹盼眀眆眊眎眒眔眕眗眙眚眜眢眨眭眮眯眴眵眶眹眽眾睂睅睆睊睍睎睏睒睖睗睜睞睟睠睢"
            	],
            	[
            		"8fcfa1",
            		"睤睧睪睬睰睲睳睴睺睽瞀瞄瞌瞍瞔瞕瞖瞚瞟瞢瞧瞪瞮瞯瞱瞵瞾矃矉矑矒矕矙矞矟矠矤矦矪矬矰矱矴矸矻砅砆砉砍砎砑砝砡砢砣砭砮砰砵砷硃硄硇硈硌硎硒硜硞硠硡硣硤硨硪确硺硾碊碏碔碘碡碝碞碟碤碨碬碭碰碱碲碳"
            	],
            	[
            		"8fd0a1",
            		"碻碽碿磇磈磉磌磎磒磓磕磖磤磛磟磠磡磦磪磲磳礀磶磷磺磻磿礆礌礐礚礜礞礟礠礥礧礩礭礱礴礵礻礽礿祄祅祆祊祋祏祑祔祘祛祜祧祩祫祲祹祻祼祾禋禌禑禓禔禕禖禘禛禜禡禨禩禫禯禱禴禸离秂秄秇秈秊秏秔秖秚秝秞"
            	],
            	[
            		"8fd1a1",
            		"秠秢秥秪秫秭秱秸秼稂稃稇稉稊稌稑稕稛稞稡稧稫稭稯稰稴稵稸稹稺穄穅穇穈穌穕穖穙穜穝穟穠穥穧穪穭穵穸穾窀窂窅窆窊窋窐窑窔窞窠窣窬窳窵窹窻窼竆竉竌竎竑竛竨竩竫竬竱竴竻竽竾笇笔笟笣笧笩笪笫笭笮笯笰"
            	],
            	[
            		"8fd2a1",
            		"笱笴笽笿筀筁筇筎筕筠筤筦筩筪筭筯筲筳筷箄箉箎箐箑箖箛箞箠箥箬箯箰箲箵箶箺箻箼箽篂篅篈篊篔篖篗篙篚篛篨篪篲篴篵篸篹篺篼篾簁簂簃簄簆簉簋簌簎簏簙簛簠簥簦簨簬簱簳簴簶簹簺籆籊籕籑籒籓籙",
            		5
            	],
            	[
            		"8fd3a1",
            		"籡籣籧籩籭籮籰籲籹籼籽粆粇粏粔粞粠粦粰粶粷粺粻粼粿糄糇糈糉糍糏糓糔糕糗糙糚糝糦糩糫糵紃紇紈紉紏紑紒紓紖紝紞紣紦紪紭紱紼紽紾絀絁絇絈絍絑絓絗絙絚絜絝絥絧絪絰絸絺絻絿綁綂綃綅綆綈綋綌綍綑綖綗綝"
            	],
            	[
            		"8fd4a1",
            		"綞綦綧綪綳綶綷綹緂",
            		4,
            		"緌緍緎緗緙縀緢緥緦緪緫緭緱緵緶緹緺縈縐縑縕縗縜縝縠縧縨縬縭縯縳縶縿繄繅繇繎繐繒繘繟繡繢繥繫繮繯繳繸繾纁纆纇纊纍纑纕纘纚纝纞缼缻缽缾缿罃罄罇罏罒罓罛罜罝罡罣罤罥罦罭"
            	],
            	[
            		"8fd5a1",
            		"罱罽罾罿羀羋羍羏羐羑羖羗羜羡羢羦羪羭羴羼羿翀翃翈翎翏翛翟翣翥翨翬翮翯翲翺翽翾翿耇耈耊耍耎耏耑耓耔耖耝耞耟耠耤耦耬耮耰耴耵耷耹耺耼耾聀聄聠聤聦聭聱聵肁肈肎肜肞肦肧肫肸肹胈胍胏胒胔胕胗胘胠胭胮"
            	],
            	[
            		"8fd6a1",
            		"胰胲胳胶胹胺胾脃脋脖脗脘脜脞脠脤脧脬脰脵脺脼腅腇腊腌腒腗腠腡腧腨腩腭腯腷膁膐膄膅膆膋膎膖膘膛膞膢膮膲膴膻臋臃臅臊臎臏臕臗臛臝臞臡臤臫臬臰臱臲臵臶臸臹臽臿舀舃舏舓舔舙舚舝舡舢舨舲舴舺艃艄艅艆"
            	],
            	[
            		"8fd7a1",
            		"艋艎艏艑艖艜艠艣艧艭艴艻艽艿芀芁芃芄芇芉芊芎芑芔芖芘芚芛芠芡芣芤芧芨芩芪芮芰芲芴芷芺芼芾芿苆苐苕苚苠苢苤苨苪苭苯苶苷苽苾茀茁茇茈茊茋荔茛茝茞茟茡茢茬茭茮茰茳茷茺茼茽荂荃荄荇荍荎荑荕荖荗荰荸"
            	],
            	[
            		"8fd8a1",
            		"荽荿莀莂莄莆莍莒莔莕莘莙莛莜莝莦莧莩莬莾莿菀菇菉菏菐菑菔菝荓菨菪菶菸菹菼萁萆萊萏萑萕萙莭萯萹葅葇葈葊葍葏葑葒葖葘葙葚葜葠葤葥葧葪葰葳葴葶葸葼葽蒁蒅蒒蒓蒕蒞蒦蒨蒩蒪蒯蒱蒴蒺蒽蒾蓀蓂蓇蓈蓌蓏蓓"
            	],
            	[
            		"8fd9a1",
            		"蓜蓧蓪蓯蓰蓱蓲蓷蔲蓺蓻蓽蔂蔃蔇蔌蔎蔐蔜蔞蔢蔣蔤蔥蔧蔪蔫蔯蔳蔴蔶蔿蕆蕏",
            		4,
            		"蕖蕙蕜",
            		6,
            		"蕤蕫蕯蕹蕺蕻蕽蕿薁薅薆薉薋薌薏薓薘薝薟薠薢薥薧薴薶薷薸薼薽薾薿藂藇藊藋藎薭藘藚藟藠藦藨藭藳藶藼"
            	],
            	[
            		"8fdaa1",
            		"藿蘀蘄蘅蘍蘎蘐蘑蘒蘘蘙蘛蘞蘡蘧蘩蘶蘸蘺蘼蘽虀虂虆虒虓虖虗虘虙虝虠",
            		4,
            		"虩虬虯虵虶虷虺蚍蚑蚖蚘蚚蚜蚡蚦蚧蚨蚭蚱蚳蚴蚵蚷蚸蚹蚿蛀蛁蛃蛅蛑蛒蛕蛗蛚蛜蛠蛣蛥蛧蚈蛺蛼蛽蜄蜅蜇蜋蜎蜏蜐蜓蜔蜙蜞蜟蜡蜣"
            	],
            	[
            		"8fdba1",
            		"蜨蜮蜯蜱蜲蜹蜺蜼蜽蜾蝀蝃蝅蝍蝘蝝蝡蝤蝥蝯蝱蝲蝻螃",
            		6,
            		"螋螌螐螓螕螗螘螙螞螠螣螧螬螭螮螱螵螾螿蟁蟈蟉蟊蟎蟕蟖蟙蟚蟜蟟蟢蟣蟤蟪蟫蟭蟱蟳蟸蟺蟿蠁蠃蠆蠉蠊蠋蠐蠙蠒蠓蠔蠘蠚蠛蠜蠞蠟蠨蠭蠮蠰蠲蠵"
            	],
            	[
            		"8fdca1",
            		"蠺蠼衁衃衅衈衉衊衋衎衑衕衖衘衚衜衟衠衤衩衱衹衻袀袘袚袛袜袟袠袨袪袺袽袾裀裊",
            		4,
            		"裑裒裓裛裞裧裯裰裱裵裷褁褆褍褎褏褕褖褘褙褚褜褠褦褧褨褰褱褲褵褹褺褾襀襂襅襆襉襏襒襗襚襛襜襡襢襣襫襮襰襳襵襺"
            	],
            	[
            		"8fdda1",
            		"襻襼襽覉覍覐覔覕覛覜覟覠覥覰覴覵覶覷覼觔",
            		4,
            		"觥觩觫觭觱觳觶觹觽觿訄訅訇訏訑訒訔訕訞訠訢訤訦訫訬訯訵訷訽訾詀詃詅詇詉詍詎詓詖詗詘詜詝詡詥詧詵詶詷詹詺詻詾詿誀誃誆誋誏誐誒誖誗誙誟誧誩誮誯誳"
            	],
            	[
            		"8fdea1",
            		"誶誷誻誾諃諆諈諉諊諑諓諔諕諗諝諟諬諰諴諵諶諼諿謅謆謋謑謜謞謟謊謭謰謷謼譂",
            		4,
            		"譈譒譓譔譙譍譞譣譭譶譸譹譼譾讁讄讅讋讍讏讔讕讜讞讟谸谹谽谾豅豇豉豋豏豑豓豔豗豘豛豝豙豣豤豦豨豩豭豳豵豶豻豾貆"
            	],
            	[
            		"8fdfa1",
            		"貇貋貐貒貓貙貛貜貤貹貺賅賆賉賋賏賖賕賙賝賡賨賬賯賰賲賵賷賸賾賿贁贃贉贒贗贛赥赩赬赮赿趂趄趈趍趐趑趕趞趟趠趦趫趬趯趲趵趷趹趻跀跅跆跇跈跊跎跑跔跕跗跙跤跥跧跬跰趼跱跲跴跽踁踄踅踆踋踑踔踖踠踡踢"
            	],
            	[
            		"8fe0a1",
            		"踣踦踧踱踳踶踷踸踹踽蹀蹁蹋蹍蹎蹏蹔蹛蹜蹝蹞蹡蹢蹩蹬蹭蹯蹰蹱蹹蹺蹻躂躃躉躐躒躕躚躛躝躞躢躧躩躭躮躳躵躺躻軀軁軃軄軇軏軑軔軜軨軮軰軱軷軹軺軭輀輂輇輈輏輐輖輗輘輞輠輡輣輥輧輨輬輭輮輴輵輶輷輺轀轁"
            	],
            	[
            		"8fe1a1",
            		"轃轇轏轑",
            		4,
            		"轘轝轞轥辝辠辡辤辥辦辵辶辸达迀迁迆迊迋迍运迒迓迕迠迣迤迨迮迱迵迶迻迾适逄逈逌逘逛逨逩逯逪逬逭逳逴逷逿遃遄遌遛遝遢遦遧遬遰遴遹邅邈邋邌邎邐邕邗邘邙邛邠邡邢邥邰邲邳邴邶邽郌邾郃"
            	],
            	[
            		"8fe2a1",
            		"郄郅郇郈郕郗郘郙郜郝郟郥郒郶郫郯郰郴郾郿鄀鄄鄅鄆鄈鄍鄐鄔鄖鄗鄘鄚鄜鄞鄠鄥鄢鄣鄧鄩鄮鄯鄱鄴鄶鄷鄹鄺鄼鄽酃酇酈酏酓酗酙酚酛酡酤酧酭酴酹酺酻醁醃醅醆醊醎醑醓醔醕醘醞醡醦醨醬醭醮醰醱醲醳醶醻醼醽醿"
            	],
            	[
            		"8fe3a1",
            		"釂釃釅釓釔釗釙釚釞釤釥釩釪釬",
            		5,
            		"釷釹釻釽鈀鈁鈄鈅鈆鈇鈉鈊鈌鈐鈒鈓鈖鈘鈜鈝鈣鈤鈥鈦鈨鈮鈯鈰鈳鈵鈶鈸鈹鈺鈼鈾鉀鉂鉃鉆鉇鉊鉍鉎鉏鉑鉘鉙鉜鉝鉠鉡鉥鉧鉨鉩鉮鉯鉰鉵",
            		4,
            		"鉻鉼鉽鉿銈銉銊銍銎銒銗"
            	],
            	[
            		"8fe4a1",
            		"銙銟銠銤銥銧銨銫銯銲銶銸銺銻銼銽銿",
            		4,
            		"鋅鋆鋇鋈鋋鋌鋍鋎鋐鋓鋕鋗鋘鋙鋜鋝鋟鋠鋡鋣鋥鋧鋨鋬鋮鋰鋹鋻鋿錀錂錈錍錑錔錕錜錝錞錟錡錤錥錧錩錪錳錴錶錷鍇鍈鍉鍐鍑鍒鍕鍗鍘鍚鍞鍤鍥鍧鍩鍪鍭鍯鍰鍱鍳鍴鍶"
            	],
            	[
            		"8fe5a1",
            		"鍺鍽鍿鎀鎁鎂鎈鎊鎋鎍鎏鎒鎕鎘鎛鎞鎡鎣鎤鎦鎨鎫鎴鎵鎶鎺鎩鏁鏄鏅鏆鏇鏉",
            		4,
            		"鏓鏙鏜鏞鏟鏢鏦鏧鏹鏷鏸鏺鏻鏽鐁鐂鐄鐈鐉鐍鐎鐏鐕鐖鐗鐟鐮鐯鐱鐲鐳鐴鐻鐿鐽鑃鑅鑈鑊鑌鑕鑙鑜鑟鑡鑣鑨鑫鑭鑮鑯鑱鑲钄钃镸镹"
            	],
            	[
            		"8fe6a1",
            		"镾閄閈閌閍閎閝閞閟閡閦閩閫閬閴閶閺閽閿闆闈闉闋闐闑闒闓闙闚闝闞闟闠闤闦阝阞阢阤阥阦阬阱阳阷阸阹阺阼阽陁陒陔陖陗陘陡陮陴陻陼陾陿隁隂隃隄隉隑隖隚隝隟隤隥隦隩隮隯隳隺雊雒嶲雘雚雝雞雟雩雯雱雺霂"
            	],
            	[
            		"8fe7a1",
            		"霃霅霉霚霛霝霡霢霣霨霱霳靁靃靊靎靏靕靗靘靚靛靣靧靪靮靳靶靷靸靻靽靿鞀鞉鞕鞖鞗鞙鞚鞞鞟鞢鞬鞮鞱鞲鞵鞶鞸鞹鞺鞼鞾鞿韁韄韅韇韉韊韌韍韎韐韑韔韗韘韙韝韞韠韛韡韤韯韱韴韷韸韺頇頊頙頍頎頔頖頜頞頠頣頦"
            	],
            	[
            		"8fe8a1",
            		"頫頮頯頰頲頳頵頥頾顄顇顊顑顒顓顖顗顙顚顢顣顥顦顪顬颫颭颮颰颴颷颸颺颻颿飂飅飈飌飡飣飥飦飧飪飳飶餂餇餈餑餕餖餗餚餛餜餟餢餦餧餫餱",
            		4,
            		"餹餺餻餼饀饁饆饇饈饍饎饔饘饙饛饜饞饟饠馛馝馟馦馰馱馲馵"
            	],
            	[
            		"8fe9a1",
            		"馹馺馽馿駃駉駓駔駙駚駜駞駧駪駫駬駰駴駵駹駽駾騂騃騄騋騌騐騑騖騞騠騢騣騤騧騭騮騳騵騶騸驇驁驄驊驋驌驎驑驔驖驝骪骬骮骯骲骴骵骶骹骻骾骿髁髃髆髈髎髐髒髕髖髗髛髜髠髤髥髧髩髬髲髳髵髹髺髽髿",
            		4
            	],
            	[
            		"8feaa1",
            		"鬄鬅鬈鬉鬋鬌鬍鬎鬐鬒鬖鬙鬛鬜鬠鬦鬫鬭鬳鬴鬵鬷鬹鬺鬽魈魋魌魕魖魗魛魞魡魣魥魦魨魪",
            		4,
            		"魳魵魷魸魹魿鮀鮄鮅鮆鮇鮉鮊鮋鮍鮏鮐鮔鮚鮝鮞鮦鮧鮩鮬鮰鮱鮲鮷鮸鮻鮼鮾鮿鯁鯇鯈鯎鯐鯗鯘鯝鯟鯥鯧鯪鯫鯯鯳鯷鯸"
            	],
            	[
            		"8feba1",
            		"鯹鯺鯽鯿鰀鰂鰋鰏鰑鰖鰘鰙鰚鰜鰞鰢鰣鰦",
            		4,
            		"鰱鰵鰶鰷鰽鱁鱃鱄鱅鱉鱊鱎鱏鱐鱓鱔鱖鱘鱛鱝鱞鱟鱣鱩鱪鱜鱫鱨鱮鱰鱲鱵鱷鱻鳦鳲鳷鳹鴋鴂鴑鴗鴘鴜鴝鴞鴯鴰鴲鴳鴴鴺鴼鵅鴽鵂鵃鵇鵊鵓鵔鵟鵣鵢鵥鵩鵪鵫鵰鵶鵷鵻"
            	],
            	[
            		"8feca1",
            		"鵼鵾鶃鶄鶆鶊鶍鶎鶒鶓鶕鶖鶗鶘鶡鶪鶬鶮鶱鶵鶹鶼鶿鷃鷇鷉鷊鷔鷕鷖鷗鷚鷞鷟鷠鷥鷧鷩鷫鷮鷰鷳鷴鷾鸊鸂鸇鸎鸐鸑鸒鸕鸖鸙鸜鸝鹺鹻鹼麀麂麃麄麅麇麎麏麖麘麛麞麤麨麬麮麯麰麳麴麵黆黈黋黕黟黤黧黬黭黮黰黱黲黵"
            	],
            	[
            		"8feda1",
            		"黸黿鼂鼃鼉鼏鼐鼑鼒鼔鼖鼗鼙鼚鼛鼟鼢鼦鼪鼫鼯鼱鼲鼴鼷鼹鼺鼼鼽鼿齁齃",
            		4,
            		"齓齕齖齗齘齚齝齞齨齩齭",
            		4,
            		"齳齵齺齽龏龐龑龒龔龖龗龞龡龢龣龥"
            	]
            ];

            var require$$2 = [
            	[
            		"0",
            		"\u0000",
            		127,
            		"€"
            	],
            	[
            		"8140",
            		"丂丄丅丆丏丒丗丟丠両丣並丩丮丯丱丳丵丷丼乀乁乂乄乆乊乑乕乗乚乛乢乣乤乥乧乨乪",
            		5,
            		"乲乴",
            		9,
            		"乿",
            		6,
            		"亇亊"
            	],
            	[
            		"8180",
            		"亐亖亗亙亜亝亞亣亪亯亰亱亴亶亷亸亹亼亽亾仈仌仏仐仒仚仛仜仠仢仦仧仩仭仮仯仱仴仸仹仺仼仾伀伂",
            		6,
            		"伋伌伒",
            		4,
            		"伜伝伡伣伨伩伬伭伮伱伳伵伷伹伻伾",
            		4,
            		"佄佅佇",
            		5,
            		"佒佔佖佡佢佦佨佪佫佭佮佱佲併佷佸佹佺佽侀侁侂侅來侇侊侌侎侐侒侓侕侖侘侙侚侜侞侟価侢"
            	],
            	[
            		"8240",
            		"侤侫侭侰",
            		4,
            		"侶",
            		8,
            		"俀俁係俆俇俈俉俋俌俍俒",
            		4,
            		"俙俛俠俢俤俥俧俫俬俰俲俴俵俶俷俹俻俼俽俿",
            		11
            	],
            	[
            		"8280",
            		"個倎倐們倓倕倖倗倛倝倞倠倢倣値倧倫倯",
            		10,
            		"倻倽倿偀偁偂偄偅偆偉偊偋偍偐",
            		4,
            		"偖偗偘偙偛偝",
            		7,
            		"偦",
            		5,
            		"偭",
            		8,
            		"偸偹偺偼偽傁傂傃傄傆傇傉傊傋傌傎",
            		20,
            		"傤傦傪傫傭",
            		4,
            		"傳",
            		6,
            		"傼"
            	],
            	[
            		"8340",
            		"傽",
            		17,
            		"僐",
            		5,
            		"僗僘僙僛",
            		10,
            		"僨僩僪僫僯僰僱僲僴僶",
            		4,
            		"僼",
            		9,
            		"儈"
            	],
            	[
            		"8380",
            		"儉儊儌",
            		5,
            		"儓",
            		13,
            		"儢",
            		28,
            		"兂兇兊兌兎兏児兒兓兗兘兙兛兝",
            		4,
            		"兣兤兦內兩兪兯兲兺兾兿冃冄円冇冊冋冎冏冐冑冓冔冘冚冝冞冟冡冣冦",
            		4,
            		"冭冮冴冸冹冺冾冿凁凂凃凅凈凊凍凎凐凒",
            		5
            	],
            	[
            		"8440",
            		"凘凙凚凜凞凟凢凣凥",
            		5,
            		"凬凮凱凲凴凷凾刄刅刉刋刌刏刐刓刔刕刜刞刟刡刢刣別刦刧刪刬刯刱刲刴刵刼刾剄",
            		5,
            		"剋剎剏剒剓剕剗剘"
            	],
            	[
            		"8480",
            		"剙剚剛剝剟剠剢剣剤剦剨剫剬剭剮剰剱剳",
            		9,
            		"剾劀劃",
            		4,
            		"劉",
            		6,
            		"劑劒劔",
            		6,
            		"劜劤劥劦劧劮劯劰労",
            		9,
            		"勀勁勂勄勅勆勈勊勌勍勎勏勑勓勔動勗務",
            		5,
            		"勠勡勢勣勥",
            		10,
            		"勱",
            		7,
            		"勻勼勽匁匂匃匄匇匉匊匋匌匎"
            	],
            	[
            		"8540",
            		"匑匒匓匔匘匛匜匞匟匢匤匥匧匨匩匫匬匭匯",
            		9,
            		"匼匽區卂卄卆卋卌卍卐協単卙卛卝卥卨卪卬卭卲卶卹卻卼卽卾厀厁厃厇厈厊厎厏"
            	],
            	[
            		"8580",
            		"厐",
            		4,
            		"厖厗厙厛厜厞厠厡厤厧厪厫厬厭厯",
            		6,
            		"厷厸厹厺厼厽厾叀參",
            		4,
            		"収叏叐叒叓叕叚叜叝叞叡叢叧叴叺叾叿吀吂吅吇吋吔吘吙吚吜吢吤吥吪吰吳吶吷吺吽吿呁呂呄呅呇呉呌呍呎呏呑呚呝",
            		4,
            		"呣呥呧呩",
            		7,
            		"呴呹呺呾呿咁咃咅咇咈咉咊咍咑咓咗咘咜咞咟咠咡"
            	],
            	[
            		"8640",
            		"咢咥咮咰咲咵咶咷咹咺咼咾哃哅哊哋哖哘哛哠",
            		4,
            		"哫哬哯哰哱哴",
            		5,
            		"哻哾唀唂唃唄唅唈唊",
            		4,
            		"唒唓唕",
            		5,
            		"唜唝唞唟唡唥唦"
            	],
            	[
            		"8680",
            		"唨唩唫唭唲唴唵唶唸唹唺唻唽啀啂啅啇啈啋",
            		4,
            		"啑啒啓啔啗",
            		4,
            		"啝啞啟啠啢啣啨啩啫啯",
            		5,
            		"啹啺啽啿喅喆喌喍喎喐喒喓喕喖喗喚喛喞喠",
            		6,
            		"喨",
            		8,
            		"喲喴営喸喺喼喿",
            		4,
            		"嗆嗇嗈嗊嗋嗎嗏嗐嗕嗗",
            		4,
            		"嗞嗠嗢嗧嗩嗭嗮嗰嗱嗴嗶嗸",
            		4,
            		"嗿嘂嘃嘄嘅"
            	],
            	[
            		"8740",
            		"嘆嘇嘊嘋嘍嘐",
            		7,
            		"嘙嘚嘜嘝嘠嘡嘢嘥嘦嘨嘩嘪嘫嘮嘯嘰嘳嘵嘷嘸嘺嘼嘽嘾噀",
            		11,
            		"噏",
            		4,
            		"噕噖噚噛噝",
            		4
            	],
            	[
            		"8780",
            		"噣噥噦噧噭噮噯噰噲噳噴噵噷噸噹噺噽",
            		7,
            		"嚇",
            		6,
            		"嚐嚑嚒嚔",
            		14,
            		"嚤",
            		10,
            		"嚰",
            		6,
            		"嚸嚹嚺嚻嚽",
            		12,
            		"囋",
            		8,
            		"囕囖囘囙囜団囥",
            		5,
            		"囬囮囯囲図囶囷囸囻囼圀圁圂圅圇國",
            		6
            	],
            	[
            		"8840",
            		"園",
            		9,
            		"圝圞圠圡圢圤圥圦圧圫圱圲圴",
            		4,
            		"圼圽圿坁坃坄坅坆坈坉坋坒",
            		4,
            		"坘坙坢坣坥坧坬坮坰坱坲坴坵坸坹坺坽坾坿垀"
            	],
            	[
            		"8880",
            		"垁垇垈垉垊垍",
            		4,
            		"垔",
            		6,
            		"垜垝垞垟垥垨垪垬垯垰垱垳垵垶垷垹",
            		8,
            		"埄",
            		6,
            		"埌埍埐埑埓埖埗埛埜埞埡埢埣埥",
            		7,
            		"埮埰埱埲埳埵埶執埻埼埾埿堁堃堄堅堈堉堊堌堎堏堐堒堓堔堖堗堘堚堛堜堝堟堢堣堥",
            		4,
            		"堫",
            		4,
            		"報堲堳場堶",
            		7
            	],
            	[
            		"8940",
            		"堾",
            		5,
            		"塅",
            		6,
            		"塎塏塐塒塓塕塖塗塙",
            		4,
            		"塟",
            		5,
            		"塦",
            		4,
            		"塭",
            		16,
            		"塿墂墄墆墇墈墊墋墌"
            	],
            	[
            		"8980",
            		"墍",
            		4,
            		"墔",
            		4,
            		"墛墜墝墠",
            		7,
            		"墪",
            		17,
            		"墽墾墿壀壂壃壄壆",
            		10,
            		"壒壓壔壖",
            		13,
            		"壥",
            		5,
            		"壭壯壱売壴壵壷壸壺",
            		7,
            		"夃夅夆夈",
            		4,
            		"夎夐夑夒夓夗夘夛夝夞夠夡夢夣夦夨夬夰夲夳夵夶夻"
            	],
            	[
            		"8a40",
            		"夽夾夿奀奃奅奆奊奌奍奐奒奓奙奛",
            		4,
            		"奡奣奤奦",
            		12,
            		"奵奷奺奻奼奾奿妀妅妉妋妌妎妏妐妑妔妕妘妚妛妜妝妟妠妡妢妦"
            	],
            	[
            		"8a80",
            		"妧妬妭妰妱妳",
            		5,
            		"妺妼妽妿",
            		6,
            		"姇姈姉姌姍姎姏姕姖姙姛姞",
            		4,
            		"姤姦姧姩姪姫姭",
            		11,
            		"姺姼姽姾娀娂娊娋娍娎娏娐娒娔娕娖娗娙娚娛娝娞娡娢娤娦娧娨娪",
            		6,
            		"娳娵娷",
            		4,
            		"娽娾娿婁",
            		4,
            		"婇婈婋",
            		9,
            		"婖婗婘婙婛",
            		5
            	],
            	[
            		"8b40",
            		"婡婣婤婥婦婨婩婫",
            		8,
            		"婸婹婻婼婽婾媀",
            		17,
            		"媓",
            		6,
            		"媜",
            		13,
            		"媫媬"
            	],
            	[
            		"8b80",
            		"媭",
            		4,
            		"媴媶媷媹",
            		4,
            		"媿嫀嫃",
            		5,
            		"嫊嫋嫍",
            		4,
            		"嫓嫕嫗嫙嫚嫛嫝嫞嫟嫢嫤嫥嫧嫨嫪嫬",
            		4,
            		"嫲",
            		22,
            		"嬊",
            		11,
            		"嬘",
            		25,
            		"嬳嬵嬶嬸",
            		7,
            		"孁",
            		6
            	],
            	[
            		"8c40",
            		"孈",
            		7,
            		"孒孖孞孠孡孧孨孫孭孮孯孲孴孶孷學孹孻孼孾孿宂宆宊宍宎宐宑宒宔宖実宧宨宩宬宭宮宯宱宲宷宺宻宼寀寁寃寈寉寊寋寍寎寏"
            	],
            	[
            		"8c80",
            		"寑寔",
            		8,
            		"寠寢寣實寧審",
            		4,
            		"寯寱",
            		6,
            		"寽対尀専尃尅將專尋尌對導尐尒尓尗尙尛尞尟尠尡尣尦尨尩尪尫尭尮尯尰尲尳尵尶尷屃屄屆屇屌屍屒屓屔屖屗屘屚屛屜屝屟屢層屧",
            		6,
            		"屰屲",
            		6,
            		"屻屼屽屾岀岃",
            		4,
            		"岉岊岋岎岏岒岓岕岝",
            		4,
            		"岤",
            		4
            	],
            	[
            		"8d40",
            		"岪岮岯岰岲岴岶岹岺岻岼岾峀峂峃峅",
            		5,
            		"峌",
            		5,
            		"峓",
            		5,
            		"峚",
            		6,
            		"峢峣峧峩峫峬峮峯峱",
            		9,
            		"峼",
            		4
            	],
            	[
            		"8d80",
            		"崁崄崅崈",
            		5,
            		"崏",
            		4,
            		"崕崗崘崙崚崜崝崟",
            		4,
            		"崥崨崪崫崬崯",
            		4,
            		"崵",
            		7,
            		"崿",
            		7,
            		"嵈嵉嵍",
            		10,
            		"嵙嵚嵜嵞",
            		10,
            		"嵪嵭嵮嵰嵱嵲嵳嵵",
            		12,
            		"嶃",
            		21,
            		"嶚嶛嶜嶞嶟嶠"
            	],
            	[
            		"8e40",
            		"嶡",
            		21,
            		"嶸",
            		12,
            		"巆",
            		6,
            		"巎",
            		12,
            		"巜巟巠巣巤巪巬巭"
            	],
            	[
            		"8e80",
            		"巰巵巶巸",
            		4,
            		"巿帀帄帇帉帊帋帍帎帒帓帗帞",
            		7,
            		"帨",
            		4,
            		"帯帰帲",
            		4,
            		"帹帺帾帿幀幁幃幆",
            		5,
            		"幍",
            		6,
            		"幖",
            		4,
            		"幜幝幟幠幣",
            		14,
            		"幵幷幹幾庁庂広庅庈庉庌庍庎庒庘庛庝庡庢庣庤庨",
            		4,
            		"庮",
            		4,
            		"庴庺庻庼庽庿",
            		6
            	],
            	[
            		"8f40",
            		"廆廇廈廋",
            		5,
            		"廔廕廗廘廙廚廜",
            		11,
            		"廩廫",
            		8,
            		"廵廸廹廻廼廽弅弆弇弉弌弍弎弐弒弔弖弙弚弜弝弞弡弢弣弤"
            	],
            	[
            		"8f80",
            		"弨弫弬弮弰弲",
            		6,
            		"弻弽弾弿彁",
            		14,
            		"彑彔彙彚彛彜彞彟彠彣彥彧彨彫彮彯彲彴彵彶彸彺彽彾彿徃徆徍徎徏徑従徔徖徚徛徝從徟徠徢",
            		5,
            		"復徫徬徯",
            		5,
            		"徶徸徹徺徻徾",
            		4,
            		"忇忈忊忋忎忓忔忕忚忛応忞忟忢忣忥忦忨忩忬忯忰忲忳忴忶忷忹忺忼怇"
            	],
            	[
            		"9040",
            		"怈怉怋怌怐怑怓怗怘怚怞怟怢怣怤怬怭怮怰",
            		4,
            		"怶",
            		4,
            		"怽怾恀恄",
            		6,
            		"恌恎恏恑恓恔恖恗恘恛恜恞恟恠恡恥恦恮恱恲恴恵恷恾悀"
            	],
            	[
            		"9080",
            		"悁悂悅悆悇悈悊悋悎悏悐悑悓悕悗悘悙悜悞悡悢悤悥悧悩悪悮悰悳悵悶悷悹悺悽",
            		7,
            		"惇惈惉惌",
            		4,
            		"惒惓惔惖惗惙惛惞惡",
            		4,
            		"惪惱惲惵惷惸惻",
            		4,
            		"愂愃愄愅愇愊愋愌愐",
            		4,
            		"愖愗愘愙愛愜愝愞愡愢愥愨愩愪愬",
            		18,
            		"慀",
            		6
            	],
            	[
            		"9140",
            		"慇慉態慍慏慐慒慓慔慖",
            		6,
            		"慞慟慠慡慣慤慥慦慩",
            		6,
            		"慱慲慳慴慶慸",
            		18,
            		"憌憍憏",
            		4,
            		"憕"
            	],
            	[
            		"9180",
            		"憖",
            		6,
            		"憞",
            		8,
            		"憪憫憭",
            		9,
            		"憸",
            		5,
            		"憿懀懁懃",
            		4,
            		"應懌",
            		4,
            		"懓懕",
            		16,
            		"懧",
            		13,
            		"懶",
            		8,
            		"戀",
            		5,
            		"戇戉戓戔戙戜戝戞戠戣戦戧戨戩戫戭戯戰戱戲戵戶戸",
            		4,
            		"扂扄扅扆扊"
            	],
            	[
            		"9240",
            		"扏扐払扖扗扙扚扜",
            		6,
            		"扤扥扨扱扲扴扵扷扸扺扻扽抁抂抃抅抆抇抈抋",
            		5,
            		"抔抙抜抝択抣抦抧抩抪抭抮抯抰抲抳抴抶抷抸抺抾拀拁"
            	],
            	[
            		"9280",
            		"拃拋拏拑拕拝拞拠拡拤拪拫拰拲拵拸拹拺拻挀挃挄挅挆挊挋挌挍挏挐挒挓挔挕挗挘挙挜挦挧挩挬挭挮挰挱挳",
            		5,
            		"挻挼挾挿捀捁捄捇捈捊捑捒捓捔捖",
            		7,
            		"捠捤捥捦捨捪捫捬捯捰捲捳捴捵捸捹捼捽捾捿掁掃掄掅掆掋掍掑掓掔掕掗掙",
            		6,
            		"採掤掦掫掯掱掲掵掶掹掻掽掿揀"
            	],
            	[
            		"9340",
            		"揁揂揃揅揇揈揊揋揌揑揓揔揕揗",
            		6,
            		"揟揢揤",
            		4,
            		"揫揬揮揯揰揱揳揵揷揹揺揻揼揾搃搄搆",
            		4,
            		"損搎搑搒搕",
            		5,
            		"搝搟搢搣搤"
            	],
            	[
            		"9380",
            		"搥搧搨搩搫搮",
            		5,
            		"搵",
            		4,
            		"搻搼搾摀摂摃摉摋",
            		6,
            		"摓摕摖摗摙",
            		4,
            		"摟",
            		7,
            		"摨摪摫摬摮",
            		9,
            		"摻",
            		6,
            		"撃撆撈",
            		8,
            		"撓撔撗撘撚撛撜撝撟",
            		4,
            		"撥撦撧撨撪撫撯撱撲撳撴撶撹撻撽撾撿擁擃擄擆",
            		6,
            		"擏擑擓擔擕擖擙據"
            	],
            	[
            		"9440",
            		"擛擜擝擟擠擡擣擥擧",
            		24,
            		"攁",
            		7,
            		"攊",
            		7,
            		"攓",
            		4,
            		"攙",
            		8
            	],
            	[
            		"9480",
            		"攢攣攤攦",
            		4,
            		"攬攭攰攱攲攳攷攺攼攽敀",
            		4,
            		"敆敇敊敋敍敎敐敒敓敔敗敘敚敜敟敠敡敤敥敧敨敩敪敭敮敯敱敳敵敶數",
            		14,
            		"斈斉斊斍斎斏斒斔斕斖斘斚斝斞斠斢斣斦斨斪斬斮斱",
            		7,
            		"斺斻斾斿旀旂旇旈旉旊旍旐旑旓旔旕旘",
            		7,
            		"旡旣旤旪旫"
            	],
            	[
            		"9540",
            		"旲旳旴旵旸旹旻",
            		4,
            		"昁昄昅昇昈昉昋昍昐昑昒昖昗昘昚昛昜昞昡昢昣昤昦昩昪昫昬昮昰昲昳昷",
            		4,
            		"昽昿晀時晄",
            		6,
            		"晍晎晐晑晘"
            	],
            	[
            		"9580",
            		"晙晛晜晝晞晠晢晣晥晧晩",
            		4,
            		"晱晲晳晵晸晹晻晼晽晿暀暁暃暅暆暈暉暊暋暍暎暏暐暒暓暔暕暘",
            		4,
            		"暞",
            		8,
            		"暩",
            		4,
            		"暯",
            		4,
            		"暵暶暷暸暺暻暼暽暿",
            		25,
            		"曚曞",
            		7,
            		"曧曨曪",
            		5,
            		"曱曵曶書曺曻曽朁朂會"
            	],
            	[
            		"9640",
            		"朄朅朆朇朌朎朏朑朒朓朖朘朙朚朜朞朠",
            		5,
            		"朧朩朮朰朲朳朶朷朸朹朻朼朾朿杁杄杅杇杊杋杍杒杔杕杗",
            		4,
            		"杝杢杣杤杦杧杫杬杮東杴杶"
            	],
            	[
            		"9680",
            		"杸杹杺杻杽枀枂枃枅枆枈枊枌枍枎枏枑枒枓枔枖枙枛枟枠枡枤枦枩枬枮枱枲枴枹",
            		7,
            		"柂柅",
            		9,
            		"柕柖柗柛柟柡柣柤柦柧柨柪柫柭柮柲柵",
            		7,
            		"柾栁栂栃栄栆栍栐栒栔栕栘",
            		4,
            		"栞栟栠栢",
            		6,
            		"栫",
            		6,
            		"栴栵栶栺栻栿桇桋桍桏桒桖",
            		5
            	],
            	[
            		"9740",
            		"桜桝桞桟桪桬",
            		7,
            		"桵桸",
            		8,
            		"梂梄梇",
            		7,
            		"梐梑梒梔梕梖梘",
            		9,
            		"梣梤梥梩梪梫梬梮梱梲梴梶梷梸"
            	],
            	[
            		"9780",
            		"梹",
            		6,
            		"棁棃",
            		5,
            		"棊棌棎棏棐棑棓棔棖棗棙棛",
            		4,
            		"棡棢棤",
            		9,
            		"棯棲棳棴棶棷棸棻棽棾棿椀椂椃椄椆",
            		4,
            		"椌椏椑椓",
            		11,
            		"椡椢椣椥",
            		7,
            		"椮椯椱椲椳椵椶椷椸椺椻椼椾楀楁楃",
            		16,
            		"楕楖楘楙楛楜楟"
            	],
            	[
            		"9840",
            		"楡楢楤楥楧楨楩楪楬業楯楰楲",
            		4,
            		"楺楻楽楾楿榁榃榅榊榋榌榎",
            		5,
            		"榖榗榙榚榝",
            		9,
            		"榩榪榬榮榯榰榲榳榵榶榸榹榺榼榽"
            	],
            	[
            		"9880",
            		"榾榿槀槂",
            		7,
            		"構槍槏槑槒槓槕",
            		5,
            		"槜槝槞槡",
            		11,
            		"槮槯槰槱槳",
            		9,
            		"槾樀",
            		9,
            		"樋",
            		11,
            		"標",
            		5,
            		"樠樢",
            		5,
            		"権樫樬樭樮樰樲樳樴樶",
            		6,
            		"樿",
            		4,
            		"橅橆橈",
            		7,
            		"橑",
            		6,
            		"橚"
            	],
            	[
            		"9940",
            		"橜",
            		4,
            		"橢橣橤橦",
            		10,
            		"橲",
            		6,
            		"橺橻橽橾橿檁檂檃檅",
            		8,
            		"檏檒",
            		4,
            		"檘",
            		7,
            		"檡",
            		5
            	],
            	[
            		"9980",
            		"檧檨檪檭",
            		114,
            		"欥欦欨",
            		6
            	],
            	[
            		"9a40",
            		"欯欰欱欳欴欵欶欸欻欼欽欿歀歁歂歄歅歈歊歋歍",
            		11,
            		"歚",
            		7,
            		"歨歩歫",
            		13,
            		"歺歽歾歿殀殅殈"
            	],
            	[
            		"9a80",
            		"殌殎殏殐殑殔殕殗殘殙殜",
            		4,
            		"殢",
            		7,
            		"殫",
            		7,
            		"殶殸",
            		6,
            		"毀毃毄毆",
            		4,
            		"毌毎毐毑毘毚毜",
            		4,
            		"毢",
            		7,
            		"毬毭毮毰毱毲毴毶毷毸毺毻毼毾",
            		6,
            		"氈",
            		4,
            		"氎氒気氜氝氞氠氣氥氫氬氭氱氳氶氷氹氺氻氼氾氿汃汄汅汈汋",
            		4,
            		"汑汒汓汖汘"
            	],
            	[
            		"9b40",
            		"汙汚汢汣汥汦汧汫",
            		4,
            		"汱汳汵汷汸決汻汼汿沀沄沇沊沋沍沎沑沒沕沖沗沘沚沜沝沞沠沢沨沬沯沰沴沵沶沷沺泀況泂泃泆泇泈泋泍泎泏泑泒泘"
            	],
            	[
            		"9b80",
            		"泙泚泜泝泟泤泦泧泩泬泭泲泴泹泿洀洂洃洅洆洈洉洊洍洏洐洑洓洔洕洖洘洜洝洟",
            		5,
            		"洦洨洩洬洭洯洰洴洶洷洸洺洿浀浂浄浉浌浐浕浖浗浘浛浝浟浡浢浤浥浧浨浫浬浭浰浱浲浳浵浶浹浺浻浽",
            		4,
            		"涃涄涆涇涊涋涍涏涐涒涖",
            		4,
            		"涜涢涥涬涭涰涱涳涴涶涷涹",
            		5,
            		"淁淂淃淈淉淊"
            	],
            	[
            		"9c40",
            		"淍淎淏淐淒淓淔淕淗淚淛淜淟淢淣淥淧淨淩淪淭淯淰淲淴淵淶淸淺淽",
            		7,
            		"渆渇済渉渋渏渒渓渕渘渙減渜渞渟渢渦渧渨渪測渮渰渱渳渵"
            	],
            	[
            		"9c80",
            		"渶渷渹渻",
            		7,
            		"湅",
            		7,
            		"湏湐湑湒湕湗湙湚湜湝湞湠",
            		10,
            		"湬湭湯",
            		14,
            		"満溁溂溄溇溈溊",
            		4,
            		"溑",
            		6,
            		"溙溚溛溝溞溠溡溣溤溦溨溩溫溬溭溮溰溳溵溸溹溼溾溿滀滃滄滅滆滈滉滊滌滍滎滐滒滖滘滙滛滜滝滣滧滪",
            		5
            	],
            	[
            		"9d40",
            		"滰滱滲滳滵滶滷滸滺",
            		7,
            		"漃漄漅漇漈漊",
            		4,
            		"漐漑漒漖",
            		9,
            		"漡漢漣漥漦漧漨漬漮漰漲漴漵漷",
            		6,
            		"漿潀潁潂"
            	],
            	[
            		"9d80",
            		"潃潄潅潈潉潊潌潎",
            		9,
            		"潙潚潛潝潟潠潡潣潤潥潧",
            		5,
            		"潯潰潱潳潵潶潷潹潻潽",
            		6,
            		"澅澆澇澊澋澏",
            		12,
            		"澝澞澟澠澢",
            		4,
            		"澨",
            		10,
            		"澴澵澷澸澺",
            		5,
            		"濁濃",
            		5,
            		"濊",
            		6,
            		"濓",
            		10,
            		"濟濢濣濤濥"
            	],
            	[
            		"9e40",
            		"濦",
            		7,
            		"濰",
            		32,
            		"瀒",
            		7,
            		"瀜",
            		6,
            		"瀤",
            		6
            	],
            	[
            		"9e80",
            		"瀫",
            		9,
            		"瀶瀷瀸瀺",
            		17,
            		"灍灎灐",
            		13,
            		"灟",
            		11,
            		"灮灱灲灳灴灷灹灺灻災炁炂炃炄炆炇炈炋炌炍炏炐炑炓炗炘炚炛炞",
            		12,
            		"炰炲炴炵炶為炾炿烄烅烆烇烉烋",
            		12,
            		"烚"
            	],
            	[
            		"9f40",
            		"烜烝烞烠烡烢烣烥烪烮烰",
            		6,
            		"烸烺烻烼烾",
            		10,
            		"焋",
            		4,
            		"焑焒焔焗焛",
            		10,
            		"焧",
            		7,
            		"焲焳焴"
            	],
            	[
            		"9f80",
            		"焵焷",
            		13,
            		"煆煇煈煉煋煍煏",
            		12,
            		"煝煟",
            		4,
            		"煥煩",
            		4,
            		"煯煰煱煴煵煶煷煹煻煼煾",
            		5,
            		"熅",
            		4,
            		"熋熌熍熎熐熑熒熓熕熖熗熚",
            		4,
            		"熡",
            		6,
            		"熩熪熫熭",
            		5,
            		"熴熶熷熸熺",
            		8,
            		"燄",
            		9,
            		"燏",
            		4
            	],
            	[
            		"a040",
            		"燖",
            		9,
            		"燡燢燣燤燦燨",
            		5,
            		"燯",
            		9,
            		"燺",
            		11,
            		"爇",
            		19
            	],
            	[
            		"a080",
            		"爛爜爞",
            		9,
            		"爩爫爭爮爯爲爳爴爺爼爾牀",
            		6,
            		"牉牊牋牎牏牐牑牓牔牕牗牘牚牜牞牠牣牤牥牨牪牫牬牭牰牱牳牴牶牷牸牻牼牽犂犃犅",
            		4,
            		"犌犎犐犑犓",
            		11,
            		"犠",
            		11,
            		"犮犱犲犳犵犺",
            		6,
            		"狅狆狇狉狊狋狌狏狑狓狔狕狖狘狚狛"
            	],
            	[
            		"a1a1",
            		"　、。·ˉˇ¨〃々—～‖…‘’“”〔〕〈",
            		7,
            		"〖〗【】±×÷∶∧∨∑∏∪∩∈∷√⊥∥∠⌒⊙∫∮≡≌≈∽∝≠≮≯≤≥∞∵∴♂♀°′″℃＄¤￠￡‰§№☆★○●◎◇◆□■△▲※→←↑↓〓"
            	],
            	[
            		"a2a1",
            		"ⅰ",
            		9
            	],
            	[
            		"a2b1",
            		"⒈",
            		19,
            		"⑴",
            		19,
            		"①",
            		9
            	],
            	[
            		"a2e5",
            		"㈠",
            		9
            	],
            	[
            		"a2f1",
            		"Ⅰ",
            		11
            	],
            	[
            		"a3a1",
            		"！＂＃￥％",
            		88,
            		"￣"
            	],
            	[
            		"a4a1",
            		"ぁ",
            		82
            	],
            	[
            		"a5a1",
            		"ァ",
            		85
            	],
            	[
            		"a6a1",
            		"Α",
            		16,
            		"Σ",
            		6
            	],
            	[
            		"a6c1",
            		"α",
            		16,
            		"σ",
            		6
            	],
            	[
            		"a6e0",
            		"︵︶︹︺︿﹀︽︾﹁﹂﹃﹄"
            	],
            	[
            		"a6ee",
            		"︻︼︷︸︱"
            	],
            	[
            		"a6f4",
            		"︳︴"
            	],
            	[
            		"a7a1",
            		"А",
            		5,
            		"ЁЖ",
            		25
            	],
            	[
            		"a7d1",
            		"а",
            		5,
            		"ёж",
            		25
            	],
            	[
            		"a840",
            		"ˊˋ˙–―‥‵℅℉↖↗↘↙∕∟∣≒≦≧⊿═",
            		35,
            		"▁",
            		6
            	],
            	[
            		"a880",
            		"█",
            		7,
            		"▓▔▕▼▽◢◣◤◥☉⊕〒〝〞"
            	],
            	[
            		"a8a1",
            		"āáǎàēéěèīíǐìōóǒòūúǔùǖǘǚǜüêɑ"
            	],
            	[
            		"a8bd",
            		"ńň"
            	],
            	[
            		"a8c0",
            		"ɡ"
            	],
            	[
            		"a8c5",
            		"ㄅ",
            		36
            	],
            	[
            		"a940",
            		"〡",
            		8,
            		"㊣㎎㎏㎜㎝㎞㎡㏄㏎㏑㏒㏕︰￢￤"
            	],
            	[
            		"a959",
            		"℡㈱"
            	],
            	[
            		"a95c",
            		"‐"
            	],
            	[
            		"a960",
            		"ー゛゜ヽヾ〆ゝゞ﹉",
            		9,
            		"﹔﹕﹖﹗﹙",
            		8
            	],
            	[
            		"a980",
            		"﹢",
            		4,
            		"﹨﹩﹪﹫"
            	],
            	[
            		"a996",
            		"〇"
            	],
            	[
            		"a9a4",
            		"─",
            		75
            	],
            	[
            		"aa40",
            		"狜狝狟狢",
            		5,
            		"狪狫狵狶狹狽狾狿猀猂猄",
            		5,
            		"猋猌猍猏猐猑猒猔猘猙猚猟猠猣猤猦猧猨猭猯猰猲猳猵猶猺猻猼猽獀",
            		8
            	],
            	[
            		"aa80",
            		"獉獊獋獌獎獏獑獓獔獕獖獘",
            		7,
            		"獡",
            		10,
            		"獮獰獱"
            	],
            	[
            		"ab40",
            		"獲",
            		11,
            		"獿",
            		4,
            		"玅玆玈玊玌玍玏玐玒玓玔玕玗玘玙玚玜玝玞玠玡玣",
            		5,
            		"玪玬玭玱玴玵玶玸玹玼玽玾玿珁珃",
            		4
            	],
            	[
            		"ab80",
            		"珋珌珎珒",
            		6,
            		"珚珛珜珝珟珡珢珣珤珦珨珪珫珬珮珯珰珱珳",
            		4
            	],
            	[
            		"ac40",
            		"珸",
            		10,
            		"琄琇琈琋琌琍琎琑",
            		8,
            		"琜",
            		5,
            		"琣琤琧琩琫琭琯琱琲琷",
            		4,
            		"琽琾琿瑀瑂",
            		11
            	],
            	[
            		"ac80",
            		"瑎",
            		6,
            		"瑖瑘瑝瑠",
            		12,
            		"瑮瑯瑱",
            		4,
            		"瑸瑹瑺"
            	],
            	[
            		"ad40",
            		"瑻瑼瑽瑿璂璄璅璆璈璉璊璌璍璏璑",
            		10,
            		"璝璟",
            		7,
            		"璪",
            		15,
            		"璻",
            		12
            	],
            	[
            		"ad80",
            		"瓈",
            		9,
            		"瓓",
            		8,
            		"瓝瓟瓡瓥瓧",
            		6,
            		"瓰瓱瓲"
            	],
            	[
            		"ae40",
            		"瓳瓵瓸",
            		6,
            		"甀甁甂甃甅",
            		7,
            		"甎甐甒甔甕甖甗甛甝甞甠",
            		4,
            		"甦甧甪甮甴甶甹甼甽甿畁畂畃畄畆畇畉畊畍畐畑畒畓畕畖畗畘"
            	],
            	[
            		"ae80",
            		"畝",
            		7,
            		"畧畨畩畫",
            		6,
            		"畳畵當畷畺",
            		4,
            		"疀疁疂疄疅疇"
            	],
            	[
            		"af40",
            		"疈疉疊疌疍疎疐疓疕疘疛疜疞疢疦",
            		4,
            		"疭疶疷疺疻疿痀痁痆痋痌痎痏痐痑痓痗痙痚痜痝痟痠痡痥痩痬痭痮痯痲痳痵痶痷痸痺痻痽痾瘂瘄瘆瘇"
            	],
            	[
            		"af80",
            		"瘈瘉瘋瘍瘎瘏瘑瘒瘓瘔瘖瘚瘜瘝瘞瘡瘣瘧瘨瘬瘮瘯瘱瘲瘶瘷瘹瘺瘻瘽癁療癄"
            	],
            	[
            		"b040",
            		"癅",
            		6,
            		"癎",
            		5,
            		"癕癗",
            		4,
            		"癝癟癠癡癢癤",
            		6,
            		"癬癭癮癰",
            		7,
            		"癹発發癿皀皁皃皅皉皊皌皍皏皐皒皔皕皗皘皚皛"
            	],
            	[
            		"b080",
            		"皜",
            		7,
            		"皥",
            		8,
            		"皯皰皳皵",
            		9,
            		"盀盁盃啊阿埃挨哎唉哀皑癌蔼矮艾碍爱隘鞍氨安俺按暗岸胺案肮昂盎凹敖熬翱袄傲奥懊澳芭捌扒叭吧笆八疤巴拔跋靶把耙坝霸罢爸白柏百摆佰败拜稗斑班搬扳般颁板版扮拌伴瓣半办绊邦帮梆榜膀绑棒磅蚌镑傍谤苞胞包褒剥"
            	],
            	[
            		"b140",
            		"盄盇盉盋盌盓盕盙盚盜盝盞盠",
            		4,
            		"盦",
            		7,
            		"盰盳盵盶盷盺盻盽盿眀眂眃眅眆眊県眎",
            		10,
            		"眛眜眝眞眡眣眤眥眧眪眫"
            	],
            	[
            		"b180",
            		"眬眮眰",
            		4,
            		"眹眻眽眾眿睂睄睅睆睈",
            		7,
            		"睒",
            		7,
            		"睜薄雹保堡饱宝抱报暴豹鲍爆杯碑悲卑北辈背贝钡倍狈备惫焙被奔苯本笨崩绷甭泵蹦迸逼鼻比鄙笔彼碧蓖蔽毕毙毖币庇痹闭敝弊必辟壁臂避陛鞭边编贬扁便变卞辨辩辫遍标彪膘表鳖憋别瘪彬斌濒滨宾摈兵冰柄丙秉饼炳"
            	],
            	[
            		"b240",
            		"睝睞睟睠睤睧睩睪睭",
            		11,
            		"睺睻睼瞁瞂瞃瞆",
            		5,
            		"瞏瞐瞓",
            		11,
            		"瞡瞣瞤瞦瞨瞫瞭瞮瞯瞱瞲瞴瞶",
            		4
            	],
            	[
            		"b280",
            		"瞼瞾矀",
            		12,
            		"矎",
            		8,
            		"矘矙矚矝",
            		4,
            		"矤病并玻菠播拨钵波博勃搏铂箔伯帛舶脖膊渤泊驳捕卜哺补埠不布步簿部怖擦猜裁材才财睬踩采彩菜蔡餐参蚕残惭惨灿苍舱仓沧藏操糙槽曹草厕策侧册测层蹭插叉茬茶查碴搽察岔差诧拆柴豺搀掺蝉馋谗缠铲产阐颤昌猖"
            	],
            	[
            		"b340",
            		"矦矨矪矯矰矱矲矴矵矷矹矺矻矼砃",
            		5,
            		"砊砋砎砏砐砓砕砙砛砞砠砡砢砤砨砪砫砮砯砱砲砳砵砶砽砿硁硂硃硄硆硈硉硊硋硍硏硑硓硔硘硙硚"
            	],
            	[
            		"b380",
            		"硛硜硞",
            		11,
            		"硯",
            		7,
            		"硸硹硺硻硽",
            		6,
            		"场尝常长偿肠厂敞畅唱倡超抄钞朝嘲潮巢吵炒车扯撤掣彻澈郴臣辰尘晨忱沉陈趁衬撑称城橙成呈乘程惩澄诚承逞骋秤吃痴持匙池迟弛驰耻齿侈尺赤翅斥炽充冲虫崇宠抽酬畴踌稠愁筹仇绸瞅丑臭初出橱厨躇锄雏滁除楚"
            	],
            	[
            		"b440",
            		"碄碅碆碈碊碋碏碐碒碔碕碖碙碝碞碠碢碤碦碨",
            		7,
            		"碵碶碷碸確碻碼碽碿磀磂磃磄磆磇磈磌磍磎磏磑磒磓磖磗磘磚",
            		9
            	],
            	[
            		"b480",
            		"磤磥磦磧磩磪磫磭",
            		4,
            		"磳磵磶磸磹磻",
            		5,
            		"礂礃礄礆",
            		6,
            		"础储矗搐触处揣川穿椽传船喘串疮窗幢床闯创吹炊捶锤垂春椿醇唇淳纯蠢戳绰疵茨磁雌辞慈瓷词此刺赐次聪葱囱匆从丛凑粗醋簇促蹿篡窜摧崔催脆瘁粹淬翠村存寸磋撮搓措挫错搭达答瘩打大呆歹傣戴带殆代贷袋待逮"
            	],
            	[
            		"b540",
            		"礍",
            		5,
            		"礔",
            		9,
            		"礟",
            		4,
            		"礥",
            		14,
            		"礵",
            		4,
            		"礽礿祂祃祄祅祇祊",
            		8,
            		"祔祕祘祙祡祣"
            	],
            	[
            		"b580",
            		"祤祦祩祪祫祬祮祰",
            		6,
            		"祹祻",
            		4,
            		"禂禃禆禇禈禉禋禌禍禎禐禑禒怠耽担丹单郸掸胆旦氮但惮淡诞弹蛋当挡党荡档刀捣蹈倒岛祷导到稻悼道盗德得的蹬灯登等瞪凳邓堤低滴迪敌笛狄涤翟嫡抵底地蒂第帝弟递缔颠掂滇碘点典靛垫电佃甸店惦奠淀殿碉叼雕凋刁掉吊钓调跌爹碟蝶迭谍叠"
            	],
            	[
            		"b640",
            		"禓",
            		6,
            		"禛",
            		11,
            		"禨",
            		10,
            		"禴",
            		4,
            		"禼禿秂秄秅秇秈秊秌秎秏秐秓秔秖秗秙",
            		5,
            		"秠秡秢秥秨秪"
            	],
            	[
            		"b680",
            		"秬秮秱",
            		6,
            		"秹秺秼秾秿稁稄稅稇稈稉稊稌稏",
            		4,
            		"稕稖稘稙稛稜丁盯叮钉顶鼎锭定订丢东冬董懂动栋侗恫冻洞兜抖斗陡豆逗痘都督毒犊独读堵睹赌杜镀肚度渡妒端短锻段断缎堆兑队对墩吨蹲敦顿囤钝盾遁掇哆多夺垛躲朵跺舵剁惰堕蛾峨鹅俄额讹娥恶厄扼遏鄂饿恩而儿耳尔饵洱二"
            	],
            	[
            		"b740",
            		"稝稟稡稢稤",
            		14,
            		"稴稵稶稸稺稾穀",
            		5,
            		"穇",
            		9,
            		"穒",
            		4,
            		"穘",
            		16
            	],
            	[
            		"b780",
            		"穩",
            		6,
            		"穱穲穳穵穻穼穽穾窂窅窇窉窊窋窌窎窏窐窓窔窙窚窛窞窡窢贰发罚筏伐乏阀法珐藩帆番翻樊矾钒繁凡烦反返范贩犯饭泛坊芳方肪房防妨仿访纺放菲非啡飞肥匪诽吠肺废沸费芬酚吩氛分纷坟焚汾粉奋份忿愤粪丰封枫蜂峰锋风疯烽逢冯缝讽奉凤佛否夫敷肤孵扶拂辐幅氟符伏俘服"
            	],
            	[
            		"b840",
            		"窣窤窧窩窪窫窮",
            		4,
            		"窴",
            		10,
            		"竀",
            		10,
            		"竌",
            		9,
            		"竗竘竚竛竜竝竡竢竤竧",
            		5,
            		"竮竰竱竲竳"
            	],
            	[
            		"b880",
            		"竴",
            		4,
            		"竻竼竾笀笁笂笅笇笉笌笍笎笐笒笓笖笗笘笚笜笝笟笡笢笣笧笩笭浮涪福袱弗甫抚辅俯釜斧脯腑府腐赴副覆赋复傅付阜父腹负富讣附妇缚咐噶嘎该改概钙盖溉干甘杆柑竿肝赶感秆敢赣冈刚钢缸肛纲岗港杠篙皋高膏羔糕搞镐稿告哥歌搁戈鸽胳疙割革葛格蛤阁隔铬个各给根跟耕更庚羹"
            	],
            	[
            		"b940",
            		"笯笰笲笴笵笶笷笹笻笽笿",
            		5,
            		"筆筈筊筍筎筓筕筗筙筜筞筟筡筣",
            		10,
            		"筯筰筳筴筶筸筺筼筽筿箁箂箃箄箆",
            		6,
            		"箎箏"
            	],
            	[
            		"b980",
            		"箑箒箓箖箘箙箚箛箞箟箠箣箤箥箮箯箰箲箳箵箶箷箹",
            		7,
            		"篂篃範埂耿梗工攻功恭龚供躬公宫弓巩汞拱贡共钩勾沟苟狗垢构购够辜菇咕箍估沽孤姑鼓古蛊骨谷股故顾固雇刮瓜剐寡挂褂乖拐怪棺关官冠观管馆罐惯灌贯光广逛瑰规圭硅归龟闺轨鬼诡癸桂柜跪贵刽辊滚棍锅郭国果裹过哈"
            	],
            	[
            		"ba40",
            		"篅篈築篊篋篍篎篏篐篒篔",
            		4,
            		"篛篜篞篟篠篢篣篤篧篨篩篫篬篭篯篰篲",
            		4,
            		"篸篹篺篻篽篿",
            		7,
            		"簈簉簊簍簎簐",
            		5,
            		"簗簘簙"
            	],
            	[
            		"ba80",
            		"簚",
            		4,
            		"簠",
            		5,
            		"簨簩簫",
            		12,
            		"簹",
            		5,
            		"籂骸孩海氦亥害骇酣憨邯韩含涵寒函喊罕翰撼捍旱憾悍焊汗汉夯杭航壕嚎豪毫郝好耗号浩呵喝荷菏核禾和何合盒貉阂河涸赫褐鹤贺嘿黑痕很狠恨哼亨横衡恒轰哄烘虹鸿洪宏弘红喉侯猴吼厚候后呼乎忽瑚壶葫胡蝴狐糊湖"
            	],
            	[
            		"bb40",
            		"籃",
            		9,
            		"籎",
            		36,
            		"籵",
            		5,
            		"籾",
            		9
            	],
            	[
            		"bb80",
            		"粈粊",
            		6,
            		"粓粔粖粙粚粛粠粡粣粦粧粨粩粫粬粭粯粰粴",
            		4,
            		"粺粻弧虎唬护互沪户花哗华猾滑画划化话槐徊怀淮坏欢环桓还缓换患唤痪豢焕涣宦幻荒慌黄磺蝗簧皇凰惶煌晃幌恍谎灰挥辉徽恢蛔回毁悔慧卉惠晦贿秽会烩汇讳诲绘荤昏婚魂浑混豁活伙火获或惑霍货祸击圾基机畸稽积箕"
            	],
            	[
            		"bc40",
            		"粿糀糂糃糄糆糉糋糎",
            		6,
            		"糘糚糛糝糞糡",
            		6,
            		"糩",
            		5,
            		"糰",
            		7,
            		"糹糺糼",
            		13,
            		"紋",
            		5
            	],
            	[
            		"bc80",
            		"紑",
            		14,
            		"紡紣紤紥紦紨紩紪紬紭紮細",
            		6,
            		"肌饥迹激讥鸡姬绩缉吉极棘辑籍集及急疾汲即嫉级挤几脊己蓟技冀季伎祭剂悸济寄寂计记既忌际妓继纪嘉枷夹佳家加荚颊贾甲钾假稼价架驾嫁歼监坚尖笺间煎兼肩艰奸缄茧检柬碱硷拣捡简俭剪减荐槛鉴践贱见键箭件"
            	],
            	[
            		"bd40",
            		"紷",
            		54,
            		"絯",
            		7
            	],
            	[
            		"bd80",
            		"絸",
            		32,
            		"健舰剑饯渐溅涧建僵姜将浆江疆蒋桨奖讲匠酱降蕉椒礁焦胶交郊浇骄娇嚼搅铰矫侥脚狡角饺缴绞剿教酵轿较叫窖揭接皆秸街阶截劫节桔杰捷睫竭洁结解姐戒藉芥界借介疥诫届巾筋斤金今津襟紧锦仅谨进靳晋禁近烬浸"
            	],
            	[
            		"be40",
            		"継",
            		12,
            		"綧",
            		6,
            		"綯",
            		42
            	],
            	[
            		"be80",
            		"線",
            		32,
            		"尽劲荆兢茎睛晶鲸京惊精粳经井警景颈静境敬镜径痉靖竟竞净炯窘揪究纠玖韭久灸九酒厩救旧臼舅咎就疚鞠拘狙疽居驹菊局咀矩举沮聚拒据巨具距踞锯俱句惧炬剧捐鹃娟倦眷卷绢撅攫抉掘倔爵觉决诀绝均菌钧军君峻"
            	],
            	[
            		"bf40",
            		"緻",
            		62
            	],
            	[
            		"bf80",
            		"縺縼",
            		4,
            		"繂",
            		4,
            		"繈",
            		21,
            		"俊竣浚郡骏喀咖卡咯开揩楷凯慨刊堪勘坎砍看康慷糠扛抗亢炕考拷烤靠坷苛柯棵磕颗科壳咳可渴克刻客课肯啃垦恳坑吭空恐孔控抠口扣寇枯哭窟苦酷库裤夸垮挎跨胯块筷侩快宽款匡筐狂框矿眶旷况亏盔岿窥葵奎魁傀"
            	],
            	[
            		"c040",
            		"繞",
            		35,
            		"纃",
            		23,
            		"纜纝纞"
            	],
            	[
            		"c080",
            		"纮纴纻纼绖绤绬绹缊缐缞缷缹缻",
            		6,
            		"罃罆",
            		9,
            		"罒罓馈愧溃坤昆捆困括扩廓阔垃拉喇蜡腊辣啦莱来赖蓝婪栏拦篮阑兰澜谰揽览懒缆烂滥琅榔狼廊郎朗浪捞劳牢老佬姥酪烙涝勒乐雷镭蕾磊累儡垒擂肋类泪棱楞冷厘梨犁黎篱狸离漓理李里鲤礼莉荔吏栗丽厉励砾历利傈例俐"
            	],
            	[
            		"c140",
            		"罖罙罛罜罝罞罠罣",
            		4,
            		"罫罬罭罯罰罳罵罶罷罸罺罻罼罽罿羀羂",
            		7,
            		"羋羍羏",
            		4,
            		"羕",
            		4,
            		"羛羜羠羢羣羥羦羨",
            		6,
            		"羱"
            	],
            	[
            		"c180",
            		"羳",
            		4,
            		"羺羻羾翀翂翃翄翆翇翈翉翋翍翏",
            		4,
            		"翖翗翙",
            		5,
            		"翢翣痢立粒沥隶力璃哩俩联莲连镰廉怜涟帘敛脸链恋炼练粮凉梁粱良两辆量晾亮谅撩聊僚疗燎寥辽潦了撂镣廖料列裂烈劣猎琳林磷霖临邻鳞淋凛赁吝拎玲菱零龄铃伶羚凌灵陵岭领另令溜琉榴硫馏留刘瘤流柳六龙聋咙笼窿"
            	],
            	[
            		"c240",
            		"翤翧翨翪翫翬翭翯翲翴",
            		6,
            		"翽翾翿耂耇耈耉耊耎耏耑耓耚耛耝耞耟耡耣耤耫",
            		5,
            		"耲耴耹耺耼耾聀聁聄聅聇聈聉聎聏聐聑聓聕聖聗"
            	],
            	[
            		"c280",
            		"聙聛",
            		13,
            		"聫",
            		5,
            		"聲",
            		11,
            		"隆垄拢陇楼娄搂篓漏陋芦卢颅庐炉掳卤虏鲁麓碌露路赂鹿潞禄录陆戮驴吕铝侣旅履屡缕虑氯律率滤绿峦挛孪滦卵乱掠略抡轮伦仑沦纶论萝螺罗逻锣箩骡裸落洛骆络妈麻玛码蚂马骂嘛吗埋买麦卖迈脉瞒馒蛮满蔓曼慢漫"
            	],
            	[
            		"c340",
            		"聾肁肂肅肈肊肍",
            		5,
            		"肔肕肗肙肞肣肦肧肨肬肰肳肵肶肸肹肻胅胇",
            		4,
            		"胏",
            		6,
            		"胘胟胠胢胣胦胮胵胷胹胻胾胿脀脁脃脄脅脇脈脋"
            	],
            	[
            		"c380",
            		"脌脕脗脙脛脜脝脟",
            		12,
            		"脭脮脰脳脴脵脷脹",
            		4,
            		"脿谩芒茫盲氓忙莽猫茅锚毛矛铆卯茂冒帽貌贸么玫枚梅酶霉煤没眉媒镁每美昧寐妹媚门闷们萌蒙檬盟锰猛梦孟眯醚靡糜迷谜弥米秘觅泌蜜密幂棉眠绵冕免勉娩缅面苗描瞄藐秒渺庙妙蔑灭民抿皿敏悯闽明螟鸣铭名命谬摸"
            	],
            	[
            		"c440",
            		"腀",
            		5,
            		"腇腉腍腎腏腒腖腗腘腛",
            		4,
            		"腡腢腣腤腦腨腪腫腬腯腲腳腵腶腷腸膁膃",
            		4,
            		"膉膋膌膍膎膐膒",
            		5,
            		"膙膚膞",
            		4,
            		"膤膥"
            	],
            	[
            		"c480",
            		"膧膩膫",
            		7,
            		"膴",
            		5,
            		"膼膽膾膿臄臅臇臈臉臋臍",
            		6,
            		"摹蘑模膜磨摩魔抹末莫墨默沫漠寞陌谋牟某拇牡亩姆母墓暮幕募慕木目睦牧穆拿哪呐钠那娜纳氖乃奶耐奈南男难囊挠脑恼闹淖呢馁内嫩能妮霓倪泥尼拟你匿腻逆溺蔫拈年碾撵捻念娘酿鸟尿捏聂孽啮镊镍涅您柠狞凝宁"
            	],
            	[
            		"c540",
            		"臔",
            		14,
            		"臤臥臦臨臩臫臮",
            		4,
            		"臵",
            		5,
            		"臽臿舃與",
            		4,
            		"舎舏舑舓舕",
            		5,
            		"舝舠舤舥舦舧舩舮舲舺舼舽舿"
            	],
            	[
            		"c580",
            		"艀艁艂艃艅艆艈艊艌艍艎艐",
            		7,
            		"艙艛艜艝艞艠",
            		7,
            		"艩拧泞牛扭钮纽脓浓农弄奴努怒女暖虐疟挪懦糯诺哦欧鸥殴藕呕偶沤啪趴爬帕怕琶拍排牌徘湃派攀潘盘磐盼畔判叛乓庞旁耪胖抛咆刨炮袍跑泡呸胚培裴赔陪配佩沛喷盆砰抨烹澎彭蓬棚硼篷膨朋鹏捧碰坯砒霹批披劈琵毗"
            	],
            	[
            		"c640",
            		"艪艫艬艭艱艵艶艷艸艻艼芀芁芃芅芆芇芉芌芐芓芔芕芖芚芛芞芠芢芣芧芲芵芶芺芻芼芿苀苂苃苅苆苉苐苖苙苚苝苢苧苨苩苪苬苭苮苰苲苳苵苶苸"
            	],
            	[
            		"c680",
            		"苺苼",
            		4,
            		"茊茋茍茐茒茓茖茘茙茝",
            		9,
            		"茩茪茮茰茲茷茻茽啤脾疲皮匹痞僻屁譬篇偏片骗飘漂瓢票撇瞥拼频贫品聘乒坪苹萍平凭瓶评屏坡泼颇婆破魄迫粕剖扑铺仆莆葡菩蒲埔朴圃普浦谱曝瀑期欺栖戚妻七凄漆柒沏其棋奇歧畦崎脐齐旗祈祁骑起岂乞企启契砌器气迄弃汽泣讫掐"
            	],
            	[
            		"c740",
            		"茾茿荁荂荄荅荈荊",
            		4,
            		"荓荕",
            		4,
            		"荝荢荰",
            		6,
            		"荹荺荾",
            		6,
            		"莇莈莊莋莌莍莏莐莑莔莕莖莗莙莚莝莟莡",
            		6,
            		"莬莭莮"
            	],
            	[
            		"c780",
            		"莯莵莻莾莿菂菃菄菆菈菉菋菍菎菐菑菒菓菕菗菙菚菛菞菢菣菤菦菧菨菫菬菭恰洽牵扦钎铅千迁签仟谦乾黔钱钳前潜遣浅谴堑嵌欠歉枪呛腔羌墙蔷强抢橇锹敲悄桥瞧乔侨巧鞘撬翘峭俏窍切茄且怯窃钦侵亲秦琴勤芹擒禽寝沁青轻氢倾卿清擎晴氰情顷请庆琼穷秋丘邱球求囚酋泅趋区蛆曲躯屈驱渠"
            	],
            	[
            		"c840",
            		"菮華菳",
            		4,
            		"菺菻菼菾菿萀萂萅萇萈萉萊萐萒",
            		5,
            		"萙萚萛萞",
            		5,
            		"萩",
            		7,
            		"萲",
            		5,
            		"萹萺萻萾",
            		7,
            		"葇葈葉"
            	],
            	[
            		"c880",
            		"葊",
            		6,
            		"葒",
            		4,
            		"葘葝葞葟葠葢葤",
            		4,
            		"葪葮葯葰葲葴葷葹葻葼取娶龋趣去圈颧权醛泉全痊拳犬券劝缺炔瘸却鹊榷确雀裙群然燃冉染瓤壤攘嚷让饶扰绕惹热壬仁人忍韧任认刃妊纫扔仍日戎茸蓉荣融熔溶容绒冗揉柔肉茹蠕儒孺如辱乳汝入褥软阮蕊瑞锐闰润若弱撒洒萨腮鳃塞赛三叁"
            	],
            	[
            		"c940",
            		"葽",
            		4,
            		"蒃蒄蒅蒆蒊蒍蒏",
            		7,
            		"蒘蒚蒛蒝蒞蒟蒠蒢",
            		12,
            		"蒰蒱蒳蒵蒶蒷蒻蒼蒾蓀蓂蓃蓅蓆蓇蓈蓋蓌蓎蓏蓒蓔蓕蓗"
            	],
            	[
            		"c980",
            		"蓘",
            		4,
            		"蓞蓡蓢蓤蓧",
            		4,
            		"蓭蓮蓯蓱",
            		10,
            		"蓽蓾蔀蔁蔂伞散桑嗓丧搔骚扫嫂瑟色涩森僧莎砂杀刹沙纱傻啥煞筛晒珊苫杉山删煽衫闪陕擅赡膳善汕扇缮墒伤商赏晌上尚裳梢捎稍烧芍勺韶少哨邵绍奢赊蛇舌舍赦摄射慑涉社设砷申呻伸身深娠绅神沈审婶甚肾慎渗声生甥牲升绳"
            	],
            	[
            		"ca40",
            		"蔃",
            		8,
            		"蔍蔎蔏蔐蔒蔔蔕蔖蔘蔙蔛蔜蔝蔞蔠蔢",
            		8,
            		"蔭",
            		9,
            		"蔾",
            		4,
            		"蕄蕅蕆蕇蕋",
            		10
            	],
            	[
            		"ca80",
            		"蕗蕘蕚蕛蕜蕝蕟",
            		4,
            		"蕥蕦蕧蕩",
            		8,
            		"蕳蕵蕶蕷蕸蕼蕽蕿薀薁省盛剩胜圣师失狮施湿诗尸虱十石拾时什食蚀实识史矢使屎驶始式示士世柿事拭誓逝势是嗜噬适仕侍释饰氏市恃室视试收手首守寿授售受瘦兽蔬枢梳殊抒输叔舒淑疏书赎孰熟薯暑曙署蜀黍鼠属术述树束戍竖墅庶数漱"
            	],
            	[
            		"cb40",
            		"薂薃薆薈",
            		6,
            		"薐",
            		10,
            		"薝",
            		6,
            		"薥薦薧薩薫薬薭薱",
            		5,
            		"薸薺",
            		6,
            		"藂",
            		6,
            		"藊",
            		4,
            		"藑藒"
            	],
            	[
            		"cb80",
            		"藔藖",
            		5,
            		"藝",
            		6,
            		"藥藦藧藨藪",
            		14,
            		"恕刷耍摔衰甩帅栓拴霜双爽谁水睡税吮瞬顺舜说硕朔烁斯撕嘶思私司丝死肆寺嗣四伺似饲巳松耸怂颂送宋讼诵搜艘擞嗽苏酥俗素速粟僳塑溯宿诉肃酸蒜算虽隋随绥髓碎岁穗遂隧祟孙损笋蓑梭唆缩琐索锁所塌他它她塔"
            	],
            	[
            		"cc40",
            		"藹藺藼藽藾蘀",
            		4,
            		"蘆",
            		10,
            		"蘒蘓蘔蘕蘗",
            		15,
            		"蘨蘪",
            		13,
            		"蘹蘺蘻蘽蘾蘿虀"
            	],
            	[
            		"cc80",
            		"虁",
            		11,
            		"虒虓處",
            		4,
            		"虛虜虝號虠虡虣",
            		7,
            		"獭挞蹋踏胎苔抬台泰酞太态汰坍摊贪瘫滩坛檀痰潭谭谈坦毯袒碳探叹炭汤塘搪堂棠膛唐糖倘躺淌趟烫掏涛滔绦萄桃逃淘陶讨套特藤腾疼誊梯剔踢锑提题蹄啼体替嚏惕涕剃屉天添填田甜恬舔腆挑条迢眺跳贴铁帖厅听烃"
            	],
            	[
            		"cd40",
            		"虭虯虰虲",
            		6,
            		"蚃",
            		6,
            		"蚎",
            		4,
            		"蚔蚖",
            		5,
            		"蚞",
            		4,
            		"蚥蚦蚫蚭蚮蚲蚳蚷蚸蚹蚻",
            		4,
            		"蛁蛂蛃蛅蛈蛌蛍蛒蛓蛕蛖蛗蛚蛜"
            	],
            	[
            		"cd80",
            		"蛝蛠蛡蛢蛣蛥蛦蛧蛨蛪蛫蛬蛯蛵蛶蛷蛺蛻蛼蛽蛿蜁蜄蜅蜆蜋蜌蜎蜏蜐蜑蜔蜖汀廷停亭庭挺艇通桐酮瞳同铜彤童桶捅筒统痛偷投头透凸秃突图徒途涂屠土吐兔湍团推颓腿蜕褪退吞屯臀拖托脱鸵陀驮驼椭妥拓唾挖哇蛙洼娃瓦袜歪外豌弯湾玩顽丸烷完碗挽晚皖惋宛婉万腕汪王亡枉网往旺望忘妄威"
            	],
            	[
            		"ce40",
            		"蜙蜛蜝蜟蜠蜤蜦蜧蜨蜪蜫蜬蜭蜯蜰蜲蜳蜵蜶蜸蜹蜺蜼蜽蝀",
            		6,
            		"蝊蝋蝍蝏蝐蝑蝒蝔蝕蝖蝘蝚",
            		5,
            		"蝡蝢蝦",
            		7,
            		"蝯蝱蝲蝳蝵"
            	],
            	[
            		"ce80",
            		"蝷蝸蝹蝺蝿螀螁螄螆螇螉螊螌螎",
            		4,
            		"螔螕螖螘",
            		6,
            		"螠",
            		4,
            		"巍微危韦违桅围唯惟为潍维苇萎委伟伪尾纬未蔚味畏胃喂魏位渭谓尉慰卫瘟温蚊文闻纹吻稳紊问嗡翁瓮挝蜗涡窝我斡卧握沃巫呜钨乌污诬屋无芜梧吾吴毋武五捂午舞伍侮坞戊雾晤物勿务悟误昔熙析西硒矽晰嘻吸锡牺"
            	],
            	[
            		"cf40",
            		"螥螦螧螩螪螮螰螱螲螴螶螷螸螹螻螼螾螿蟁",
            		4,
            		"蟇蟈蟉蟌",
            		4,
            		"蟔",
            		6,
            		"蟜蟝蟞蟟蟡蟢蟣蟤蟦蟧蟨蟩蟫蟬蟭蟯",
            		9
            	],
            	[
            		"cf80",
            		"蟺蟻蟼蟽蟿蠀蠁蠂蠄",
            		5,
            		"蠋",
            		7,
            		"蠔蠗蠘蠙蠚蠜",
            		4,
            		"蠣稀息希悉膝夕惜熄烯溪汐犀檄袭席习媳喜铣洗系隙戏细瞎虾匣霞辖暇峡侠狭下厦夏吓掀锨先仙鲜纤咸贤衔舷闲涎弦嫌显险现献县腺馅羡宪陷限线相厢镶香箱襄湘乡翔祥详想响享项巷橡像向象萧硝霄削哮嚣销消宵淆晓"
            	],
            	[
            		"d040",
            		"蠤",
            		13,
            		"蠳",
            		5,
            		"蠺蠻蠽蠾蠿衁衂衃衆",
            		5,
            		"衎",
            		5,
            		"衕衖衘衚",
            		6,
            		"衦衧衪衭衯衱衳衴衵衶衸衹衺"
            	],
            	[
            		"d080",
            		"衻衼袀袃袆袇袉袊袌袎袏袐袑袓袔袕袗",
            		4,
            		"袝",
            		4,
            		"袣袥",
            		5,
            		"小孝校肖啸笑效楔些歇蝎鞋协挟携邪斜胁谐写械卸蟹懈泄泻谢屑薪芯锌欣辛新忻心信衅星腥猩惺兴刑型形邢行醒幸杏性姓兄凶胸匈汹雄熊休修羞朽嗅锈秀袖绣墟戌需虚嘘须徐许蓄酗叙旭序畜恤絮婿绪续轩喧宣悬旋玄"
            	],
            	[
            		"d140",
            		"袬袮袯袰袲",
            		4,
            		"袸袹袺袻袽袾袿裀裃裄裇裈裊裋裌裍裏裐裑裓裖裗裚",
            		4,
            		"裠裡裦裧裩",
            		6,
            		"裲裵裶裷裺裻製裿褀褁褃",
            		5
            	],
            	[
            		"d180",
            		"褉褋",
            		4,
            		"褑褔",
            		4,
            		"褜",
            		4,
            		"褢褣褤褦褧褨褩褬褭褮褯褱褲褳褵褷选癣眩绚靴薛学穴雪血勋熏循旬询寻驯巡殉汛训讯逊迅压押鸦鸭呀丫芽牙蚜崖衙涯雅哑亚讶焉咽阉烟淹盐严研蜒岩延言颜阎炎沿奄掩眼衍演艳堰燕厌砚雁唁彦焰宴谚验殃央鸯秧杨扬佯疡羊洋阳氧仰痒养样漾邀腰妖瑶"
            	],
            	[
            		"d240",
            		"褸",
            		8,
            		"襂襃襅",
            		24,
            		"襠",
            		5,
            		"襧",
            		19,
            		"襼"
            	],
            	[
            		"d280",
            		"襽襾覀覂覄覅覇",
            		26,
            		"摇尧遥窑谣姚咬舀药要耀椰噎耶爷野冶也页掖业叶曳腋夜液一壹医揖铱依伊衣颐夷遗移仪胰疑沂宜姨彝椅蚁倚已乙矣以艺抑易邑屹亿役臆逸肄疫亦裔意毅忆义益溢诣议谊译异翼翌绎茵荫因殷音阴姻吟银淫寅饮尹引隐"
            	],
            	[
            		"d340",
            		"覢",
            		30,
            		"觃觍觓觔觕觗觘觙觛觝觟觠觡觢觤觧觨觩觪觬觭觮觰觱觲觴",
            		6
            	],
            	[
            		"d380",
            		"觻",
            		4,
            		"訁",
            		5,
            		"計",
            		21,
            		"印英樱婴鹰应缨莹萤营荧蝇迎赢盈影颖硬映哟拥佣臃痈庸雍踊蛹咏泳涌永恿勇用幽优悠忧尤由邮铀犹油游酉有友右佑釉诱又幼迂淤于盂榆虞愚舆余俞逾鱼愉渝渔隅予娱雨与屿禹宇语羽玉域芋郁吁遇喻峪御愈欲狱育誉"
            	],
            	[
            		"d440",
            		"訞",
            		31,
            		"訿",
            		8,
            		"詉",
            		21
            	],
            	[
            		"d480",
            		"詟",
            		25,
            		"詺",
            		6,
            		"浴寓裕预豫驭鸳渊冤元垣袁原援辕园员圆猿源缘远苑愿怨院曰约越跃钥岳粤月悦阅耘云郧匀陨允运蕴酝晕韵孕匝砸杂栽哉灾宰载再在咱攒暂赞赃脏葬遭糟凿藻枣早澡蚤躁噪造皂灶燥责择则泽贼怎增憎曾赠扎喳渣札轧"
            	],
            	[
            		"d540",
            		"誁",
            		7,
            		"誋",
            		7,
            		"誔",
            		46
            	],
            	[
            		"d580",
            		"諃",
            		32,
            		"铡闸眨栅榨咋乍炸诈摘斋宅窄债寨瞻毡詹粘沾盏斩辗崭展蘸栈占战站湛绽樟章彰漳张掌涨杖丈帐账仗胀瘴障招昭找沼赵照罩兆肇召遮折哲蛰辙者锗蔗这浙珍斟真甄砧臻贞针侦枕疹诊震振镇阵蒸挣睁征狰争怔整拯正政"
            	],
            	[
            		"d640",
            		"諤",
            		34,
            		"謈",
            		27
            	],
            	[
            		"d680",
            		"謤謥謧",
            		30,
            		"帧症郑证芝枝支吱蜘知肢脂汁之织职直植殖执值侄址指止趾只旨纸志挚掷至致置帜峙制智秩稚质炙痔滞治窒中盅忠钟衷终种肿重仲众舟周州洲诌粥轴肘帚咒皱宙昼骤珠株蛛朱猪诸诛逐竹烛煮拄瞩嘱主著柱助蛀贮铸筑"
            	],
            	[
            		"d740",
            		"譆",
            		31,
            		"譧",
            		4,
            		"譭",
            		25
            	],
            	[
            		"d780",
            		"讇",
            		24,
            		"讬讱讻诇诐诪谉谞住注祝驻抓爪拽专砖转撰赚篆桩庄装妆撞壮状椎锥追赘坠缀谆准捉拙卓桌琢茁酌啄着灼浊兹咨资姿滋淄孜紫仔籽滓子自渍字鬃棕踪宗综总纵邹走奏揍租足卒族祖诅阻组钻纂嘴醉最罪尊遵昨左佐柞做作坐座"
            	],
            	[
            		"d840",
            		"谸",
            		8,
            		"豂豃豄豅豈豊豋豍",
            		7,
            		"豖豗豘豙豛",
            		5,
            		"豣",
            		6,
            		"豬",
            		6,
            		"豴豵豶豷豻",
            		6,
            		"貃貄貆貇"
            	],
            	[
            		"d880",
            		"貈貋貍",
            		6,
            		"貕貖貗貙",
            		20,
            		"亍丌兀丐廿卅丕亘丞鬲孬噩丨禺丿匕乇夭爻卮氐囟胤馗毓睾鼗丶亟鼐乜乩亓芈孛啬嘏仄厍厝厣厥厮靥赝匚叵匦匮匾赜卦卣刂刈刎刭刳刿剀剌剞剡剜蒯剽劂劁劐劓冂罔亻仃仉仂仨仡仫仞伛仳伢佤仵伥伧伉伫佞佧攸佚佝"
            	],
            	[
            		"d940",
            		"貮",
            		62
            	],
            	[
            		"d980",
            		"賭",
            		32,
            		"佟佗伲伽佶佴侑侉侃侏佾佻侪佼侬侔俦俨俪俅俚俣俜俑俟俸倩偌俳倬倏倮倭俾倜倌倥倨偾偃偕偈偎偬偻傥傧傩傺僖儆僭僬僦僮儇儋仝氽佘佥俎龠汆籴兮巽黉馘冁夔勹匍訇匐凫夙兕亠兖亳衮袤亵脔裒禀嬴蠃羸冫冱冽冼"
            	],
            	[
            		"da40",
            		"贎",
            		14,
            		"贠赑赒赗赟赥赨赩赪赬赮赯赱赲赸",
            		8,
            		"趂趃趆趇趈趉趌",
            		4,
            		"趒趓趕",
            		9,
            		"趠趡"
            	],
            	[
            		"da80",
            		"趢趤",
            		12,
            		"趲趶趷趹趻趽跀跁跂跅跇跈跉跊跍跐跒跓跔凇冖冢冥讠讦讧讪讴讵讷诂诃诋诏诎诒诓诔诖诘诙诜诟诠诤诨诩诮诰诳诶诹诼诿谀谂谄谇谌谏谑谒谔谕谖谙谛谘谝谟谠谡谥谧谪谫谮谯谲谳谵谶卩卺阝阢阡阱阪阽阼陂陉陔陟陧陬陲陴隈隍隗隰邗邛邝邙邬邡邴邳邶邺"
            	],
            	[
            		"db40",
            		"跕跘跙跜跠跡跢跥跦跧跩跭跮跰跱跲跴跶跼跾",
            		6,
            		"踆踇踈踋踍踎踐踑踒踓踕",
            		7,
            		"踠踡踤",
            		4,
            		"踫踭踰踲踳踴踶踷踸踻踼踾"
            	],
            	[
            		"db80",
            		"踿蹃蹅蹆蹌",
            		4,
            		"蹓",
            		5,
            		"蹚",
            		11,
            		"蹧蹨蹪蹫蹮蹱邸邰郏郅邾郐郄郇郓郦郢郜郗郛郫郯郾鄄鄢鄞鄣鄱鄯鄹酃酆刍奂劢劬劭劾哿勐勖勰叟燮矍廴凵凼鬯厶弁畚巯坌垩垡塾墼壅壑圩圬圪圳圹圮圯坜圻坂坩垅坫垆坼坻坨坭坶坳垭垤垌垲埏垧垴垓垠埕埘埚埙埒垸埴埯埸埤埝"
            	],
            	[
            		"dc40",
            		"蹳蹵蹷",
            		4,
            		"蹽蹾躀躂躃躄躆躈",
            		6,
            		"躑躒躓躕",
            		6,
            		"躝躟",
            		11,
            		"躭躮躰躱躳",
            		6,
            		"躻",
            		7
            	],
            	[
            		"dc80",
            		"軃",
            		10,
            		"軏",
            		21,
            		"堋堍埽埭堀堞堙塄堠塥塬墁墉墚墀馨鼙懿艹艽艿芏芊芨芄芎芑芗芙芫芸芾芰苈苊苣芘芷芮苋苌苁芩芴芡芪芟苄苎芤苡茉苷苤茏茇苜苴苒苘茌苻苓茑茚茆茔茕苠苕茜荑荛荜茈莒茼茴茱莛荞茯荏荇荃荟荀茗荠茭茺茳荦荥"
            	],
            	[
            		"dd40",
            		"軥",
            		62
            	],
            	[
            		"dd80",
            		"輤",
            		32,
            		"荨茛荩荬荪荭荮莰荸莳莴莠莪莓莜莅荼莶莩荽莸荻莘莞莨莺莼菁萁菥菘堇萘萋菝菽菖萜萸萑萆菔菟萏萃菸菹菪菅菀萦菰菡葜葑葚葙葳蒇蒈葺蒉葸萼葆葩葶蒌蒎萱葭蓁蓍蓐蓦蒽蓓蓊蒿蒺蓠蒡蒹蒴蒗蓥蓣蔌甍蔸蓰蔹蔟蔺"
            	],
            	[
            		"de40",
            		"轅",
            		32,
            		"轪辀辌辒辝辠辡辢辤辥辦辧辪辬辭辮辯農辳辴辵辷辸辺辻込辿迀迃迆"
            	],
            	[
            		"de80",
            		"迉",
            		4,
            		"迏迒迖迗迚迠迡迣迧迬迯迱迲迴迵迶迺迻迼迾迿逇逈逌逎逓逕逘蕖蔻蓿蓼蕙蕈蕨蕤蕞蕺瞢蕃蕲蕻薤薨薇薏蕹薮薜薅薹薷薰藓藁藜藿蘧蘅蘩蘖蘼廾弈夼奁耷奕奚奘匏尢尥尬尴扌扪抟抻拊拚拗拮挢拶挹捋捃掭揶捱捺掎掴捭掬掊捩掮掼揲揸揠揿揄揞揎摒揆掾摅摁搋搛搠搌搦搡摞撄摭撖"
            	],
            	[
            		"df40",
            		"這逜連逤逥逧",
            		5,
            		"逰",
            		4,
            		"逷逹逺逽逿遀遃遅遆遈",
            		4,
            		"過達違遖遙遚遜",
            		5,
            		"遤遦遧適遪遫遬遯",
            		4,
            		"遶",
            		6,
            		"遾邁"
            	],
            	[
            		"df80",
            		"還邅邆邇邉邊邌",
            		4,
            		"邒邔邖邘邚邜邞邟邠邤邥邧邨邩邫邭邲邷邼邽邿郀摺撷撸撙撺擀擐擗擤擢攉攥攮弋忒甙弑卟叱叽叩叨叻吒吖吆呋呒呓呔呖呃吡呗呙吣吲咂咔呷呱呤咚咛咄呶呦咝哐咭哂咴哒咧咦哓哔呲咣哕咻咿哌哙哚哜咩咪咤哝哏哞唛哧唠哽唔哳唢唣唏唑唧唪啧喏喵啉啭啁啕唿啐唼"
            	],
            	[
            		"e040",
            		"郂郃郆郈郉郋郌郍郒郔郕郖郘郙郚郞郟郠郣郤郥郩郪郬郮郰郱郲郳郵郶郷郹郺郻郼郿鄀鄁鄃鄅",
            		19,
            		"鄚鄛鄜"
            	],
            	[
            		"e080",
            		"鄝鄟鄠鄡鄤",
            		10,
            		"鄰鄲",
            		6,
            		"鄺",
            		8,
            		"酄唷啖啵啶啷唳唰啜喋嗒喃喱喹喈喁喟啾嗖喑啻嗟喽喾喔喙嗪嗷嗉嘟嗑嗫嗬嗔嗦嗝嗄嗯嗥嗲嗳嗌嗍嗨嗵嗤辔嘞嘈嘌嘁嘤嘣嗾嘀嘧嘭噘嘹噗嘬噍噢噙噜噌噔嚆噤噱噫噻噼嚅嚓嚯囔囗囝囡囵囫囹囿圄圊圉圜帏帙帔帑帱帻帼"
            	],
            	[
            		"e140",
            		"酅酇酈酑酓酔酕酖酘酙酛酜酟酠酦酧酨酫酭酳酺酻酼醀",
            		4,
            		"醆醈醊醎醏醓",
            		6,
            		"醜",
            		5,
            		"醤",
            		5,
            		"醫醬醰醱醲醳醶醷醸醹醻"
            	],
            	[
            		"e180",
            		"醼",
            		10,
            		"釈釋釐釒",
            		9,
            		"針",
            		8,
            		"帷幄幔幛幞幡岌屺岍岐岖岈岘岙岑岚岜岵岢岽岬岫岱岣峁岷峄峒峤峋峥崂崃崧崦崮崤崞崆崛嵘崾崴崽嵬嵛嵯嵝嵫嵋嵊嵩嵴嶂嶙嶝豳嶷巅彳彷徂徇徉後徕徙徜徨徭徵徼衢彡犭犰犴犷犸狃狁狎狍狒狨狯狩狲狴狷猁狳猃狺"
            	],
            	[
            		"e240",
            		"釦",
            		62
            	],
            	[
            		"e280",
            		"鈥",
            		32,
            		"狻猗猓猡猊猞猝猕猢猹猥猬猸猱獐獍獗獠獬獯獾舛夥飧夤夂饣饧",
            		5,
            		"饴饷饽馀馄馇馊馍馐馑馓馔馕庀庑庋庖庥庠庹庵庾庳赓廒廑廛廨廪膺忄忉忖忏怃忮怄忡忤忾怅怆忪忭忸怙怵怦怛怏怍怩怫怊怿怡恸恹恻恺恂"
            	],
            	[
            		"e340",
            		"鉆",
            		45,
            		"鉵",
            		16
            	],
            	[
            		"e380",
            		"銆",
            		7,
            		"銏",
            		24,
            		"恪恽悖悚悭悝悃悒悌悛惬悻悱惝惘惆惚悴愠愦愕愣惴愀愎愫慊慵憬憔憧憷懔懵忝隳闩闫闱闳闵闶闼闾阃阄阆阈阊阋阌阍阏阒阕阖阗阙阚丬爿戕氵汔汜汊沣沅沐沔沌汨汩汴汶沆沩泐泔沭泷泸泱泗沲泠泖泺泫泮沱泓泯泾"
            	],
            	[
            		"e440",
            		"銨",
            		5,
            		"銯",
            		24,
            		"鋉",
            		31
            	],
            	[
            		"e480",
            		"鋩",
            		32,
            		"洹洧洌浃浈洇洄洙洎洫浍洮洵洚浏浒浔洳涑浯涞涠浞涓涔浜浠浼浣渚淇淅淞渎涿淠渑淦淝淙渖涫渌涮渫湮湎湫溲湟溆湓湔渲渥湄滟溱溘滠漭滢溥溧溽溻溷滗溴滏溏滂溟潢潆潇漤漕滹漯漶潋潴漪漉漩澉澍澌潸潲潼潺濑"
            	],
            	[
            		"e540",
            		"錊",
            		51,
            		"錿",
            		10
            	],
            	[
            		"e580",
            		"鍊",
            		31,
            		"鍫濉澧澹澶濂濡濮濞濠濯瀚瀣瀛瀹瀵灏灞宀宄宕宓宥宸甯骞搴寤寮褰寰蹇謇辶迓迕迥迮迤迩迦迳迨逅逄逋逦逑逍逖逡逵逶逭逯遄遑遒遐遨遘遢遛暹遴遽邂邈邃邋彐彗彖彘尻咫屐屙孱屣屦羼弪弩弭艴弼鬻屮妁妃妍妩妪妣"
            	],
            	[
            		"e640",
            		"鍬",
            		34,
            		"鎐",
            		27
            	],
            	[
            		"e680",
            		"鎬",
            		29,
            		"鏋鏌鏍妗姊妫妞妤姒妲妯姗妾娅娆姝娈姣姘姹娌娉娲娴娑娣娓婀婧婊婕娼婢婵胬媪媛婷婺媾嫫媲嫒嫔媸嫠嫣嫱嫖嫦嫘嫜嬉嬗嬖嬲嬷孀尕尜孚孥孳孑孓孢驵驷驸驺驿驽骀骁骅骈骊骐骒骓骖骘骛骜骝骟骠骢骣骥骧纟纡纣纥纨纩"
            	],
            	[
            		"e740",
            		"鏎",
            		7,
            		"鏗",
            		54
            	],
            	[
            		"e780",
            		"鐎",
            		32,
            		"纭纰纾绀绁绂绉绋绌绐绔绗绛绠绡绨绫绮绯绱绲缍绶绺绻绾缁缂缃缇缈缋缌缏缑缒缗缙缜缛缟缡",
            		6,
            		"缪缫缬缭缯",
            		4,
            		"缵幺畿巛甾邕玎玑玮玢玟珏珂珑玷玳珀珉珈珥珙顼琊珩珧珞玺珲琏琪瑛琦琥琨琰琮琬"
            	],
            	[
            		"e840",
            		"鐯",
            		14,
            		"鐿",
            		43,
            		"鑬鑭鑮鑯"
            	],
            	[
            		"e880",
            		"鑰",
            		20,
            		"钑钖钘铇铏铓铔铚铦铻锜锠琛琚瑁瑜瑗瑕瑙瑷瑭瑾璜璎璀璁璇璋璞璨璩璐璧瓒璺韪韫韬杌杓杞杈杩枥枇杪杳枘枧杵枨枞枭枋杷杼柰栉柘栊柩枰栌柙枵柚枳柝栀柃枸柢栎柁柽栲栳桠桡桎桢桄桤梃栝桕桦桁桧桀栾桊桉栩梵梏桴桷梓桫棂楮棼椟椠棹"
            	],
            	[
            		"e940",
            		"锧锳锽镃镈镋镕镚镠镮镴镵長",
            		7,
            		"門",
            		42
            	],
            	[
            		"e980",
            		"閫",
            		32,
            		"椤棰椋椁楗棣椐楱椹楠楂楝榄楫榀榘楸椴槌榇榈槎榉楦楣楹榛榧榻榫榭槔榱槁槊槟榕槠榍槿樯槭樗樘橥槲橄樾檠橐橛樵檎橹樽樨橘橼檑檐檩檗檫猷獒殁殂殇殄殒殓殍殚殛殡殪轫轭轱轲轳轵轶轸轷轹轺轼轾辁辂辄辇辋"
            	],
            	[
            		"ea40",
            		"闌",
            		27,
            		"闬闿阇阓阘阛阞阠阣",
            		6,
            		"阫阬阭阯阰阷阸阹阺阾陁陃陊陎陏陑陒陓陖陗"
            	],
            	[
            		"ea80",
            		"陘陙陚陜陝陞陠陣陥陦陫陭",
            		4,
            		"陳陸",
            		12,
            		"隇隉隊辍辎辏辘辚軎戋戗戛戟戢戡戥戤戬臧瓯瓴瓿甏甑甓攴旮旯旰昊昙杲昃昕昀炅曷昝昴昱昶昵耆晟晔晁晏晖晡晗晷暄暌暧暝暾曛曜曦曩贲贳贶贻贽赀赅赆赈赉赇赍赕赙觇觊觋觌觎觏觐觑牮犟牝牦牯牾牿犄犋犍犏犒挈挲掰"
            	],
            	[
            		"eb40",
            		"隌階隑隒隓隕隖隚際隝",
            		9,
            		"隨",
            		7,
            		"隱隲隴隵隷隸隺隻隿雂雃雈雊雋雐雑雓雔雖",
            		9,
            		"雡",
            		6,
            		"雫"
            	],
            	[
            		"eb80",
            		"雬雭雮雰雱雲雴雵雸雺電雼雽雿霂霃霅霊霋霌霐霑霒霔霕霗",
            		4,
            		"霝霟霠搿擘耄毪毳毽毵毹氅氇氆氍氕氘氙氚氡氩氤氪氲攵敕敫牍牒牖爰虢刖肟肜肓肼朊肽肱肫肭肴肷胧胨胩胪胛胂胄胙胍胗朐胝胫胱胴胭脍脎胲胼朕脒豚脶脞脬脘脲腈腌腓腴腙腚腱腠腩腼腽腭腧塍媵膈膂膑滕膣膪臌朦臊膻"
            	],
            	[
            		"ec40",
            		"霡",
            		8,
            		"霫霬霮霯霱霳",
            		4,
            		"霺霻霼霽霿",
            		18,
            		"靔靕靗靘靚靜靝靟靣靤靦靧靨靪",
            		7
            	],
            	[
            		"ec80",
            		"靲靵靷",
            		4,
            		"靽",
            		7,
            		"鞆",
            		4,
            		"鞌鞎鞏鞐鞓鞕鞖鞗鞙",
            		4,
            		"臁膦欤欷欹歃歆歙飑飒飓飕飙飚殳彀毂觳斐齑斓於旆旄旃旌旎旒旖炀炜炖炝炻烀炷炫炱烨烊焐焓焖焯焱煳煜煨煅煲煊煸煺熘熳熵熨熠燠燔燧燹爝爨灬焘煦熹戾戽扃扈扉礻祀祆祉祛祜祓祚祢祗祠祯祧祺禅禊禚禧禳忑忐"
            	],
            	[
            		"ed40",
            		"鞞鞟鞡鞢鞤",
            		6,
            		"鞬鞮鞰鞱鞳鞵",
            		46
            	],
            	[
            		"ed80",
            		"韤韥韨韮",
            		4,
            		"韴韷",
            		23,
            		"怼恝恚恧恁恙恣悫愆愍慝憩憝懋懑戆肀聿沓泶淼矶矸砀砉砗砘砑斫砭砜砝砹砺砻砟砼砥砬砣砩硎硭硖硗砦硐硇硌硪碛碓碚碇碜碡碣碲碹碥磔磙磉磬磲礅磴礓礤礞礴龛黹黻黼盱眄眍盹眇眈眚眢眙眭眦眵眸睐睑睇睃睚睨"
            	],
            	[
            		"ee40",
            		"頏",
            		62
            	],
            	[
            		"ee80",
            		"顎",
            		32,
            		"睢睥睿瞍睽瞀瞌瞑瞟瞠瞰瞵瞽町畀畎畋畈畛畲畹疃罘罡罟詈罨罴罱罹羁罾盍盥蠲钅钆钇钋钊钌钍钏钐钔钗钕钚钛钜钣钤钫钪钭钬钯钰钲钴钶",
            		4,
            		"钼钽钿铄铈",
            		6,
            		"铐铑铒铕铖铗铙铘铛铞铟铠铢铤铥铧铨铪"
            	],
            	[
            		"ef40",
            		"顯",
            		5,
            		"颋颎颒颕颙颣風",
            		37,
            		"飏飐飔飖飗飛飜飝飠",
            		4
            	],
            	[
            		"ef80",
            		"飥飦飩",
            		30,
            		"铩铫铮铯铳铴铵铷铹铼铽铿锃锂锆锇锉锊锍锎锏锒",
            		4,
            		"锘锛锝锞锟锢锪锫锩锬锱锲锴锶锷锸锼锾锿镂锵镄镅镆镉镌镎镏镒镓镔镖镗镘镙镛镞镟镝镡镢镤",
            		8,
            		"镯镱镲镳锺矧矬雉秕秭秣秫稆嵇稃稂稞稔"
            	],
            	[
            		"f040",
            		"餈",
            		4,
            		"餎餏餑",
            		28,
            		"餯",
            		26
            	],
            	[
            		"f080",
            		"饊",
            		9,
            		"饖",
            		12,
            		"饤饦饳饸饹饻饾馂馃馉稹稷穑黏馥穰皈皎皓皙皤瓞瓠甬鸠鸢鸨",
            		4,
            		"鸲鸱鸶鸸鸷鸹鸺鸾鹁鹂鹄鹆鹇鹈鹉鹋鹌鹎鹑鹕鹗鹚鹛鹜鹞鹣鹦",
            		6,
            		"鹱鹭鹳疒疔疖疠疝疬疣疳疴疸痄疱疰痃痂痖痍痣痨痦痤痫痧瘃痱痼痿瘐瘀瘅瘌瘗瘊瘥瘘瘕瘙"
            	],
            	[
            		"f140",
            		"馌馎馚",
            		10,
            		"馦馧馩",
            		47
            	],
            	[
            		"f180",
            		"駙",
            		32,
            		"瘛瘼瘢瘠癀瘭瘰瘿瘵癃瘾瘳癍癞癔癜癖癫癯翊竦穸穹窀窆窈窕窦窠窬窨窭窳衤衩衲衽衿袂袢裆袷袼裉裢裎裣裥裱褚裼裨裾裰褡褙褓褛褊褴褫褶襁襦襻疋胥皲皴矜耒耔耖耜耠耢耥耦耧耩耨耱耋耵聃聆聍聒聩聱覃顸颀颃"
            	],
            	[
            		"f240",
            		"駺",
            		62
            	],
            	[
            		"f280",
            		"騹",
            		32,
            		"颉颌颍颏颔颚颛颞颟颡颢颥颦虍虔虬虮虿虺虼虻蚨蚍蚋蚬蚝蚧蚣蚪蚓蚩蚶蛄蚵蛎蚰蚺蚱蚯蛉蛏蚴蛩蛱蛲蛭蛳蛐蜓蛞蛴蛟蛘蛑蜃蜇蛸蜈蜊蜍蜉蜣蜻蜞蜥蜮蜚蜾蝈蜴蜱蜩蜷蜿螂蜢蝽蝾蝻蝠蝰蝌蝮螋蝓蝣蝼蝤蝙蝥螓螯螨蟒"
            	],
            	[
            		"f340",
            		"驚",
            		17,
            		"驲骃骉骍骎骔骕骙骦骩",
            		6,
            		"骲骳骴骵骹骻骽骾骿髃髄髆",
            		4,
            		"髍髎髏髐髒體髕髖髗髙髚髛髜"
            	],
            	[
            		"f380",
            		"髝髞髠髢髣髤髥髧髨髩髪髬髮髰",
            		8,
            		"髺髼",
            		6,
            		"鬄鬅鬆蟆螈螅螭螗螃螫蟥螬螵螳蟋蟓螽蟑蟀蟊蟛蟪蟠蟮蠖蠓蟾蠊蠛蠡蠹蠼缶罂罄罅舐竺竽笈笃笄笕笊笫笏筇笸笪笙笮笱笠笥笤笳笾笞筘筚筅筵筌筝筠筮筻筢筲筱箐箦箧箸箬箝箨箅箪箜箢箫箴篑篁篌篝篚篥篦篪簌篾篼簏簖簋"
            	],
            	[
            		"f440",
            		"鬇鬉",
            		5,
            		"鬐鬑鬒鬔",
            		10,
            		"鬠鬡鬢鬤",
            		10,
            		"鬰鬱鬳",
            		7,
            		"鬽鬾鬿魀魆魊魋魌魎魐魒魓魕",
            		5
            	],
            	[
            		"f480",
            		"魛",
            		32,
            		"簟簪簦簸籁籀臾舁舂舄臬衄舡舢舣舭舯舨舫舸舻舳舴舾艄艉艋艏艚艟艨衾袅袈裘裟襞羝羟羧羯羰羲籼敉粑粝粜粞粢粲粼粽糁糇糌糍糈糅糗糨艮暨羿翎翕翥翡翦翩翮翳糸絷綦綮繇纛麸麴赳趄趔趑趱赧赭豇豉酊酐酎酏酤"
            	],
            	[
            		"f540",
            		"魼",
            		62
            	],
            	[
            		"f580",
            		"鮻",
            		32,
            		"酢酡酰酩酯酽酾酲酴酹醌醅醐醍醑醢醣醪醭醮醯醵醴醺豕鹾趸跫踅蹙蹩趵趿趼趺跄跖跗跚跞跎跏跛跆跬跷跸跣跹跻跤踉跽踔踝踟踬踮踣踯踺蹀踹踵踽踱蹉蹁蹂蹑蹒蹊蹰蹶蹼蹯蹴躅躏躔躐躜躞豸貂貊貅貘貔斛觖觞觚觜"
            	],
            	[
            		"f640",
            		"鯜",
            		62
            	],
            	[
            		"f680",
            		"鰛",
            		32,
            		"觥觫觯訾謦靓雩雳雯霆霁霈霏霎霪霭霰霾龀龃龅",
            		5,
            		"龌黾鼋鼍隹隼隽雎雒瞿雠銎銮鋈錾鍪鏊鎏鐾鑫鱿鲂鲅鲆鲇鲈稣鲋鲎鲐鲑鲒鲔鲕鲚鲛鲞",
            		5,
            		"鲥",
            		4,
            		"鲫鲭鲮鲰",
            		7,
            		"鲺鲻鲼鲽鳄鳅鳆鳇鳊鳋"
            	],
            	[
            		"f740",
            		"鰼",
            		62
            	],
            	[
            		"f780",
            		"鱻鱽鱾鲀鲃鲄鲉鲊鲌鲏鲓鲖鲗鲘鲙鲝鲪鲬鲯鲹鲾",
            		4,
            		"鳈鳉鳑鳒鳚鳛鳠鳡鳌",
            		4,
            		"鳓鳔鳕鳗鳘鳙鳜鳝鳟鳢靼鞅鞑鞒鞔鞯鞫鞣鞲鞴骱骰骷鹘骶骺骼髁髀髅髂髋髌髑魅魃魇魉魈魍魑飨餍餮饕饔髟髡髦髯髫髻髭髹鬈鬏鬓鬟鬣麽麾縻麂麇麈麋麒鏖麝麟黛黜黝黠黟黢黩黧黥黪黯鼢鼬鼯鼹鼷鼽鼾齄"
            	],
            	[
            		"f840",
            		"鳣",
            		62
            	],
            	[
            		"f880",
            		"鴢",
            		32
            	],
            	[
            		"f940",
            		"鵃",
            		62
            	],
            	[
            		"f980",
            		"鶂",
            		32
            	],
            	[
            		"fa40",
            		"鶣",
            		62
            	],
            	[
            		"fa80",
            		"鷢",
            		32
            	],
            	[
            		"fb40",
            		"鸃",
            		27,
            		"鸤鸧鸮鸰鸴鸻鸼鹀鹍鹐鹒鹓鹔鹖鹙鹝鹟鹠鹡鹢鹥鹮鹯鹲鹴",
            		9,
            		"麀"
            	],
            	[
            		"fb80",
            		"麁麃麄麅麆麉麊麌",
            		5,
            		"麔",
            		8,
            		"麞麠",
            		5,
            		"麧麨麩麪"
            	],
            	[
            		"fc40",
            		"麫",
            		8,
            		"麵麶麷麹麺麼麿",
            		4,
            		"黅黆黇黈黊黋黌黐黒黓黕黖黗黙黚點黡黣黤黦黨黫黬黭黮黰",
            		8,
            		"黺黽黿",
            		6
            	],
            	[
            		"fc80",
            		"鼆",
            		4,
            		"鼌鼏鼑鼒鼔鼕鼖鼘鼚",
            		5,
            		"鼡鼣",
            		8,
            		"鼭鼮鼰鼱"
            	],
            	[
            		"fd40",
            		"鼲",
            		4,
            		"鼸鼺鼼鼿",
            		4,
            		"齅",
            		10,
            		"齒",
            		38
            	],
            	[
            		"fd80",
            		"齹",
            		5,
            		"龁龂龍",
            		11,
            		"龜龝龞龡",
            		4,
            		"郎凉秊裏隣"
            	],
            	[
            		"fe40",
            		"兀嗀﨎﨏﨑﨓﨔礼﨟蘒﨡﨣﨤﨧﨨﨩"
            	]
            ];

            var require$$3$1 = [
            	[
            		"a140",
            		"",
            		62
            	],
            	[
            		"a180",
            		"",
            		32
            	],
            	[
            		"a240",
            		"",
            		62
            	],
            	[
            		"a280",
            		"",
            		32
            	],
            	[
            		"a2ab",
            		"",
            		5
            	],
            	[
            		"a2e3",
            		"€"
            	],
            	[
            		"a2ef",
            		""
            	],
            	[
            		"a2fd",
            		""
            	],
            	[
            		"a340",
            		"",
            		62
            	],
            	[
            		"a380",
            		"",
            		31,
            		"　"
            	],
            	[
            		"a440",
            		"",
            		62
            	],
            	[
            		"a480",
            		"",
            		32
            	],
            	[
            		"a4f4",
            		"",
            		10
            	],
            	[
            		"a540",
            		"",
            		62
            	],
            	[
            		"a580",
            		"",
            		32
            	],
            	[
            		"a5f7",
            		"",
            		7
            	],
            	[
            		"a640",
            		"",
            		62
            	],
            	[
            		"a680",
            		"",
            		32
            	],
            	[
            		"a6b9",
            		"",
            		7
            	],
            	[
            		"a6d9",
            		"",
            		6
            	],
            	[
            		"a6ec",
            		""
            	],
            	[
            		"a6f3",
            		""
            	],
            	[
            		"a6f6",
            		"",
            		8
            	],
            	[
            		"a740",
            		"",
            		62
            	],
            	[
            		"a780",
            		"",
            		32
            	],
            	[
            		"a7c2",
            		"",
            		14
            	],
            	[
            		"a7f2",
            		"",
            		12
            	],
            	[
            		"a896",
            		"",
            		10
            	],
            	[
            		"a8bc",
            		"ḿ"
            	],
            	[
            		"a8bf",
            		"ǹ"
            	],
            	[
            		"a8c1",
            		""
            	],
            	[
            		"a8ea",
            		"",
            		20
            	],
            	[
            		"a958",
            		""
            	],
            	[
            		"a95b",
            		""
            	],
            	[
            		"a95d",
            		""
            	],
            	[
            		"a989",
            		"〾⿰",
            		11
            	],
            	[
            		"a997",
            		"",
            		12
            	],
            	[
            		"a9f0",
            		"",
            		14
            	],
            	[
            		"aaa1",
            		"",
            		93
            	],
            	[
            		"aba1",
            		"",
            		93
            	],
            	[
            		"aca1",
            		"",
            		93
            	],
            	[
            		"ada1",
            		"",
            		93
            	],
            	[
            		"aea1",
            		"",
            		93
            	],
            	[
            		"afa1",
            		"",
            		93
            	],
            	[
            		"d7fa",
            		"",
            		4
            	],
            	[
            		"f8a1",
            		"",
            		93
            	],
            	[
            		"f9a1",
            		"",
            		93
            	],
            	[
            		"faa1",
            		"",
            		93
            	],
            	[
            		"fba1",
            		"",
            		93
            	],
            	[
            		"fca1",
            		"",
            		93
            	],
            	[
            		"fda1",
            		"",
            		93
            	],
            	[
            		"fe50",
            		"⺁⺄㑳㑇⺈⺋㖞㘚㘎⺌⺗㥮㤘㧏㧟㩳㧐㭎㱮㳠⺧⺪䁖䅟⺮䌷⺳⺶⺷䎱䎬⺻䏝䓖䙡䙌"
            	],
            	[
            		"fe80",
            		"䜣䜩䝼䞍⻊䥇䥺䥽䦂䦃䦅䦆䦟䦛䦷䦶䲣䲟䲠䲡䱷䲢䴓",
            		6,
            		"䶮",
            		93
            	],
            	[
            		"8135f437",
            		""
            	]
            ];

            var uChars = [
            	128,
            	165,
            	169,
            	178,
            	184,
            	216,
            	226,
            	235,
            	238,
            	244,
            	248,
            	251,
            	253,
            	258,
            	276,
            	284,
            	300,
            	325,
            	329,
            	334,
            	364,
            	463,
            	465,
            	467,
            	469,
            	471,
            	473,
            	475,
            	477,
            	506,
            	594,
            	610,
            	712,
            	716,
            	730,
            	930,
            	938,
            	962,
            	970,
            	1026,
            	1104,
            	1106,
            	8209,
            	8215,
            	8218,
            	8222,
            	8231,
            	8241,
            	8244,
            	8246,
            	8252,
            	8365,
            	8452,
            	8454,
            	8458,
            	8471,
            	8482,
            	8556,
            	8570,
            	8596,
            	8602,
            	8713,
            	8720,
            	8722,
            	8726,
            	8731,
            	8737,
            	8740,
            	8742,
            	8748,
            	8751,
            	8760,
            	8766,
            	8777,
            	8781,
            	8787,
            	8802,
            	8808,
            	8816,
            	8854,
            	8858,
            	8870,
            	8896,
            	8979,
            	9322,
            	9372,
            	9548,
            	9588,
            	9616,
            	9622,
            	9634,
            	9652,
            	9662,
            	9672,
            	9676,
            	9680,
            	9702,
            	9735,
            	9738,
            	9793,
            	9795,
            	11906,
            	11909,
            	11913,
            	11917,
            	11928,
            	11944,
            	11947,
            	11951,
            	11956,
            	11960,
            	11964,
            	11979,
            	12284,
            	12292,
            	12312,
            	12319,
            	12330,
            	12351,
            	12436,
            	12447,
            	12535,
            	12543,
            	12586,
            	12842,
            	12850,
            	12964,
            	13200,
            	13215,
            	13218,
            	13253,
            	13263,
            	13267,
            	13270,
            	13384,
            	13428,
            	13727,
            	13839,
            	13851,
            	14617,
            	14703,
            	14801,
            	14816,
            	14964,
            	15183,
            	15471,
            	15585,
            	16471,
            	16736,
            	17208,
            	17325,
            	17330,
            	17374,
            	17623,
            	17997,
            	18018,
            	18212,
            	18218,
            	18301,
            	18318,
            	18760,
            	18811,
            	18814,
            	18820,
            	18823,
            	18844,
            	18848,
            	18872,
            	19576,
            	19620,
            	19738,
            	19887,
            	40870,
            	59244,
            	59336,
            	59367,
            	59413,
            	59417,
            	59423,
            	59431,
            	59437,
            	59443,
            	59452,
            	59460,
            	59478,
            	59493,
            	63789,
            	63866,
            	63894,
            	63976,
            	63986,
            	64016,
            	64018,
            	64021,
            	64025,
            	64034,
            	64037,
            	64042,
            	65074,
            	65093,
            	65107,
            	65112,
            	65127,
            	65132,
            	65375,
            	65510,
            	65536
            ];
            var gbChars = [
            	0,
            	36,
            	38,
            	45,
            	50,
            	81,
            	89,
            	95,
            	96,
            	100,
            	103,
            	104,
            	105,
            	109,
            	126,
            	133,
            	148,
            	172,
            	175,
            	179,
            	208,
            	306,
            	307,
            	308,
            	309,
            	310,
            	311,
            	312,
            	313,
            	341,
            	428,
            	443,
            	544,
            	545,
            	558,
            	741,
            	742,
            	749,
            	750,
            	805,
            	819,
            	820,
            	7922,
            	7924,
            	7925,
            	7927,
            	7934,
            	7943,
            	7944,
            	7945,
            	7950,
            	8062,
            	8148,
            	8149,
            	8152,
            	8164,
            	8174,
            	8236,
            	8240,
            	8262,
            	8264,
            	8374,
            	8380,
            	8381,
            	8384,
            	8388,
            	8390,
            	8392,
            	8393,
            	8394,
            	8396,
            	8401,
            	8406,
            	8416,
            	8419,
            	8424,
            	8437,
            	8439,
            	8445,
            	8482,
            	8485,
            	8496,
            	8521,
            	8603,
            	8936,
            	8946,
            	9046,
            	9050,
            	9063,
            	9066,
            	9076,
            	9092,
            	9100,
            	9108,
            	9111,
            	9113,
            	9131,
            	9162,
            	9164,
            	9218,
            	9219,
            	11329,
            	11331,
            	11334,
            	11336,
            	11346,
            	11361,
            	11363,
            	11366,
            	11370,
            	11372,
            	11375,
            	11389,
            	11682,
            	11686,
            	11687,
            	11692,
            	11694,
            	11714,
            	11716,
            	11723,
            	11725,
            	11730,
            	11736,
            	11982,
            	11989,
            	12102,
            	12336,
            	12348,
            	12350,
            	12384,
            	12393,
            	12395,
            	12397,
            	12510,
            	12553,
            	12851,
            	12962,
            	12973,
            	13738,
            	13823,
            	13919,
            	13933,
            	14080,
            	14298,
            	14585,
            	14698,
            	15583,
            	15847,
            	16318,
            	16434,
            	16438,
            	16481,
            	16729,
            	17102,
            	17122,
            	17315,
            	17320,
            	17402,
            	17418,
            	17859,
            	17909,
            	17911,
            	17915,
            	17916,
            	17936,
            	17939,
            	17961,
            	18664,
            	18703,
            	18814,
            	18962,
            	19043,
            	33469,
            	33470,
            	33471,
            	33484,
            	33485,
            	33490,
            	33497,
            	33501,
            	33505,
            	33513,
            	33520,
            	33536,
            	33550,
            	37845,
            	37921,
            	37948,
            	38029,
            	38038,
            	38064,
            	38065,
            	38066,
            	38069,
            	38075,
            	38076,
            	38078,
            	39108,
            	39109,
            	39113,
            	39114,
            	39115,
            	39116,
            	39265,
            	39394,
            	189000
            ];
            var require$$4 = {
            	uChars: uChars,
            	gbChars: gbChars
            };

            var require$$5 = [
            	[
            		"0",
            		"\u0000",
            		127
            	],
            	[
            		"8141",
            		"갂갃갅갆갋",
            		4,
            		"갘갞갟갡갢갣갥",
            		6,
            		"갮갲갳갴"
            	],
            	[
            		"8161",
            		"갵갶갷갺갻갽갾갿걁",
            		9,
            		"걌걎",
            		5,
            		"걕"
            	],
            	[
            		"8181",
            		"걖걗걙걚걛걝",
            		18,
            		"걲걳걵걶걹걻",
            		4,
            		"겂겇겈겍겎겏겑겒겓겕",
            		6,
            		"겞겢",
            		5,
            		"겫겭겮겱",
            		6,
            		"겺겾겿곀곂곃곅곆곇곉곊곋곍",
            		7,
            		"곖곘",
            		7,
            		"곢곣곥곦곩곫곭곮곲곴곷",
            		4,
            		"곾곿괁괂괃괅괇",
            		4,
            		"괎괐괒괓"
            	],
            	[
            		"8241",
            		"괔괕괖괗괙괚괛괝괞괟괡",
            		7,
            		"괪괫괮",
            		5
            	],
            	[
            		"8261",
            		"괶괷괹괺괻괽",
            		6,
            		"굆굈굊",
            		5,
            		"굑굒굓굕굖굗"
            	],
            	[
            		"8281",
            		"굙",
            		7,
            		"굢굤",
            		7,
            		"굮굯굱굲굷굸굹굺굾궀궃",
            		4,
            		"궊궋궍궎궏궑",
            		10,
            		"궞",
            		5,
            		"궥",
            		17,
            		"궸",
            		7,
            		"귂귃귅귆귇귉",
            		6,
            		"귒귔",
            		7,
            		"귝귞귟귡귢귣귥",
            		18
            	],
            	[
            		"8341",
            		"귺귻귽귾긂",
            		5,
            		"긊긌긎",
            		5,
            		"긕",
            		7
            	],
            	[
            		"8361",
            		"긝",
            		18,
            		"긲긳긵긶긹긻긼"
            	],
            	[
            		"8381",
            		"긽긾긿깂깄깇깈깉깋깏깑깒깓깕깗",
            		4,
            		"깞깢깣깤깦깧깪깫깭깮깯깱",
            		6,
            		"깺깾",
            		5,
            		"꺆",
            		5,
            		"꺍",
            		46,
            		"꺿껁껂껃껅",
            		6,
            		"껎껒",
            		5,
            		"껚껛껝",
            		8
            	],
            	[
            		"8441",
            		"껦껧껩껪껬껮",
            		5,
            		"껵껶껷껹껺껻껽",
            		8
            	],
            	[
            		"8461",
            		"꼆꼉꼊꼋꼌꼎꼏꼑",
            		18
            	],
            	[
            		"8481",
            		"꼤",
            		7,
            		"꼮꼯꼱꼳꼵",
            		6,
            		"꼾꽀꽄꽅꽆꽇꽊",
            		5,
            		"꽑",
            		10,
            		"꽞",
            		5,
            		"꽦",
            		18,
            		"꽺",
            		5,
            		"꾁꾂꾃꾅꾆꾇꾉",
            		6,
            		"꾒꾓꾔꾖",
            		5,
            		"꾝",
            		26,
            		"꾺꾻꾽꾾"
            	],
            	[
            		"8541",
            		"꾿꿁",
            		5,
            		"꿊꿌꿏",
            		4,
            		"꿕",
            		6,
            		"꿝",
            		4
            	],
            	[
            		"8561",
            		"꿢",
            		5,
            		"꿪",
            		5,
            		"꿲꿳꿵꿶꿷꿹",
            		6,
            		"뀂뀃"
            	],
            	[
            		"8581",
            		"뀅",
            		6,
            		"뀍뀎뀏뀑뀒뀓뀕",
            		6,
            		"뀞",
            		9,
            		"뀩",
            		26,
            		"끆끇끉끋끍끏끐끑끒끖끘끚끛끜끞",
            		29,
            		"끾끿낁낂낃낅",
            		6,
            		"낎낐낒",
            		5,
            		"낛낝낞낣낤"
            	],
            	[
            		"8641",
            		"낥낦낧낪낰낲낶낷낹낺낻낽",
            		6,
            		"냆냊",
            		5,
            		"냒"
            	],
            	[
            		"8661",
            		"냓냕냖냗냙",
            		6,
            		"냡냢냣냤냦",
            		10
            	],
            	[
            		"8681",
            		"냱",
            		22,
            		"넊넍넎넏넑넔넕넖넗넚넞",
            		4,
            		"넦넧넩넪넫넭",
            		6,
            		"넶넺",
            		5,
            		"녂녃녅녆녇녉",
            		6,
            		"녒녓녖녗녙녚녛녝녞녟녡",
            		22,
            		"녺녻녽녾녿놁놃",
            		4,
            		"놊놌놎놏놐놑놕놖놗놙놚놛놝"
            	],
            	[
            		"8741",
            		"놞",
            		9,
            		"놩",
            		15
            	],
            	[
            		"8761",
            		"놹",
            		18,
            		"뇍뇎뇏뇑뇒뇓뇕"
            	],
            	[
            		"8781",
            		"뇖",
            		5,
            		"뇞뇠",
            		7,
            		"뇪뇫뇭뇮뇯뇱",
            		7,
            		"뇺뇼뇾",
            		5,
            		"눆눇눉눊눍",
            		6,
            		"눖눘눚",
            		5,
            		"눡",
            		18,
            		"눵",
            		6,
            		"눽",
            		26,
            		"뉙뉚뉛뉝뉞뉟뉡",
            		6,
            		"뉪",
            		4
            	],
            	[
            		"8841",
            		"뉯",
            		4,
            		"뉶",
            		5,
            		"뉽",
            		6,
            		"늆늇늈늊",
            		4
            	],
            	[
            		"8861",
            		"늏늒늓늕늖늗늛",
            		4,
            		"늢늤늧늨늩늫늭늮늯늱늲늳늵늶늷"
            	],
            	[
            		"8881",
            		"늸",
            		15,
            		"닊닋닍닎닏닑닓",
            		4,
            		"닚닜닞닟닠닡닣닧닩닪닰닱닲닶닼닽닾댂댃댅댆댇댉",
            		6,
            		"댒댖",
            		5,
            		"댝",
            		54,
            		"덗덙덚덝덠덡덢덣"
            	],
            	[
            		"8941",
            		"덦덨덪덬덭덯덲덳덵덶덷덹",
            		6,
            		"뎂뎆",
            		5,
            		"뎍"
            	],
            	[
            		"8961",
            		"뎎뎏뎑뎒뎓뎕",
            		10,
            		"뎢",
            		5,
            		"뎩뎪뎫뎭"
            	],
            	[
            		"8981",
            		"뎮",
            		21,
            		"돆돇돉돊돍돏돑돒돓돖돘돚돜돞돟돡돢돣돥돦돧돩",
            		18,
            		"돽",
            		18,
            		"됑",
            		6,
            		"됙됚됛됝됞됟됡",
            		6,
            		"됪됬",
            		7,
            		"됵",
            		15
            	],
            	[
            		"8a41",
            		"둅",
            		10,
            		"둒둓둕둖둗둙",
            		6,
            		"둢둤둦"
            	],
            	[
            		"8a61",
            		"둧",
            		4,
            		"둭",
            		18,
            		"뒁뒂"
            	],
            	[
            		"8a81",
            		"뒃",
            		4,
            		"뒉",
            		19,
            		"뒞",
            		5,
            		"뒥뒦뒧뒩뒪뒫뒭",
            		7,
            		"뒶뒸뒺",
            		5,
            		"듁듂듃듅듆듇듉",
            		6,
            		"듑듒듓듔듖",
            		5,
            		"듞듟듡듢듥듧",
            		4,
            		"듮듰듲",
            		5,
            		"듹",
            		26,
            		"딖딗딙딚딝"
            	],
            	[
            		"8b41",
            		"딞",
            		5,
            		"딦딫",
            		4,
            		"딲딳딵딶딷딹",
            		6,
            		"땂땆"
            	],
            	[
            		"8b61",
            		"땇땈땉땊땎땏땑땒땓땕",
            		6,
            		"땞땢",
            		8
            	],
            	[
            		"8b81",
            		"땫",
            		52,
            		"떢떣떥떦떧떩떬떭떮떯떲떶",
            		4,
            		"떾떿뗁뗂뗃뗅",
            		6,
            		"뗎뗒",
            		5,
            		"뗙",
            		18,
            		"뗭",
            		18
            	],
            	[
            		"8c41",
            		"똀",
            		15,
            		"똒똓똕똖똗똙",
            		4
            	],
            	[
            		"8c61",
            		"똞",
            		6,
            		"똦",
            		5,
            		"똭",
            		6,
            		"똵",
            		5
            	],
            	[
            		"8c81",
            		"똻",
            		12,
            		"뙉",
            		26,
            		"뙥뙦뙧뙩",
            		50,
            		"뚞뚟뚡뚢뚣뚥",
            		5,
            		"뚭뚮뚯뚰뚲",
            		16
            	],
            	[
            		"8d41",
            		"뛃",
            		16,
            		"뛕",
            		8
            	],
            	[
            		"8d61",
            		"뛞",
            		17,
            		"뛱뛲뛳뛵뛶뛷뛹뛺"
            	],
            	[
            		"8d81",
            		"뛻",
            		4,
            		"뜂뜃뜄뜆",
            		33,
            		"뜪뜫뜭뜮뜱",
            		6,
            		"뜺뜼",
            		7,
            		"띅띆띇띉띊띋띍",
            		6,
            		"띖",
            		9,
            		"띡띢띣띥띦띧띩",
            		6,
            		"띲띴띶",
            		5,
            		"띾띿랁랂랃랅",
            		6,
            		"랎랓랔랕랚랛랝랞"
            	],
            	[
            		"8e41",
            		"랟랡",
            		6,
            		"랪랮",
            		5,
            		"랶랷랹",
            		8
            	],
            	[
            		"8e61",
            		"럂",
            		4,
            		"럈럊",
            		19
            	],
            	[
            		"8e81",
            		"럞",
            		13,
            		"럮럯럱럲럳럵",
            		6,
            		"럾렂",
            		4,
            		"렊렋렍렎렏렑",
            		6,
            		"렚렜렞",
            		5,
            		"렦렧렩렪렫렭",
            		6,
            		"렶렺",
            		5,
            		"롁롂롃롅",
            		11,
            		"롒롔",
            		7,
            		"롞롟롡롢롣롥",
            		6,
            		"롮롰롲",
            		5,
            		"롹롺롻롽",
            		7
            	],
            	[
            		"8f41",
            		"뢅",
            		7,
            		"뢎",
            		17
            	],
            	[
            		"8f61",
            		"뢠",
            		7,
            		"뢩",
            		6,
            		"뢱뢲뢳뢵뢶뢷뢹",
            		4
            	],
            	[
            		"8f81",
            		"뢾뢿룂룄룆",
            		5,
            		"룍룎룏룑룒룓룕",
            		7,
            		"룞룠룢",
            		5,
            		"룪룫룭룮룯룱",
            		6,
            		"룺룼룾",
            		5,
            		"뤅",
            		18,
            		"뤙",
            		6,
            		"뤡",
            		26,
            		"뤾뤿륁륂륃륅",
            		6,
            		"륍륎륐륒",
            		5
            	],
            	[
            		"9041",
            		"륚륛륝륞륟륡",
            		6,
            		"륪륬륮",
            		5,
            		"륶륷륹륺륻륽"
            	],
            	[
            		"9061",
            		"륾",
            		5,
            		"릆릈릋릌릏",
            		15
            	],
            	[
            		"9081",
            		"릟",
            		12,
            		"릮릯릱릲릳릵",
            		6,
            		"릾맀맂",
            		5,
            		"맊맋맍맓",
            		4,
            		"맚맜맟맠맢맦맧맩맪맫맭",
            		6,
            		"맶맻",
            		4,
            		"먂",
            		5,
            		"먉",
            		11,
            		"먖",
            		33,
            		"먺먻먽먾먿멁멃멄멅멆"
            	],
            	[
            		"9141",
            		"멇멊멌멏멐멑멒멖멗멙멚멛멝",
            		6,
            		"멦멪",
            		5
            	],
            	[
            		"9161",
            		"멲멳멵멶멷멹",
            		9,
            		"몆몈몉몊몋몍",
            		5
            	],
            	[
            		"9181",
            		"몓",
            		20,
            		"몪몭몮몯몱몳",
            		4,
            		"몺몼몾",
            		5,
            		"뫅뫆뫇뫉",
            		14,
            		"뫚",
            		33,
            		"뫽뫾뫿묁묂묃묅",
            		7,
            		"묎묐묒",
            		5,
            		"묙묚묛묝묞묟묡",
            		6
            	],
            	[
            		"9241",
            		"묨묪묬",
            		7,
            		"묷묹묺묿",
            		4,
            		"뭆뭈뭊뭋뭌뭎뭑뭒"
            	],
            	[
            		"9261",
            		"뭓뭕뭖뭗뭙",
            		7,
            		"뭢뭤",
            		7,
            		"뭭",
            		4
            	],
            	[
            		"9281",
            		"뭲",
            		21,
            		"뮉뮊뮋뮍뮎뮏뮑",
            		18,
            		"뮥뮦뮧뮩뮪뮫뮭",
            		6,
            		"뮵뮶뮸",
            		7,
            		"믁믂믃믅믆믇믉",
            		6,
            		"믑믒믔",
            		35,
            		"믺믻믽믾밁"
            	],
            	[
            		"9341",
            		"밃",
            		4,
            		"밊밎밐밒밓밙밚밠밡밢밣밦밨밪밫밬밮밯밲밳밵"
            	],
            	[
            		"9361",
            		"밶밷밹",
            		6,
            		"뱂뱆뱇뱈뱊뱋뱎뱏뱑",
            		8
            	],
            	[
            		"9381",
            		"뱚뱛뱜뱞",
            		37,
            		"벆벇벉벊벍벏",
            		4,
            		"벖벘벛",
            		4,
            		"벢벣벥벦벩",
            		6,
            		"벲벶",
            		5,
            		"벾벿볁볂볃볅",
            		7,
            		"볎볒볓볔볖볗볙볚볛볝",
            		22,
            		"볷볹볺볻볽"
            	],
            	[
            		"9441",
            		"볾",
            		5,
            		"봆봈봊",
            		5,
            		"봑봒봓봕",
            		8
            	],
            	[
            		"9461",
            		"봞",
            		5,
            		"봥",
            		6,
            		"봭",
            		12
            	],
            	[
            		"9481",
            		"봺",
            		5,
            		"뵁",
            		6,
            		"뵊뵋뵍뵎뵏뵑",
            		6,
            		"뵚",
            		9,
            		"뵥뵦뵧뵩",
            		22,
            		"붂붃붅붆붋",
            		4,
            		"붒붔붖붗붘붛붝",
            		6,
            		"붥",
            		10,
            		"붱",
            		6,
            		"붹",
            		24
            	],
            	[
            		"9541",
            		"뷒뷓뷖뷗뷙뷚뷛뷝",
            		11,
            		"뷪",
            		5,
            		"뷱"
            	],
            	[
            		"9561",
            		"뷲뷳뷵뷶뷷뷹",
            		6,
            		"븁븂븄븆",
            		5,
            		"븎븏븑븒븓"
            	],
            	[
            		"9581",
            		"븕",
            		6,
            		"븞븠",
            		35,
            		"빆빇빉빊빋빍빏",
            		4,
            		"빖빘빜빝빞빟빢빣빥빦빧빩빫",
            		4,
            		"빲빶",
            		4,
            		"빾빿뺁뺂뺃뺅",
            		6,
            		"뺎뺒",
            		5,
            		"뺚",
            		13,
            		"뺩",
            		14
            	],
            	[
            		"9641",
            		"뺸",
            		23,
            		"뻒뻓"
            	],
            	[
            		"9661",
            		"뻕뻖뻙",
            		6,
            		"뻡뻢뻦",
            		5,
            		"뻭",
            		8
            	],
            	[
            		"9681",
            		"뻶",
            		10,
            		"뼂",
            		5,
            		"뼊",
            		13,
            		"뼚뼞",
            		33,
            		"뽂뽃뽅뽆뽇뽉",
            		6,
            		"뽒뽓뽔뽖",
            		44
            	],
            	[
            		"9741",
            		"뾃",
            		16,
            		"뾕",
            		8
            	],
            	[
            		"9761",
            		"뾞",
            		17,
            		"뾱",
            		7
            	],
            	[
            		"9781",
            		"뾹",
            		11,
            		"뿆",
            		5,
            		"뿎뿏뿑뿒뿓뿕",
            		6,
            		"뿝뿞뿠뿢",
            		89,
            		"쀽쀾쀿"
            	],
            	[
            		"9841",
            		"쁀",
            		16,
            		"쁒",
            		5,
            		"쁙쁚쁛"
            	],
            	[
            		"9861",
            		"쁝쁞쁟쁡",
            		6,
            		"쁪",
            		15
            	],
            	[
            		"9881",
            		"쁺",
            		21,
            		"삒삓삕삖삗삙",
            		6,
            		"삢삤삦",
            		5,
            		"삮삱삲삷",
            		4,
            		"삾샂샃샄샆샇샊샋샍샎샏샑",
            		6,
            		"샚샞",
            		5,
            		"샦샧샩샪샫샭",
            		6,
            		"샶샸샺",
            		5,
            		"섁섂섃섅섆섇섉",
            		6,
            		"섑섒섓섔섖",
            		5,
            		"섡섢섥섨섩섪섫섮"
            	],
            	[
            		"9941",
            		"섲섳섴섵섷섺섻섽섾섿셁",
            		6,
            		"셊셎",
            		5,
            		"셖셗"
            	],
            	[
            		"9961",
            		"셙셚셛셝",
            		6,
            		"셦셪",
            		5,
            		"셱셲셳셵셶셷셹셺셻"
            	],
            	[
            		"9981",
            		"셼",
            		8,
            		"솆",
            		5,
            		"솏솑솒솓솕솗",
            		4,
            		"솞솠솢솣솤솦솧솪솫솭솮솯솱",
            		11,
            		"솾",
            		5,
            		"쇅쇆쇇쇉쇊쇋쇍",
            		6,
            		"쇕쇖쇙",
            		6,
            		"쇡쇢쇣쇥쇦쇧쇩",
            		6,
            		"쇲쇴",
            		7,
            		"쇾쇿숁숂숃숅",
            		6,
            		"숎숐숒",
            		5,
            		"숚숛숝숞숡숢숣"
            	],
            	[
            		"9a41",
            		"숤숥숦숧숪숬숮숰숳숵",
            		16
            	],
            	[
            		"9a61",
            		"쉆쉇쉉",
            		6,
            		"쉒쉓쉕쉖쉗쉙",
            		6,
            		"쉡쉢쉣쉤쉦"
            	],
            	[
            		"9a81",
            		"쉧",
            		4,
            		"쉮쉯쉱쉲쉳쉵",
            		6,
            		"쉾슀슂",
            		5,
            		"슊",
            		5,
            		"슑",
            		6,
            		"슙슚슜슞",
            		5,
            		"슦슧슩슪슫슮",
            		5,
            		"슶슸슺",
            		33,
            		"싞싟싡싢싥",
            		5,
            		"싮싰싲싳싴싵싷싺싽싾싿쌁",
            		6,
            		"쌊쌋쌎쌏"
            	],
            	[
            		"9b41",
            		"쌐쌑쌒쌖쌗쌙쌚쌛쌝",
            		6,
            		"쌦쌧쌪",
            		8
            	],
            	[
            		"9b61",
            		"쌳",
            		17,
            		"썆",
            		7
            	],
            	[
            		"9b81",
            		"썎",
            		25,
            		"썪썫썭썮썯썱썳",
            		4,
            		"썺썻썾",
            		5,
            		"쎅쎆쎇쎉쎊쎋쎍",
            		50,
            		"쏁",
            		22,
            		"쏚"
            	],
            	[
            		"9c41",
            		"쏛쏝쏞쏡쏣",
            		4,
            		"쏪쏫쏬쏮",
            		5,
            		"쏶쏷쏹",
            		5
            	],
            	[
            		"9c61",
            		"쏿",
            		8,
            		"쐉",
            		6,
            		"쐑",
            		9
            	],
            	[
            		"9c81",
            		"쐛",
            		8,
            		"쐥",
            		6,
            		"쐭쐮쐯쐱쐲쐳쐵",
            		6,
            		"쐾",
            		9,
            		"쑉",
            		26,
            		"쑦쑧쑩쑪쑫쑭",
            		6,
            		"쑶쑷쑸쑺",
            		5,
            		"쒁",
            		18,
            		"쒕",
            		6,
            		"쒝",
            		12
            	],
            	[
            		"9d41",
            		"쒪",
            		13,
            		"쒹쒺쒻쒽",
            		8
            	],
            	[
            		"9d61",
            		"쓆",
            		25
            	],
            	[
            		"9d81",
            		"쓠",
            		8,
            		"쓪",
            		5,
            		"쓲쓳쓵쓶쓷쓹쓻쓼쓽쓾씂",
            		9,
            		"씍씎씏씑씒씓씕",
            		6,
            		"씝",
            		10,
            		"씪씫씭씮씯씱",
            		6,
            		"씺씼씾",
            		5,
            		"앆앇앋앏앐앑앒앖앚앛앜앟앢앣앥앦앧앩",
            		6,
            		"앲앶",
            		5,
            		"앾앿얁얂얃얅얆얈얉얊얋얎얐얒얓얔"
            	],
            	[
            		"9e41",
            		"얖얙얚얛얝얞얟얡",
            		7,
            		"얪",
            		9,
            		"얶"
            	],
            	[
            		"9e61",
            		"얷얺얿",
            		4,
            		"엋엍엏엒엓엕엖엗엙",
            		6,
            		"엢엤엦엧"
            	],
            	[
            		"9e81",
            		"엨엩엪엫엯엱엲엳엵엸엹엺엻옂옃옄옉옊옋옍옎옏옑",
            		6,
            		"옚옝",
            		6,
            		"옦옧옩옪옫옯옱옲옶옸옺옼옽옾옿왂왃왅왆왇왉",
            		6,
            		"왒왖",
            		5,
            		"왞왟왡",
            		10,
            		"왭왮왰왲",
            		5,
            		"왺왻왽왾왿욁",
            		6,
            		"욊욌욎",
            		5,
            		"욖욗욙욚욛욝",
            		6,
            		"욦"
            	],
            	[
            		"9f41",
            		"욨욪",
            		5,
            		"욲욳욵욶욷욻",
            		4,
            		"웂웄웆",
            		5,
            		"웎"
            	],
            	[
            		"9f61",
            		"웏웑웒웓웕",
            		6,
            		"웞웟웢",
            		5,
            		"웪웫웭웮웯웱웲"
            	],
            	[
            		"9f81",
            		"웳",
            		4,
            		"웺웻웼웾",
            		5,
            		"윆윇윉윊윋윍",
            		6,
            		"윖윘윚",
            		5,
            		"윢윣윥윦윧윩",
            		6,
            		"윲윴윶윸윹윺윻윾윿읁읂읃읅",
            		4,
            		"읋읎읐읙읚읛읝읞읟읡",
            		6,
            		"읩읪읬",
            		7,
            		"읶읷읹읺읻읿잀잁잂잆잋잌잍잏잒잓잕잙잛",
            		4,
            		"잢잧",
            		4,
            		"잮잯잱잲잳잵잶잷"
            	],
            	[
            		"a041",
            		"잸잹잺잻잾쟂",
            		5,
            		"쟊쟋쟍쟏쟑",
            		6,
            		"쟙쟚쟛쟜"
            	],
            	[
            		"a061",
            		"쟞",
            		5,
            		"쟥쟦쟧쟩쟪쟫쟭",
            		13
            	],
            	[
            		"a081",
            		"쟻",
            		4,
            		"젂젃젅젆젇젉젋",
            		4,
            		"젒젔젗",
            		4,
            		"젞젟젡젢젣젥",
            		6,
            		"젮젰젲",
            		5,
            		"젹젺젻젽젾젿졁",
            		6,
            		"졊졋졎",
            		5,
            		"졕",
            		26,
            		"졲졳졵졶졷졹졻",
            		4,
            		"좂좄좈좉좊좎",
            		5,
            		"좕",
            		7,
            		"좞좠좢좣좤"
            	],
            	[
            		"a141",
            		"좥좦좧좩",
            		18,
            		"좾좿죀죁"
            	],
            	[
            		"a161",
            		"죂죃죅죆죇죉죊죋죍",
            		6,
            		"죖죘죚",
            		5,
            		"죢죣죥"
            	],
            	[
            		"a181",
            		"죦",
            		14,
            		"죶",
            		5,
            		"죾죿줁줂줃줇",
            		4,
            		"줎　、。·‥…¨〃­―∥＼∼‘’“”〔〕〈",
            		9,
            		"±×÷≠≤≥∞∴°′″℃Å￠￡￥♂♀∠⊥⌒∂∇≡≒§※☆★○●◎◇◆□■△▲▽▼→←↑↓↔〓≪≫√∽∝∵∫∬∈∋⊆⊇⊂⊃∪∩∧∨￢"
            	],
            	[
            		"a241",
            		"줐줒",
            		5,
            		"줙",
            		18
            	],
            	[
            		"a261",
            		"줭",
            		6,
            		"줵",
            		18
            	],
            	[
            		"a281",
            		"쥈",
            		7,
            		"쥒쥓쥕쥖쥗쥙",
            		6,
            		"쥢쥤",
            		7,
            		"쥭쥮쥯⇒⇔∀∃´～ˇ˘˝˚˙¸˛¡¿ː∮∑∏¤℉‰◁◀▷▶♤♠♡♥♧♣⊙◈▣◐◑▒▤▥▨▧▦▩♨☏☎☜☞¶†‡↕↗↙↖↘♭♩♪♬㉿㈜№㏇™㏂㏘℡€®"
            	],
            	[
            		"a341",
            		"쥱쥲쥳쥵",
            		6,
            		"쥽",
            		10,
            		"즊즋즍즎즏"
            	],
            	[
            		"a361",
            		"즑",
            		6,
            		"즚즜즞",
            		16
            	],
            	[
            		"a381",
            		"즯",
            		16,
            		"짂짃짅짆짉짋",
            		4,
            		"짒짔짗짘짛！",
            		58,
            		"￦］",
            		32,
            		"￣"
            	],
            	[
            		"a441",
            		"짞짟짡짣짥짦짨짩짪짫짮짲",
            		5,
            		"짺짻짽짾짿쨁쨂쨃쨄"
            	],
            	[
            		"a461",
            		"쨅쨆쨇쨊쨎",
            		5,
            		"쨕쨖쨗쨙",
            		12
            	],
            	[
            		"a481",
            		"쨦쨧쨨쨪",
            		28,
            		"ㄱ",
            		93
            	],
            	[
            		"a541",
            		"쩇",
            		4,
            		"쩎쩏쩑쩒쩓쩕",
            		6,
            		"쩞쩢",
            		5,
            		"쩩쩪"
            	],
            	[
            		"a561",
            		"쩫",
            		17,
            		"쩾",
            		5,
            		"쪅쪆"
            	],
            	[
            		"a581",
            		"쪇",
            		16,
            		"쪙",
            		14,
            		"ⅰ",
            		9
            	],
            	[
            		"a5b0",
            		"Ⅰ",
            		9
            	],
            	[
            		"a5c1",
            		"Α",
            		16,
            		"Σ",
            		6
            	],
            	[
            		"a5e1",
            		"α",
            		16,
            		"σ",
            		6
            	],
            	[
            		"a641",
            		"쪨",
            		19,
            		"쪾쪿쫁쫂쫃쫅"
            	],
            	[
            		"a661",
            		"쫆",
            		5,
            		"쫎쫐쫒쫔쫕쫖쫗쫚",
            		5,
            		"쫡",
            		6
            	],
            	[
            		"a681",
            		"쫨쫩쫪쫫쫭",
            		6,
            		"쫵",
            		18,
            		"쬉쬊─│┌┐┘└├┬┤┴┼━┃┏┓┛┗┣┳┫┻╋┠┯┨┷┿┝┰┥┸╂┒┑┚┙┖┕┎┍┞┟┡┢┦┧┩┪┭┮┱┲┵┶┹┺┽┾╀╁╃",
            		7
            	],
            	[
            		"a741",
            		"쬋",
            		4,
            		"쬑쬒쬓쬕쬖쬗쬙",
            		6,
            		"쬢",
            		7
            	],
            	[
            		"a761",
            		"쬪",
            		22,
            		"쭂쭃쭄"
            	],
            	[
            		"a781",
            		"쭅쭆쭇쭊쭋쭍쭎쭏쭑",
            		6,
            		"쭚쭛쭜쭞",
            		5,
            		"쭥",
            		7,
            		"㎕㎖㎗ℓ㎘㏄㎣㎤㎥㎦㎙",
            		9,
            		"㏊㎍㎎㎏㏏㎈㎉㏈㎧㎨㎰",
            		9,
            		"㎀",
            		4,
            		"㎺",
            		5,
            		"㎐",
            		4,
            		"Ω㏀㏁㎊㎋㎌㏖㏅㎭㎮㎯㏛㎩㎪㎫㎬㏝㏐㏓㏃㏉㏜㏆"
            	],
            	[
            		"a841",
            		"쭭",
            		10,
            		"쭺",
            		14
            	],
            	[
            		"a861",
            		"쮉",
            		18,
            		"쮝",
            		6
            	],
            	[
            		"a881",
            		"쮤",
            		19,
            		"쮹",
            		11,
            		"ÆÐªĦ"
            	],
            	[
            		"a8a6",
            		"Ĳ"
            	],
            	[
            		"a8a8",
            		"ĿŁØŒºÞŦŊ"
            	],
            	[
            		"a8b1",
            		"㉠",
            		27,
            		"ⓐ",
            		25,
            		"①",
            		14,
            		"½⅓⅔¼¾⅛⅜⅝⅞"
            	],
            	[
            		"a941",
            		"쯅",
            		14,
            		"쯕",
            		10
            	],
            	[
            		"a961",
            		"쯠쯡쯢쯣쯥쯦쯨쯪",
            		18
            	],
            	[
            		"a981",
            		"쯽",
            		14,
            		"찎찏찑찒찓찕",
            		6,
            		"찞찟찠찣찤æđðħıĳĸŀłøœßþŧŋŉ㈀",
            		27,
            		"⒜",
            		25,
            		"⑴",
            		14,
            		"¹²³⁴ⁿ₁₂₃₄"
            	],
            	[
            		"aa41",
            		"찥찦찪찫찭찯찱",
            		6,
            		"찺찿",
            		4,
            		"챆챇챉챊챋챍챎"
            	],
            	[
            		"aa61",
            		"챏",
            		4,
            		"챖챚",
            		5,
            		"챡챢챣챥챧챩",
            		6,
            		"챱챲"
            	],
            	[
            		"aa81",
            		"챳챴챶",
            		29,
            		"ぁ",
            		82
            	],
            	[
            		"ab41",
            		"첔첕첖첗첚첛첝첞첟첡",
            		6,
            		"첪첮",
            		5,
            		"첶첷첹"
            	],
            	[
            		"ab61",
            		"첺첻첽",
            		6,
            		"쳆쳈쳊",
            		5,
            		"쳑쳒쳓쳕",
            		5
            	],
            	[
            		"ab81",
            		"쳛",
            		8,
            		"쳥",
            		6,
            		"쳭쳮쳯쳱",
            		12,
            		"ァ",
            		85
            	],
            	[
            		"ac41",
            		"쳾쳿촀촂",
            		5,
            		"촊촋촍촎촏촑",
            		6,
            		"촚촜촞촟촠"
            	],
            	[
            		"ac61",
            		"촡촢촣촥촦촧촩촪촫촭",
            		11,
            		"촺",
            		4
            	],
            	[
            		"ac81",
            		"촿",
            		28,
            		"쵝쵞쵟А",
            		5,
            		"ЁЖ",
            		25
            	],
            	[
            		"acd1",
            		"а",
            		5,
            		"ёж",
            		25
            	],
            	[
            		"ad41",
            		"쵡쵢쵣쵥",
            		6,
            		"쵮쵰쵲",
            		5,
            		"쵹",
            		7
            	],
            	[
            		"ad61",
            		"춁",
            		6,
            		"춉",
            		10,
            		"춖춗춙춚춛춝춞춟"
            	],
            	[
            		"ad81",
            		"춠춡춢춣춦춨춪",
            		5,
            		"춱",
            		18,
            		"췅"
            	],
            	[
            		"ae41",
            		"췆",
            		5,
            		"췍췎췏췑",
            		16
            	],
            	[
            		"ae61",
            		"췢",
            		5,
            		"췩췪췫췭췮췯췱",
            		6,
            		"췺췼췾",
            		4
            	],
            	[
            		"ae81",
            		"츃츅츆츇츉츊츋츍",
            		6,
            		"츕츖츗츘츚",
            		5,
            		"츢츣츥츦츧츩츪츫"
            	],
            	[
            		"af41",
            		"츬츭츮츯츲츴츶",
            		19
            	],
            	[
            		"af61",
            		"칊",
            		13,
            		"칚칛칝칞칢",
            		5,
            		"칪칬"
            	],
            	[
            		"af81",
            		"칮",
            		5,
            		"칶칷칹칺칻칽",
            		6,
            		"캆캈캊",
            		5,
            		"캒캓캕캖캗캙"
            	],
            	[
            		"b041",
            		"캚",
            		5,
            		"캢캦",
            		5,
            		"캮",
            		12
            	],
            	[
            		"b061",
            		"캻",
            		5,
            		"컂",
            		19
            	],
            	[
            		"b081",
            		"컖",
            		13,
            		"컦컧컩컪컭",
            		6,
            		"컶컺",
            		5,
            		"가각간갇갈갉갊감",
            		7,
            		"같",
            		4,
            		"갠갤갬갭갯갰갱갸갹갼걀걋걍걔걘걜거걱건걷걸걺검겁것겄겅겆겉겊겋게겐겔겜겝겟겠겡겨격겪견겯결겸겹겻겼경곁계곈곌곕곗고곡곤곧골곪곬곯곰곱곳공곶과곽관괄괆"
            	],
            	[
            		"b141",
            		"켂켃켅켆켇켉",
            		6,
            		"켒켔켖",
            		5,
            		"켝켞켟켡켢켣"
            	],
            	[
            		"b161",
            		"켥",
            		6,
            		"켮켲",
            		5,
            		"켹",
            		11
            	],
            	[
            		"b181",
            		"콅",
            		14,
            		"콖콗콙콚콛콝",
            		6,
            		"콦콨콪콫콬괌괍괏광괘괜괠괩괬괭괴괵괸괼굄굅굇굉교굔굘굡굣구국군굳굴굵굶굻굼굽굿궁궂궈궉권궐궜궝궤궷귀귁귄귈귐귑귓규균귤그극근귿글긁금급긋긍긔기긱긴긷길긺김깁깃깅깆깊까깍깎깐깔깖깜깝깟깠깡깥깨깩깬깰깸"
            	],
            	[
            		"b241",
            		"콭콮콯콲콳콵콶콷콹",
            		6,
            		"쾁쾂쾃쾄쾆",
            		5,
            		"쾍"
            	],
            	[
            		"b261",
            		"쾎",
            		18,
            		"쾢",
            		5,
            		"쾩"
            	],
            	[
            		"b281",
            		"쾪",
            		5,
            		"쾱",
            		18,
            		"쿅",
            		6,
            		"깹깻깼깽꺄꺅꺌꺼꺽꺾껀껄껌껍껏껐껑께껙껜껨껫껭껴껸껼꼇꼈꼍꼐꼬꼭꼰꼲꼴꼼꼽꼿꽁꽂꽃꽈꽉꽐꽜꽝꽤꽥꽹꾀꾄꾈꾐꾑꾕꾜꾸꾹꾼꿀꿇꿈꿉꿋꿍꿎꿔꿜꿨꿩꿰꿱꿴꿸뀀뀁뀄뀌뀐뀔뀜뀝뀨끄끅끈끊끌끎끓끔끕끗끙"
            	],
            	[
            		"b341",
            		"쿌",
            		19,
            		"쿢쿣쿥쿦쿧쿩"
            	],
            	[
            		"b361",
            		"쿪",
            		5,
            		"쿲쿴쿶",
            		5,
            		"쿽쿾쿿퀁퀂퀃퀅",
            		5
            	],
            	[
            		"b381",
            		"퀋",
            		5,
            		"퀒",
            		5,
            		"퀙",
            		19,
            		"끝끼끽낀낄낌낍낏낑나낙낚난낟날낡낢남납낫",
            		4,
            		"낱낳내낵낸낼냄냅냇냈냉냐냑냔냘냠냥너넉넋넌널넒넓넘넙넛넜넝넣네넥넨넬넴넵넷넸넹녀녁년녈념녑녔녕녘녜녠노녹논놀놂놈놉놋농높놓놔놘놜놨뇌뇐뇔뇜뇝"
            	],
            	[
            		"b441",
            		"퀮",
            		5,
            		"퀶퀷퀹퀺퀻퀽",
            		6,
            		"큆큈큊",
            		5
            	],
            	[
            		"b461",
            		"큑큒큓큕큖큗큙",
            		6,
            		"큡",
            		10,
            		"큮큯"
            	],
            	[
            		"b481",
            		"큱큲큳큵",
            		6,
            		"큾큿킀킂",
            		18,
            		"뇟뇨뇩뇬뇰뇹뇻뇽누눅눈눋눌눔눕눗눙눠눴눼뉘뉜뉠뉨뉩뉴뉵뉼늄늅늉느늑는늘늙늚늠늡늣능늦늪늬늰늴니닉닌닐닒님닙닛닝닢다닥닦단닫",
            		4,
            		"닳담답닷",
            		4,
            		"닿대댁댄댈댐댑댓댔댕댜더덕덖던덛덜덞덟덤덥"
            	],
            	[
            		"b541",
            		"킕",
            		14,
            		"킦킧킩킪킫킭",
            		5
            	],
            	[
            		"b561",
            		"킳킶킸킺",
            		5,
            		"탂탃탅탆탇탊",
            		5,
            		"탒탖",
            		4
            	],
            	[
            		"b581",
            		"탛탞탟탡탢탣탥",
            		6,
            		"탮탲",
            		5,
            		"탹",
            		11,
            		"덧덩덫덮데덱덴델뎀뎁뎃뎄뎅뎌뎐뎔뎠뎡뎨뎬도독돈돋돌돎돐돔돕돗동돛돝돠돤돨돼됐되된될됨됩됫됴두둑둔둘둠둡둣둥둬뒀뒈뒝뒤뒨뒬뒵뒷뒹듀듄듈듐듕드득든듣들듦듬듭듯등듸디딕딘딛딜딤딥딧딨딩딪따딱딴딸"
            	],
            	[
            		"b641",
            		"턅",
            		7,
            		"턎",
            		17
            	],
            	[
            		"b661",
            		"턠",
            		15,
            		"턲턳턵턶턷턹턻턼턽턾"
            	],
            	[
            		"b681",
            		"턿텂텆",
            		5,
            		"텎텏텑텒텓텕",
            		6,
            		"텞텠텢",
            		5,
            		"텩텪텫텭땀땁땃땄땅땋때땍땐땔땜땝땟땠땡떠떡떤떨떪떫떰떱떳떴떵떻떼떽뗀뗄뗌뗍뗏뗐뗑뗘뗬또똑똔똘똥똬똴뙈뙤뙨뚜뚝뚠뚤뚫뚬뚱뛔뛰뛴뛸뜀뜁뜅뜨뜩뜬뜯뜰뜸뜹뜻띄띈띌띔띕띠띤띨띰띱띳띵라락란랄람랍랏랐랑랒랖랗"
            	],
            	[
            		"b741",
            		"텮",
            		13,
            		"텽",
            		6,
            		"톅톆톇톉톊"
            	],
            	[
            		"b761",
            		"톋",
            		20,
            		"톢톣톥톦톧"
            	],
            	[
            		"b781",
            		"톩",
            		6,
            		"톲톴톶톷톸톹톻톽톾톿퇁",
            		14,
            		"래랙랜랠램랩랫랬랭랴략랸럇량러럭런럴럼럽럿렀렁렇레렉렌렐렘렙렛렝려력련렬렴렵렷렸령례롄롑롓로록론롤롬롭롯롱롸롼뢍뢨뢰뢴뢸룀룁룃룅료룐룔룝룟룡루룩룬룰룸룹룻룽뤄뤘뤠뤼뤽륀륄륌륏륑류륙륜률륨륩"
            	],
            	[
            		"b841",
            		"퇐",
            		7,
            		"퇙",
            		17
            	],
            	[
            		"b861",
            		"퇫",
            		8,
            		"퇵퇶퇷퇹",
            		13
            	],
            	[
            		"b881",
            		"툈툊",
            		5,
            		"툑",
            		24,
            		"륫륭르륵른를름릅릇릉릊릍릎리릭린릴림립릿링마막만많",
            		4,
            		"맘맙맛망맞맡맣매맥맨맬맴맵맷맸맹맺먀먁먈먕머먹먼멀멂멈멉멋멍멎멓메멕멘멜멤멥멧멨멩며멱면멸몃몄명몇몌모목몫몬몰몲몸몹못몽뫄뫈뫘뫙뫼"
            	],
            	[
            		"b941",
            		"툪툫툮툯툱툲툳툵",
            		6,
            		"툾퉀퉂",
            		5,
            		"퉉퉊퉋퉌"
            	],
            	[
            		"b961",
            		"퉍",
            		14,
            		"퉝",
            		6,
            		"퉥퉦퉧퉨"
            	],
            	[
            		"b981",
            		"퉩",
            		22,
            		"튂튃튅튆튇튉튊튋튌묀묄묍묏묑묘묜묠묩묫무묵묶문묻물묽묾뭄뭅뭇뭉뭍뭏뭐뭔뭘뭡뭣뭬뮈뮌뮐뮤뮨뮬뮴뮷므믄믈믐믓미믹민믿밀밂밈밉밋밌밍및밑바",
            		4,
            		"받",
            		4,
            		"밤밥밧방밭배백밴밸뱀뱁뱃뱄뱅뱉뱌뱍뱐뱝버벅번벋벌벎범법벗"
            	],
            	[
            		"ba41",
            		"튍튎튏튒튓튔튖",
            		5,
            		"튝튞튟튡튢튣튥",
            		6,
            		"튭"
            	],
            	[
            		"ba61",
            		"튮튯튰튲",
            		5,
            		"튺튻튽튾틁틃",
            		4,
            		"틊틌",
            		5
            	],
            	[
            		"ba81",
            		"틒틓틕틖틗틙틚틛틝",
            		6,
            		"틦",
            		9,
            		"틲틳틵틶틷틹틺벙벚베벡벤벧벨벰벱벳벴벵벼벽변별볍볏볐병볕볘볜보복볶본볼봄봅봇봉봐봔봤봬뵀뵈뵉뵌뵐뵘뵙뵤뵨부북분붇불붉붊붐붑붓붕붙붚붜붤붰붸뷔뷕뷘뷜뷩뷰뷴뷸븀븃븅브븍븐블븜븝븟비빅빈빌빎빔빕빗빙빚빛빠빡빤"
            	],
            	[
            		"bb41",
            		"틻",
            		4,
            		"팂팄팆",
            		5,
            		"팏팑팒팓팕팗",
            		4,
            		"팞팢팣"
            	],
            	[
            		"bb61",
            		"팤팦팧팪팫팭팮팯팱",
            		6,
            		"팺팾",
            		5,
            		"퍆퍇퍈퍉"
            	],
            	[
            		"bb81",
            		"퍊",
            		31,
            		"빨빪빰빱빳빴빵빻빼빽뺀뺄뺌뺍뺏뺐뺑뺘뺙뺨뻐뻑뻔뻗뻘뻠뻣뻤뻥뻬뼁뼈뼉뼘뼙뼛뼜뼝뽀뽁뽄뽈뽐뽑뽕뾔뾰뿅뿌뿍뿐뿔뿜뿟뿡쀼쁑쁘쁜쁠쁨쁩삐삑삔삘삠삡삣삥사삭삯산삳살삵삶삼삽삿샀상샅새색샌샐샘샙샛샜생샤"
            	],
            	[
            		"bc41",
            		"퍪",
            		17,
            		"퍾퍿펁펂펃펅펆펇"
            	],
            	[
            		"bc61",
            		"펈펉펊펋펎펒",
            		5,
            		"펚펛펝펞펟펡",
            		6,
            		"펪펬펮"
            	],
            	[
            		"bc81",
            		"펯",
            		4,
            		"펵펶펷펹펺펻펽",
            		6,
            		"폆폇폊",
            		5,
            		"폑",
            		5,
            		"샥샨샬샴샵샷샹섀섄섈섐섕서",
            		4,
            		"섣설섦섧섬섭섯섰성섶세섹센셀셈셉셋셌셍셔셕션셜셤셥셧셨셩셰셴셸솅소속솎손솔솖솜솝솟송솥솨솩솬솰솽쇄쇈쇌쇔쇗쇘쇠쇤쇨쇰쇱쇳쇼쇽숀숄숌숍숏숑수숙순숟술숨숩숫숭"
            	],
            	[
            		"bd41",
            		"폗폙",
            		7,
            		"폢폤",
            		7,
            		"폮폯폱폲폳폵폶폷"
            	],
            	[
            		"bd61",
            		"폸폹폺폻폾퐀퐂",
            		5,
            		"퐉",
            		13
            	],
            	[
            		"bd81",
            		"퐗",
            		5,
            		"퐞",
            		25,
            		"숯숱숲숴쉈쉐쉑쉔쉘쉠쉥쉬쉭쉰쉴쉼쉽쉿슁슈슉슐슘슛슝스슥슨슬슭슴습슷승시식신싣실싫심십싯싱싶싸싹싻싼쌀쌈쌉쌌쌍쌓쌔쌕쌘쌜쌤쌥쌨쌩썅써썩썬썰썲썸썹썼썽쎄쎈쎌쏀쏘쏙쏜쏟쏠쏢쏨쏩쏭쏴쏵쏸쐈쐐쐤쐬쐰"
            	],
            	[
            		"be41",
            		"퐸",
            		7,
            		"푁푂푃푅",
            		14
            	],
            	[
            		"be61",
            		"푔",
            		7,
            		"푝푞푟푡푢푣푥",
            		7,
            		"푮푰푱푲"
            	],
            	[
            		"be81",
            		"푳",
            		4,
            		"푺푻푽푾풁풃",
            		4,
            		"풊풌풎",
            		5,
            		"풕",
            		8,
            		"쐴쐼쐽쑈쑤쑥쑨쑬쑴쑵쑹쒀쒔쒜쒸쒼쓩쓰쓱쓴쓸쓺쓿씀씁씌씐씔씜씨씩씬씰씸씹씻씽아악안앉않알앍앎앓암압앗았앙앝앞애액앤앨앰앱앳앴앵야약얀얄얇얌얍얏양얕얗얘얜얠얩어억언얹얻얼얽얾엄",
            		6,
            		"엌엎"
            	],
            	[
            		"bf41",
            		"풞",
            		10,
            		"풪",
            		14
            	],
            	[
            		"bf61",
            		"풹",
            		18,
            		"퓍퓎퓏퓑퓒퓓퓕"
            	],
            	[
            		"bf81",
            		"퓖",
            		5,
            		"퓝퓞퓠",
            		7,
            		"퓩퓪퓫퓭퓮퓯퓱",
            		6,
            		"퓹퓺퓼에엑엔엘엠엡엣엥여역엮연열엶엷염",
            		5,
            		"옅옆옇예옌옐옘옙옛옜오옥온올옭옮옰옳옴옵옷옹옻와왁완왈왐왑왓왔왕왜왝왠왬왯왱외왹왼욀욈욉욋욍요욕욘욜욤욥욧용우욱운울욹욺움웁웃웅워웍원월웜웝웠웡웨"
            	],
            	[
            		"c041",
            		"퓾",
            		5,
            		"픅픆픇픉픊픋픍",
            		6,
            		"픖픘",
            		5
            	],
            	[
            		"c061",
            		"픞",
            		25
            	],
            	[
            		"c081",
            		"픸픹픺픻픾픿핁핂핃핅",
            		6,
            		"핎핐핒",
            		5,
            		"핚핛핝핞핟핡핢핣웩웬웰웸웹웽위윅윈윌윔윕윗윙유육윤율윰윱윳융윷으윽은을읊음읍읏응",
            		7,
            		"읜읠읨읫이익인일읽읾잃임입잇있잉잊잎자작잔잖잗잘잚잠잡잣잤장잦재잭잰잴잼잽잿쟀쟁쟈쟉쟌쟎쟐쟘쟝쟤쟨쟬저적전절젊"
            	],
            	[
            		"c141",
            		"핤핦핧핪핬핮",
            		5,
            		"핶핷핹핺핻핽",
            		6,
            		"햆햊햋"
            	],
            	[
            		"c161",
            		"햌햍햎햏햑",
            		19,
            		"햦햧"
            	],
            	[
            		"c181",
            		"햨",
            		31,
            		"점접젓정젖제젝젠젤젬젭젯젱져젼졀졈졉졌졍졔조족존졸졺좀좁좃종좆좇좋좌좍좔좝좟좡좨좼좽죄죈죌죔죕죗죙죠죡죤죵주죽준줄줅줆줌줍줏중줘줬줴쥐쥑쥔쥘쥠쥡쥣쥬쥰쥴쥼즈즉즌즐즘즙즛증지직진짇질짊짐집짓"
            	],
            	[
            		"c241",
            		"헊헋헍헎헏헑헓",
            		4,
            		"헚헜헞",
            		5,
            		"헦헧헩헪헫헭헮"
            	],
            	[
            		"c261",
            		"헯",
            		4,
            		"헶헸헺",
            		5,
            		"혂혃혅혆혇혉",
            		6,
            		"혒"
            	],
            	[
            		"c281",
            		"혖",
            		5,
            		"혝혞혟혡혢혣혥",
            		7,
            		"혮",
            		9,
            		"혺혻징짖짙짚짜짝짠짢짤짧짬짭짯짰짱째짹짼쨀쨈쨉쨋쨌쨍쨔쨘쨩쩌쩍쩐쩔쩜쩝쩟쩠쩡쩨쩽쪄쪘쪼쪽쫀쫄쫌쫍쫏쫑쫓쫘쫙쫠쫬쫴쬈쬐쬔쬘쬠쬡쭁쭈쭉쭌쭐쭘쭙쭝쭤쭸쭹쮜쮸쯔쯤쯧쯩찌찍찐찔찜찝찡찢찧차착찬찮찰참찹찻"
            	],
            	[
            		"c341",
            		"혽혾혿홁홂홃홄홆홇홊홌홎홏홐홒홓홖홗홙홚홛홝",
            		4
            	],
            	[
            		"c361",
            		"홢",
            		4,
            		"홨홪",
            		5,
            		"홲홳홵",
            		11
            	],
            	[
            		"c381",
            		"횁횂횄횆",
            		5,
            		"횎횏횑횒횓횕",
            		7,
            		"횞횠횢",
            		5,
            		"횩횪찼창찾채책챈챌챔챕챗챘챙챠챤챦챨챰챵처척천철첨첩첫첬청체첵첸첼쳄쳅쳇쳉쳐쳔쳤쳬쳰촁초촉촌촐촘촙촛총촤촨촬촹최쵠쵤쵬쵭쵯쵱쵸춈추축춘출춤춥춧충춰췄췌췐취췬췰췸췹췻췽츄츈츌츔츙츠측츤츨츰츱츳층"
            	],
            	[
            		"c441",
            		"횫횭횮횯횱",
            		7,
            		"횺횼",
            		7,
            		"훆훇훉훊훋"
            	],
            	[
            		"c461",
            		"훍훎훏훐훒훓훕훖훘훚",
            		5,
            		"훡훢훣훥훦훧훩",
            		4
            	],
            	[
            		"c481",
            		"훮훯훱훲훳훴훶",
            		5,
            		"훾훿휁휂휃휅",
            		11,
            		"휒휓휔치칙친칟칠칡침칩칫칭카칵칸칼캄캅캇캉캐캑캔캘캠캡캣캤캥캬캭컁커컥컨컫컬컴컵컷컸컹케켁켄켈켐켑켓켕켜켠켤켬켭켯켰켱켸코콕콘콜콤콥콧콩콰콱콴콸쾀쾅쾌쾡쾨쾰쿄쿠쿡쿤쿨쿰쿱쿳쿵쿼퀀퀄퀑퀘퀭퀴퀵퀸퀼"
            	],
            	[
            		"c541",
            		"휕휖휗휚휛휝휞휟휡",
            		6,
            		"휪휬휮",
            		5,
            		"휶휷휹"
            	],
            	[
            		"c561",
            		"휺휻휽",
            		6,
            		"흅흆흈흊",
            		5,
            		"흒흓흕흚",
            		4
            	],
            	[
            		"c581",
            		"흟흢흤흦흧흨흪흫흭흮흯흱흲흳흵",
            		6,
            		"흾흿힀힂",
            		5,
            		"힊힋큄큅큇큉큐큔큘큠크큭큰클큼큽킁키킥킨킬킴킵킷킹타탁탄탈탉탐탑탓탔탕태택탠탤탬탭탯탰탱탸턍터턱턴털턺텀텁텃텄텅테텍텐텔템텝텟텡텨텬텼톄톈토톡톤톨톰톱톳통톺톼퇀퇘퇴퇸툇툉툐투툭툰툴툼툽툿퉁퉈퉜"
            	],
            	[
            		"c641",
            		"힍힎힏힑",
            		6,
            		"힚힜힞",
            		5
            	],
            	[
            		"c6a1",
            		"퉤튀튁튄튈튐튑튕튜튠튤튬튱트특튼튿틀틂틈틉틋틔틘틜틤틥티틱틴틸팀팁팃팅파팍팎판팔팖팜팝팟팠팡팥패팩팬팰팸팹팻팼팽퍄퍅퍼퍽펀펄펌펍펏펐펑페펙펜펠펨펩펫펭펴편펼폄폅폈평폐폘폡폣포폭폰폴폼폽폿퐁"
            	],
            	[
            		"c7a1",
            		"퐈퐝푀푄표푠푤푭푯푸푹푼푿풀풂품풉풋풍풔풩퓌퓐퓔퓜퓟퓨퓬퓰퓸퓻퓽프픈플픔픕픗피픽핀필핌핍핏핑하학한할핥함합핫항해핵핸핼햄햅햇했행햐향허헉헌헐헒험헙헛헝헤헥헨헬헴헵헷헹혀혁현혈혐협혓혔형혜혠"
            	],
            	[
            		"c8a1",
            		"혤혭호혹혼홀홅홈홉홋홍홑화확환활홧황홰홱홴횃횅회획횐횔횝횟횡효횬횰횹횻후훅훈훌훑훔훗훙훠훤훨훰훵훼훽휀휄휑휘휙휜휠휨휩휫휭휴휵휸휼흄흇흉흐흑흔흖흗흘흙흠흡흣흥흩희흰흴흼흽힁히힉힌힐힘힙힛힝"
            	],
            	[
            		"caa1",
            		"伽佳假價加可呵哥嘉嫁家暇架枷柯歌珂痂稼苛茄街袈訶賈跏軻迦駕刻却各恪慤殼珏脚覺角閣侃刊墾奸姦干幹懇揀杆柬桿澗癎看磵稈竿簡肝艮艱諫間乫喝曷渴碣竭葛褐蝎鞨勘坎堪嵌感憾戡敢柑橄減甘疳監瞰紺邯鑑鑒龕"
            	],
            	[
            		"cba1",
            		"匣岬甲胛鉀閘剛堈姜岡崗康强彊慷江畺疆糠絳綱羌腔舡薑襁講鋼降鱇介价個凱塏愷愾慨改槪漑疥皆盖箇芥蓋豈鎧開喀客坑更粳羹醵倨去居巨拒据據擧渠炬祛距踞車遽鉅鋸乾件健巾建愆楗腱虔蹇鍵騫乞傑杰桀儉劍劒檢"
            	],
            	[
            		"cca1",
            		"瞼鈐黔劫怯迲偈憩揭擊格檄激膈覡隔堅牽犬甄絹繭肩見譴遣鵑抉決潔結缺訣兼慊箝謙鉗鎌京俓倞傾儆勁勍卿坰境庚徑慶憬擎敬景暻更梗涇炅烱璟璥瓊痙硬磬竟競絅經耕耿脛莖警輕逕鏡頃頸驚鯨係啓堺契季屆悸戒桂械"
            	],
            	[
            		"cda1",
            		"棨溪界癸磎稽系繫繼計誡谿階鷄古叩告呱固姑孤尻庫拷攷故敲暠枯槁沽痼皐睾稿羔考股膏苦苽菰藁蠱袴誥賈辜錮雇顧高鼓哭斛曲梏穀谷鵠困坤崑昆梱棍滾琨袞鯤汨滑骨供公共功孔工恐恭拱控攻珙空蚣貢鞏串寡戈果瓜"
            	],
            	[
            		"cea1",
            		"科菓誇課跨過鍋顆廓槨藿郭串冠官寬慣棺款灌琯瓘管罐菅觀貫關館刮恝括适侊光匡壙廣曠洸炚狂珖筐胱鑛卦掛罫乖傀塊壞怪愧拐槐魁宏紘肱轟交僑咬喬嬌嶠巧攪敎校橋狡皎矯絞翹膠蕎蛟較轎郊餃驕鮫丘久九仇俱具勾"
            	],
            	[
            		"cfa1",
            		"區口句咎嘔坵垢寇嶇廐懼拘救枸柩構歐毆毬求溝灸狗玖球瞿矩究絿耉臼舅舊苟衢謳購軀逑邱鉤銶駒驅鳩鷗龜國局菊鞠鞫麴君窘群裙軍郡堀屈掘窟宮弓穹窮芎躬倦券勸卷圈拳捲權淃眷厥獗蕨蹶闕机櫃潰詭軌饋句晷歸貴"
            	],
            	[
            		"d0a1",
            		"鬼龜叫圭奎揆槻珪硅窺竅糾葵規赳逵閨勻均畇筠菌鈞龜橘克剋劇戟棘極隙僅劤勤懃斤根槿瑾筋芹菫覲謹近饉契今妗擒昑檎琴禁禽芩衾衿襟金錦伋及急扱汲級給亘兢矜肯企伎其冀嗜器圻基埼夔奇妓寄岐崎己幾忌技旗旣"
            	],
            	[
            		"d1a1",
            		"朞期杞棋棄機欺氣汽沂淇玘琦琪璂璣畸畿碁磯祁祇祈祺箕紀綺羈耆耭肌記譏豈起錡錤飢饑騎騏驥麒緊佶吉拮桔金喫儺喇奈娜懦懶拏拿癩",
            		5,
            		"那樂",
            		4,
            		"諾酪駱亂卵暖欄煖爛蘭難鸞捏捺南嵐枏楠湳濫男藍襤拉"
            	],
            	[
            		"d2a1",
            		"納臘蠟衲囊娘廊",
            		4,
            		"乃來內奈柰耐冷女年撚秊念恬拈捻寧寗努勞奴弩怒擄櫓爐瑙盧",
            		5,
            		"駑魯",
            		10,
            		"濃籠聾膿農惱牢磊腦賂雷尿壘",
            		7,
            		"嫩訥杻紐勒",
            		5,
            		"能菱陵尼泥匿溺多茶"
            	],
            	[
            		"d3a1",
            		"丹亶但單團壇彖斷旦檀段湍短端簞緞蛋袒鄲鍛撻澾獺疸達啖坍憺擔曇淡湛潭澹痰聃膽蕁覃談譚錟沓畓答踏遝唐堂塘幢戇撞棠當糖螳黨代垈坮大對岱帶待戴擡玳臺袋貸隊黛宅德悳倒刀到圖堵塗導屠島嶋度徒悼挑掉搗桃"
            	],
            	[
            		"d4a1",
            		"棹櫂淘渡滔濤燾盜睹禱稻萄覩賭跳蹈逃途道都鍍陶韜毒瀆牘犢獨督禿篤纛讀墩惇敦旽暾沌焞燉豚頓乭突仝冬凍動同憧東桐棟洞潼疼瞳童胴董銅兜斗杜枓痘竇荳讀豆逗頭屯臀芚遁遯鈍得嶝橙燈登等藤謄鄧騰喇懶拏癩羅"
            	],
            	[
            		"d5a1",
            		"蘿螺裸邏樂洛烙珞絡落諾酪駱丹亂卵欄欒瀾爛蘭鸞剌辣嵐擥攬欖濫籃纜藍襤覽拉臘蠟廊朗浪狼琅瑯螂郞來崍徠萊冷掠略亮倆兩凉梁樑粮粱糧良諒輛量侶儷勵呂廬慮戾旅櫚濾礪藜蠣閭驢驪麗黎力曆歷瀝礫轢靂憐戀攣漣"
            	],
            	[
            		"d6a1",
            		"煉璉練聯蓮輦連鍊冽列劣洌烈裂廉斂殮濂簾獵令伶囹寧岺嶺怜玲笭羚翎聆逞鈴零靈領齡例澧禮醴隷勞怒撈擄櫓潞瀘爐盧老蘆虜路輅露魯鷺鹵碌祿綠菉錄鹿麓論壟弄朧瀧瓏籠聾儡瀨牢磊賂賚賴雷了僚寮廖料燎療瞭聊蓼"
            	],
            	[
            		"d7a1",
            		"遼鬧龍壘婁屢樓淚漏瘻累縷蔞褸鏤陋劉旒柳榴流溜瀏琉瑠留瘤硫謬類六戮陸侖倫崙淪綸輪律慄栗率隆勒肋凜凌楞稜綾菱陵俚利厘吏唎履悧李梨浬犁狸理璃異痢籬罹羸莉裏裡里釐離鯉吝潾燐璘藺躪隣鱗麟林淋琳臨霖砬"
            	],
            	[
            		"d8a1",
            		"立笠粒摩瑪痲碼磨馬魔麻寞幕漠膜莫邈万卍娩巒彎慢挽晩曼滿漫灣瞞萬蔓蠻輓饅鰻唜抹末沫茉襪靺亡妄忘忙望網罔芒茫莽輞邙埋妹媒寐昧枚梅每煤罵買賣邁魅脈貊陌驀麥孟氓猛盲盟萌冪覓免冕勉棉沔眄眠綿緬面麵滅"
            	],
            	[
            		"d9a1",
            		"蔑冥名命明暝椧溟皿瞑茗蓂螟酩銘鳴袂侮冒募姆帽慕摸摹暮某模母毛牟牡瑁眸矛耗芼茅謀謨貌木沐牧目睦穆鶩歿沒夢朦蒙卯墓妙廟描昴杳渺猫竗苗錨務巫憮懋戊拇撫无楙武毋無珷畝繆舞茂蕪誣貿霧鵡墨默們刎吻問文"
            	],
            	[
            		"daa1",
            		"汶紊紋聞蚊門雯勿沕物味媚尾嵋彌微未梶楣渼湄眉米美薇謎迷靡黴岷悶愍憫敏旻旼民泯玟珉緡閔密蜜謐剝博拍搏撲朴樸泊珀璞箔粕縛膊舶薄迫雹駁伴半反叛拌搬攀斑槃泮潘班畔瘢盤盼磐磻礬絆般蟠返頒飯勃拔撥渤潑"
            	],
            	[
            		"dba1",
            		"發跋醱鉢髮魃倣傍坊妨尨幇彷房放方旁昉枋榜滂磅紡肪膀舫芳蒡蚌訪謗邦防龐倍俳北培徘拜排杯湃焙盃背胚裴裵褙賠輩配陪伯佰帛柏栢白百魄幡樊煩燔番磻繁蕃藩飜伐筏罰閥凡帆梵氾汎泛犯範范法琺僻劈壁擘檗璧癖"
            	],
            	[
            		"dca1",
            		"碧蘗闢霹便卞弁變辨辯邊別瞥鱉鼈丙倂兵屛幷昞昺柄棅炳甁病秉竝輧餠騈保堡報寶普步洑湺潽珤甫菩補褓譜輔伏僕匐卜宓復服福腹茯蔔複覆輹輻馥鰒本乶俸奉封峯峰捧棒烽熢琫縫蓬蜂逢鋒鳳不付俯傅剖副否咐埠夫婦"
            	],
            	[
            		"dda1",
            		"孚孵富府復扶敷斧浮溥父符簿缶腐腑膚艀芙莩訃負賦賻赴趺部釜阜附駙鳧北分吩噴墳奔奮忿憤扮昐汾焚盆粉糞紛芬賁雰不佛弗彿拂崩朋棚硼繃鵬丕備匕匪卑妃婢庇悲憊扉批斐枇榧比毖毗毘沸泌琵痺砒碑秕秘粃緋翡肥"
            	],
            	[
            		"dea1",
            		"脾臂菲蜚裨誹譬費鄙非飛鼻嚬嬪彬斌檳殯浜濱瀕牝玭貧賓頻憑氷聘騁乍事些仕伺似使俟僿史司唆嗣四士奢娑寫寺射巳師徙思捨斜斯柶査梭死沙泗渣瀉獅砂社祀祠私篩紗絲肆舍莎蓑蛇裟詐詞謝賜赦辭邪飼駟麝削數朔索"
            	],
            	[
            		"dfa1",
            		"傘刪山散汕珊産疝算蒜酸霰乷撒殺煞薩三參杉森渗芟蔘衫揷澁鈒颯上傷像償商喪嘗孀尙峠常床庠廂想桑橡湘爽牀狀相祥箱翔裳觴詳象賞霜塞璽賽嗇塞穡索色牲生甥省笙墅壻嶼序庶徐恕抒捿敍暑曙書栖棲犀瑞筮絮緖署"
            	],
            	[
            		"e0a1",
            		"胥舒薯西誓逝鋤黍鼠夕奭席惜昔晳析汐淅潟石碩蓆釋錫仙僊先善嬋宣扇敾旋渲煽琁瑄璇璿癬禪線繕羨腺膳船蘚蟬詵跣選銑鐥饍鮮卨屑楔泄洩渫舌薛褻設說雪齧剡暹殲纖蟾贍閃陝攝涉燮葉城姓宬性惺成星晟猩珹盛省筬"
            	],
            	[
            		"e1a1",
            		"聖聲腥誠醒世勢歲洗稅笹細說貰召嘯塑宵小少巢所掃搔昭梳沼消溯瀟炤燒甦疏疎瘙笑篠簫素紹蔬蕭蘇訴逍遡邵銷韶騷俗屬束涑粟續謖贖速孫巽損蓀遜飡率宋悚松淞訟誦送頌刷殺灑碎鎖衰釗修受嗽囚垂壽嫂守岫峀帥愁"
            	],
            	[
            		"e2a1",
            		"戍手授搜收數樹殊水洙漱燧狩獸琇璲瘦睡秀穗竪粹綏綬繡羞脩茱蒐蓚藪袖誰讐輸遂邃酬銖銹隋隧隨雖需須首髓鬚叔塾夙孰宿淑潚熟琡璹肅菽巡徇循恂旬栒楯橓殉洵淳珣盾瞬筍純脣舜荀蓴蕣詢諄醇錞順馴戌術述鉥崇崧"
            	],
            	[
            		"e3a1",
            		"嵩瑟膝蝨濕拾習褶襲丞乘僧勝升承昇繩蠅陞侍匙嘶始媤尸屎屍市弑恃施是時枾柴猜矢示翅蒔蓍視試詩諡豕豺埴寔式息拭植殖湜熄篒蝕識軾食飾伸侁信呻娠宸愼新晨燼申神紳腎臣莘薪藎蜃訊身辛辰迅失室實悉審尋心沁"
            	],
            	[
            		"e4a1",
            		"沈深瀋甚芯諶什十拾雙氏亞俄兒啞娥峨我牙芽莪蛾衙訝阿雅餓鴉鵝堊岳嶽幄惡愕握樂渥鄂鍔顎鰐齷安岸按晏案眼雁鞍顔鮟斡謁軋閼唵岩巖庵暗癌菴闇壓押狎鴨仰央怏昻殃秧鴦厓哀埃崖愛曖涯碍艾隘靄厄扼掖液縊腋額"
            	],
            	[
            		"e5a1",
            		"櫻罌鶯鸚也倻冶夜惹揶椰爺耶若野弱掠略約若葯蒻藥躍亮佯兩凉壤孃恙揚攘敭暘梁楊樣洋瀁煬痒瘍禳穰糧羊良襄諒讓釀陽量養圄御於漁瘀禦語馭魚齬億憶抑檍臆偃堰彦焉言諺孼蘖俺儼嚴奄掩淹嶪業円予余勵呂女如廬"
            	],
            	[
            		"e6a1",
            		"旅歟汝濾璵礖礪與艅茹輿轝閭餘驪麗黎亦力域役易曆歷疫繹譯轢逆驛嚥堧姸娟宴年延憐戀捐挻撚椽沇沿涎涓淵演漣烟然煙煉燃燕璉硏硯秊筵緣練縯聯衍軟輦蓮連鉛鍊鳶列劣咽悅涅烈熱裂說閱厭廉念捻染殮炎焰琰艶苒"
            	],
            	[
            		"e7a1",
            		"簾閻髥鹽曄獵燁葉令囹塋寧嶺嶸影怜映暎楹榮永泳渶潁濚瀛瀯煐營獰玲瑛瑩瓔盈穎纓羚聆英詠迎鈴鍈零霙靈領乂倪例刈叡曳汭濊猊睿穢芮藝蘂禮裔詣譽豫醴銳隸霓預五伍俉傲午吾吳嗚塢墺奧娛寤悟惡懊敖旿晤梧汚澳"
            	],
            	[
            		"e8a1",
            		"烏熬獒筽蜈誤鰲鼇屋沃獄玉鈺溫瑥瘟穩縕蘊兀壅擁瓮甕癰翁邕雍饔渦瓦窩窪臥蛙蝸訛婉完宛梡椀浣玩琓琬碗緩翫脘腕莞豌阮頑曰往旺枉汪王倭娃歪矮外嵬巍猥畏了僚僥凹堯夭妖姚寥寮尿嶢拗搖撓擾料曜樂橈燎燿瑤療"
            	],
            	[
            		"e9a1",
            		"窈窯繇繞耀腰蓼蟯要謠遙遼邀饒慾欲浴縟褥辱俑傭冗勇埇墉容庸慂榕涌湧溶熔瑢用甬聳茸蓉踊鎔鏞龍于佑偶優又友右宇寓尤愚憂旴牛玗瑀盂祐禑禹紆羽芋藕虞迂遇郵釪隅雨雩勖彧旭昱栯煜稶郁頊云暈橒殞澐熉耘芸蕓"
            	],
            	[
            		"eaa1",
            		"運隕雲韻蔚鬱亐熊雄元原員圓園垣媛嫄寃怨愿援沅洹湲源爰猿瑗苑袁轅遠阮院願鴛月越鉞位偉僞危圍委威尉慰暐渭爲瑋緯胃萎葦蔿蝟衛褘謂違韋魏乳侑儒兪劉唯喩孺宥幼幽庾悠惟愈愉揄攸有杻柔柚柳楡楢油洧流游溜"
            	],
            	[
            		"eba1",
            		"濡猶猷琉瑜由留癒硫紐維臾萸裕誘諛諭踰蹂遊逾遺酉釉鍮類六堉戮毓肉育陸倫允奫尹崙淪潤玧胤贇輪鈗閏律慄栗率聿戎瀜絨融隆垠恩慇殷誾銀隱乙吟淫蔭陰音飮揖泣邑凝應膺鷹依倚儀宜意懿擬椅毅疑矣義艤薏蟻衣誼"
            	],
            	[
            		"eca1",
            		"議醫二以伊利吏夷姨履已弛彛怡易李梨泥爾珥理異痍痢移罹而耳肄苡荑裏裡貽貳邇里離飴餌匿溺瀷益翊翌翼謚人仁刃印吝咽因姻寅引忍湮燐璘絪茵藺蚓認隣靭靷鱗麟一佚佾壹日溢逸鎰馹任壬妊姙恁林淋稔臨荏賃入卄"
            	],
            	[
            		"eda1",
            		"立笠粒仍剩孕芿仔刺咨姉姿子字孜恣慈滋炙煮玆瓷疵磁紫者自茨蔗藉諮資雌作勺嚼斫昨灼炸爵綽芍酌雀鵲孱棧殘潺盞岑暫潛箴簪蠶雜丈仗匠場墻壯奬將帳庄張掌暲杖樟檣欌漿牆狀獐璋章粧腸臟臧莊葬蔣薔藏裝贓醬長"
            	],
            	[
            		"eea1",
            		"障再哉在宰才材栽梓渽滓災縡裁財載齋齎爭箏諍錚佇低儲咀姐底抵杵楮樗沮渚狙猪疽箸紵苧菹著藷詛貯躇這邸雎齟勣吊嫡寂摘敵滴狄炙的積笛籍績翟荻謫賊赤跡蹟迪迹適鏑佃佺傳全典前剪塡塼奠專展廛悛戰栓殿氈澱"
            	],
            	[
            		"efa1",
            		"煎琠田甸畑癲筌箋箭篆纏詮輾轉鈿銓錢鐫電顚顫餞切截折浙癤竊節絶占岾店漸点粘霑鮎點接摺蝶丁井亭停偵呈姃定幀庭廷征情挺政整旌晶晸柾楨檉正汀淀淨渟湞瀞炡玎珽町睛碇禎程穽精綎艇訂諪貞鄭酊釘鉦鋌錠霆靖"
            	],
            	[
            		"f0a1",
            		"靜頂鼎制劑啼堤帝弟悌提梯濟祭第臍薺製諸蹄醍除際霽題齊俎兆凋助嘲弔彫措操早晁曺曹朝條棗槽漕潮照燥爪璪眺祖祚租稠窕粗糟組繰肇藻蚤詔調趙躁造遭釣阻雕鳥族簇足鏃存尊卒拙猝倧宗從悰慫棕淙琮種終綜縱腫"
            	],
            	[
            		"f1a1",
            		"踪踵鍾鐘佐坐左座挫罪主住侏做姝胄呪周嗾奏宙州廚晝朱柱株注洲湊澍炷珠疇籌紂紬綢舟蛛註誅走躊輳週酎酒鑄駐竹粥俊儁准埈寯峻晙樽浚準濬焌畯竣蠢逡遵雋駿茁中仲衆重卽櫛楫汁葺增憎曾拯烝甑症繒蒸證贈之只"
            	],
            	[
            		"f2a1",
            		"咫地址志持指摯支旨智枝枳止池沚漬知砥祉祗紙肢脂至芝芷蜘誌識贄趾遲直稙稷織職唇嗔塵振搢晉晋桭榛殄津溱珍瑨璡畛疹盡眞瞋秦縉縝臻蔯袗診賑軫辰進鎭陣陳震侄叱姪嫉帙桎瓆疾秩窒膣蛭質跌迭斟朕什執潗緝輯"
            	],
            	[
            		"f3a1",
            		"鏶集徵懲澄且侘借叉嗟嵯差次此磋箚茶蹉車遮捉搾着窄錯鑿齪撰澯燦璨瓚竄簒纂粲纘讚贊鑽餐饌刹察擦札紮僭參塹慘慙懺斬站讒讖倉倡創唱娼廠彰愴敞昌昶暢槍滄漲猖瘡窓脹艙菖蒼債埰寀寨彩採砦綵菜蔡采釵冊柵策"
            	],
            	[
            		"f4a1",
            		"責凄妻悽處倜刺剔尺慽戚拓擲斥滌瘠脊蹠陟隻仟千喘天川擅泉淺玔穿舛薦賤踐遷釧闡阡韆凸哲喆徹撤澈綴輟轍鐵僉尖沾添甛瞻簽籤詹諂堞妾帖捷牒疊睫諜貼輒廳晴淸聽菁請靑鯖切剃替涕滯締諦逮遞體初剿哨憔抄招梢"
            	],
            	[
            		"f5a1",
            		"椒楚樵炒焦硝礁礎秒稍肖艸苕草蕉貂超酢醋醮促囑燭矗蜀觸寸忖村邨叢塚寵悤憁摠總聰蔥銃撮催崔最墜抽推椎楸樞湫皺秋芻萩諏趨追鄒酋醜錐錘鎚雛騶鰍丑畜祝竺筑築縮蓄蹙蹴軸逐春椿瑃出朮黜充忠沖蟲衝衷悴膵萃"
            	],
            	[
            		"f6a1",
            		"贅取吹嘴娶就炊翠聚脆臭趣醉驟鷲側仄厠惻測層侈値嗤峙幟恥梔治淄熾痔痴癡稚穉緇緻置致蚩輜雉馳齒則勅飭親七柒漆侵寢枕沈浸琛砧針鍼蟄秤稱快他咤唾墮妥惰打拖朶楕舵陀馱駝倬卓啄坼度托拓擢晫柝濁濯琢琸託"
            	],
            	[
            		"f7a1",
            		"鐸呑嘆坦彈憚歎灘炭綻誕奪脫探眈耽貪塔搭榻宕帑湯糖蕩兌台太怠態殆汰泰笞胎苔跆邰颱宅擇澤撑攄兎吐土討慟桶洞痛筒統通堆槌腿褪退頹偸套妬投透鬪慝特闖坡婆巴把播擺杷波派爬琶破罷芭跛頗判坂板版瓣販辦鈑"
            	],
            	[
            		"f8a1",
            		"阪八叭捌佩唄悖敗沛浿牌狽稗覇貝彭澎烹膨愎便偏扁片篇編翩遍鞭騙貶坪平枰萍評吠嬖幣廢弊斃肺蔽閉陛佈包匍匏咆哺圃布怖抛抱捕暴泡浦疱砲胞脯苞葡蒲袍褒逋鋪飽鮑幅暴曝瀑爆輻俵剽彪慓杓標漂瓢票表豹飇飄驃"
            	],
            	[
            		"f9a1",
            		"品稟楓諷豊風馮彼披疲皮被避陂匹弼必泌珌畢疋筆苾馝乏逼下何厦夏廈昰河瑕荷蝦賀遐霞鰕壑學虐謔鶴寒恨悍旱汗漢澣瀚罕翰閑閒限韓割轄函含咸啣喊檻涵緘艦銜陷鹹合哈盒蛤閤闔陜亢伉姮嫦巷恒抗杭桁沆港缸肛航"
            	],
            	[
            		"faa1",
            		"行降項亥偕咳垓奚孩害懈楷海瀣蟹解該諧邂駭骸劾核倖幸杏荇行享向嚮珦鄕響餉饗香噓墟虛許憲櫶獻軒歇險驗奕爀赫革俔峴弦懸晛泫炫玄玹現眩睍絃絢縣舷衒見賢鉉顯孑穴血頁嫌俠協夾峽挾浹狹脅脇莢鋏頰亨兄刑型"
            	],
            	[
            		"fba1",
            		"形泂滎瀅灐炯熒珩瑩荊螢衡逈邢鎣馨兮彗惠慧暳蕙蹊醯鞋乎互呼壕壺好岵弧戶扈昊晧毫浩淏湖滸澔濠濩灝狐琥瑚瓠皓祜糊縞胡芦葫蒿虎號蝴護豪鎬頀顥惑或酷婚昏混渾琿魂忽惚笏哄弘汞泓洪烘紅虹訌鴻化和嬅樺火畵"
            	],
            	[
            		"fca1",
            		"禍禾花華話譁貨靴廓擴攫確碻穫丸喚奐宦幻患換歡晥桓渙煥環紈還驩鰥活滑猾豁闊凰幌徨恍惶愰慌晃晄榥況湟滉潢煌璜皇篁簧荒蝗遑隍黃匯回廻徊恢悔懷晦會檜淮澮灰獪繪膾茴蛔誨賄劃獲宖橫鐄哮嚆孝效斅曉梟涍淆"
            	],
            	[
            		"fda1",
            		"爻肴酵驍侯候厚后吼喉嗅帿後朽煦珝逅勛勳塤壎焄熏燻薰訓暈薨喧暄煊萱卉喙毁彙徽揮暉煇諱輝麾休携烋畦虧恤譎鷸兇凶匈洶胸黑昕欣炘痕吃屹紇訖欠欽歆吸恰洽翕興僖凞喜噫囍姬嬉希憙憘戱晞曦熙熹熺犧禧稀羲詰"
            	]
            ];

            var require$$6 = [
            	[
            		"0",
            		"\u0000",
            		127
            	],
            	[
            		"a140",
            		"　，、。．‧；：？！︰…‥﹐﹑﹒·﹔﹕﹖﹗｜–︱—︳╴︴﹏（）︵︶｛｝︷︸〔〕︹︺【】︻︼《》︽︾〈〉︿﹀「」﹁﹂『』﹃﹄﹙﹚"
            	],
            	[
            		"a1a1",
            		"﹛﹜﹝﹞‘’“”〝〞‵′＃＆＊※§〃○●△▲◎☆★◇◆□■▽▼㊣℅¯￣＿ˍ﹉﹊﹍﹎﹋﹌﹟﹠﹡＋－×÷±√＜＞＝≦≧≠∞≒≡﹢",
            		4,
            		"～∩∪⊥∠∟⊿㏒㏑∫∮∵∴♀♂⊕⊙↑↓←→↖↗↙↘∥∣／"
            	],
            	[
            		"a240",
            		"＼∕﹨＄￥〒￠￡％＠℃℉﹩﹪﹫㏕㎜㎝㎞㏎㎡㎎㎏㏄°兙兛兞兝兡兣嗧瓩糎▁",
            		7,
            		"▏▎▍▌▋▊▉┼┴┬┤├▔─│▕┌┐└┘╭"
            	],
            	[
            		"a2a1",
            		"╮╰╯═╞╪╡◢◣◥◤╱╲╳０",
            		9,
            		"Ⅰ",
            		9,
            		"〡",
            		8,
            		"十卄卅Ａ",
            		25,
            		"ａ",
            		21
            	],
            	[
            		"a340",
            		"ｗｘｙｚΑ",
            		16,
            		"Σ",
            		6,
            		"α",
            		16,
            		"σ",
            		6,
            		"ㄅ",
            		10
            	],
            	[
            		"a3a1",
            		"ㄐ",
            		25,
            		"˙ˉˊˇˋ"
            	],
            	[
            		"a3e1",
            		"€"
            	],
            	[
            		"a440",
            		"一乙丁七乃九了二人儿入八几刀刁力匕十卜又三下丈上丫丸凡久么也乞于亡兀刃勺千叉口土士夕大女子孑孓寸小尢尸山川工己已巳巾干廾弋弓才"
            	],
            	[
            		"a4a1",
            		"丑丐不中丰丹之尹予云井互五亢仁什仃仆仇仍今介仄元允內六兮公冗凶分切刈勻勾勿化匹午升卅卞厄友及反壬天夫太夭孔少尤尺屯巴幻廿弔引心戈戶手扎支文斗斤方日曰月木欠止歹毋比毛氏水火爪父爻片牙牛犬王丙"
            	],
            	[
            		"a540",
            		"世丕且丘主乍乏乎以付仔仕他仗代令仙仞充兄冉冊冬凹出凸刊加功包匆北匝仟半卉卡占卯卮去可古右召叮叩叨叼司叵叫另只史叱台句叭叻四囚外"
            	],
            	[
            		"a5a1",
            		"央失奴奶孕它尼巨巧左市布平幼弁弘弗必戊打扔扒扑斥旦朮本未末札正母民氐永汁汀氾犯玄玉瓜瓦甘生用甩田由甲申疋白皮皿目矛矢石示禾穴立丞丟乒乓乩亙交亦亥仿伉伙伊伕伍伐休伏仲件任仰仳份企伋光兇兆先全"
            	],
            	[
            		"a640",
            		"共再冰列刑划刎刖劣匈匡匠印危吉吏同吊吐吁吋各向名合吃后吆吒因回囝圳地在圭圬圯圩夙多夷夸妄奸妃好她如妁字存宇守宅安寺尖屹州帆并年"
            	],
            	[
            		"a6a1",
            		"式弛忙忖戎戌戍成扣扛托收早旨旬旭曲曳有朽朴朱朵次此死氖汝汗汙江池汐汕污汛汍汎灰牟牝百竹米糸缶羊羽老考而耒耳聿肉肋肌臣自至臼舌舛舟艮色艾虫血行衣西阡串亨位住佇佗佞伴佛何估佐佑伽伺伸佃佔似但佣"
            	],
            	[
            		"a740",
            		"作你伯低伶余佝佈佚兌克免兵冶冷別判利刪刨劫助努劬匣即卵吝吭吞吾否呎吧呆呃吳呈呂君吩告吹吻吸吮吵吶吠吼呀吱含吟听囪困囤囫坊坑址坍"
            	],
            	[
            		"a7a1",
            		"均坎圾坐坏圻壯夾妝妒妨妞妣妙妖妍妤妓妊妥孝孜孚孛完宋宏尬局屁尿尾岐岑岔岌巫希序庇床廷弄弟彤形彷役忘忌志忍忱快忸忪戒我抄抗抖技扶抉扭把扼找批扳抒扯折扮投抓抑抆改攻攸旱更束李杏材村杜杖杞杉杆杠"
            	],
            	[
            		"a840",
            		"杓杗步每求汞沙沁沈沉沅沛汪決沐汰沌汨沖沒汽沃汲汾汴沆汶沍沔沘沂灶灼災灸牢牡牠狄狂玖甬甫男甸皂盯矣私秀禿究系罕肖肓肝肘肛肚育良芒"
            	],
            	[
            		"a8a1",
            		"芋芍見角言谷豆豕貝赤走足身車辛辰迂迆迅迄巡邑邢邪邦那酉釆里防阮阱阪阬並乖乳事些亞享京佯依侍佳使佬供例來侃佰併侈佩佻侖佾侏侑佺兔兒兕兩具其典冽函刻券刷刺到刮制剁劾劻卒協卓卑卦卷卸卹取叔受味呵"
            	],
            	[
            		"a940",
            		"咖呸咕咀呻呷咄咒咆呼咐呱呶和咚呢周咋命咎固垃坷坪坩坡坦坤坼夜奉奇奈奄奔妾妻委妹妮姑姆姐姍始姓姊妯妳姒姅孟孤季宗定官宜宙宛尚屈居"
            	],
            	[
            		"a9a1",
            		"屆岷岡岸岩岫岱岳帘帚帖帕帛帑幸庚店府底庖延弦弧弩往征彿彼忝忠忽念忿怏怔怯怵怖怪怕怡性怩怫怛或戕房戾所承拉拌拄抿拂抹拒招披拓拔拋拈抨抽押拐拙拇拍抵拚抱拘拖拗拆抬拎放斧於旺昔易昌昆昂明昀昏昕昊"
            	],
            	[
            		"aa40",
            		"昇服朋杭枋枕東果杳杷枇枝林杯杰板枉松析杵枚枓杼杪杲欣武歧歿氓氛泣注泳沱泌泥河沽沾沼波沫法泓沸泄油況沮泗泅泱沿治泡泛泊沬泯泜泖泠"
            	],
            	[
            		"aaa1",
            		"炕炎炒炊炙爬爭爸版牧物狀狎狙狗狐玩玨玟玫玥甽疝疙疚的盂盲直知矽社祀祁秉秈空穹竺糾罔羌羋者肺肥肢肱股肫肩肴肪肯臥臾舍芳芝芙芭芽芟芹花芬芥芯芸芣芰芾芷虎虱初表軋迎返近邵邸邱邶采金長門阜陀阿阻附"
            	],
            	[
            		"ab40",
            		"陂隹雨青非亟亭亮信侵侯便俠俑俏保促侶俘俟俊俗侮俐俄係俚俎俞侷兗冒冑冠剎剃削前剌剋則勇勉勃勁匍南卻厚叛咬哀咨哎哉咸咦咳哇哂咽咪品"
            	],
            	[
            		"aba1",
            		"哄哈咯咫咱咻咩咧咿囿垂型垠垣垢城垮垓奕契奏奎奐姜姘姿姣姨娃姥姪姚姦威姻孩宣宦室客宥封屎屏屍屋峙峒巷帝帥帟幽庠度建弈弭彥很待徊律徇後徉怒思怠急怎怨恍恰恨恢恆恃恬恫恪恤扁拜挖按拼拭持拮拽指拱拷"
            	],
            	[
            		"ac40",
            		"拯括拾拴挑挂政故斫施既春昭映昧是星昨昱昤曷柿染柱柔某柬架枯柵柩柯柄柑枴柚查枸柏柞柳枰柙柢柝柒歪殃殆段毒毗氟泉洋洲洪流津洌洱洞洗"
            	],
            	[
            		"aca1",
            		"活洽派洶洛泵洹洧洸洩洮洵洎洫炫為炳炬炯炭炸炮炤爰牲牯牴狩狠狡玷珊玻玲珍珀玳甚甭畏界畎畋疫疤疥疢疣癸皆皇皈盈盆盃盅省盹相眉看盾盼眇矜砂研砌砍祆祉祈祇禹禺科秒秋穿突竿竽籽紂紅紀紉紇約紆缸美羿耄"
            	],
            	[
            		"ad40",
            		"耐耍耑耶胖胥胚胃胄背胡胛胎胞胤胝致舢苧范茅苣苛苦茄若茂茉苒苗英茁苜苔苑苞苓苟苯茆虐虹虻虺衍衫要觔計訂訃貞負赴赳趴軍軌述迦迢迪迥"
            	],
            	[
            		"ada1",
            		"迭迫迤迨郊郎郁郃酋酊重閂限陋陌降面革韋韭音頁風飛食首香乘亳倌倍倣俯倦倥俸倩倖倆值借倚倒們俺倀倔倨俱倡個候倘俳修倭倪俾倫倉兼冤冥冢凍凌准凋剖剜剔剛剝匪卿原厝叟哨唐唁唷哼哥哲唆哺唔哩哭員唉哮哪"
            	],
            	[
            		"ae40",
            		"哦唧唇哽唏圃圄埂埔埋埃堉夏套奘奚娑娘娜娟娛娓姬娠娣娩娥娌娉孫屘宰害家宴宮宵容宸射屑展屐峭峽峻峪峨峰島崁峴差席師庫庭座弱徒徑徐恙"
            	],
            	[
            		"aea1",
            		"恣恥恐恕恭恩息悄悟悚悍悔悌悅悖扇拳挈拿捎挾振捕捂捆捏捉挺捐挽挪挫挨捍捌效敉料旁旅時晉晏晃晒晌晅晁書朔朕朗校核案框桓根桂桔栩梳栗桌桑栽柴桐桀格桃株桅栓栘桁殊殉殷氣氧氨氦氤泰浪涕消涇浦浸海浙涓"
            	],
            	[
            		"af40",
            		"浬涉浮浚浴浩涌涊浹涅浥涔烊烘烤烙烈烏爹特狼狹狽狸狷玆班琉珮珠珪珞畔畝畜畚留疾病症疲疳疽疼疹痂疸皋皰益盍盎眩真眠眨矩砰砧砸砝破砷"
            	],
            	[
            		"afa1",
            		"砥砭砠砟砲祕祐祠祟祖神祝祗祚秤秣秧租秦秩秘窄窈站笆笑粉紡紗紋紊素索純紐紕級紜納紙紛缺罟羔翅翁耆耘耕耙耗耽耿胱脂胰脅胭胴脆胸胳脈能脊胼胯臭臬舀舐航舫舨般芻茫荒荔荊茸荐草茵茴荏茲茹茶茗荀茱茨荃"
            	],
            	[
            		"b040",
            		"虔蚊蚪蚓蚤蚩蚌蚣蚜衰衷袁袂衽衹記訐討訌訕訊託訓訖訏訑豈豺豹財貢起躬軒軔軏辱送逆迷退迺迴逃追逅迸邕郡郝郢酒配酌釘針釗釜釙閃院陣陡"
            	],
            	[
            		"b0a1",
            		"陛陝除陘陞隻飢馬骨高鬥鬲鬼乾偺偽停假偃偌做偉健偶偎偕偵側偷偏倏偯偭兜冕凰剪副勒務勘動匐匏匙匿區匾參曼商啪啦啄啞啡啃啊唱啖問啕唯啤唸售啜唬啣唳啁啗圈國圉域堅堊堆埠埤基堂堵執培夠奢娶婁婉婦婪婀"
            	],
            	[
            		"b140",
            		"娼婢婚婆婊孰寇寅寄寂宿密尉專將屠屜屝崇崆崎崛崖崢崑崩崔崙崤崧崗巢常帶帳帷康庸庶庵庾張強彗彬彩彫得徙從徘御徠徜恿患悉悠您惋悴惦悽"
            	],
            	[
            		"b1a1",
            		"情悻悵惜悼惘惕惆惟悸惚惇戚戛扈掠控捲掖探接捷捧掘措捱掩掉掃掛捫推掄授掙採掬排掏掀捻捩捨捺敝敖救教敗啟敏敘敕敔斜斛斬族旋旌旎晝晚晤晨晦晞曹勗望梁梯梢梓梵桿桶梱梧梗械梃棄梭梆梅梔條梨梟梡梂欲殺"
            	],
            	[
            		"b240",
            		"毫毬氫涎涼淳淙液淡淌淤添淺清淇淋涯淑涮淞淹涸混淵淅淒渚涵淚淫淘淪深淮淨淆淄涪淬涿淦烹焉焊烽烯爽牽犁猜猛猖猓猙率琅琊球理現琍瓠瓶"
            	],
            	[
            		"b2a1",
            		"瓷甜產略畦畢異疏痔痕疵痊痍皎盔盒盛眷眾眼眶眸眺硫硃硎祥票祭移窒窕笠笨笛第符笙笞笮粒粗粕絆絃統紮紹紼絀細紳組累終紲紱缽羞羚翌翎習耜聊聆脯脖脣脫脩脰脤舂舵舷舶船莎莞莘荸莢莖莽莫莒莊莓莉莠荷荻荼"
            	],
            	[
            		"b340",
            		"莆莧處彪蛇蛀蚶蛄蚵蛆蛋蚱蚯蛉術袞袈被袒袖袍袋覓規訪訝訣訥許設訟訛訢豉豚販責貫貨貪貧赧赦趾趺軛軟這逍通逗連速逝逐逕逞造透逢逖逛途"
            	],
            	[
            		"b3a1",
            		"部郭都酗野釵釦釣釧釭釩閉陪陵陳陸陰陴陶陷陬雀雪雩章竟頂頃魚鳥鹵鹿麥麻傢傍傅備傑傀傖傘傚最凱割剴創剩勞勝勛博厥啻喀喧啼喊喝喘喂喜喪喔喇喋喃喳單喟唾喲喚喻喬喱啾喉喫喙圍堯堪場堤堰報堡堝堠壹壺奠"
            	],
            	[
            		"b440",
            		"婷媚婿媒媛媧孳孱寒富寓寐尊尋就嵌嵐崴嵇巽幅帽幀幃幾廊廁廂廄弼彭復循徨惑惡悲悶惠愜愣惺愕惰惻惴慨惱愎惶愉愀愒戟扉掣掌描揀揩揉揆揍"
            	],
            	[
            		"b4a1",
            		"插揣提握揖揭揮捶援揪換摒揚揹敞敦敢散斑斐斯普晰晴晶景暑智晾晷曾替期朝棺棕棠棘棗椅棟棵森棧棹棒棲棣棋棍植椒椎棉棚楮棻款欺欽殘殖殼毯氮氯氬港游湔渡渲湧湊渠渥渣減湛湘渤湖湮渭渦湯渴湍渺測湃渝渾滋"
            	],
            	[
            		"b540",
            		"溉渙湎湣湄湲湩湟焙焚焦焰無然煮焜牌犄犀猶猥猴猩琺琪琳琢琥琵琶琴琯琛琦琨甥甦畫番痢痛痣痙痘痞痠登發皖皓皴盜睏短硝硬硯稍稈程稅稀窘"
            	],
            	[
            		"b5a1",
            		"窗窖童竣等策筆筐筒答筍筋筏筑粟粥絞結絨絕紫絮絲絡給絢絰絳善翔翕耋聒肅腕腔腋腑腎脹腆脾腌腓腴舒舜菩萃菸萍菠菅萋菁華菱菴著萊菰萌菌菽菲菊萸萎萄菜萇菔菟虛蛟蛙蛭蛔蛛蛤蛐蛞街裁裂袱覃視註詠評詞証詁"
            	],
            	[
            		"b640",
            		"詔詛詐詆訴診訶詖象貂貯貼貳貽賁費賀貴買貶貿貸越超趁跎距跋跚跑跌跛跆軻軸軼辜逮逵週逸進逶鄂郵鄉郾酣酥量鈔鈕鈣鈉鈞鈍鈐鈇鈑閔閏開閑"
            	],
            	[
            		"b6a1",
            		"間閒閎隊階隋陽隅隆隍陲隄雁雅雄集雇雯雲韌項順須飧飪飯飩飲飭馮馭黃黍黑亂傭債傲傳僅傾催傷傻傯僇剿剷剽募勦勤勢勣匯嗟嗨嗓嗦嗎嗜嗇嗑嗣嗤嗯嗚嗡嗅嗆嗥嗉園圓塞塑塘塗塚塔填塌塭塊塢塒塋奧嫁嫉嫌媾媽媼"
            	],
            	[
            		"b740",
            		"媳嫂媲嵩嵯幌幹廉廈弒彙徬微愚意慈感想愛惹愁愈慎慌慄慍愾愴愧愍愆愷戡戢搓搾搞搪搭搽搬搏搜搔損搶搖搗搆敬斟新暗暉暇暈暖暄暘暍會榔業"
            	],
            	[
            		"b7a1",
            		"楚楷楠楔極椰概楊楨楫楞楓楹榆楝楣楛歇歲毀殿毓毽溢溯滓溶滂源溝滇滅溥溘溼溺溫滑準溜滄滔溪溧溴煎煙煩煤煉照煜煬煦煌煥煞煆煨煖爺牒猷獅猿猾瑯瑚瑕瑟瑞瑁琿瑙瑛瑜當畸瘀痰瘁痲痱痺痿痴痳盞盟睛睫睦睞督"
            	],
            	[
            		"b840",
            		"睹睪睬睜睥睨睢矮碎碰碗碘碌碉硼碑碓硿祺祿禁萬禽稜稚稠稔稟稞窟窠筷節筠筮筧粱粳粵經絹綑綁綏絛置罩罪署義羨群聖聘肆肄腱腰腸腥腮腳腫"
            	],
            	[
            		"b8a1",
            		"腹腺腦舅艇蒂葷落萱葵葦葫葉葬葛萼萵葡董葩葭葆虞虜號蛹蜓蜈蜇蜀蛾蛻蜂蜃蜆蜊衙裟裔裙補裘裝裡裊裕裒覜解詫該詳試詩詰誇詼詣誠話誅詭詢詮詬詹詻訾詨豢貊貉賊資賈賄貲賃賂賅跡跟跨路跳跺跪跤跦躲較載軾輊"
            	],
            	[
            		"b940",
            		"辟農運遊道遂達逼違遐遇遏過遍遑逾遁鄒鄗酬酪酩釉鈷鉗鈸鈽鉀鈾鉛鉋鉤鉑鈴鉉鉍鉅鈹鈿鉚閘隘隔隕雍雋雉雊雷電雹零靖靴靶預頑頓頊頒頌飼飴"
            	],
            	[
            		"b9a1",
            		"飽飾馳馱馴髡鳩麂鼎鼓鼠僧僮僥僖僭僚僕像僑僱僎僩兢凳劃劂匱厭嗾嘀嘛嘗嗽嘔嘆嘉嘍嘎嗷嘖嘟嘈嘐嗶團圖塵塾境墓墊塹墅塽壽夥夢夤奪奩嫡嫦嫩嫗嫖嫘嫣孵寞寧寡寥實寨寢寤察對屢嶄嶇幛幣幕幗幔廓廖弊彆彰徹慇"
            	],
            	[
            		"ba40",
            		"愿態慷慢慣慟慚慘慵截撇摘摔撤摸摟摺摑摧搴摭摻敲斡旗旖暢暨暝榜榨榕槁榮槓構榛榷榻榫榴槐槍榭槌榦槃榣歉歌氳漳演滾漓滴漩漾漠漬漏漂漢"
            	],
            	[
            		"baa1",
            		"滿滯漆漱漸漲漣漕漫漯澈漪滬漁滲滌滷熔熙煽熊熄熒爾犒犖獄獐瑤瑣瑪瑰瑭甄疑瘧瘍瘋瘉瘓盡監瞄睽睿睡磁碟碧碳碩碣禎福禍種稱窪窩竭端管箕箋筵算箝箔箏箸箇箄粹粽精綻綰綜綽綾綠緊綴網綱綺綢綿綵綸維緒緇綬"
            	],
            	[
            		"bb40",
            		"罰翠翡翟聞聚肇腐膀膏膈膊腿膂臧臺與舔舞艋蓉蒿蓆蓄蒙蒞蒲蒜蓋蒸蓀蓓蒐蒼蓑蓊蜿蜜蜻蜢蜥蜴蜘蝕蜷蜩裳褂裴裹裸製裨褚裯誦誌語誣認誡誓誤"
            	],
            	[
            		"bba1",
            		"說誥誨誘誑誚誧豪貍貌賓賑賒赫趙趕跼輔輒輕輓辣遠遘遜遣遙遞遢遝遛鄙鄘鄞酵酸酷酴鉸銀銅銘銖鉻銓銜銨鉼銑閡閨閩閣閥閤隙障際雌雒需靼鞅韶頗領颯颱餃餅餌餉駁骯骰髦魁魂鳴鳶鳳麼鼻齊億儀僻僵價儂儈儉儅凜"
            	],
            	[
            		"bc40",
            		"劇劈劉劍劊勰厲嘮嘻嘹嘲嘿嘴嘩噓噎噗噴嘶嘯嘰墀墟增墳墜墮墩墦奭嬉嫻嬋嫵嬌嬈寮寬審寫層履嶝嶔幢幟幡廢廚廟廝廣廠彈影德徵慶慧慮慝慕憂"
            	],
            	[
            		"bca1",
            		"慼慰慫慾憧憐憫憎憬憚憤憔憮戮摩摯摹撞撲撈撐撰撥撓撕撩撒撮播撫撚撬撙撢撳敵敷數暮暫暴暱樣樟槨樁樞標槽模樓樊槳樂樅槭樑歐歎殤毅毆漿潼澄潑潦潔澆潭潛潸潮澎潺潰潤澗潘滕潯潠潟熟熬熱熨牖犛獎獗瑩璋璃"
            	],
            	[
            		"bd40",
            		"瑾璀畿瘠瘩瘟瘤瘦瘡瘢皚皺盤瞎瞇瞌瞑瞋磋磅確磊碾磕碼磐稿稼穀稽稷稻窯窮箭箱範箴篆篇篁箠篌糊締練緯緻緘緬緝編緣線緞緩綞緙緲緹罵罷羯"
            	],
            	[
            		"bda1",
            		"翩耦膛膜膝膠膚膘蔗蔽蔚蓮蔬蔭蔓蔑蔣蔡蔔蓬蔥蓿蔆螂蝴蝶蝠蝦蝸蝨蝙蝗蝌蝓衛衝褐複褒褓褕褊誼諒談諄誕請諸課諉諂調誰論諍誶誹諛豌豎豬賠賞賦賤賬賭賢賣賜質賡赭趟趣踫踐踝踢踏踩踟踡踞躺輝輛輟輩輦輪輜輞"
            	],
            	[
            		"be40",
            		"輥適遮遨遭遷鄰鄭鄧鄱醇醉醋醃鋅銻銷鋪銬鋤鋁銳銼鋒鋇鋰銲閭閱霄霆震霉靠鞍鞋鞏頡頫頜颳養餓餒餘駝駐駟駛駑駕駒駙骷髮髯鬧魅魄魷魯鴆鴉"
            	],
            	[
            		"bea1",
            		"鴃麩麾黎墨齒儒儘儔儐儕冀冪凝劑劓勳噙噫噹噩噤噸噪器噥噱噯噬噢噶壁墾壇壅奮嬝嬴學寰導彊憲憑憩憊懍憶憾懊懈戰擅擁擋撻撼據擄擇擂操撿擒擔撾整曆曉暹曄曇暸樽樸樺橙橫橘樹橄橢橡橋橇樵機橈歙歷氅濂澱澡"
            	],
            	[
            		"bf40",
            		"濃澤濁澧澳激澹澶澦澠澴熾燉燐燒燈燕熹燎燙燜燃燄獨璜璣璘璟璞瓢甌甍瘴瘸瘺盧盥瞠瞞瞟瞥磨磚磬磧禦積穎穆穌穋窺篙簑築篤篛篡篩篦糕糖縊"
            	],
            	[
            		"bfa1",
            		"縑縈縛縣縞縝縉縐罹羲翰翱翮耨膳膩膨臻興艘艙蕊蕙蕈蕨蕩蕃蕉蕭蕪蕞螃螟螞螢融衡褪褲褥褫褡親覦諦諺諫諱謀諜諧諮諾謁謂諷諭諳諶諼豫豭貓賴蹄踱踴蹂踹踵輻輯輸輳辨辦遵遴選遲遼遺鄴醒錠錶鋸錳錯錢鋼錫錄錚"
            	],
            	[
            		"c040",
            		"錐錦錡錕錮錙閻隧隨險雕霎霑霖霍霓霏靛靜靦鞘頰頸頻頷頭頹頤餐館餞餛餡餚駭駢駱骸骼髻髭鬨鮑鴕鴣鴦鴨鴒鴛默黔龍龜優償儡儲勵嚎嚀嚐嚅嚇"
            	],
            	[
            		"c0a1",
            		"嚏壕壓壑壎嬰嬪嬤孺尷屨嶼嶺嶽嶸幫彌徽應懂懇懦懋戲戴擎擊擘擠擰擦擬擱擢擭斂斃曙曖檀檔檄檢檜櫛檣橾檗檐檠歜殮毚氈濘濱濟濠濛濤濫濯澀濬濡濩濕濮濰燧營燮燦燥燭燬燴燠爵牆獰獲璩環璦璨癆療癌盪瞳瞪瞰瞬"
            	],
            	[
            		"c140",
            		"瞧瞭矯磷磺磴磯礁禧禪穗窿簇簍篾篷簌篠糠糜糞糢糟糙糝縮績繆縷縲繃縫總縱繅繁縴縹繈縵縿縯罄翳翼聱聲聰聯聳臆臃膺臂臀膿膽臉膾臨舉艱薪"
            	],
            	[
            		"c1a1",
            		"薄蕾薜薑薔薯薛薇薨薊虧蟀蟑螳蟒蟆螫螻螺蟈蟋褻褶襄褸褽覬謎謗謙講謊謠謝謄謐豁谿豳賺賽購賸賻趨蹉蹋蹈蹊轄輾轂轅輿避遽還邁邂邀鄹醣醞醜鍍鎂錨鍵鍊鍥鍋錘鍾鍬鍛鍰鍚鍔闊闋闌闈闆隱隸雖霜霞鞠韓顆颶餵騁"
            	],
            	[
            		"c240",
            		"駿鮮鮫鮪鮭鴻鴿麋黏點黜黝黛鼾齋叢嚕嚮壙壘嬸彝懣戳擴擲擾攆擺擻擷斷曜朦檳檬櫃檻檸櫂檮檯歟歸殯瀉瀋濾瀆濺瀑瀏燻燼燾燸獷獵璧璿甕癖癘"
            	],
            	[
            		"c2a1",
            		"癒瞽瞿瞻瞼礎禮穡穢穠竄竅簫簧簪簞簣簡糧織繕繞繚繡繒繙罈翹翻職聶臍臏舊藏薩藍藐藉薰薺薹薦蟯蟬蟲蟠覆覲觴謨謹謬謫豐贅蹙蹣蹦蹤蹟蹕軀轉轍邇邃邈醫醬釐鎔鎊鎖鎢鎳鎮鎬鎰鎘鎚鎗闔闖闐闕離雜雙雛雞霤鞣鞦"
            	],
            	[
            		"c340",
            		"鞭韹額顏題顎顓颺餾餿餽餮馥騎髁鬃鬆魏魎魍鯊鯉鯽鯈鯀鵑鵝鵠黠鼕鼬儳嚥壞壟壢寵龐廬懲懷懶懵攀攏曠曝櫥櫝櫚櫓瀛瀟瀨瀚瀝瀕瀘爆爍牘犢獸"
            	],
            	[
            		"c3a1",
            		"獺璽瓊瓣疇疆癟癡矇礙禱穫穩簾簿簸簽簷籀繫繭繹繩繪羅繳羶羹羸臘藩藝藪藕藤藥藷蟻蠅蠍蟹蟾襠襟襖襞譁譜識證譚譎譏譆譙贈贊蹼蹲躇蹶蹬蹺蹴轔轎辭邊邋醱醮鏡鏑鏟鏃鏈鏜鏝鏖鏢鏍鏘鏤鏗鏨關隴難霪霧靡韜韻類"
            	],
            	[
            		"c440",
            		"願顛颼饅饉騖騙鬍鯨鯧鯖鯛鶉鵡鵲鵪鵬麒麗麓麴勸嚨嚷嚶嚴嚼壤孀孃孽寶巉懸懺攘攔攙曦朧櫬瀾瀰瀲爐獻瓏癢癥礦礪礬礫竇競籌籃籍糯糰辮繽繼"
            	],
            	[
            		"c4a1",
            		"纂罌耀臚艦藻藹蘑藺蘆蘋蘇蘊蠔蠕襤覺觸議譬警譯譟譫贏贍躉躁躅躂醴釋鐘鐃鏽闡霰飄饒饑馨騫騰騷騵鰓鰍鹹麵黨鼯齟齣齡儷儸囁囀囂夔屬巍懼懾攝攜斕曩櫻欄櫺殲灌爛犧瓖瓔癩矓籐纏續羼蘗蘭蘚蠣蠢蠡蠟襪襬覽譴"
            	],
            	[
            		"c540",
            		"護譽贓躊躍躋轟辯醺鐮鐳鐵鐺鐸鐲鐫闢霸霹露響顧顥饗驅驃驀騾髏魔魑鰭鰥鶯鶴鷂鶸麝黯鼙齜齦齧儼儻囈囊囉孿巔巒彎懿攤權歡灑灘玀瓤疊癮癬"
            	],
            	[
            		"c5a1",
            		"禳籠籟聾聽臟襲襯觼讀贖贗躑躓轡酈鑄鑑鑒霽霾韃韁顫饕驕驍髒鬚鱉鰱鰾鰻鷓鷗鼴齬齪龔囌巖戀攣攫攪曬欐瓚竊籤籣籥纓纖纔臢蘸蘿蠱變邐邏鑣鑠鑤靨顯饜驚驛驗髓體髑鱔鱗鱖鷥麟黴囑壩攬灞癱癲矗罐羈蠶蠹衢讓讒"
            	],
            	[
            		"c640",
            		"讖艷贛釀鑪靂靈靄韆顰驟鬢魘鱟鷹鷺鹼鹽鼇齷齲廳欖灣籬籮蠻觀躡釁鑲鑰顱饞髖鬣黌灤矚讚鑷韉驢驥纜讜躪釅鑽鑾鑼鱷鱸黷豔鑿鸚爨驪鬱鸛鸞籲"
            	],
            	[
            		"c940",
            		"乂乜凵匚厂万丌乇亍囗兀屮彳丏冇与丮亓仂仉仈冘勼卬厹圠夃夬尐巿旡殳毌气爿丱丼仨仜仩仡仝仚刌匜卌圢圣夗夯宁宄尒尻屴屳帄庀庂忉戉扐氕"
            	],
            	[
            		"c9a1",
            		"氶汃氿氻犮犰玊禸肊阞伎优伬仵伔仱伀价伈伝伂伅伢伓伄仴伒冱刓刉刐劦匢匟卍厊吇囡囟圮圪圴夼妀奼妅奻奾奷奿孖尕尥屼屺屻屾巟幵庄异弚彴忕忔忏扜扞扤扡扦扢扙扠扚扥旯旮朾朹朸朻机朿朼朳氘汆汒汜汏汊汔汋"
            	],
            	[
            		"ca40",
            		"汌灱牞犴犵玎甪癿穵网艸艼芀艽艿虍襾邙邗邘邛邔阢阤阠阣佖伻佢佉体佤伾佧佒佟佁佘伭伳伿佡冏冹刜刞刡劭劮匉卣卲厎厏吰吷吪呔呅吙吜吥吘"
            	],
            	[
            		"caa1",
            		"吽呏呁吨吤呇囮囧囥坁坅坌坉坋坒夆奀妦妘妠妗妎妢妐妏妧妡宎宒尨尪岍岏岈岋岉岒岊岆岓岕巠帊帎庋庉庌庈庍弅弝彸彶忒忑忐忭忨忮忳忡忤忣忺忯忷忻怀忴戺抃抌抎抏抔抇扱扻扺扰抁抈扷扽扲扴攷旰旴旳旲旵杅杇"
            	],
            	[
            		"cb40",
            		"杙杕杌杈杝杍杚杋毐氙氚汸汧汫沄沋沏汱汯汩沚汭沇沕沜汦汳汥汻沎灴灺牣犿犽狃狆狁犺狅玕玗玓玔玒町甹疔疕皁礽耴肕肙肐肒肜芐芏芅芎芑芓"
            	],
            	[
            		"cba1",
            		"芊芃芄豸迉辿邟邡邥邞邧邠阰阨阯阭丳侘佼侅佽侀侇佶佴侉侄佷佌侗佪侚佹侁佸侐侜侔侞侒侂侕佫佮冞冼冾刵刲刳剆刱劼匊匋匼厒厔咇呿咁咑咂咈呫呺呾呥呬呴呦咍呯呡呠咘呣呧呤囷囹坯坲坭坫坱坰坶垀坵坻坳坴坢"
            	],
            	[
            		"cc40",
            		"坨坽夌奅妵妺姏姎妲姌姁妶妼姃姖妱妽姀姈妴姇孢孥宓宕屄屇岮岤岠岵岯岨岬岟岣岭岢岪岧岝岥岶岰岦帗帔帙弨弢弣弤彔徂彾彽忞忥怭怦怙怲怋"
            	],
            	[
            		"cca1",
            		"怴怊怗怳怚怞怬怢怍怐怮怓怑怌怉怜戔戽抭抴拑抾抪抶拊抮抳抯抻抩抰抸攽斨斻昉旼昄昒昈旻昃昋昍昅旽昑昐曶朊枅杬枎枒杶杻枘枆构杴枍枌杺枟枑枙枃杽极杸杹枔欥殀歾毞氝沓泬泫泮泙沶泔沭泧沷泐泂沺泃泆泭泲"
            	],
            	[
            		"cd40",
            		"泒泝沴沊沝沀泞泀洰泍泇沰泹泏泩泑炔炘炅炓炆炄炑炖炂炚炃牪狖狋狘狉狜狒狔狚狌狑玤玡玭玦玢玠玬玝瓝瓨甿畀甾疌疘皯盳盱盰盵矸矼矹矻矺"
            	],
            	[
            		"cda1",
            		"矷祂礿秅穸穻竻籵糽耵肏肮肣肸肵肭舠芠苀芫芚芘芛芵芧芮芼芞芺芴芨芡芩苂芤苃芶芢虰虯虭虮豖迒迋迓迍迖迕迗邲邴邯邳邰阹阽阼阺陃俍俅俓侲俉俋俁俔俜俙侻侳俛俇俖侺俀侹俬剄剉勀勂匽卼厗厖厙厘咺咡咭咥哏"
            	],
            	[
            		"ce40",
            		"哃茍咷咮哖咶哅哆咠呰咼咢咾呲哞咰垵垞垟垤垌垗垝垛垔垘垏垙垥垚垕壴复奓姡姞姮娀姱姝姺姽姼姶姤姲姷姛姩姳姵姠姾姴姭宨屌峐峘峌峗峋峛"
            	],
            	[
            		"cea1",
            		"峞峚峉峇峊峖峓峔峏峈峆峎峟峸巹帡帢帣帠帤庰庤庢庛庣庥弇弮彖徆怷怹恔恲恞恅恓恇恉恛恌恀恂恟怤恄恘恦恮扂扃拏挍挋拵挎挃拫拹挏挌拸拶挀挓挔拺挕拻拰敁敃斪斿昶昡昲昵昜昦昢昳昫昺昝昴昹昮朏朐柁柲柈枺"
            	],
            	[
            		"cf40",
            		"柜枻柸柘柀枷柅柫柤柟枵柍枳柷柶柮柣柂枹柎柧柰枲柼柆柭柌枮柦柛柺柉柊柃柪柋欨殂殄殶毖毘毠氠氡洨洴洭洟洼洿洒洊泚洳洄洙洺洚洑洀洝浂"
            	],
            	[
            		"cfa1",
            		"洁洘洷洃洏浀洇洠洬洈洢洉洐炷炟炾炱炰炡炴炵炩牁牉牊牬牰牳牮狊狤狨狫狟狪狦狣玅珌珂珈珅玹玶玵玴珫玿珇玾珃珆玸珋瓬瓮甮畇畈疧疪癹盄眈眃眄眅眊盷盻盺矧矨砆砑砒砅砐砏砎砉砃砓祊祌祋祅祄秕种秏秖秎窀"
            	],
            	[
            		"d040",
            		"穾竑笀笁籺籸籹籿粀粁紃紈紁罘羑羍羾耇耎耏耔耷胘胇胠胑胈胂胐胅胣胙胜胊胕胉胏胗胦胍臿舡芔苙苾苹茇苨茀苕茺苫苖苴苬苡苲苵茌苻苶苰苪"
            	],
            	[
            		"d0a1",
            		"苤苠苺苳苭虷虴虼虳衁衎衧衪衩觓訄訇赲迣迡迮迠郱邽邿郕郅邾郇郋郈釔釓陔陏陑陓陊陎倞倅倇倓倢倰倛俵俴倳倷倬俶俷倗倜倠倧倵倯倱倎党冔冓凊凄凅凈凎剡剚剒剞剟剕剢勍匎厞唦哢唗唒哧哳哤唚哿唄唈哫唑唅哱"
            	],
            	[
            		"d140",
            		"唊哻哷哸哠唎唃唋圁圂埌堲埕埒垺埆垽垼垸垶垿埇埐垹埁夎奊娙娖娭娮娕娏娗娊娞娳孬宧宭宬尃屖屔峬峿峮峱峷崀峹帩帨庨庮庪庬弳弰彧恝恚恧"
            	],
            	[
            		"d1a1",
            		"恁悢悈悀悒悁悝悃悕悛悗悇悜悎戙扆拲挐捖挬捄捅挶捃揤挹捋捊挼挩捁挴捘捔捙挭捇挳捚捑挸捗捀捈敊敆旆旃旄旂晊晟晇晑朒朓栟栚桉栲栳栻桋桏栖栱栜栵栫栭栯桎桄栴栝栒栔栦栨栮桍栺栥栠欬欯欭欱欴歭肂殈毦毤"
            	],
            	[
            		"d240",
            		"毨毣毢毧氥浺浣浤浶洍浡涒浘浢浭浯涑涍淯浿涆浞浧浠涗浰浼浟涂涘洯浨涋浾涀涄洖涃浻浽浵涐烜烓烑烝烋缹烢烗烒烞烠烔烍烅烆烇烚烎烡牂牸"
            	],
            	[
            		"d2a1",
            		"牷牶猀狺狴狾狶狳狻猁珓珙珥珖玼珧珣珩珜珒珛珔珝珚珗珘珨瓞瓟瓴瓵甡畛畟疰痁疻痄痀疿疶疺皊盉眝眛眐眓眒眣眑眕眙眚眢眧砣砬砢砵砯砨砮砫砡砩砳砪砱祔祛祏祜祓祒祑秫秬秠秮秭秪秜秞秝窆窉窅窋窌窊窇竘笐"
            	],
            	[
            		"d340",
            		"笄笓笅笏笈笊笎笉笒粄粑粊粌粈粍粅紞紝紑紎紘紖紓紟紒紏紌罜罡罞罠罝罛羖羒翃翂翀耖耾耹胺胲胹胵脁胻脀舁舯舥茳茭荄茙荑茥荖茿荁茦茜茢"
            	],
            	[
            		"d3a1",
            		"荂荎茛茪茈茼荍茖茤茠茷茯茩荇荅荌荓茞茬荋茧荈虓虒蚢蚨蚖蚍蚑蚞蚇蚗蚆蚋蚚蚅蚥蚙蚡蚧蚕蚘蚎蚝蚐蚔衃衄衭衵衶衲袀衱衿衯袃衾衴衼訒豇豗豻貤貣赶赸趵趷趶軑軓迾迵适迿迻逄迼迶郖郠郙郚郣郟郥郘郛郗郜郤酐"
            	],
            	[
            		"d440",
            		"酎酏釕釢釚陜陟隼飣髟鬯乿偰偪偡偞偠偓偋偝偲偈偍偁偛偊偢倕偅偟偩偫偣偤偆偀偮偳偗偑凐剫剭剬剮勖勓匭厜啵啶唼啍啐唴唪啑啢唶唵唰啒啅"
            	],
            	[
            		"d4a1",
            		"唌唲啥啎唹啈唭唻啀啋圊圇埻堔埢埶埜埴堀埭埽堈埸堋埳埏堇埮埣埲埥埬埡堎埼堐埧堁堌埱埩埰堍堄奜婠婘婕婧婞娸娵婭婐婟婥婬婓婤婗婃婝婒婄婛婈媎娾婍娹婌婰婩婇婑婖婂婜孲孮寁寀屙崞崋崝崚崠崌崨崍崦崥崏"
            	],
            	[
            		"d540",
            		"崰崒崣崟崮帾帴庱庴庹庲庳弶弸徛徖徟悊悐悆悾悰悺惓惔惏惤惙惝惈悱惛悷惊悿惃惍惀挲捥掊掂捽掽掞掭掝掗掫掎捯掇掐据掯捵掜捭掮捼掤挻掟"
            	],
            	[
            		"d5a1",
            		"捸掅掁掑掍捰敓旍晥晡晛晙晜晢朘桹梇梐梜桭桮梮梫楖桯梣梬梩桵桴梲梏桷梒桼桫桲梪梀桱桾梛梖梋梠梉梤桸桻梑梌梊桽欶欳欷欸殑殏殍殎殌氪淀涫涴涳湴涬淩淢涷淶淔渀淈淠淟淖涾淥淜淝淛淴淊涽淭淰涺淕淂淏淉"
            	],
            	[
            		"d640",
            		"淐淲淓淽淗淍淣涻烺焍烷焗烴焌烰焄烳焐烼烿焆焓焀烸烶焋焂焎牾牻牼牿猝猗猇猑猘猊猈狿猏猞玈珶珸珵琄琁珽琇琀珺珼珿琌琋珴琈畤畣痎痒痏"
            	],
            	[
            		"d6a1",
            		"痋痌痑痐皏皉盓眹眯眭眱眲眴眳眽眥眻眵硈硒硉硍硊硌砦硅硐祤祧祩祪祣祫祡离秺秸秶秷窏窔窐笵筇笴笥笰笢笤笳笘笪笝笱笫笭笯笲笸笚笣粔粘粖粣紵紽紸紶紺絅紬紩絁絇紾紿絊紻紨罣羕羜羝羛翊翋翍翐翑翇翏翉耟"
            	],
            	[
            		"d740",
            		"耞耛聇聃聈脘脥脙脛脭脟脬脞脡脕脧脝脢舑舸舳舺舴舲艴莐莣莨莍荺荳莤荴莏莁莕莙荵莔莩荽莃莌莝莛莪莋荾莥莯莈莗莰荿莦莇莮荶莚虙虖蚿蚷"
            	],
            	[
            		"d7a1",
            		"蛂蛁蛅蚺蚰蛈蚹蚳蚸蛌蚴蚻蚼蛃蚽蚾衒袉袕袨袢袪袚袑袡袟袘袧袙袛袗袤袬袌袓袎覂觖觙觕訰訧訬訞谹谻豜豝豽貥赽赻赹趼跂趹趿跁軘軞軝軜軗軠軡逤逋逑逜逌逡郯郪郰郴郲郳郔郫郬郩酖酘酚酓酕釬釴釱釳釸釤釹釪"
            	],
            	[
            		"d840",
            		"釫釷釨釮镺閆閈陼陭陫陱陯隿靪頄飥馗傛傕傔傞傋傣傃傌傎傝偨傜傒傂傇兟凔匒匑厤厧喑喨喥喭啷噅喢喓喈喏喵喁喣喒喤啽喌喦啿喕喡喎圌堩堷"
            	],
            	[
            		"d8a1",
            		"堙堞堧堣堨埵塈堥堜堛堳堿堶堮堹堸堭堬堻奡媯媔媟婺媢媞婸媦婼媥媬媕媮娷媄媊媗媃媋媩婻婽媌媜媏媓媝寪寍寋寔寑寊寎尌尰崷嵃嵫嵁嵋崿崵嵑嵎嵕崳崺嵒崽崱嵙嵂崹嵉崸崼崲崶嵀嵅幄幁彘徦徥徫惉悹惌惢惎惄愔"
            	],
            	[
            		"d940",
            		"惲愊愖愅惵愓惸惼惾惁愃愘愝愐惿愄愋扊掔掱掰揎揥揨揯揃撝揳揊揠揶揕揲揵摡揟掾揝揜揄揘揓揂揇揌揋揈揰揗揙攲敧敪敤敜敨敥斌斝斞斮旐旒"
            	],
            	[
            		"d9a1",
            		"晼晬晻暀晱晹晪晲朁椌棓椄棜椪棬棪棱椏棖棷棫棤棶椓椐棳棡椇棌椈楰梴椑棯棆椔棸棐棽棼棨椋椊椗棎棈棝棞棦棴棑椆棔棩椕椥棇欹欻欿欼殔殗殙殕殽毰毲毳氰淼湆湇渟湉溈渼渽湅湢渫渿湁湝湳渜渳湋湀湑渻渃渮湞"
            	],
            	[
            		"da40",
            		"湨湜湡渱渨湠湱湫渹渢渰湓湥渧湸湤湷湕湹湒湦渵渶湚焠焞焯烻焮焱焣焥焢焲焟焨焺焛牋牚犈犉犆犅犋猒猋猰猢猱猳猧猲猭猦猣猵猌琮琬琰琫琖"
            	],
            	[
            		"daa1",
            		"琚琡琭琱琤琣琝琩琠琲瓻甯畯畬痧痚痡痦痝痟痤痗皕皒盚睆睇睄睍睅睊睎睋睌矞矬硠硤硥硜硭硱硪确硰硩硨硞硢祴祳祲祰稂稊稃稌稄窙竦竤筊笻筄筈筌筎筀筘筅粢粞粨粡絘絯絣絓絖絧絪絏絭絜絫絒絔絩絑絟絎缾缿罥"
            	],
            	[
            		"db40",
            		"罦羢羠羡翗聑聏聐胾胔腃腊腒腏腇脽腍脺臦臮臷臸臹舄舼舽舿艵茻菏菹萣菀菨萒菧菤菼菶萐菆菈菫菣莿萁菝菥菘菿菡菋菎菖菵菉萉萏菞萑萆菂菳"
            	],
            	[
            		"dba1",
            		"菕菺菇菑菪萓菃菬菮菄菻菗菢萛菛菾蛘蛢蛦蛓蛣蛚蛪蛝蛫蛜蛬蛩蛗蛨蛑衈衖衕袺裗袹袸裀袾袶袼袷袽袲褁裉覕覘覗觝觚觛詎詍訹詙詀詗詘詄詅詒詈詑詊詌詏豟貁貀貺貾貰貹貵趄趀趉跘跓跍跇跖跜跏跕跙跈跗跅軯軷軺"
            	],
            	[
            		"dc40",
            		"軹軦軮軥軵軧軨軶軫軱軬軴軩逭逴逯鄆鄬鄄郿郼鄈郹郻鄁鄀鄇鄅鄃酡酤酟酢酠鈁鈊鈥鈃鈚鈦鈏鈌鈀鈒釿釽鈆鈄鈧鈂鈜鈤鈙鈗鈅鈖镻閍閌閐隇陾隈"
            	],
            	[
            		"dca1",
            		"隉隃隀雂雈雃雱雰靬靰靮頇颩飫鳦黹亃亄亶傽傿僆傮僄僊傴僈僂傰僁傺傱僋僉傶傸凗剺剸剻剼嗃嗛嗌嗐嗋嗊嗝嗀嗔嗄嗩喿嗒喍嗏嗕嗢嗖嗈嗲嗍嗙嗂圔塓塨塤塏塍塉塯塕塎塝塙塥塛堽塣塱壼嫇嫄嫋媺媸媱媵媰媿嫈媻嫆"
            	],
            	[
            		"dd40",
            		"媷嫀嫊媴媶嫍媹媐寖寘寙尟尳嵱嵣嵊嵥嵲嵬嵞嵨嵧嵢巰幏幎幊幍幋廅廌廆廋廇彀徯徭惷慉慊愫慅愶愲愮慆愯慏愩慀戠酨戣戥戤揅揱揫搐搒搉搠搤"
            	],
            	[
            		"dda1",
            		"搳摃搟搕搘搹搷搢搣搌搦搰搨摁搵搯搊搚摀搥搧搋揧搛搮搡搎敯斒旓暆暌暕暐暋暊暙暔晸朠楦楟椸楎楢楱椿楅楪椹楂楗楙楺楈楉椵楬椳椽楥棰楸椴楩楀楯楄楶楘楁楴楌椻楋椷楜楏楑椲楒椯楻椼歆歅歃歂歈歁殛嗀毻毼"
            	],
            	[
            		"de40",
            		"毹毷毸溛滖滈溏滀溟溓溔溠溱溹滆滒溽滁溞滉溷溰滍溦滏溲溾滃滜滘溙溒溎溍溤溡溿溳滐滊溗溮溣煇煔煒煣煠煁煝煢煲煸煪煡煂煘煃煋煰煟煐煓"
            	],
            	[
            		"dea1",
            		"煄煍煚牏犍犌犑犐犎猼獂猻猺獀獊獉瑄瑊瑋瑒瑑瑗瑀瑏瑐瑎瑂瑆瑍瑔瓡瓿瓾瓽甝畹畷榃痯瘏瘃痷痾痼痹痸瘐痻痶痭痵痽皙皵盝睕睟睠睒睖睚睩睧睔睙睭矠碇碚碔碏碄碕碅碆碡碃硹碙碀碖硻祼禂祽祹稑稘稙稒稗稕稢稓"
            	],
            	[
            		"df40",
            		"稛稐窣窢窞竫筦筤筭筴筩筲筥筳筱筰筡筸筶筣粲粴粯綈綆綀綍絿綅絺綎絻綃絼綌綔綄絽綒罭罫罧罨罬羦羥羧翛翜耡腤腠腷腜腩腛腢腲朡腞腶腧腯"
            	],
            	[
            		"dfa1",
            		"腄腡舝艉艄艀艂艅蓱萿葖葶葹蒏蒍葥葑葀蒆葧萰葍葽葚葙葴葳葝蔇葞萷萺萴葺葃葸萲葅萩菙葋萯葂萭葟葰萹葎葌葒葯蓅蒎萻葇萶萳葨葾葄萫葠葔葮葐蜋蜄蛷蜌蛺蛖蛵蝍蛸蜎蜉蜁蛶蜍蜅裖裋裍裎裞裛裚裌裐覅覛觟觥觤"
            	],
            	[
            		"e040",
            		"觡觠觢觜触詶誆詿詡訿詷誂誄詵誃誁詴詺谼豋豊豥豤豦貆貄貅賌赨赩趑趌趎趏趍趓趔趐趒跰跠跬跱跮跐跩跣跢跧跲跫跴輆軿輁輀輅輇輈輂輋遒逿"
            	],
            	[
            		"e0a1",
            		"遄遉逽鄐鄍鄏鄑鄖鄔鄋鄎酮酯鉈鉒鈰鈺鉦鈳鉥鉞銃鈮鉊鉆鉭鉬鉏鉠鉧鉯鈶鉡鉰鈱鉔鉣鉐鉲鉎鉓鉌鉖鈲閟閜閞閛隒隓隑隗雎雺雽雸雵靳靷靸靲頏頍頎颬飶飹馯馲馰馵骭骫魛鳪鳭鳧麀黽僦僔僗僨僳僛僪僝僤僓僬僰僯僣僠"
            	],
            	[
            		"e140",
            		"凘劀劁勩勫匰厬嘧嘕嘌嘒嗼嘏嘜嘁嘓嘂嗺嘝嘄嗿嗹墉塼墐墘墆墁塿塴墋塺墇墑墎塶墂墈塻墔墏壾奫嫜嫮嫥嫕嫪嫚嫭嫫嫳嫢嫠嫛嫬嫞嫝嫙嫨嫟孷寠"
            	],
            	[
            		"e1a1",
            		"寣屣嶂嶀嵽嶆嵺嶁嵷嶊嶉嶈嵾嵼嶍嵹嵿幘幙幓廘廑廗廎廜廕廙廒廔彄彃彯徶愬愨慁慞慱慳慒慓慲慬憀慴慔慺慛慥愻慪慡慖戩戧戫搫摍摛摝摴摶摲摳摽摵摦撦摎撂摞摜摋摓摠摐摿搿摬摫摙摥摷敳斠暡暠暟朅朄朢榱榶槉"
            	],
            	[
            		"e240",
            		"榠槎榖榰榬榼榑榙榎榧榍榩榾榯榿槄榽榤槔榹槊榚槏榳榓榪榡榞槙榗榐槂榵榥槆歊歍歋殞殟殠毃毄毾滎滵滱漃漥滸漷滻漮漉潎漙漚漧漘漻漒滭漊"
            	],
            	[
            		"e2a1",
            		"漶潳滹滮漭潀漰漼漵滫漇漎潃漅滽滶漹漜滼漺漟漍漞漈漡熇熐熉熀熅熂熏煻熆熁熗牄牓犗犕犓獃獍獑獌瑢瑳瑱瑵瑲瑧瑮甀甂甃畽疐瘖瘈瘌瘕瘑瘊瘔皸瞁睼瞅瞂睮瞀睯睾瞃碲碪碴碭碨硾碫碞碥碠碬碢碤禘禊禋禖禕禔禓"
            	],
            	[
            		"e340",
            		"禗禈禒禐稫穊稰稯稨稦窨窫窬竮箈箜箊箑箐箖箍箌箛箎箅箘劄箙箤箂粻粿粼粺綧綷緂綣綪緁緀緅綝緎緄緆緋緌綯綹綖綼綟綦綮綩綡緉罳翢翣翥翞"
            	],
            	[
            		"e3a1",
            		"耤聝聜膉膆膃膇膍膌膋舕蒗蒤蒡蒟蒺蓎蓂蒬蒮蒫蒹蒴蓁蓍蒪蒚蒱蓐蒝蒧蒻蒢蒔蓇蓌蒛蒩蒯蒨蓖蒘蒶蓏蒠蓗蓔蓒蓛蒰蒑虡蜳蜣蜨蝫蝀蜮蜞蜡蜙蜛蝃蜬蝁蜾蝆蜠蜲蜪蜭蜼蜒蜺蜱蜵蝂蜦蜧蜸蜤蜚蜰蜑裷裧裱裲裺裾裮裼裶裻"
            	],
            	[
            		"e440",
            		"裰裬裫覝覡覟覞觩觫觨誫誙誋誒誏誖谽豨豩賕賏賗趖踉踂跿踍跽踊踃踇踆踅跾踀踄輐輑輎輍鄣鄜鄠鄢鄟鄝鄚鄤鄡鄛酺酲酹酳銥銤鉶銛鉺銠銔銪銍"
            	],
            	[
            		"e4a1",
            		"銦銚銫鉹銗鉿銣鋮銎銂銕銢鉽銈銡銊銆銌銙銧鉾銇銩銝銋鈭隞隡雿靘靽靺靾鞃鞀鞂靻鞄鞁靿韎韍頖颭颮餂餀餇馝馜駃馹馻馺駂馽駇骱髣髧鬾鬿魠魡魟鳱鳲鳵麧僿儃儰僸儆儇僶僾儋儌僽儊劋劌勱勯噈噂噌嘵噁噊噉噆噘"
            	],
            	[
            		"e540",
            		"噚噀嘳嘽嘬嘾嘸嘪嘺圚墫墝墱墠墣墯墬墥墡壿嫿嫴嫽嫷嫶嬃嫸嬂嫹嬁嬇嬅嬏屧嶙嶗嶟嶒嶢嶓嶕嶠嶜嶡嶚嶞幩幝幠幜緳廛廞廡彉徲憋憃慹憱憰憢憉"
            	],
            	[
            		"e5a1",
            		"憛憓憯憭憟憒憪憡憍慦憳戭摮摰撖撠撅撗撜撏撋撊撌撣撟摨撱撘敶敺敹敻斲斳暵暰暩暲暷暪暯樀樆樗槥槸樕槱槤樠槿槬槢樛樝槾樧槲槮樔槷槧橀樈槦槻樍槼槫樉樄樘樥樏槶樦樇槴樖歑殥殣殢殦氁氀毿氂潁漦潾澇濆澒"
            	],
            	[
            		"e640",
            		"澍澉澌潢潏澅潚澖潶潬澂潕潲潒潐潗澔澓潝漀潡潫潽潧澐潓澋潩潿澕潣潷潪潻熲熯熛熰熠熚熩熵熝熥熞熤熡熪熜熧熳犘犚獘獒獞獟獠獝獛獡獚獙"
            	],
            	[
            		"e6a1",
            		"獢璇璉璊璆璁瑽璅璈瑼瑹甈甇畾瘥瘞瘙瘝瘜瘣瘚瘨瘛皜皝皞皛瞍瞏瞉瞈磍碻磏磌磑磎磔磈磃磄磉禚禡禠禜禢禛歶稹窲窴窳箷篋箾箬篎箯箹篊箵糅糈糌糋緷緛緪緧緗緡縃緺緦緶緱緰緮緟罶羬羰羭翭翫翪翬翦翨聤聧膣膟"
            	],
            	[
            		"e740",
            		"膞膕膢膙膗舖艏艓艒艐艎艑蔤蔻蔏蔀蔩蔎蔉蔍蔟蔊蔧蔜蓻蔫蓺蔈蔌蓴蔪蓲蔕蓷蓫蓳蓼蔒蓪蓩蔖蓾蔨蔝蔮蔂蓽蔞蓶蔱蔦蓧蓨蓰蓯蓹蔘蔠蔰蔋蔙蔯虢"
            	],
            	[
            		"e7a1",
            		"蝖蝣蝤蝷蟡蝳蝘蝔蝛蝒蝡蝚蝑蝞蝭蝪蝐蝎蝟蝝蝯蝬蝺蝮蝜蝥蝏蝻蝵蝢蝧蝩衚褅褌褔褋褗褘褙褆褖褑褎褉覢覤覣觭觰觬諏諆誸諓諑諔諕誻諗誾諀諅諘諃誺誽諙谾豍貏賥賟賙賨賚賝賧趠趜趡趛踠踣踥踤踮踕踛踖踑踙踦踧"
            	],
            	[
            		"e840",
            		"踔踒踘踓踜踗踚輬輤輘輚輠輣輖輗遳遰遯遧遫鄯鄫鄩鄪鄲鄦鄮醅醆醊醁醂醄醀鋐鋃鋄鋀鋙銶鋏鋱鋟鋘鋩鋗鋝鋌鋯鋂鋨鋊鋈鋎鋦鋍鋕鋉鋠鋞鋧鋑鋓"
            	],
            	[
            		"e8a1",
            		"銵鋡鋆銴镼閬閫閮閰隤隢雓霅霈霂靚鞊鞎鞈韐韏頞頝頦頩頨頠頛頧颲餈飺餑餔餖餗餕駜駍駏駓駔駎駉駖駘駋駗駌骳髬髫髳髲髱魆魃魧魴魱魦魶魵魰魨魤魬鳼鳺鳽鳿鳷鴇鴀鳹鳻鴈鴅鴄麃黓鼏鼐儜儓儗儚儑凞匴叡噰噠噮"
            	],
            	[
            		"e940",
            		"噳噦噣噭噲噞噷圜圛壈墽壉墿墺壂墼壆嬗嬙嬛嬡嬔嬓嬐嬖嬨嬚嬠嬞寯嶬嶱嶩嶧嶵嶰嶮嶪嶨嶲嶭嶯嶴幧幨幦幯廩廧廦廨廥彋徼憝憨憖懅憴懆懁懌憺"
            	],
            	[
            		"e9a1",
            		"憿憸憌擗擖擐擏擉撽撉擃擛擳擙攳敿敼斢曈暾曀曊曋曏暽暻暺曌朣樴橦橉橧樲橨樾橝橭橶橛橑樨橚樻樿橁橪橤橐橏橔橯橩橠樼橞橖橕橍橎橆歕歔歖殧殪殫毈毇氄氃氆澭濋澣濇澼濎濈潞濄澽澞濊澨瀄澥澮澺澬澪濏澿澸"
            	],
            	[
            		"ea40",
            		"澢濉澫濍澯澲澰燅燂熿熸燖燀燁燋燔燊燇燏熽燘熼燆燚燛犝犞獩獦獧獬獥獫獪瑿璚璠璔璒璕璡甋疀瘯瘭瘱瘽瘳瘼瘵瘲瘰皻盦瞚瞝瞡瞜瞛瞢瞣瞕瞙"
            	],
            	[
            		"eaa1",
            		"瞗磝磩磥磪磞磣磛磡磢磭磟磠禤穄穈穇窶窸窵窱窷篞篣篧篝篕篥篚篨篹篔篪篢篜篫篘篟糒糔糗糐糑縒縡縗縌縟縠縓縎縜縕縚縢縋縏縖縍縔縥縤罃罻罼罺羱翯耪耩聬膱膦膮膹膵膫膰膬膴膲膷膧臲艕艖艗蕖蕅蕫蕍蕓蕡蕘"
            	],
            	[
            		"eb40",
            		"蕀蕆蕤蕁蕢蕄蕑蕇蕣蔾蕛蕱蕎蕮蕵蕕蕧蕠薌蕦蕝蕔蕥蕬虣虥虤螛螏螗螓螒螈螁螖螘蝹螇螣螅螐螑螝螄螔螜螚螉褞褦褰褭褮褧褱褢褩褣褯褬褟觱諠"
            	],
            	[
            		"eba1",
            		"諢諲諴諵諝謔諤諟諰諈諞諡諨諿諯諻貑貒貐賵賮賱賰賳赬赮趥趧踳踾踸蹀蹅踶踼踽蹁踰踿躽輶輮輵輲輹輷輴遶遹遻邆郺鄳鄵鄶醓醐醑醍醏錧錞錈錟錆錏鍺錸錼錛錣錒錁鍆錭錎錍鋋錝鋺錥錓鋹鋷錴錂錤鋿錩錹錵錪錔錌"
            	],
            	[
            		"ec40",
            		"錋鋾錉錀鋻錖閼闍閾閹閺閶閿閵閽隩雔霋霒霐鞙鞗鞔韰韸頵頯頲餤餟餧餩馞駮駬駥駤駰駣駪駩駧骹骿骴骻髶髺髹髷鬳鮀鮅鮇魼魾魻鮂鮓鮒鮐魺鮕"
            	],
            	[
            		"eca1",
            		"魽鮈鴥鴗鴠鴞鴔鴩鴝鴘鴢鴐鴙鴟麈麆麇麮麭黕黖黺鼒鼽儦儥儢儤儠儩勴嚓嚌嚍嚆嚄嚃噾嚂噿嚁壖壔壏壒嬭嬥嬲嬣嬬嬧嬦嬯嬮孻寱寲嶷幬幪徾徻懃憵憼懧懠懥懤懨懞擯擩擣擫擤擨斁斀斶旚曒檍檖檁檥檉檟檛檡檞檇檓檎"
            	],
            	[
            		"ed40",
            		"檕檃檨檤檑橿檦檚檅檌檒歛殭氉濌澩濴濔濣濜濭濧濦濞濲濝濢濨燡燱燨燲燤燰燢獳獮獯璗璲璫璐璪璭璱璥璯甐甑甒甏疄癃癈癉癇皤盩瞵瞫瞲瞷瞶"
            	],
            	[
            		"eda1",
            		"瞴瞱瞨矰磳磽礂磻磼磲礅磹磾礄禫禨穜穛穖穘穔穚窾竀竁簅簏篲簀篿篻簎篴簋篳簂簉簃簁篸篽簆篰篱簐簊糨縭縼繂縳顈縸縪繉繀繇縩繌縰縻縶繄縺罅罿罾罽翴翲耬膻臄臌臊臅臇膼臩艛艚艜薃薀薏薧薕薠薋薣蕻薤薚薞"
            	],
            	[
            		"ee40",
            		"蕷蕼薉薡蕺蕸蕗薎薖薆薍薙薝薁薢薂薈薅蕹蕶薘薐薟虨螾螪螭蟅螰螬螹螵螼螮蟉蟃蟂蟌螷螯蟄蟊螴螶螿螸螽蟞螲褵褳褼褾襁襒褷襂覭覯覮觲觳謞"
            	],
            	[
            		"eea1",
            		"謘謖謑謅謋謢謏謒謕謇謍謈謆謜謓謚豏豰豲豱豯貕貔賹赯蹎蹍蹓蹐蹌蹇轃轀邅遾鄸醚醢醛醙醟醡醝醠鎡鎃鎯鍤鍖鍇鍼鍘鍜鍶鍉鍐鍑鍠鍭鎏鍌鍪鍹鍗鍕鍒鍏鍱鍷鍻鍡鍞鍣鍧鎀鍎鍙闇闀闉闃闅閷隮隰隬霠霟霘霝霙鞚鞡鞜"
            	],
            	[
            		"ef40",
            		"鞞鞝韕韔韱顁顄顊顉顅顃餥餫餬餪餳餲餯餭餱餰馘馣馡騂駺駴駷駹駸駶駻駽駾駼騃骾髾髽鬁髼魈鮚鮨鮞鮛鮦鮡鮥鮤鮆鮢鮠鮯鴳鵁鵧鴶鴮鴯鴱鴸鴰"
            	],
            	[
            		"efa1",
            		"鵅鵂鵃鴾鴷鵀鴽翵鴭麊麉麍麰黈黚黻黿鼤鼣鼢齔龠儱儭儮嚘嚜嚗嚚嚝嚙奰嬼屩屪巀幭幮懘懟懭懮懱懪懰懫懖懩擿攄擽擸攁攃擼斔旛曚曛曘櫅檹檽櫡櫆檺檶檷櫇檴檭歞毉氋瀇瀌瀍瀁瀅瀔瀎濿瀀濻瀦濼濷瀊爁燿燹爃燽獶"
            	],
            	[
            		"f040",
            		"璸瓀璵瓁璾璶璻瓂甔甓癜癤癙癐癓癗癚皦皽盬矂瞺磿礌礓礔礉礐礒礑禭禬穟簜簩簙簠簟簭簝簦簨簢簥簰繜繐繖繣繘繢繟繑繠繗繓羵羳翷翸聵臑臒"
            	],
            	[
            		"f0a1",
            		"臐艟艞薴藆藀藃藂薳薵薽藇藄薿藋藎藈藅薱薶藒蘤薸薷薾虩蟧蟦蟢蟛蟫蟪蟥蟟蟳蟤蟔蟜蟓蟭蟘蟣螤蟗蟙蠁蟴蟨蟝襓襋襏襌襆襐襑襉謪謧謣謳謰謵譇謯謼謾謱謥謷謦謶謮謤謻謽謺豂豵貙貘貗賾贄贂贀蹜蹢蹠蹗蹖蹞蹥蹧"
            	],
            	[
            		"f140",
            		"蹛蹚蹡蹝蹩蹔轆轇轈轋鄨鄺鄻鄾醨醥醧醯醪鎵鎌鎒鎷鎛鎝鎉鎧鎎鎪鎞鎦鎕鎈鎙鎟鎍鎱鎑鎲鎤鎨鎴鎣鎥闒闓闑隳雗雚巂雟雘雝霣霢霥鞬鞮鞨鞫鞤鞪"
            	],
            	[
            		"f1a1",
            		"鞢鞥韗韙韖韘韺顐顑顒颸饁餼餺騏騋騉騍騄騑騊騅騇騆髀髜鬈鬄鬅鬩鬵魊魌魋鯇鯆鯃鮿鯁鮵鮸鯓鮶鯄鮹鮽鵜鵓鵏鵊鵛鵋鵙鵖鵌鵗鵒鵔鵟鵘鵚麎麌黟鼁鼀鼖鼥鼫鼪鼩鼨齌齕儴儵劖勷厴嚫嚭嚦嚧嚪嚬壚壝壛夒嬽嬾嬿巃幰"
            	],
            	[
            		"f240",
            		"徿懻攇攐攍攉攌攎斄旞旝曞櫧櫠櫌櫑櫙櫋櫟櫜櫐櫫櫏櫍櫞歠殰氌瀙瀧瀠瀖瀫瀡瀢瀣瀩瀗瀤瀜瀪爌爊爇爂爅犥犦犤犣犡瓋瓅璷瓃甖癠矉矊矄矱礝礛"
            	],
            	[
            		"f2a1",
            		"礡礜礗礞禰穧穨簳簼簹簬簻糬糪繶繵繸繰繷繯繺繲繴繨罋罊羃羆羷翽翾聸臗臕艤艡艣藫藱藭藙藡藨藚藗藬藲藸藘藟藣藜藑藰藦藯藞藢蠀蟺蠃蟶蟷蠉蠌蠋蠆蟼蠈蟿蠊蠂襢襚襛襗襡襜襘襝襙覈覷覶觶譐譈譊譀譓譖譔譋譕"
            	],
            	[
            		"f340",
            		"譑譂譒譗豃豷豶貚贆贇贉趬趪趭趫蹭蹸蹳蹪蹯蹻軂轒轑轏轐轓辴酀鄿醰醭鏞鏇鏏鏂鏚鏐鏹鏬鏌鏙鎩鏦鏊鏔鏮鏣鏕鏄鏎鏀鏒鏧镽闚闛雡霩霫霬霨霦"
            	],
            	[
            		"f3a1",
            		"鞳鞷鞶韝韞韟顜顙顝顗颿颽颻颾饈饇饃馦馧騚騕騥騝騤騛騢騠騧騣騞騜騔髂鬋鬊鬎鬌鬷鯪鯫鯠鯞鯤鯦鯢鯰鯔鯗鯬鯜鯙鯥鯕鯡鯚鵷鶁鶊鶄鶈鵱鶀鵸鶆鶋鶌鵽鵫鵴鵵鵰鵩鶅鵳鵻鶂鵯鵹鵿鶇鵨麔麑黀黼鼭齀齁齍齖齗齘匷嚲"
            	],
            	[
            		"f440",
            		"嚵嚳壣孅巆巇廮廯忀忁懹攗攖攕攓旟曨曣曤櫳櫰櫪櫨櫹櫱櫮櫯瀼瀵瀯瀷瀴瀱灂瀸瀿瀺瀹灀瀻瀳灁爓爔犨獽獼璺皫皪皾盭矌矎矏矍矲礥礣礧礨礤礩"
            	],
            	[
            		"f4a1",
            		"禲穮穬穭竷籉籈籊籇籅糮繻繾纁纀羺翿聹臛臙舋艨艩蘢藿蘁藾蘛蘀藶蘄蘉蘅蘌藽蠙蠐蠑蠗蠓蠖襣襦覹觷譠譪譝譨譣譥譧譭趮躆躈躄轙轖轗轕轘轚邍酃酁醷醵醲醳鐋鐓鏻鐠鐏鐔鏾鐕鐐鐨鐙鐍鏵鐀鏷鐇鐎鐖鐒鏺鐉鏸鐊鏿"
            	],
            	[
            		"f540",
            		"鏼鐌鏶鐑鐆闞闠闟霮霯鞹鞻韽韾顠顢顣顟飁飂饐饎饙饌饋饓騲騴騱騬騪騶騩騮騸騭髇髊髆鬐鬒鬑鰋鰈鯷鰅鰒鯸鱀鰇鰎鰆鰗鰔鰉鶟鶙鶤鶝鶒鶘鶐鶛"
            	],
            	[
            		"f5a1",
            		"鶠鶔鶜鶪鶗鶡鶚鶢鶨鶞鶣鶿鶩鶖鶦鶧麙麛麚黥黤黧黦鼰鼮齛齠齞齝齙龑儺儹劘劗囃嚽嚾孈孇巋巏廱懽攛欂櫼欃櫸欀灃灄灊灈灉灅灆爝爚爙獾甗癪矐礭礱礯籔籓糲纊纇纈纋纆纍罍羻耰臝蘘蘪蘦蘟蘣蘜蘙蘧蘮蘡蘠蘩蘞蘥"
            	],
            	[
            		"f640",
            		"蠩蠝蠛蠠蠤蠜蠫衊襭襩襮襫觺譹譸譅譺譻贐贔趯躎躌轞轛轝酆酄酅醹鐿鐻鐶鐩鐽鐼鐰鐹鐪鐷鐬鑀鐱闥闤闣霵霺鞿韡顤飉飆飀饘饖騹騽驆驄驂驁騺"
            	],
            	[
            		"f6a1",
            		"騿髍鬕鬗鬘鬖鬺魒鰫鰝鰜鰬鰣鰨鰩鰤鰡鶷鶶鶼鷁鷇鷊鷏鶾鷅鷃鶻鶵鷎鶹鶺鶬鷈鶱鶭鷌鶳鷍鶲鹺麜黫黮黭鼛鼘鼚鼱齎齥齤龒亹囆囅囋奱孋孌巕巑廲攡攠攦攢欋欈欉氍灕灖灗灒爞爟犩獿瓘瓕瓙瓗癭皭礵禴穰穱籗籜籙籛籚"
            	],
            	[
            		"f740",
            		"糴糱纑罏羇臞艫蘴蘵蘳蘬蘲蘶蠬蠨蠦蠪蠥襱覿覾觻譾讄讂讆讅譿贕躕躔躚躒躐躖躗轠轢酇鑌鑐鑊鑋鑏鑇鑅鑈鑉鑆霿韣顪顩飋饔饛驎驓驔驌驏驈驊"
            	],
            	[
            		"f7a1",
            		"驉驒驐髐鬙鬫鬻魖魕鱆鱈鰿鱄鰹鰳鱁鰼鰷鰴鰲鰽鰶鷛鷒鷞鷚鷋鷐鷜鷑鷟鷩鷙鷘鷖鷵鷕鷝麶黰鼵鼳鼲齂齫龕龢儽劙壨壧奲孍巘蠯彏戁戃戄攩攥斖曫欑欒欏毊灛灚爢玂玁玃癰矔籧籦纕艬蘺虀蘹蘼蘱蘻蘾蠰蠲蠮蠳襶襴襳觾"
            	],
            	[
            		"f840",
            		"讌讎讋讈豅贙躘轤轣醼鑢鑕鑝鑗鑞韄韅頀驖驙鬞鬟鬠鱒鱘鱐鱊鱍鱋鱕鱙鱌鱎鷻鷷鷯鷣鷫鷸鷤鷶鷡鷮鷦鷲鷰鷢鷬鷴鷳鷨鷭黂黐黲黳鼆鼜鼸鼷鼶齃齏"
            	],
            	[
            		"f8a1",
            		"齱齰齮齯囓囍孎屭攭曭曮欓灟灡灝灠爣瓛瓥矕礸禷禶籪纗羉艭虃蠸蠷蠵衋讔讕躞躟躠躝醾醽釂鑫鑨鑩雥靆靃靇韇韥驞髕魙鱣鱧鱦鱢鱞鱠鸂鷾鸇鸃鸆鸅鸀鸁鸉鷿鷽鸄麠鼞齆齴齵齶囔攮斸欘欙欗欚灢爦犪矘矙礹籩籫糶纚"
            	],
            	[
            		"f940",
            		"纘纛纙臠臡虆虇虈襹襺襼襻觿讘讙躥躤躣鑮鑭鑯鑱鑳靉顲饟鱨鱮鱭鸋鸍鸐鸏鸒鸑麡黵鼉齇齸齻齺齹圞灦籯蠼趲躦釃鑴鑸鑶鑵驠鱴鱳鱱鱵鸔鸓黶鼊"
            	],
            	[
            		"f9a1",
            		"龤灨灥糷虪蠾蠽蠿讞貜躩軉靋顳顴飌饡馫驤驦驧鬤鸕鸗齈戇欞爧虌躨钂钀钁驩驨鬮鸙爩虋讟钃鱹麷癵驫鱺鸝灩灪麤齾齉龘碁銹裏墻恒粧嫺╔╦╗╠╬╣╚╩╝╒╤╕╞╪╡╘╧╛╓╥╖╟╫╢╙╨╜║═╭╮╰╯▓"
            	]
            ];

            var require$$7 = [
            	[
            		"8740",
            		"䏰䰲䘃䖦䕸𧉧䵷䖳𧲱䳢𧳅㮕䜶䝄䱇䱀𤊿𣘗𧍒𦺋𧃒䱗𪍑䝏䗚䲅𧱬䴇䪤䚡𦬣爥𥩔𡩣𣸆𣽡晍囻"
            	],
            	[
            		"8767",
            		"綕夝𨮹㷴霴𧯯寛𡵞媤㘥𩺰嫑宷峼杮薓𩥅瑡璝㡵𡵓𣚞𦀡㻬"
            	],
            	[
            		"87a1",
            		"𥣞㫵竼龗𤅡𨤍𣇪𠪊𣉞䌊蒄龖鐯䤰蘓墖靊鈘秐稲晠権袝瑌篅枂稬剏遆㓦珄𥶹瓆鿇垳䤯呌䄱𣚎堘穲𧭥讏䚮𦺈䆁𥶙箮𢒼鿈𢓁𢓉𢓌鿉蔄𣖻䂴鿊䓡𪷿拁灮鿋"
            	],
            	[
            		"8840",
            		"㇀",
            		4,
            		"𠄌㇅𠃑𠃍㇆㇇𠃋𡿨㇈𠃊㇉㇊㇋㇌𠄎㇍㇎ĀÁǍÀĒÉĚÈŌÓǑÒ࿿Ê̄Ế࿿Ê̌ỀÊāáǎàɑēéěèīíǐìōóǒòūúǔùǖǘǚ"
            	],
            	[
            		"88a1",
            		"ǜü࿿ê̄ế࿿ê̌ềêɡ⏚⏛"
            	],
            	[
            		"8940",
            		"𪎩𡅅"
            	],
            	[
            		"8943",
            		"攊"
            	],
            	[
            		"8946",
            		"丽滝鵎釟"
            	],
            	[
            		"894c",
            		"𧜵撑会伨侨兖兴农凤务动医华发变团声处备夲头学实実岚庆总斉柾栄桥济炼电纤纬纺织经统缆缷艺苏药视设询车轧轮"
            	],
            	[
            		"89a1",
            		"琑糼緍楆竉刧"
            	],
            	[
            		"89ab",
            		"醌碸酞肼"
            	],
            	[
            		"89b0",
            		"贋胶𠧧"
            	],
            	[
            		"89b5",
            		"肟黇䳍鷉鸌䰾𩷶𧀎鸊𪄳㗁"
            	],
            	[
            		"89c1",
            		"溚舾甙"
            	],
            	[
            		"89c5",
            		"䤑马骏龙禇𨑬𡷊𠗐𢫦两亁亀亇亿仫伷㑌侽㹈倃傈㑽㒓㒥円夅凛凼刅争剹劐匧㗇厩㕑厰㕓参吣㕭㕲㚁咓咣咴咹哐哯唘唣唨㖘唿㖥㖿嗗㗅"
            	],
            	[
            		"8a40",
            		"𧶄唥"
            	],
            	[
            		"8a43",
            		"𠱂𠴕𥄫喐𢳆㧬𠍁蹆𤶸𩓥䁓𨂾睺𢰸㨴䟕𨅝𦧲𤷪擝𠵼𠾴𠳕𡃴撍蹾𠺖𠰋𠽤𢲩𨉖𤓓"
            	],
            	[
            		"8a64",
            		"𠵆𩩍𨃩䟴𤺧𢳂骲㩧𩗴㿭㔆𥋇𩟔𧣈𢵄鵮頕"
            	],
            	[
            		"8a76",
            		"䏙𦂥撴哣𢵌𢯊𡁷㧻𡁯"
            	],
            	[
            		"8aa1",
            		"𦛚𦜖𧦠擪𥁒𠱃蹨𢆡𨭌𠜱"
            	],
            	[
            		"8aac",
            		"䠋𠆩㿺塳𢶍"
            	],
            	[
            		"8ab2",
            		"𤗈𠓼𦂗𠽌𠶖啹䂻䎺"
            	],
            	[
            		"8abb",
            		"䪴𢩦𡂝膪飵𠶜捹㧾𢝵跀嚡摼㹃"
            	],
            	[
            		"8ac9",
            		"𪘁𠸉𢫏𢳉"
            	],
            	[
            		"8ace",
            		"𡃈𣧂㦒㨆𨊛㕸𥹉𢃇噒𠼱𢲲𩜠㒼氽𤸻"
            	],
            	[
            		"8adf",
            		"𧕴𢺋𢈈𪙛𨳍𠹺𠰴𦠜羓𡃏𢠃𢤹㗻𥇣𠺌𠾍𠺪㾓𠼰𠵇𡅏𠹌"
            	],
            	[
            		"8af6",
            		"𠺫𠮩𠵈𡃀𡄽㿹𢚖搲𠾭"
            	],
            	[
            		"8b40",
            		"𣏴𧘹𢯎𠵾𠵿𢱑𢱕㨘𠺘𡃇𠼮𪘲𦭐𨳒𨶙𨳊閪哌苄喹"
            	],
            	[
            		"8b55",
            		"𩻃鰦骶𧝞𢷮煀腭胬尜𦕲脴㞗卟𨂽醶𠻺𠸏𠹷𠻻㗝𤷫㘉𠳖嚯𢞵𡃉𠸐𠹸𡁸𡅈𨈇𡑕𠹹𤹐𢶤婔𡀝𡀞𡃵𡃶垜𠸑"
            	],
            	[
            		"8ba1",
            		"𧚔𨋍𠾵𠹻𥅾㜃𠾶𡆀𥋘𪊽𤧚𡠺𤅷𨉼墙剨㘚𥜽箲孨䠀䬬鼧䧧鰟鮍𥭴𣄽嗻㗲嚉丨夂𡯁屮靑𠂆乛亻㔾尣彑忄㣺扌攵歺氵氺灬爫丬犭𤣩罒礻糹罓𦉪㓁"
            	],
            	[
            		"8bde",
            		"𦍋耂肀𦘒𦥑卝衤见𧢲讠贝钅镸长门𨸏韦页风飞饣𩠐鱼鸟黄歯龜丷𠂇阝户钢"
            	],
            	[
            		"8c40",
            		"倻淾𩱳龦㷉袏𤅎灷峵䬠𥇍㕙𥴰愢𨨲辧釶熑朙玺𣊁𪄇㲋𡦀䬐磤琂冮𨜏䀉橣𪊺䈣蘏𠩯稪𩥇𨫪靕灍匤𢁾鏴盙𨧣龧矝亣俰傼丯众龨吴綋墒壐𡶶庒庙忂𢜒斋"
            	],
            	[
            		"8ca1",
            		"𣏹椙橃𣱣泿"
            	],
            	[
            		"8ca7",
            		"爀𤔅玌㻛𤨓嬕璹讃𥲤𥚕窓篬糃繬苸薗龩袐龪躹龫迏蕟駠鈡龬𨶹𡐿䁱䊢娚"
            	],
            	[
            		"8cc9",
            		"顨杫䉶圽"
            	],
            	[
            		"8cce",
            		"藖𤥻芿𧄍䲁𦵴嵻𦬕𦾾龭龮宖龯曧繛湗秊㶈䓃𣉖𢞖䎚䔶"
            	],
            	[
            		"8ce6",
            		"峕𣬚諹屸㴒𣕑嵸龲煗䕘𤃬𡸣䱷㥸㑊𠆤𦱁諌侴𠈹妿腬顖𩣺弻"
            	],
            	[
            		"8d40",
            		"𠮟"
            	],
            	[
            		"8d42",
            		"𢇁𨥭䄂䚻𩁹㼇龳𪆵䃸㟖䛷𦱆䅼𨚲𧏿䕭㣔𥒚䕡䔛䶉䱻䵶䗪㿈𤬏㙡䓞䒽䇭崾嵈嵖㷼㠏嶤嶹㠠㠸幂庽弥徃㤈㤔㤿㥍惗愽峥㦉憷憹懏㦸戬抐拥挘㧸嚱"
            	],
            	[
            		"8da1",
            		"㨃揢揻搇摚㩋擀崕嘡龟㪗斆㪽旿晓㫲暒㬢朖㭂枤栀㭘桊梄㭲㭱㭻椉楃牜楤榟榅㮼槖㯝橥橴橱檂㯬檙㯲檫檵櫔櫶殁毁毪汵沪㳋洂洆洦涁㳯涤涱渕渘温溆𨧀溻滢滚齿滨滩漤漴㵆𣽁澁澾㵪㵵熷岙㶊瀬㶑灐灔灯灿炉𠌥䏁㗱𠻘"
            	],
            	[
            		"8e40",
            		"𣻗垾𦻓焾𥟠㙎榢𨯩孴穉𥣡𩓙穥穽𥦬窻窰竂竃燑𦒍䇊竚竝竪䇯咲𥰁笋筕笩𥌎𥳾箢筯莜𥮴𦱿篐萡箒箸𥴠㶭𥱥蒒篺簆簵𥳁籄粃𤢂粦晽𤕸糉糇糦籴糳糵糎"
            	],
            	[
            		"8ea1",
            		"繧䔝𦹄絝𦻖璍綉綫焵綳緒𤁗𦀩緤㴓緵𡟹緥𨍭縝𦄡𦅚繮纒䌫鑬縧罀罁罇礶𦋐駡羗𦍑羣𡙡𠁨䕜𣝦䔃𨌺翺𦒉者耈耝耨耯𪂇𦳃耻耼聡𢜔䦉𦘦𣷣𦛨朥肧𨩈脇脚墰𢛶汿𦒘𤾸擧𡒊舘𡡞橓𤩥𤪕䑺舩𠬍𦩒𣵾俹𡓽蓢荢𦬊𤦧𣔰𡝳𣷸芪椛芳䇛"
            	],
            	[
            		"8f40",
            		"蕋苐茚𠸖𡞴㛁𣅽𣕚艻苢茘𣺋𦶣𦬅𦮗𣗎㶿茝嗬莅䔋𦶥莬菁菓㑾𦻔橗蕚㒖𦹂𢻯葘𥯤葱㷓䓤檧葊𣲵祘蒨𦮖𦹷𦹃蓞萏莑䒠蒓蓤𥲑䉀𥳀䕃蔴嫲𦺙䔧蕳䔖枿蘖"
            	],
            	[
            		"8fa1",
            		"𨘥𨘻藁𧂈蘂𡖂𧃍䕫䕪蘨㙈𡢢号𧎚虾蝱𪃸蟮𢰧螱蟚蠏噡虬桖䘏衅衆𧗠𣶹𧗤衞袜䙛袴袵揁装睷𧜏覇覊覦覩覧覼𨨥觧𧤤𧪽誜瞓釾誐𧩙竩𧬺𣾏䜓𧬸煼謌謟𥐰𥕥謿譌譍誩𤩺讐讛誯𡛟䘕衏貛𧵔𧶏貫㜥𧵓賖𧶘𧶽贒贃𡤐賛灜贑𤳉㻐起"
            	],
            	[
            		"9040",
            		"趩𨀂𡀔𤦊㭼𨆼𧄌竧躭躶軃鋔輙輭𨍥𨐒辥錃𪊟𠩐辳䤪𨧞𨔽𣶻廸𣉢迹𪀔𨚼𨔁𢌥㦀𦻗逷𨔼𧪾遡𨕬𨘋邨𨜓郄𨛦邮都酧㫰醩釄粬𨤳𡺉鈎沟鉁鉢𥖹銹𨫆𣲛𨬌𥗛"
            	],
            	[
            		"90a1",
            		"𠴱錬鍫𨫡𨯫炏嫃𨫢𨫥䥥鉄𨯬𨰹𨯿鍳鑛躼閅閦鐦閠濶䊹𢙺𨛘𡉼𣸮䧟氜陻隖䅬隣𦻕懚隶磵𨫠隽双䦡𦲸𠉴𦐐𩂯𩃥𤫑𡤕𣌊霱虂霶䨏䔽䖅𤫩灵孁霛靜𩇕靗孊𩇫靟鐥僐𣂷𣂼鞉鞟鞱鞾韀韒韠𥑬韮琜𩐳響韵𩐝𧥺䫑頴頳顋顦㬎𧅵㵑𠘰𤅜"
            	],
            	[
            		"9140",
            		"𥜆飊颷飈飇䫿𦴧𡛓喰飡飦飬鍸餹𤨩䭲𩡗𩤅駵騌騻騐驘𥜥㛄𩂱𩯕髠髢𩬅髴䰎鬔鬭𨘀倴鬴𦦨㣃𣁽魐魀𩴾婅𡡣鮎𤉋鰂鯿鰌𩹨鷔𩾷𪆒𪆫𪃡𪄣𪇟鵾鶃𪄴鸎梈"
            	],
            	[
            		"91a1",
            		"鷄𢅛𪆓𪈠𡤻𪈳鴹𪂹𪊴麐麕麞麢䴴麪麯𤍤黁㭠㧥㴝伲㞾𨰫鼂鼈䮖鐤𦶢鼗鼖鼹嚟嚊齅馸𩂋韲葿齢齩竜龎爖䮾𤥵𤦻煷𤧸𤍈𤩑玞𨯚𡣺禟𨥾𨸶鍩鏳𨩄鋬鎁鏋𨥬𤒹爗㻫睲穃烐𤑳𤏸煾𡟯炣𡢾𣖙㻇𡢅𥐯𡟸㜢𡛻𡠹㛡𡝴𡣑𥽋㜣𡛀坛𤨥𡏾𡊨"
            	],
            	[
            		"9240",
            		"𡏆𡒶蔃𣚦蔃葕𤦔𧅥𣸱𥕜𣻻𧁒䓴𣛮𩦝𦼦柹㜳㰕㷧塬𡤢栐䁗𣜿𤃡𤂋𤄏𦰡哋嚞𦚱嚒𠿟𠮨𠸍鏆𨬓鎜仸儫㠙𤐶亼𠑥𠍿佋侊𥙑婨𠆫𠏋㦙𠌊𠐔㐵伩𠋀𨺳𠉵諚𠈌亘"
            	],
            	[
            		"92a1",
            		"働儍侢伃𤨎𣺊佂倮偬傁俌俥偘僼兙兛兝兞湶𣖕𣸹𣺿浲𡢄𣺉冨凃𠗠䓝𠒣𠒒𠒑赺𨪜𠜎剙劤𠡳勡鍮䙺熌𤎌𠰠𤦬𡃤槑𠸝瑹㻞璙琔瑖玘䮎𤪼𤂍叐㖄爏𤃉喴𠍅响𠯆圝鉝雴鍦埝垍坿㘾壋媙𨩆𡛺𡝯𡜐娬妸銏婾嫏娒𥥆𡧳𡡡𤊕㛵洅瑃娡𥺃"
            	],
            	[
            		"9340",
            		"媁𨯗𠐓鏠璌𡌃焅䥲鐈𨧻鎽㞠尞岞幞幈𡦖𡥼𣫮廍孏𡤃𡤄㜁𡢠㛝𡛾㛓脪𨩇𡶺𣑲𨦨弌弎𡤧𡞫婫𡜻孄蘔𧗽衠恾𢡠𢘫忛㺸𢖯𢖾𩂈𦽳懀𠀾𠁆𢘛憙憘恵𢲛𢴇𤛔𩅍"
            	],
            	[
            		"93a1",
            		"摱𤙥𢭪㨩𢬢𣑐𩣪𢹸挷𪑛撶挱揑𤧣𢵧护𢲡搻敫楲㯴𣂎𣊭𤦉𣊫唍𣋠𡣙𩐿曎𣊉𣆳㫠䆐𥖄𨬢𥖏𡛼𥕛𥐥磮𣄃𡠪𣈴㑤𣈏𣆂𤋉暎𦴤晫䮓昰𧡰𡷫晣𣋒𣋡昞𥡲㣑𣠺𣞼㮙𣞢𣏾瓐㮖枏𤘪梶栞㯄檾㡣𣟕𤒇樳橒櫉欅𡤒攑梘橌㯗橺歗𣿀𣲚鎠鋲𨯪𨫋"
            	],
            	[
            		"9440",
            		"銉𨀞𨧜鑧涥漋𤧬浧𣽿㶏渄𤀼娽渊塇洤硂焻𤌚𤉶烱牐犇犔𤞏𤜥兹𤪤𠗫瑺𣻸𣙟𤩊𤤗𥿡㼆㺱𤫟𨰣𣼵悧㻳瓌琼鎇琷䒟𦷪䕑疃㽣𤳙𤴆㽘畕癳𪗆㬙瑨𨫌𤦫𤦎㫻"
            	],
            	[
            		"94a1",
            		"㷍𤩎㻿𤧅𤣳釺圲鍂𨫣𡡤僟𥈡𥇧睸𣈲眎眏睻𤚗𣞁㩞𤣰琸璛㺿𤪺𤫇䃈𤪖𦆮錇𥖁砞碍碈磒珐祙𧝁𥛣䄎禛蒖禥樭𣻺稺秴䅮𡛦䄲鈵秱𠵌𤦌𠊙𣶺𡝮㖗啫㕰㚪𠇔𠰍竢婙𢛵𥪯𥪜娍𠉛磰娪𥯆竾䇹籝籭䈑𥮳𥺼𥺦糍𤧹𡞰粎籼粮檲緜縇緓罎𦉡"
            	],
            	[
            		"9540",
            		"𦅜𧭈綗𥺂䉪𦭵𠤖柖𠁎𣗏埄𦐒𦏸𤥢翝笧𠠬𥫩𥵃笌𥸎駦虅驣樜𣐿㧢𤧷𦖭騟𦖠蒀𧄧𦳑䓪脷䐂胆脉腂𦞴飃𦩂艢艥𦩑葓𦶧蘐𧈛媆䅿𡡀嬫𡢡嫤𡣘蚠蜨𣶏蠭𧐢娂"
            	],
            	[
            		"95a1",
            		"衮佅袇袿裦襥襍𥚃襔𧞅𧞄𨯵𨯙𨮜𨧹㺭蒣䛵䛏㟲訽訜𩑈彍鈫𤊄旔焩烄𡡅鵭貟賩𧷜妚矃姰䍮㛔踪躧𤰉輰轊䋴汘澻𢌡䢛潹溋𡟚鯩㚵𤤯邻邗啱䤆醻鐄𨩋䁢𨫼鐧𨰝𨰻蓥訫閙閧閗閖𨴴瑅㻂𤣿𤩂𤏪㻧𣈥随𨻧𨹦𨹥㻌𤧭𤩸𣿮琒瑫㻼靁𩂰"
            	],
            	[
            		"9640",
            		"桇䨝𩂓𥟟靝鍨𨦉𨰦𨬯𦎾銺嬑譩䤼珹𤈛鞛靱餸𠼦巁𨯅𤪲頟𩓚鋶𩗗釥䓀𨭐𤩧𨭤飜𨩅㼀鈪䤥萔餻饍𧬆㷽馛䭯馪驜𨭥𥣈檏騡嫾騯𩣱䮐𩥈馼䮽䮗鍽塲𡌂堢𤦸"
            	],
            	[
            		"96a1",
            		"𡓨硄𢜟𣶸棅㵽鑘㤧慐𢞁𢥫愇鱏鱓鱻鰵鰐魿鯏𩸭鮟𪇵𪃾鴡䲮𤄄鸘䲰鴌𪆴𪃭𪃳𩤯鶥蒽𦸒𦿟𦮂藼䔳𦶤𦺄𦷰萠藮𦸀𣟗𦁤秢𣖜𣙀䤭𤧞㵢鏛銾鍈𠊿碹鉷鑍俤㑀遤𥕝砽硔碶硋𡝗𣇉𤥁㚚佲濚濙瀞瀞吔𤆵垻壳垊鴖埗焴㒯𤆬燫𦱀𤾗嬨𡞵𨩉"
            	],
            	[
            		"9740",
            		"愌嫎娋䊼𤒈㜬䭻𨧼鎻鎸𡣖𠼝葲𦳀𡐓𤋺𢰦𤏁妔𣶷𦝁綨𦅛𦂤𤦹𤦋𨧺鋥珢㻩璴𨭣𡢟㻡𤪳櫘珳珻㻖𤨾𤪔𡟙𤩦𠎧𡐤𤧥瑈𤤖炥𤥶銄珦鍟𠓾錱𨫎𨨖鎆𨯧𥗕䤵𨪂煫"
            	],
            	[
            		"97a1",
            		"𤥃𠳿嚤𠘚𠯫𠲸唂秄𡟺緾𡛂𤩐𡡒䔮鐁㜊𨫀𤦭妰𡢿𡢃𧒄媡㛢𣵛㚰鉟婹𨪁𡡢鍴㳍𠪴䪖㦊僴㵩㵌𡎜煵䋻𨈘渏𩃤䓫浗𧹏灧沯㳖𣿭𣸭渂漌㵯𠏵畑㚼㓈䚀㻚䡱姄鉮䤾轁𨰜𦯀堒埈㛖𡑒烾𤍢𤩱𢿣𡊰𢎽梹楧𡎘𣓥𧯴𣛟𨪃𣟖𣏺𤲟樚𣚭𦲷萾䓟䓎"
            	],
            	[
            		"9840",
            		"𦴦𦵑𦲂𦿞漗𧄉茽𡜺菭𦲀𧁓𡟛妉媂𡞳婡婱𡤅𤇼㜭姯𡜼㛇熎鎐暚𤊥婮娫𤊓樫𣻹𧜶𤑛𤋊焝𤉙𨧡侰𦴨峂𤓎𧹍𤎽樌𤉖𡌄炦焳𤏩㶥泟勇𤩏繥姫崯㷳彜𤩝𡟟綤萦"
            	],
            	[
            		"98a1",
            		"咅𣫺𣌀𠈔坾𠣕𠘙㿥𡾞𪊶瀃𩅛嵰玏糓𨩙𩐠俈翧狍猐𧫴猸猹𥛶獁獈㺩𧬘遬燵𤣲珡臶㻊県㻑沢国琙琞琟㻢㻰㻴㻺瓓㼎㽓畂畭畲疍㽼痈痜㿀癍㿗癴㿜発𤽜熈嘣覀塩䀝睃䀹条䁅㗛瞘䁪䁯属瞾矋売砘点砜䂨砹硇硑硦葈𥔵礳栃礲䄃"
            	],
            	[
            		"9940",
            		"䄉禑禙辻稆込䅧窑䆲窼艹䇄竏竛䇏両筢筬筻簒簛䉠䉺类粜䊌粸䊔糭输烀𠳏総緔緐緽羮羴犟䎗耠耥笹耮耱联㷌垴炠肷胩䏭脌猪脎脒畠脔䐁㬹腖腙腚"
            	],
            	[
            		"99a1",
            		"䐓堺腼膄䐥膓䐭膥埯臁臤艔䒏芦艶苊苘苿䒰荗险榊萅烵葤惣蒈䔄蒾蓡蓸蔐蔸蕒䔻蕯蕰藠䕷虲蚒蚲蛯际螋䘆䘗袮裿褤襇覑𧥧訩訸誔誴豑賔賲贜䞘塟跃䟭仮踺嗘坔蹱嗵躰䠷軎転軤軭軲辷迁迊迌逳駄䢭飠鈓䤞鈨鉘鉫銱銮銿"
            	],
            	[
            		"9a40",
            		"鋣鋫鋳鋴鋽鍃鎄鎭䥅䥑麿鐗匁鐝鐭鐾䥪鑔鑹锭関䦧间阳䧥枠䨤靀䨵鞲韂噔䫤惨颹䬙飱塄餎餙冴餜餷饂饝饢䭰駅䮝騼鬏窃魩鮁鯝鯱鯴䱭鰠㝯𡯂鵉鰺"
            	],
            	[
            		"9aa1",
            		"黾噐鶓鶽鷀鷼银辶鹻麬麱麽黆铜黢黱黸竈齄𠂔𠊷𠎠椚铃妬𠓗塀铁㞹𠗕𠘕𠙶𡚺块煳𠫂𠫍𠮿呪吆𠯋咞𠯻𠰻𠱓𠱥𠱼惧𠲍噺𠲵𠳝𠳭𠵯𠶲𠷈楕鰯螥𠸄𠸎𠻗𠾐𠼭𠹳尠𠾼帋𡁜𡁏𡁶朞𡁻𡂈𡂖㙇𡂿𡃓𡄯𡄻卤蒭𡋣𡍵𡌶讁𡕷𡘙𡟃𡟇乸炻𡠭𡥪"
            	],
            	[
            		"9b40",
            		"𡨭𡩅𡰪𡱰𡲬𡻈拃𡻕𡼕熘桕𢁅槩㛈𢉼𢏗𢏺𢜪𢡱𢥏苽𢥧𢦓𢫕覥𢫨辠𢬎鞸𢬿顇骽𢱌"
            	],
            	[
            		"9b62",
            		"𢲈𢲷𥯨𢴈𢴒𢶷𢶕𢹂𢽴𢿌𣀳𣁦𣌟𣏞徱晈暿𧩹𣕧𣗳爁𤦺矗𣘚𣜖纇𠍆墵朎"
            	],
            	[
            		"9ba1",
            		"椘𣪧𧙗𥿢𣸑𣺹𧗾𢂚䣐䪸𤄙𨪚𤋮𤌍𤀻𤌴𤎖𤩅𠗊凒𠘑妟𡺨㮾𣳿𤐄𤓖垈𤙴㦛𤜯𨗨𩧉㝢𢇃譞𨭎駖𤠒𤣻𤨕爉𤫀𠱸奥𤺥𤾆𠝹軚𥀬劏圿煱𥊙𥐙𣽊𤪧喼𥑆𥑮𦭒釔㑳𥔿𧘲𥕞䜘𥕢𥕦𥟇𤤿𥡝偦㓻𣏌惞𥤃䝼𨥈𥪮𥮉𥰆𡶐垡煑澶𦄂𧰒遖𦆲𤾚譢𦐂𦑊"
            	],
            	[
            		"9c40",
            		"嵛𦯷輶𦒄𡤜諪𤧶𦒈𣿯𦔒䯀𦖿𦚵𢜛鑥𥟡憕娧晉侻嚹𤔡𦛼乪𤤴陖涏𦲽㘘襷𦞙𦡮𦐑𦡞營𦣇筂𩃀𠨑𦤦鄄𦤹穅鷰𦧺騦𦨭㙟𦑩𠀡禃𦨴𦭛崬𣔙菏𦮝䛐𦲤画补𦶮墶"
            	],
            	[
            		"9ca1",
            		"㜜𢖍𧁋𧇍㱔𧊀𧊅銁𢅺𧊋錰𧋦𤧐氹钟𧑐𠻸蠧裵𢤦𨑳𡞱溸𤨪𡠠㦤㚹尐秣䔿暶𩲭𩢤襃𧟌𧡘囖䃟𡘊㦡𣜯𨃨𡏅熭荦𧧝𩆨婧䲷𧂯𨦫𧧽𧨊𧬋𧵦𤅺筃祾𨀉澵𪋟樃𨌘厢𦸇鎿栶靝𨅯𨀣𦦵𡏭𣈯𨁈嶅𨰰𨂃圕頣𨥉嶫𤦈斾槕叒𤪥𣾁㰑朶𨂐𨃴𨄮𡾡𨅏"
            	],
            	[
            		"9d40",
            		"𨆉𨆯𨈚𨌆𨌯𨎊㗊𨑨𨚪䣺揦𨥖砈鉕𨦸䏲𨧧䏟𨧨𨭆𨯔姸𨰉輋𨿅𩃬筑𩄐𩄼㷷𩅞𤫊运犏嚋𩓧𩗩𩖰𩖸𩜲𩣑𩥉𩥪𩧃𩨨𩬎𩵚𩶛纟𩻸𩼣䲤镇𪊓熢𪋿䶑递𪗋䶜𠲜达嗁"
            	],
            	[
            		"9da1",
            		"辺𢒰边𤪓䔉繿潖檱仪㓤𨬬𧢝㜺躀𡟵𨀤𨭬𨮙𧨾𦚯㷫𧙕𣲷𥘵𥥖亚𥺁𦉘嚿𠹭踎孭𣺈𤲞揞拐𡟶𡡻攰嘭𥱊吚𥌑㷆𩶘䱽嘢嘞罉𥻘奵𣵀蝰东𠿪𠵉𣚺脗鵞贘瘻鱅癎瞹鍅吲腈苷嘥脲萘肽嗪祢噃吖𠺝㗎嘅嗱曱𨋢㘭甴嗰喺咗啲𠱁𠲖廐𥅈𠹶𢱢"
            	],
            	[
            		"9e40",
            		"𠺢麫絚嗞𡁵抝靭咔賍燶酶揼掹揾啩𢭃鱲𢺳冚㓟𠶧冧呍唞唓癦踭𦢊疱肶蠄螆裇膶萜𡃁䓬猄𤜆宐茋𦢓噻𢛴𧴯𤆣𧵳𦻐𧊶酰𡇙鈈𣳼𪚩𠺬𠻹牦𡲢䝎𤿂𧿹𠿫䃺"
            	],
            	[
            		"9ea1",
            		"鱝攟𢶠䣳𤟠𩵼𠿬𠸊恢𧖣𠿭"
            	],
            	[
            		"9ead",
            		"𦁈𡆇熣纎鵐业丄㕷嬍沲卧㚬㧜卽㚥𤘘墚𤭮舭呋垪𥪕𠥹"
            	],
            	[
            		"9ec5",
            		"㩒𢑥獴𩺬䴉鯭𣳾𩼰䱛𤾩𩖞𩿞葜𣶶𧊲𦞳𣜠挮紥𣻷𣸬㨪逈勌㹴㙺䗩𠒎癀嫰𠺶硺𧼮墧䂿噼鮋嵴癔𪐴麅䳡痹㟻愙𣃚𤏲"
            	],
            	[
            		"9ef5",
            		"噝𡊩垧𤥣𩸆刴𧂮㖭汊鵼"
            	],
            	[
            		"9f40",
            		"籖鬹埞𡝬屓擓𩓐𦌵𧅤蚭𠴨𦴢𤫢𠵱"
            	],
            	[
            		"9f4f",
            		"凾𡼏嶎霃𡷑麁遌笟鬂峑箣扨挵髿篏鬪籾鬮籂粆鰕篼鬉鼗鰛𤤾齚啳寃俽麘俲剠㸆勑坧偖妷帒韈鶫轜呩鞴饀鞺匬愰"
            	],
            	[
            		"9fa1",
            		"椬叚鰊鴂䰻陁榀傦畆𡝭駚剳"
            	],
            	[
            		"9fae",
            		"酙隁酜"
            	],
            	[
            		"9fb2",
            		"酑𨺗捿𦴣櫊嘑醎畺抅𠏼獏籰𥰡𣳽"
            	],
            	[
            		"9fc1",
            		"𤤙盖鮝个𠳔莾衂"
            	],
            	[
            		"9fc9",
            		"届槀僭坺刟巵从氱𠇲伹咜哚劚趂㗾弌㗳"
            	],
            	[
            		"9fdb",
            		"歒酼龥鮗頮颴骺麨麄煺笔"
            	],
            	[
            		"9fe7",
            		"毺蠘罸"
            	],
            	[
            		"9feb",
            		"嘠𪙊蹷齓"
            	],
            	[
            		"9ff0",
            		"跔蹏鸜踁抂𨍽踨蹵竓𤩷稾磘泪詧瘇"
            	],
            	[
            		"a040",
            		"𨩚鼦泎蟖痃𪊲硓咢贌狢獱謭猂瓱賫𤪻蘯徺袠䒷"
            	],
            	[
            		"a055",
            		"𡠻𦸅"
            	],
            	[
            		"a058",
            		"詾𢔛"
            	],
            	[
            		"a05b",
            		"惽癧髗鵄鍮鮏蟵"
            	],
            	[
            		"a063",
            		"蠏賷猬霡鮰㗖犲䰇籑饊𦅙慙䰄麖慽"
            	],
            	[
            		"a073",
            		"坟慯抦戹拎㩜懢厪𣏵捤栂㗒"
            	],
            	[
            		"a0a1",
            		"嵗𨯂迚𨸹"
            	],
            	[
            		"a0a6",
            		"僙𡵆礆匲阸𠼻䁥"
            	],
            	[
            		"a0ae",
            		"矾"
            	],
            	[
            		"a0b0",
            		"糂𥼚糚稭聦聣絍甅瓲覔舚朌聢𧒆聛瓰脃眤覉𦟌畓𦻑螩蟎臈螌詉貭譃眫瓸蓚㘵榲趦"
            	],
            	[
            		"a0d4",
            		"覩瑨涹蟁𤀑瓧㷛煶悤憜㳑煢恷"
            	],
            	[
            		"a0e2",
            		"罱𨬭牐惩䭾删㰘𣳇𥻗𧙖𥔱𡥄𡋾𩤃𦷜𧂭峁𦆭𨨏𣙷𠃮𦡆𤼎䕢嬟𦍌齐麦𦉫"
            	],
            	[
            		"a3c0",
            		"␀",
            		31,
            		"␡"
            	],
            	[
            		"c6a1",
            		"①",
            		9,
            		"⑴",
            		9,
            		"ⅰ",
            		9,
            		"丶丿亅亠冂冖冫勹匸卩厶夊宀巛⼳广廴彐彡攴无疒癶辵隶¨ˆヽヾゝゞ〃仝々〆〇ー［］✽ぁ",
            		23
            	],
            	[
            		"c740",
            		"す",
            		58,
            		"ァアィイ"
            	],
            	[
            		"c7a1",
            		"ゥ",
            		81,
            		"А",
            		5,
            		"ЁЖ",
            		4
            	],
            	[
            		"c840",
            		"Л",
            		26,
            		"ёж",
            		25,
            		"⇧↸↹㇏𠃌乚𠂊刂䒑"
            	],
            	[
            		"c8a1",
            		"龰冈龱𧘇"
            	],
            	[
            		"c8cd",
            		"￢￤＇＂㈱№℡゛゜⺀⺄⺆⺇⺈⺊⺌⺍⺕⺜⺝⺥⺧⺪⺬⺮⺶⺼⺾⻆⻊⻌⻍⻏⻖⻗⻞⻣"
            	],
            	[
            		"c8f5",
            		"ʃɐɛɔɵœøŋʊɪ"
            	],
            	[
            		"f9fe",
            		"￭"
            	],
            	[
            		"fa40",
            		"𠕇鋛𠗟𣿅蕌䊵珯况㙉𤥂𨧤鍄𡧛苮𣳈砼杄拟𤤳𨦪𠊠𦮳𡌅侫𢓭倈𦴩𧪄𣘀𤪱𢔓倩𠍾徤𠎀𠍇滛𠐟偽儁㑺儎顬㝃萖𤦤𠒇兠𣎴兪𠯿𢃼𠋥𢔰𠖎𣈳𡦃宂蝽𠖳𣲙冲冸"
            	],
            	[
            		"faa1",
            		"鴴凉减凑㳜凓𤪦决凢卂凭菍椾𣜭彻刋刦刼劵剗劔効勅簕蕂勠蘍𦬓包𨫞啉滙𣾀𠥔𣿬匳卄𠯢泋𡜦栛珕恊㺪㣌𡛨燝䒢卭却𨚫卾卿𡖖𡘓矦厓𨪛厠厫厮玧𥝲㽙玜叁叅汉义埾叙㪫𠮏叠𣿫𢶣叶𠱷吓灹唫晗浛呭𦭓𠵴啝咏咤䞦𡜍𠻝㶴𠵍"
            	],
            	[
            		"fb40",
            		"𨦼𢚘啇䳭启琗喆喩嘅𡣗𤀺䕒𤐵暳𡂴嘷曍𣊊暤暭噍噏磱囱鞇叾圀囯园𨭦㘣𡉏坆𤆥汮炋坂㚱𦱾埦𡐖堃𡑔𤍣堦𤯵塜墪㕡壠壜𡈼壻寿坃𪅐𤉸鏓㖡够梦㛃湙"
            	],
            	[
            		"fba1",
            		"𡘾娤啓𡚒蔅姉𠵎𦲁𦴪𡟜姙𡟻𡞲𦶦浱𡠨𡛕姹𦹅媫婣㛦𤦩婷㜈媖瑥嫓𦾡𢕔㶅𡤑㜲𡚸広勐孶斈孼𧨎䀄䡝𠈄寕慠𡨴𥧌𠖥寳宝䴐尅𡭄尓珎尔𡲥𦬨屉䣝岅峩峯嶋𡷹𡸷崐崘嵆𡺤岺巗苼㠭𤤁𢁉𢅳芇㠶㯂帮檊幵幺𤒼𠳓厦亷廐厨𡝱帉廴𨒂"
            	],
            	[
            		"fc40",
            		"廹廻㢠廼栾鐛弍𠇁弢㫞䢮𡌺强𦢈𢏐彘𢑱彣鞽𦹮彲鍀𨨶徧嶶㵟𥉐𡽪𧃸𢙨釖𠊞𨨩怱暅𡡷㥣㷇㘹垐𢞴祱㹀悞悤悳𤦂𤦏𧩓璤僡媠慤萤慂慈𦻒憁凴𠙖憇宪𣾷"
            	],
            	[
            		"fca1",
            		"𢡟懓𨮝𩥝懐㤲𢦀𢣁怣慜攞掋𠄘担𡝰拕𢸍捬𤧟㨗搸揸𡎎𡟼撐澊𢸶頔𤂌𥜝擡擥鑻㩦携㩗敍漖𤨨𤨣斅敭敟𣁾斵𤥀䬷旑䃘𡠩无旣忟𣐀昘𣇷𣇸晄𣆤𣆥晋𠹵晧𥇦晳晴𡸽𣈱𨗴𣇈𥌓矅𢣷馤朂𤎜𤨡㬫槺𣟂杞杧杢𤇍𩃭柗䓩栢湐鈼栁𣏦𦶠桝"
            	],
            	[
            		"fd40",
            		"𣑯槡樋𨫟楳棃𣗍椁椀㴲㨁𣘼㮀枬楡𨩊䋼椶榘㮡𠏉荣傐槹𣙙𢄪橅𣜃檝㯳枱櫈𩆜㰍欝𠤣惞欵歴𢟍溵𣫛𠎵𡥘㝀吡𣭚毡𣻼毜氷𢒋𤣱𦭑汚舦汹𣶼䓅𣶽𤆤𤤌𤤀"
            	],
            	[
            		"fda1",
            		"𣳉㛥㳫𠴲鮃𣇹𢒑羏样𦴥𦶡𦷫涖浜湼漄𤥿𤂅𦹲蔳𦽴凇沜渝萮𨬡港𣸯瑓𣾂秌湏媑𣁋濸㜍澝𣸰滺𡒗𤀽䕕鏰潄潜㵎潴𩅰㴻澟𤅄濓𤂑𤅕𤀹𣿰𣾴𤄿凟𤅖𤅗𤅀𦇝灋灾炧炁烌烕烖烟䄄㷨熴熖𤉷焫煅媈煊煮岜𤍥煏鍢𤋁焬𤑚𤨧𤨢熺𨯨炽爎"
            	],
            	[
            		"fe40",
            		"鑂爕夑鑃爤鍁𥘅爮牀𤥴梽牕牗㹕𣁄栍漽犂猪猫𤠣𨠫䣭𨠄猨献珏玪𠰺𦨮珉瑉𤇢𡛧𤨤昣㛅𤦷𤦍𤧻珷琕椃𤨦琹𠗃㻗瑜𢢭瑠𨺲瑇珤瑶莹瑬㜰瑴鏱樬璂䥓𤪌"
            	],
            	[
            		"fea1",
            		"𤅟𤩹𨮏孆𨰃𡢞瓈𡦈甎瓩甞𨻙𡩋寗𨺬鎅畍畊畧畮𤾂㼄𤴓疎瑝疞疴瘂瘬癑癏癯癶𦏵皐臯㟸𦤑𦤎皡皥皷盌𦾟葢𥂝𥅽𡸜眞眦着撯𥈠睘𣊬瞯𨥤𨥨𡛁矴砉𡍶𤨒棊碯磇磓隥礮𥗠磗礴碱𧘌辸袄𨬫𦂃𢘜禆褀椂禀𥡗禝𧬹礼禩渪𧄦㺨秆𩄍秔"
            	]
            ];

            // Description of supported double byte encodings and aliases.
            // Tables are not require()-d until they are needed to speed up library load.
            // require()-s are direct to support Browserify.

            var dbcsData = {
                
                // == Japanese/ShiftJIS ====================================================
                // All japanese encodings are based on JIS X set of standards:
                // JIS X 0201 - Single-byte encoding of ASCII + ¥ + Kana chars at 0xA1-0xDF.
                // JIS X 0208 - Main set of 6879 characters, placed in 94x94 plane, to be encoded by 2 bytes. 
                //              Has several variations in 1978, 1983, 1990 and 1997.
                // JIS X 0212 - Supplementary plane of 6067 chars in 94x94 plane. 1990. Effectively dead.
                // JIS X 0213 - Extension and modern replacement of 0208 and 0212. Total chars: 11233.
                //              2 planes, first is superset of 0208, second - revised 0212.
                //              Introduced in 2000, revised 2004. Some characters are in Unicode Plane 2 (0x2xxxx)

                // Byte encodings are:
                //  * Shift_JIS: Compatible with 0201, uses not defined chars in top half as lead bytes for double-byte
                //               encoding of 0208. Lead byte ranges: 0x81-0x9F, 0xE0-0xEF; Trail byte ranges: 0x40-0x7E, 0x80-0x9E, 0x9F-0xFC.
                //               Windows CP932 is a superset of Shift_JIS. Some companies added more chars, notably KDDI.
                //  * EUC-JP:    Up to 3 bytes per character. Used mostly on *nixes.
                //               0x00-0x7F       - lower part of 0201
                //               0x8E, 0xA1-0xDF - upper part of 0201
                //               (0xA1-0xFE)x2   - 0208 plane (94x94).
                //               0x8F, (0xA1-0xFE)x2 - 0212 plane (94x94).
                //  * JIS X 208: 7-bit, direct encoding of 0208. Byte ranges: 0x21-0x7E (94 values). Uncommon.
                //               Used as-is in ISO2022 family.
                //  * ISO2022-JP: Stateful encoding, with escape sequences to switch between ASCII, 
                //                0201-1976 Roman, 0208-1978, 0208-1983.
                //  * ISO2022-JP-1: Adds esc seq for 0212-1990.
                //  * ISO2022-JP-2: Adds esc seq for GB2313-1980, KSX1001-1992, ISO8859-1, ISO8859-7.
                //  * ISO2022-JP-3: Adds esc seq for 0201-1976 Kana set, 0213-2000 Planes 1, 2.
                //  * ISO2022-JP-2004: Adds 0213-2004 Plane 1.
                //
                // After JIS X 0213 appeared, Shift_JIS-2004, EUC-JISX0213 and ISO2022-JP-2004 followed, with just changing the planes.
                //
                // Overall, it seems that it's a mess :( http://www8.plala.or.jp/tkubota1/unicode-symbols-map2.html

                'shiftjis': {
                    type: '_dbcs',
                    table: function() { return require$$0 },
                    encodeAdd: {'\u00a5': 0x5C, '\u203E': 0x7E},
                    encodeSkipVals: [{from: 0xED40, to: 0xF940}],
                },
                'csshiftjis': 'shiftjis',
                'mskanji': 'shiftjis',
                'sjis': 'shiftjis',
                'windows31j': 'shiftjis',
                'ms31j': 'shiftjis',
                'xsjis': 'shiftjis',
                'windows932': 'shiftjis',
                'ms932': 'shiftjis',
                '932': 'shiftjis',
                'cp932': 'shiftjis',

                'eucjp': {
                    type: '_dbcs',
                    table: function() { return require$$1 },
                    encodeAdd: {'\u00a5': 0x5C, '\u203E': 0x7E},
                },

                // TODO: KDDI extension to Shift_JIS
                // TODO: IBM CCSID 942 = CP932, but F0-F9 custom chars and other char changes.
                // TODO: IBM CCSID 943 = Shift_JIS = CP932 with original Shift_JIS lower 128 chars.


                // == Chinese/GBK ==========================================================
                // http://en.wikipedia.org/wiki/GBK
                // We mostly implement W3C recommendation: https://www.w3.org/TR/encoding/#gbk-encoder

                // Oldest GB2312 (1981, ~7600 chars) is a subset of CP936
                'gb2312': 'cp936',
                'gb231280': 'cp936',
                'gb23121980': 'cp936',
                'csgb2312': 'cp936',
                'csiso58gb231280': 'cp936',
                'euccn': 'cp936',

                // Microsoft's CP936 is a subset and approximation of GBK.
                'windows936': 'cp936',
                'ms936': 'cp936',
                '936': 'cp936',
                'cp936': {
                    type: '_dbcs',
                    table: function() { return require$$2 },
                },

                // GBK (~22000 chars) is an extension of CP936 that added user-mapped chars and some other.
                'gbk': {
                    type: '_dbcs',
                    table: function() { return require$$2.concat(require$$3$1) },
                },
                'xgbk': 'gbk',
                'isoir58': 'gbk',

                // GB18030 is an algorithmic extension of GBK.
                // Main source: https://www.w3.org/TR/encoding/#gbk-encoder
                // http://icu-project.org/docs/papers/gb18030.html
                // http://source.icu-project.org/repos/icu/data/trunk/charset/data/xml/gb-18030-2000.xml
                // http://www.khngai.com/chinese/charmap/tblgbk.php?page=0
                'gb18030': {
                    type: '_dbcs',
                    table: function() { return require$$2.concat(require$$3$1) },
                    gb18030: function() { return require$$4 },
                    encodeSkipVals: [0x80],
                    encodeAdd: {'€': 0xA2E3},
                },

                'chinese': 'gb18030',


                // == Korean ===============================================================
                // EUC-KR, KS_C_5601 and KS X 1001 are exactly the same.
                'windows949': 'cp949',
                'ms949': 'cp949',
                '949': 'cp949',
                'cp949': {
                    type: '_dbcs',
                    table: function() { return require$$5 },
                },

                'cseuckr': 'cp949',
                'csksc56011987': 'cp949',
                'euckr': 'cp949',
                'isoir149': 'cp949',
                'korean': 'cp949',
                'ksc56011987': 'cp949',
                'ksc56011989': 'cp949',
                'ksc5601': 'cp949',


                // == Big5/Taiwan/Hong Kong ================================================
                // There are lots of tables for Big5 and cp950. Please see the following links for history:
                // http://moztw.org/docs/big5/  http://www.haible.de/bruno/charsets/conversion-tables/Big5.html
                // Variations, in roughly number of defined chars:
                //  * Windows CP 950: Microsoft variant of Big5. Canonical: http://www.unicode.org/Public/MAPPINGS/VENDORS/MICSFT/WINDOWS/CP950.TXT
                //  * Windows CP 951: Microsoft variant of Big5-HKSCS-2001. Seems to be never public. http://me.abelcheung.org/articles/research/what-is-cp951/
                //  * Big5-2003 (Taiwan standard) almost superset of cp950.
                //  * Unicode-at-on (UAO) / Mozilla 1.8. Falling out of use on the Web. Not supported by other browsers.
                //  * Big5-HKSCS (-2001, -2004, -2008). Hong Kong standard. 
                //    many unicode code points moved from PUA to Supplementary plane (U+2XXXX) over the years.
                //    Plus, it has 4 combining sequences.
                //    Seems that Mozilla refused to support it for 10 yrs. https://bugzilla.mozilla.org/show_bug.cgi?id=162431 https://bugzilla.mozilla.org/show_bug.cgi?id=310299
                //    because big5-hkscs is the only encoding to include astral characters in non-algorithmic way.
                //    Implementations are not consistent within browsers; sometimes labeled as just big5.
                //    MS Internet Explorer switches from big5 to big5-hkscs when a patch applied.
                //    Great discussion & recap of what's going on https://bugzilla.mozilla.org/show_bug.cgi?id=912470#c31
                //    In the encoder, it might make sense to support encoding old PUA mappings to Big5 bytes seq-s.
                //    Official spec: http://www.ogcio.gov.hk/en/business/tech_promotion/ccli/terms/doc/2003cmp_2008.txt
                //                   http://www.ogcio.gov.hk/tc/business/tech_promotion/ccli/terms/doc/hkscs-2008-big5-iso.txt
                // 
                // Current understanding of how to deal with Big5(-HKSCS) is in the Encoding Standard, http://encoding.spec.whatwg.org/#big5-encoder
                // Unicode mapping (http://www.unicode.org/Public/MAPPINGS/OBSOLETE/EASTASIA/OTHER/BIG5.TXT) is said to be wrong.

                'windows950': 'cp950',
                'ms950': 'cp950',
                '950': 'cp950',
                'cp950': {
                    type: '_dbcs',
                    table: function() { return require$$6 },
                },

                // Big5 has many variations and is an extension of cp950. We use Encoding Standard's as a consensus.
                'big5': 'big5hkscs',
                'big5hkscs': {
                    type: '_dbcs',
                    table: function() { return require$$6.concat(require$$7) },
                    encodeSkipVals: [0xa2cc],
                },

                'cnbig5': 'big5hkscs',
                'csbig5': 'big5hkscs',
                'xxbig5': 'big5hkscs',
            };

            var encodings = createCommonjsModule(function (module, exports) {

            // Update this array if you add/rename/remove files in this directory.
            // We support Browserify by skipping automatic module discovery and requiring modules directly.
            var modules = [
                internal,
                utf32,
                utf16,
                utf7,
                sbcsCodec,
                sbcsData,
                sbcsDataGenerated,
                dbcsCodec,
                dbcsData,
            ];

            // Put all encoding/alias/codec definitions to single object and export it.
            for (var i = 0; i < modules.length; i++) {
                var module = modules[i];
                for (var enc in module)
                    if (Object.prototype.hasOwnProperty.call(module, enc))
                        exports[enc] = module[enc];
            }
            });

            var Buffer = safer_1.Buffer;

            // NOTE: Due to 'stream' module being pretty large (~100Kb, significant in browser environments), 
            // we opt to dependency-inject it instead of creating a hard dependency.
            var streams = function(stream_module) {
                var Transform = stream_module.Transform;

                // == Encoder stream =======================================================

                function IconvLiteEncoderStream(conv, options) {
                    this.conv = conv;
                    options = options || {};
                    options.decodeStrings = false; // We accept only strings, so we don't need to decode them.
                    Transform.call(this, options);
                }

                IconvLiteEncoderStream.prototype = Object.create(Transform.prototype, {
                    constructor: { value: IconvLiteEncoderStream }
                });

                IconvLiteEncoderStream.prototype._transform = function(chunk, encoding, done) {
                    if (typeof chunk != 'string')
                        return done(new Error("Iconv encoding stream needs strings as its input."));
                    try {
                        var res = this.conv.write(chunk);
                        if (res && res.length) this.push(res);
                        done();
                    }
                    catch (e) {
                        done(e);
                    }
                };

                IconvLiteEncoderStream.prototype._flush = function(done) {
                    try {
                        var res = this.conv.end();
                        if (res && res.length) this.push(res);
                        done();
                    }
                    catch (e) {
                        done(e);
                    }
                };

                IconvLiteEncoderStream.prototype.collect = function(cb) {
                    var chunks = [];
                    this.on('error', cb);
                    this.on('data', function(chunk) { chunks.push(chunk); });
                    this.on('end', function() {
                        cb(null, Buffer.concat(chunks));
                    });
                    return this;
                };


                // == Decoder stream =======================================================

                function IconvLiteDecoderStream(conv, options) {
                    this.conv = conv;
                    options = options || {};
                    options.encoding = this.encoding = 'utf8'; // We output strings.
                    Transform.call(this, options);
                }

                IconvLiteDecoderStream.prototype = Object.create(Transform.prototype, {
                    constructor: { value: IconvLiteDecoderStream }
                });

                IconvLiteDecoderStream.prototype._transform = function(chunk, encoding, done) {
                    if (!Buffer.isBuffer(chunk) && !(chunk instanceof Uint8Array))
                        return done(new Error("Iconv decoding stream needs buffers as its input."));
                    try {
                        var res = this.conv.write(chunk);
                        if (res && res.length) this.push(res, this.encoding);
                        done();
                    }
                    catch (e) {
                        done(e);
                    }
                };

                IconvLiteDecoderStream.prototype._flush = function(done) {
                    try {
                        var res = this.conv.end();
                        if (res && res.length) this.push(res, this.encoding);                
                        done();
                    }
                    catch (e) {
                        done(e);
                    }
                };

                IconvLiteDecoderStream.prototype.collect = function(cb) {
                    var res = '';
                    this.on('error', cb);
                    this.on('data', function(chunk) { res += chunk; });
                    this.on('end', function() {
                        cb(null, res);
                    });
                    return this;
                };

                return {
                    IconvLiteEncoderStream: IconvLiteEncoderStream,
                    IconvLiteDecoderStream: IconvLiteDecoderStream,
                };
            };

            var _nodeResolve_empty = {};

            var _nodeResolve_empty$1 = /*#__PURE__*/Object.freeze({
                        __proto__: null,
                        'default': _nodeResolve_empty
            });

            var require$$3 = /*@__PURE__*/getAugmentedNamespace(_nodeResolve_empty$1);

            createCommonjsModule(function (module) {

            var Buffer = safer_1.Buffer;

            var iconv = module.exports;

            // All codecs and aliases are kept here, keyed by encoding name/alias.
            // They are lazy loaded in `iconv.getCodec` from `encodings/index.js`.
            iconv.encodings = null;

            // Characters emitted in case of error.
            iconv.defaultCharUnicode = '�';
            iconv.defaultCharSingleByte = '?';

            // Public API.
            iconv.encode = function encode(str, encoding, options) {
                str = "" + (str || ""); // Ensure string.

                var encoder = iconv.getEncoder(encoding, options);

                var res = encoder.write(str);
                var trail = encoder.end();
                
                return (trail && trail.length > 0) ? Buffer.concat([res, trail]) : res;
            };

            iconv.decode = function decode(buf, encoding, options) {
                if (typeof buf === 'string') {
                    if (!iconv.skipDecodeWarning) {
                        console.error('Iconv-lite warning: decode()-ing strings is deprecated. Refer to https://github.com/ashtuchkin/iconv-lite/wiki/Use-Buffers-when-decoding');
                        iconv.skipDecodeWarning = true;
                    }

                    buf = Buffer.from("" + (buf || ""), "binary"); // Ensure buffer.
                }

                var decoder = iconv.getDecoder(encoding, options);

                var res = decoder.write(buf);
                var trail = decoder.end();

                return trail ? (res + trail) : res;
            };

            iconv.encodingExists = function encodingExists(enc) {
                try {
                    iconv.getCodec(enc);
                    return true;
                } catch (e) {
                    return false;
                }
            };

            // Legacy aliases to convert functions
            iconv.toEncoding = iconv.encode;
            iconv.fromEncoding = iconv.decode;

            // Search for a codec in iconv.encodings. Cache codec data in iconv._codecDataCache.
            iconv._codecDataCache = {};
            iconv.getCodec = function getCodec(encoding) {
                if (!iconv.encodings)
                    iconv.encodings = encodings; // Lazy load all encoding definitions.
                
                // Canonicalize encoding name: strip all non-alphanumeric chars and appended year.
                var enc = iconv._canonicalizeEncoding(encoding);

                // Traverse iconv.encodings to find actual codec.
                var codecOptions = {};
                while (true) {
                    var codec = iconv._codecDataCache[enc];
                    if (codec)
                        return codec;

                    var codecDef = iconv.encodings[enc];

                    switch (typeof codecDef) {
                        case "string": // Direct alias to other encoding.
                            enc = codecDef;
                            break;

                        case "object": // Alias with options. Can be layered.
                            for (var key in codecDef)
                                codecOptions[key] = codecDef[key];

                            if (!codecOptions.encodingName)
                                codecOptions.encodingName = enc;
                            
                            enc = codecDef.type;
                            break;

                        case "function": // Codec itself.
                            if (!codecOptions.encodingName)
                                codecOptions.encodingName = enc;

                            // The codec function must load all tables and return object with .encoder and .decoder methods.
                            // It'll be called only once (for each different options object).
                            codec = new codecDef(codecOptions, iconv);

                            iconv._codecDataCache[codecOptions.encodingName] = codec; // Save it to be reused later.
                            return codec;

                        default:
                            throw new Error("Encoding not recognized: '" + encoding + "' (searched as: '"+enc+"')");
                    }
                }
            };

            iconv._canonicalizeEncoding = function(encoding) {
                // Canonicalize encoding name: strip all non-alphanumeric chars and appended year.
                return (''+encoding).toLowerCase().replace(/:\d{4}$|[^0-9a-z]/g, "");
            };

            iconv.getEncoder = function getEncoder(encoding, options) {
                var codec = iconv.getCodec(encoding),
                    encoder = new codec.encoder(options, codec);

                if (codec.bomAware && options && options.addBOM)
                    encoder = new bomHandling.PrependBOM(encoder, options);

                return encoder;
            };

            iconv.getDecoder = function getDecoder(encoding, options) {
                var codec = iconv.getCodec(encoding),
                    decoder = new codec.decoder(options, codec);

                if (codec.bomAware && !(options && options.stripBOM === false))
                    decoder = new bomHandling.StripBOM(decoder, options);

                return decoder;
            };

            // Streaming API
            // NOTE: Streaming API naturally depends on 'stream' module from Node.js. Unfortunately in browser environments this module can add
            // up to 100Kb to the output bundle. To avoid unnecessary code bloat, we don't enable Streaming API in browser by default.
            // If you would like to enable it explicitly, please add the following code to your app:
            // > iconv.enableStreamingAPI(require('stream'));
            iconv.enableStreamingAPI = function enableStreamingAPI(stream_module) {
                if (iconv.supportsStreams)
                    return;

                // Dependency-inject stream module to create IconvLite stream classes.
                var streams$1 = streams(stream_module);

                // Not public API yet, but expose the stream classes.
                iconv.IconvLiteEncoderStream = streams$1.IconvLiteEncoderStream;
                iconv.IconvLiteDecoderStream = streams$1.IconvLiteDecoderStream;

                // Streaming API.
                iconv.encodeStream = function encodeStream(encoding, options) {
                    return new iconv.IconvLiteEncoderStream(iconv.getEncoder(encoding, options), options);
                };

                iconv.decodeStream = function decodeStream(encoding, options) {
                    return new iconv.IconvLiteDecoderStream(iconv.getDecoder(encoding, options), options);
                };

                iconv.supportsStreams = true;
            };

            // Enable Streaming API automatically if 'stream' module is available and non-empty (the majority of environments).
            var stream_module;
            try {
                stream_module = require$$3;
            } catch (e) {}

            if (stream_module && stream_module.Transform) {
                iconv.enableStreamingAPI(stream_module);

            } else {
                // In rare cases where 'stream' module is not available by default, throw a helpful exception.
                iconv.encodeStream = iconv.decodeStream = function() {
                    throw new Error("iconv-lite Streaming API is not enabled. Use iconv.enableStreamingAPI(require('stream')); to enable it.");
                };
            }
            });

            function n$1(n){for(var r=arguments.length,t=Array(r>1?r-1:0),e=1;e<r;e++)t[e-1]=arguments[e];{var i=Y[n],o=i?"function"==typeof i?i.apply(null,t):i:"unknown error nr: "+n;throw Error("[Immer] "+o)}}function r$1(n){return !!n&&!!n[Q]}function t$1(n){return !!n&&(function(n){if(!n||"object"!=typeof n)return !1;var r=Object.getPrototypeOf(n);if(null===r)return !0;var t=Object.hasOwnProperty.call(r,"constructor")&&r.constructor;return "function"==typeof t&&Function.toString.call(t)===Z}(n)||Array.isArray(n)||!!n[L]||!!n.constructor[L]||s$1(n)||v(n))}function i$1(n,r,t){void 0===t&&(t=!1),0===o$1(n)?(t?Object.keys:nn)(n).forEach((function(e){t&&"symbol"==typeof e||r(e,n[e],n);})):n.forEach((function(t,e){return r(e,t,n)}));}function o$1(n){var r=n[Q];return r?r.i>3?r.i-4:r.i:Array.isArray(n)?1:s$1(n)?2:v(n)?3:0}function u$1(n,r){return 2===o$1(n)?n.has(r):Object.prototype.hasOwnProperty.call(n,r)}function a$2(n,r){return 2===o$1(n)?n.get(r):n[r]}function f$2(n,r,t){var e=o$1(n);2===e?n.set(r,t):3===e?(n.delete(r),n.add(t)):n[r]=t;}function c$1(n,r){return n===r?0!==n||1/n==1/r:n!=n&&r!=r}function s$1(n){return X&&n instanceof Map}function v(n){return q&&n instanceof Set}function p$1(n){return n.o||n.t}function l$2(n){if(Array.isArray(n))return Array.prototype.slice.call(n);var r=rn(n);delete r[Q];for(var t=nn(r),e=0;e<t.length;e++){var i=t[e],o=r[i];!1===o.writable&&(o.writable=!0,o.configurable=!0),(o.get||o.set)&&(r[i]={configurable:!0,writable:!0,enumerable:o.enumerable,value:n[i]});}return Object.create(Object.getPrototypeOf(n),r)}function d(n,e){return void 0===e&&(e=!1),y$1(n)||r$1(n)||!t$1(n)?n:(o$1(n)>1&&(n.set=n.add=n.clear=n.delete=h),Object.freeze(n),e&&i$1(n,(function(n,r){return d(r,!0)}),!0),n)}function h(){n$1(2);}function y$1(n){return null==n||"object"!=typeof n||Object.isFrozen(n)}function b$1(r){var t=tn[r];return t||n$1(18,r),t}function _(){return U$1||n$1(0),U$1}function j$2(n,r){r&&(b$1("Patches"),n.u=[],n.s=[],n.v=r);}function g$1(n){O$1(n),n.p.forEach(S$1),n.p=null;}function O$1(n){n===U$1&&(U$1=n.l);}function w$1(n){return U$1={p:[],l:U$1,h:n,m:!0,_:0}}function S$1(n){var r=n[Q];0===r.i||1===r.i?r.j():r.g=!0;}function P(r,e){e._=e.p.length;var i=e.p[0],o=void 0!==r&&r!==i;return e.h.O||b$1("ES5").S(e,r,o),o?(i[Q].P&&(g$1(e),n$1(4)),t$1(r)&&(r=M$1(e,r),e.l||x$1(e,r)),e.u&&b$1("Patches").M(i[Q],r,e.u,e.s)):r=M$1(e,i,[]),g$1(e),e.u&&e.v(e.u,e.s),r!==H?r:void 0}function M$1(n,r,t){if(y$1(r))return r;var e=r[Q];if(!e)return i$1(r,(function(i,o){return A(n,e,r,i,o,t)}),!0),r;if(e.A!==n)return r;if(!e.P)return x$1(n,e.t,!0),e.t;if(!e.I){e.I=!0,e.A._--;var o=4===e.i||5===e.i?e.o=l$2(e.k):e.o;i$1(3===e.i?new Set(o):o,(function(r,i){return A(n,e,o,r,i,t)})),x$1(n,o,!1),t&&n.u&&b$1("Patches").R(e,t,n.u,n.s);}return e.o}function A(e,i,o,a,c,s){if(c===o&&n$1(5),r$1(c)){var v=M$1(e,c,s&&i&&3!==i.i&&!u$1(i.D,a)?s.concat(a):void 0);if(f$2(o,a,v),!r$1(v))return;e.m=!1;}if(t$1(c)&&!y$1(c)){if(!e.h.F&&e._<1)return;M$1(e,c),i&&i.A.l||x$1(e,c);}}function x$1(n,r,t){void 0===t&&(t=!1),n.h.F&&n.m&&d(r,t);}function z(n,r){var t=n[Q];return (t?p$1(t):n)[r]}function I(n,r){if(r in n)for(var t=Object.getPrototypeOf(n);t;){var e=Object.getOwnPropertyDescriptor(t,r);if(e)return e;t=Object.getPrototypeOf(t);}}function k$1(n){n.P||(n.P=!0,n.l&&k$1(n.l));}function E$2(n){n.o||(n.o=l$2(n.t));}function R(n,r,t){var e=s$1(r)?b$1("MapSet").N(r,t):v(r)?b$1("MapSet").T(r,t):n.O?function(n,r){var t=Array.isArray(n),e={i:t?1:0,A:r?r.A:_(),P:!1,I:!1,D:{},l:r,t:n,k:null,o:null,j:null,C:!1},i=e,o=en;t&&(i=[e],o=on);var u=Proxy.revocable(i,o),a=u.revoke,f=u.proxy;return e.k=f,e.j=a,f}(r,t):b$1("ES5").J(r,t);return (t?t.A:_()).p.push(e),e}function D(e){return r$1(e)||n$1(22,e),function n(r){if(!t$1(r))return r;var e,u=r[Q],c=o$1(r);if(u){if(!u.P&&(u.i<4||!b$1("ES5").K(u)))return u.t;u.I=!0,e=F(r,c),u.I=!1;}else e=F(r,c);return i$1(e,(function(r,t){u&&a$2(u.t,r)===t||f$2(e,r,n(t));})),3===c?new Set(e):e}(e)}function F(n,r){switch(r){case 2:return new Map(n);case 3:return Array.from(n)}return l$2(n)}var G,U$1,W$1="undefined"!=typeof Symbol&&"symbol"==typeof Symbol("x"),X="undefined"!=typeof Map,q="undefined"!=typeof Set,B="undefined"!=typeof Proxy&&void 0!==Proxy.revocable&&"undefined"!=typeof Reflect,H=W$1?Symbol.for("immer-nothing"):((G={})["immer-nothing"]=!0,G),L=W$1?Symbol.for("immer-draftable"):"__$immer_draftable",Q=W$1?Symbol.for("immer-state"):"__$immer_state",Y={0:"Illegal state",1:"Immer drafts cannot have computed properties",2:"This object has been frozen and should not be mutated",3:function(n){return "Cannot use a proxy that has been revoked. Did you pass an object from inside an immer function to an async process? "+n},4:"An immer producer returned a new value *and* modified its draft. Either return a new value *or* modify the draft.",5:"Immer forbids circular references",6:"The first or second argument to `produce` must be a function",7:"The third argument to `produce` must be a function or undefined",8:"First argument to `createDraft` must be a plain object, an array, or an immerable object",9:"First argument to `finishDraft` must be a draft returned by `createDraft`",10:"The given draft is already finalized",11:"Object.defineProperty() cannot be used on an Immer draft",12:"Object.setPrototypeOf() cannot be used on an Immer draft",13:"Immer only supports deleting array indices",14:"Immer only supports setting array indices and the 'length' property",15:function(n){return "Cannot apply patch, path doesn't resolve: "+n},16:'Sets cannot have "replace" patches.',17:function(n){return "Unsupported patch operation: "+n},18:function(n){return "The plugin for '"+n+"' has not been loaded into Immer. To enable the plugin, import and call `enable"+n+"()` when initializing your application."},20:"Cannot use proxies if Proxy, Proxy.revocable or Reflect are not available",21:function(n){return "produce can only be called on things that are draftable: plain objects, arrays, Map, Set or classes that are marked with '[immerable]: true'. Got '"+n+"'"},22:function(n){return "'current' expects a draft, got: "+n},23:function(n){return "'original' expects a draft, got: "+n},24:"Patching reserved attributes like __proto__, prototype and constructor is not allowed"},Z=""+Object.prototype.constructor,nn="undefined"!=typeof Reflect&&Reflect.ownKeys?Reflect.ownKeys:void 0!==Object.getOwnPropertySymbols?function(n){return Object.getOwnPropertyNames(n).concat(Object.getOwnPropertySymbols(n))}:Object.getOwnPropertyNames,rn=Object.getOwnPropertyDescriptors||function(n){var r={};return nn(n).forEach((function(t){r[t]=Object.getOwnPropertyDescriptor(n,t);})),r},tn={},en={get:function(n,r){if(r===Q)return n;var e=p$1(n);if(!u$1(e,r))return function(n,r,t){var e,i=I(r,t);return i?"value"in i?i.value:null===(e=i.get)||void 0===e?void 0:e.call(n.k):void 0}(n,e,r);var i=e[r];return n.I||!t$1(i)?i:i===z(n.t,r)?(E$2(n),n.o[r]=R(n.A.h,i,n)):i},has:function(n,r){return r in p$1(n)},ownKeys:function(n){return Reflect.ownKeys(p$1(n))},set:function(n,r,t){var e=I(p$1(n),r);if(null==e?void 0:e.set)return e.set.call(n.k,t),!0;if(!n.P){var i=z(p$1(n),r),o=null==i?void 0:i[Q];if(o&&o.t===t)return n.o[r]=t,n.D[r]=!1,!0;if(c$1(t,i)&&(void 0!==t||u$1(n.t,r)))return !0;E$2(n),k$1(n);}return n.o[r]===t&&"number"!=typeof t||(n.o[r]=t,n.D[r]=!0,!0)},deleteProperty:function(n,r){return void 0!==z(n.t,r)||r in n.t?(n.D[r]=!1,E$2(n),k$1(n)):delete n.D[r],n.o&&delete n.o[r],!0},getOwnPropertyDescriptor:function(n,r){var t=p$1(n),e=Reflect.getOwnPropertyDescriptor(t,r);return e?{writable:!0,configurable:1!==n.i||"length"!==r,enumerable:e.enumerable,value:t[r]}:e},defineProperty:function(){n$1(11);},getPrototypeOf:function(n){return Object.getPrototypeOf(n.t)},setPrototypeOf:function(){n$1(12);}},on={};i$1(en,(function(n,r){on[n]=function(){return arguments[0]=arguments[0][0],r.apply(this,arguments)};})),on.deleteProperty=function(r,t){return isNaN(parseInt(t))&&n$1(13),en.deleteProperty.call(this,r[0],t)},on.set=function(r,t,e){return "length"!==t&&isNaN(parseInt(t))&&n$1(14),en.set.call(this,r[0],t,e,r[0])};var un=function(){function e(r){var e=this;this.O=B,this.F=!0,this.produce=function(r,i,o){if("function"==typeof r&&"function"!=typeof i){var u=i;i=r;var a=e;return function(n){var r=this;void 0===n&&(n=u);for(var t=arguments.length,e=Array(t>1?t-1:0),o=1;o<t;o++)e[o-1]=arguments[o];return a.produce(n,(function(n){var t;return (t=i).call.apply(t,[r,n].concat(e))}))}}var f;if("function"!=typeof i&&n$1(6),void 0!==o&&"function"!=typeof o&&n$1(7),t$1(r)){var c=w$1(e),s=R(e,r,void 0),v=!0;try{f=i(s),v=!1;}finally{v?g$1(c):O$1(c);}return "undefined"!=typeof Promise&&f instanceof Promise?f.then((function(n){return j$2(c,o),P(n,c)}),(function(n){throw g$1(c),n})):(j$2(c,o),P(f,c))}if(!r||"object"!=typeof r){if((f=i(r))===H)return;return void 0===f&&(f=r),e.F&&d(f,!0),f}n$1(21,r);},this.produceWithPatches=function(n,r){return "function"==typeof n?function(r){for(var t=arguments.length,i=Array(t>1?t-1:0),o=1;o<t;o++)i[o-1]=arguments[o];return e.produceWithPatches(r,(function(r){return n.apply(void 0,[r].concat(i))}))}:[e.produce(n,r,(function(n,r){t=n,i=r;})),t,i];var t,i;},"boolean"==typeof(null==r?void 0:r.useProxies)&&this.setUseProxies(r.useProxies),"boolean"==typeof(null==r?void 0:r.autoFreeze)&&this.setAutoFreeze(r.autoFreeze);}var i=e.prototype;return i.createDraft=function(e){t$1(e)||n$1(8),r$1(e)&&(e=D(e));var i=w$1(this),o=R(this,e,void 0);return o[Q].C=!0,O$1(i),o},i.finishDraft=function(r,t){var e=r&&r[Q];(e&&e.C||n$1(9),e.I&&n$1(10));var i=e.A;return j$2(i,t),P(void 0,i)},i.setAutoFreeze=function(n){this.F=n;},i.setUseProxies=function(r){r&&!B&&n$1(20),this.O=r;},i.applyPatches=function(n,t){var e;for(e=t.length-1;e>=0;e--){var i=t[e];if(0===i.path.length&&"replace"===i.op){n=i.value;break}}var o=b$1("Patches").$;return r$1(n)?o(n,t):this.produce(n,(function(n){return o(n,t.slice(e+1))}))},e}(),an=new un,fn=an.produce;an.produceWithPatches.bind(an);an.setAutoFreeze.bind(an);an.setUseProxies.bind(an);an.applyPatches.bind(an);an.createDraft.bind(an);an.finishDraft.bind(an);

            const p=Symbol(),a$1=Symbol(),f$1="undefined"==typeof window||/ServerSideRendering/.test(window.navigator&&window.navigator.userAgent)?react.useEffect:react.useLayoutEffect,l$1=scheduler.unstable_runWithPriority?e=>scheduler.unstable_runWithPriority(scheduler.unstable_NormalPriority,e):e=>e();function w(n){const o=react.createContext({[p]:{v:{current:n},n:{current:-1},l:new Set,u:e=>e()}});var c;return o[a$1]=o.Provider,o.Provider=(c=o.Provider,({value:e,children:n})=>{const o=react.useRef(e),u=react.useRef(0),s=react.useRef();if(!s.current){const e=new Set,r=r=>{reactDom.unstable_batchedUpdates(()=>{u.current+=1,e.forEach(e=>e([u.current])),r();});};s.current={[p]:{v:o,n:u,l:e,u:r}};}return f$1(()=>{o.current=e,u.current+=1,l$1(()=>{s.current[p].l.forEach(r=>{r([u.current,e]);});});},[e]),react.createElement(c,{value:s.current},n)}),delete o.Consumer,o}function E$1(e,r){const t=react.useContext(e)[p];if("object"==typeof process&&"production"!=="development"&&!t)throw new Error("useContextSelector requires special context");const{v:{current:c},n:{current:u},l:s}=t,i=r(c),[d,a]=react.useReducer((e,t)=>{if(!t)return [c,i];if(t[0]<=u)return Object.is(e[1],i)?e:[c,i];try{if(2===t.length){if(Object.is(e[0],t[1]))return e;const n=r(t[1]);return Object.is(e[1],n)?e:[t[1],n]}}catch(e){}return [...e]},[c,i]);return Object.is(d[1],i)||a(),f$1(()=>(s.add(a),()=>{s.delete(a);}),[s]),d[1]}function b(e){const r=react.useContext(e)[p];if("object"==typeof process&&"production"!=="development"&&!r)throw new Error("useContextUpdate requires special context");const{u:t}=r;return t}

            const e=Symbol(),t=Symbol(),r=Symbol(),n=Object.getPrototypeOf,o=new WeakMap,s=e=>e&&(o.has(e)?o.get(e):n(e)===Object.prototype||n(e)===Array.prototype),c=e=>"object"==typeof e&&null!==e,l=(n,o)=>{let s=!1;const c=(e,t)=>{if(!s){let r=e.a.get(n);r||(r=new Set,e.a.set(n,r)),r.add(t);}},l={f:o,get(e,t){return t===r?n:(c(this,t),i(e[t],this.a,this.c))},has(e,r){return r===t?(s=!0,this.a.delete(n),!0):(c(this,r),r in e)},ownKeys(t){return c(this,e),Reflect.ownKeys(t)}};return o&&(l.set=l.deleteProperty=()=>!1),l},i=(e,t,o)=>{if(!s(e))return e;const c=e[r]||e,i=(e=>Object.isFrozen(e)||Object.values(Object.getOwnPropertyDescriptors(e)).some(e=>!e.writable))(c);let u=o&&o.get(c);return u&&u.f===i||(u=l(c,i),u.p=new Proxy(i?(e=>{if(Array.isArray(e))return Array.from(e);const t=Object.getOwnPropertyDescriptors(e);return Object.values(t).forEach(e=>{e.configurable=!0;}),Object.create(n(e),t)})(c):c,u),o&&o.set(c,u)),u.a=t,u.c=o,u.p},u=(e,t)=>{const r=Reflect.ownKeys(e),n=Reflect.ownKeys(t);return r.length!==n.length||r.some((e,t)=>e!==n[t])},a=1,f=2,y=4,g=(t,r,n,o,s=0)=>{if(Object.is(t,r)&&(!c(t)||0==(2&s)))return !1;if(!c(t)||!c(r))return !0;const l=n.get(t);if(!l)return 0==(1&s);if(o&&0==(2&s)){const e=o.get(t);if(e&&e.n===r)return e.g;o.set(t,{n:r,g:!1});}let i=null;for(const c of l){const l=c===e?u(t,r):g(t[c],r[c],n,o,s>>>2<<2|s>>>2);if(!0!==l&&!1!==l||(i=l),i)break}return null===i&&(i=0==(1&s)),o&&0==(2&s)&&o.set(t,{n:r,g:i}),i},j$1=(e,t)=>{const r=[],n=(e,o)=>{const s=t.get(e);s?s.forEach(t=>{n(e[t],o?[...o,t]:[t]);}):o&&r.push(o);};return n(e),r};

            const k="undefined"==typeof window||!window.navigator||/ServerSideRendering|^Deno\//.test(window.navigator.userAgent)?react.useEffect:react.useLayoutEffect,x=a|y,O=f,j=a,E=u=>(a={})=>{const[,s]=react.useReducer(e=>e+1,0),i$1=a.unstable_ignoreIntermediateObjectUsage?x:a.unstable_ignoreStateEquality?O:a.unstable_ignoreUntouchedState?j:0,p=new WeakMap,d=react.useRef(),l=react.useRef(),w=react.useRef();k(()=>{d.current=p,l.current!==w.current&&g(l.current,w.current,p,new WeakMap,i$1)&&(l.current=w.current,s());});const v=react.useCallback(e=>(w.current=e,l.current&&l.current!==e&&d.current&&!g(l.current,e,d.current,new WeakMap,i$1)?l.current:(l.current=e,e)),[i$1]),y=u(v);"object"==typeof process&&"production"!=="development"&&((n,o)=>{const c=react.useRef();react.useEffect(()=>{c.current=j$1(n,o);}),react.useDebugValue(c.current);})(y,p);const b=react.useMemo(()=>new WeakMap,[]);return i(y,p,b)},S=(e,r={})=>react.useMemo(()=>E(r=>E$1(e,r)),[e])(r),M=(e,r)=>{const t=b(e),n=react.useContext(r);return react.useCallback((...e)=>{let r;return t(()=>{r=n(...e);}),r},[t,n])},U=new Proxy({},{get(){throw new Error("Please use <Provider>")},apply(){throw new Error("Please use <Provider>")}}),W=(e,r=!1)=>{const n=w(U),o=react.createContext(U);return {Provider:r=>{const[t,c]=e(r);return react.createElement(o.Provider,{value:c},react.createElement(n.Provider,{value:t},r.children))},useTrackedState:e=>S(n,e),useTracked:e=>((e,r,t)=>{const n=S(e,t),o=M(e,r);return react.useMemo(()=>[n,o],[n,o])})(n,o,e),useUpdate:r?()=>M(n,o):()=>react.useContext(o),useSelector:e=>((e,r)=>{const n=E$1(e,r);return react.useDebugValue(n),n})(n,e)}};

            const initialState$9 = {
                currentFilters: [],
                filterGroups: [],
                filterConfigs: [],
                allItems: [],
                filteredItems: [],
            };
            const useFiltersState = (props) => {
                const items = JSON.parse(JSON.stringify(props.items));
                const [state, setState] = react.useState(filterBuilder.parseProps({
                    ...props,
                    items,
                }, initialState$9));
                react.useEffect(() => {
                    if (props) {
                        const items = JSON.parse(JSON.stringify(props.items));
                        setState(filterBuilder.parseProps({
                            ...props,
                            items,
                        }, initialState$9));
                    }
                }, [props]);
                return [state, setState];
            };
            const { Provider: Provider$6, useTrackedState: useTrackedState$6, useUpdate: useUpdate$6, useSelector, } = W(useFiltersState);
            const useSetDraft$6 = () => {
                const setState = useUpdate$6();
                return react.useCallback((draftUpdater) => {
                    setState(fn(draftUpdater));
                }, [setState]);
            };
            var filters = {
                Provider: Provider$6,
                useTrackedState: useTrackedState$6,
                useSetDraft: useSetDraft$6,
                useSelector,
            };

            const defaultFilters$1 = [
                'status',
                'createdBy',
                'labels',
            ];
            const defaultReviewsRequired = 2;
            const defaultSettings$1 = {
                reviewsRequired: defaultReviewsRequired,
                filters: defaultFilters$1,
            };

            const defaultPullRequestConfig = {
                mostChecks: 0,
                mostReviews: 0,
            };
            const initialState$8 = {
                auth: 'is',
                hasInit: [],
                loginName: undefined,
                pullRequests: [],
                repositories: [],
                prConfig: defaultPullRequestConfig,
                settings: defaultSettings$1,
            };
            const useGithubState = (props) => react.useState(props.initialState || initialState$8);
            const { Provider: Provider$5, useTrackedState: useTrackedState$5, useUpdate: useUpdate$5, } = W(useGithubState);
            const useSetDraft$5 = () => {
                const setState = useUpdate$5();
                const setDraft = react.useCallback((draftUpdater) => {
                    setState(fn(draftUpdater));
                }, [setState]);
                return setDraft;
            };
            var github = {
                Provider: Provider$5,
                useTrackedState: useTrackedState$5,
                useSetDraft: useSetDraft$5,
            };

            const initialState$7 = {
                rememberSelections: false,
                hasInit: [],
                visibleUnits: [],
                reactor: new Reactor(),
            };
            const useGlobalState = () => react.useState(initialState$7);
            const { Provider: Provider$4, useTrackedState: useTrackedState$4, useUpdate: useUpdate$4, } = W(useGlobalState);
            const useSetDraft$4 = () => {
                const setState = useUpdate$4();
                return react.useCallback((draftUpdater) => {
                    setState(fn(draftUpdater));
                }, [setState]);
            };
            var Global$2 = {
                Provider: Provider$4,
                useTrackedState: useTrackedState$4,
                useSetDraft: useSetDraft$4,
            };

            const initialState$6 = {
                hasInit: [],
                feed: [],
            };
            const useHistoryState = (props) => react.useState(props.initialState || initialState$6);
            const { Provider: Provider$3, useTrackedState: useTrackedState$3, useUpdate: useUpdate$3, } = W(useHistoryState);
            const useSetDraft$3 = () => {
                const setState = useUpdate$3();
                const setDraft = react.useCallback((draftUpdater) => {
                    setState(fn(draftUpdater));
                }, [setState]);
                return setDraft;
            };
            var history = {
                Provider: Provider$3,
                useTrackedState: useTrackedState$3,
                useSetDraft: useSetDraft$3,
            };

            const initialState$5 = {
                auth: 'is',
                hasInit: [],
                projects: [],
                monitors: [],
            };
            const useHoneybadgerState = () => react.useState(initialState$5);
            W(useHoneybadgerState);

            const defaultFilters = [
                'assignee',
                'status',
            ];
            const defaultHideStatuses = {
                done: true,
                unprioritized: false,
            };
            const defaultSettings = {
                hideStatuses: defaultHideStatuses,
                filters: defaultFilters,
            };

            const initialState$4 = {
                filters: [],
                allProjects: [],
                auth: 'is',
                issues: [],
                watches: {},
                hasInit: [],
                settings: defaultSettings,
            };
            const useJiraState = () => react.useState(initialState$4);
            const { Provider: Provider$2, useTrackedState: useTrackedState$2, useUpdate: useUpdate$2, } = W(useJiraState);
            const useSetDraft$2 = () => {
                const setState = useUpdate$2();
                const setDraft = react.useCallback((draftUpdater) => {
                    setState(fn(draftUpdater));
                }, [setState]);
                return setDraft;
            };
            var jira = {
                Provider: Provider$2,
                useTrackedState: useTrackedState$2,
                useSetDraft: useSetDraft$2,
            };

            const initialState$3 = {
                custom: [],
                hasInit: [],
                standard: [],
            };
            const useLinksState = () => react.useState(initialState$3);
            const { Provider: Provider$1, useTrackedState: useTrackedState$1, useUpdate: useUpdate$1, } = W(useLinksState);
            const useSetDraft$1 = () => {
                const setState = useUpdate$1();
                const setDraft = react.useCallback((draftUpdater) => {
                    setState(fn(draftUpdater));
                }, [setState]);
                return setDraft;
            };
            var links = {
                Provider: Provider$1,
                useTrackedState: useTrackedState$1,
                useSetDraft: useSetDraft$1,
            };

            const initialState$2 = {
                hiddenUnits: [],
                selection: null,
                selectionRef: null,
            };
            const useModalState = () => react.useState(initialState$2);
            const { Provider, useTrackedState, useUpdate: useSetModalUpdate, } = W(useModalState);
            const useSetDraft = () => {
                const setState = useSetModalUpdate();
                return react.useCallback((draftUpdater) => {
                    setState(fn(draftUpdater));
                }, [setState]);
            };
            var modalContext = {
                Provider,
                useTrackedState,
                useSetDraft,
            };

            const useClearFilters = () => {
                const setDraft = filters.useSetDraft();
                const handle = react.useCallback((groupId) => {
                    setDraft((draft) => {
                        return draft.currentFilters.filter((draftFilter) => draftFilter.groupId !== groupId);
                    });
                }, [setDraft]);
                return {
                    handle,
                };
            };

            const useClickFilter = () => {
                const setDraft = filters.useSetDraft();
                const has = (group, state) => group.some((item) => item.filter.state === state);
                const filterItems = (draft) => {
                    const { currentFilters, allItems } = draft;
                    if (currentFilters.length === 0) {
                        return allItems;
                    }
                    const currentFilterState = currentFilters
                        .map((filter) => ({
                        config: draft.filterConfigs.find((config) => config.id === filter.groupId),
                        filter,
                    }));
                    if (currentFilterState.length === 0 || currentFilterState.every((state) => state.filter.state === 'omit')) {
                        return allItems;
                    }
                    const groups = currentFilterState.reduce((acc, cur) => {
                        const found = acc.findIndex((state) => state.findIndex((item) => item.filter.groupId === cur.filter.groupId) > -1);
                        if (found > -1) {
                            acc[found].push(cur);
                            return acc;
                        }
                        acc.push([cur]);
                        return acc;
                    }, []);
                    return allItems.filter((item, index) => {
                        const predicate = (state, hasIncludes, hasIgnore) => {
                            const match = !!state.config?.run(item, state.filter.filter.full, index);
                            if (match === true) {
                                if (state.filter.state === 'include') {
                                    return true;
                                }
                                if (state.filter.state === 'exclude') {
                                    return false;
                                }
                            }
                            if (state.filter.state === 'include') {
                                return false;
                            }
                            if (state.filter.state === 'exclude') {
                                return true;
                            }
                            if (state.filter.state === 'omit') {
                                if (hasIncludes) {
                                    return false;
                                }
                                if (hasIgnore) {
                                    return true;
                                }
                            }
                            return true;
                        };
                        return groups.every((group) => {
                            const hasIncludes = has(group, 'include');
                            const hasIgnore = has(group, 'exclude');
                            if (hasIncludes) {
                                return group.some((item) => predicate(item, hasIncludes, hasIgnore));
                            }
                            if (hasIgnore) {
                                return group.every((item) => predicate(item, hasIncludes, hasIgnore));
                            }
                            return true;
                        });
                    });
                };
                const nextFromOmit = (lastState) => {
                    switch (lastState) {
                        case 'exclude': return 'include';
                        case 'include': return 'exclude';
                        case 'omit': return 'include';
                        default: return 'include';
                    }
                };
                const next = (lastState, allowable) => {
                    switch (lastState) {
                        case 'exclude': return 'omit';
                        case 'include': return 'omit';
                        case 'omit': return allowable;
                        default: return allowable;
                    }
                };
                const handle = react.useCallback((clickedFilter) => {
                    const { filter: { id: filterId }, groupId, state: clickedFilterState } = clickedFilter;
                    setDraft((draft) => {
                        const { currentFilters, filterGroups } = draft;
                        const currentFilter = currentFilters.find((draftCurrent) => filterId === draftCurrent.filter.id && groupId === draftCurrent.groupId);
                        if (!currentFilter) {
                            return;
                        }
                        const group = filterGroups.find((filterGroup) => filterGroup.id === groupId) || {};
                        const currentFiltersInGroup = currentFilters
                            .filter((draftCurrent) => groupId === draftCurrent.groupId);
                        const allButClicked = currentFiltersInGroup
                            .filter((draftCurrent) => filterId !== draftCurrent.filter.id);
                        if (currentFiltersInGroup.every((filter) => filter.state === 'omit')) {
                            const state = nextFromOmit(group.lastState);
                            currentFilter.state = state;
                            group.lastState = state;
                            return draft;
                        }
                        const has = (filters, state) => filters.some((filter) => filter.state === state);
                        const hasIncludes = has(allButClicked, 'include');
                        if (hasIncludes || group.lastState === 'omit') {
                            if (currentFilter.state === 'include') {
                                currentFilter.state = 'omit';
                                return draft;
                            }
                            const state = next(clickedFilterState, 'include');
                            currentFilter.state = state;
                            group.lastState = state;
                            return draft;
                        }
                        const hasExclude = has(allButClicked, 'exclude');
                        if (hasExclude || group.lastState === 'include') {
                            if (currentFilter.state === 'exclude') {
                                currentFilter.state = 'omit';
                                return draft;
                            }
                            const state = next(clickedFilterState, 'exclude');
                            currentFilter.state = state;
                            group.lastState = state;
                            return draft;
                        }
                        currentFilter.state = 'omit';
                        group.lastState = 'exclude';
                        return draft;
                    });
                    setDraft((draft) => {
                        draft.filteredItems = filterItems(draft);
                    });
                }, [setDraft]);
                return {
                    handle,
                };
            };

            const useFilterGroupFilters = (groupId) => {
                const state = filters.useTrackedState();
                const group = state.filterGroups.find((group) => group.id === groupId);
                if (!group) {
                    return {
                        filters: [],
                    };
                }
                const data = [];
                for (const filter in group.filters) {
                    data.push(group.filters[filter]);
                }
                return {
                    filters: data,
                };
            };

            const useFilterGroups = () => {
                const state = filters.useTrackedState();
                return {
                    groups: state.filterGroups,
                };
            };

            const useGetFilter = () => {
                const trackedState = useTrackedState$6();
                const trackedStateRef = react.useRef(trackedState);
                react.useEffect(() => {
                    trackedStateRef.current = trackedState;
                }, [trackedState]);
                const isGithub = (unknown, unit) => unit === 'github';
                const getKey = (type, unit) => {
                    if (isGithub(type, unit)) {
                        return 'createdBy';
                    }
                    return type;
                };
                const find = (event) => {
                    const name = `${event.unit}-${getKey(event.type, event.unit)}`;
                    const group = trackedStateRef.current.currentFilters.find((filter) => filter.groupId === name && filter.filter.full === event.full);
                    if (group) {
                        return group;
                    }
                    return null;
                };
                return {
                    find,
                };
            };

            const useItems = () => {
                const state = filters.useTrackedState();
                return {
                    allItems: state.allItems,
                    filteredItems: state.filteredItems,
                };
            };

            const { storage: { guards: guards$5 }, runtime: { send: send$5, listen: listen$5 } } = chrome$1;
            const useAuthCheck$2 = () => {
                const setDraft = github.useSetDraft();
                const trackedState = github.useTrackedState();
                const listener = (message) => {
                    if (!guards$5.isAuthenticatedMessage(message, 'github')) {
                        return;
                    }
                    const status = message.isAuthenticated ? 'is' : 'not';
                    setDraft((draft) => {
                        draft.auth = status;
                    });
                };
                const check = () => {
                    const message = messageTypes.isAuthenticated('github');
                    const hangup = listen$5(message, listener);
                    const type = messageTypes.authenticateCheck('github');
                    send$5({
                        type,
                    });
                    return hangup;
                };
                return {
                    authStatus: trackedState.auth,
                    check,
                };
            };

            const useAuthStatus$1 = () => {
                const setDraft = github.useSetDraft();
                const trackedState = github.useTrackedState();
                const logout = () => {
                    setDraft((draft) => {
                        draft.auth = 'not';
                    });
                    chrome$1.runtime.send({
                        type: messageTypes.logout('github'),
                    });
                };
                return {
                    logout,
                    authStatus: trackedState.auth,
                };
            };

            const useInitIssues$1 = () => {
                const setDraft = github.useSetDraft();
                const [isFetching, setIsFetching] = react.useState(false);
                const getPullRequestConfig = (pullRequests) => {
                    let mostChecks = 0;
                    let mostReviews = 0;
                    pullRequests.forEach((pr) => {
                        const { status: { contexts }, approvedCount } = pr;
                        if (contexts.length > mostChecks) {
                            mostChecks = contexts.length;
                        }
                        if (approvedCount > mostReviews) {
                            mostReviews = approvedCount;
                        }
                    });
                    const reviewsRequired = 2;
                    const fakeMost = Math.max(mostReviews, reviewsRequired );
                    return {
                        mostChecks,
                        mostReviews: fakeMost,
                    };
                };
                const listener = (message) => {
                    if (message.meta.done) {
                        setIsFetching(false);
                    }
                    setDraft((draft) => {
                        draft.pullRequests = message.data;
                        draft.prConfig = getPullRequestConfig(message.data);
                    });
                };
                const init = () => {
                    const hangup = chrome$1.runtime.listen('github/PULL_REQUESTS_RESPONSE', listener);
                    if (!isFetching) {
                        setIsFetching(true);
                        chrome$1.runtime.send({ type: 'github/PULL_REQUESTS_FETCH' });
                    }
                    return hangup;
                };
                return init;
            };

            const useInitRepositories = () => {
                const setDraft = github.useSetDraft();
                const [isFetching, setIsFetching] = react.useState(false);
                const listener = (message) => {
                    if (message.meta.done) {
                        setIsFetching(false);
                    }
                    setDraft((draft) => {
                        draft.repositories = message.data;
                    });
                };
                const init = () => {
                    const hangup = chrome$1.runtime.listen('github/REPOSITORIES_RESPONSE', listener);
                    if (!isFetching) {
                        setIsFetching(true);
                        chrome$1.runtime.send({ type: 'github/REPOSITORIES_FETCH' });
                    }
                    return hangup;
                };
                return init;
            };

            const { storage: { guards: guards$4 }, runtime: { send: send$4, listen: listen$4 } } = chrome$1;
            const useInitSettings$1 = () => {
                const setDraft = github.useSetDraft();
                const [isFetching, setIsFetching] = react.useState(false);
                const listener = (message) => {
                    if (!guards$4.githubSettings(message)) {
                        return;
                    }
                    const { data, meta } = message;
                    if (meta.done) {
                        setIsFetching(false);
                    }
                    setDraft((draft) => {
                        draft.settings = data;
                    });
                };
                const init = () => {
                    const hangup = listen$4('STORAGE_ON', listener);
                    if (!isFetching) {
                        setIsFetching(true);
                        send$4({ type: 'STORAGE_GET', key: 'githubSettings' });
                    }
                    return hangup;
                };
                return init;
            };

            const useInit$3 = () => {
                const initPullRequests = useInitIssues$1();
                const initRepositories = useInitRepositories();
                const initSettings = useInitSettings$1();
                const setDraft = github.useSetDraft();
                const { hasInit } = github.useTrackedState();
                const init = (contextInit) => {
                    switch (contextInit) {
                        case 'pullRequests': {
                            if (!hasInit.includes('pullRequests')) {
                                setDraft((draft) => {
                                    draft.hasInit = [...draft.hasInit, 'pullRequests'];
                                });
                                initPullRequests();
                                return true;
                            }
                            return false;
                        }
                        case 'settings': {
                            if (!hasInit.includes('settings')) {
                                setDraft((draft) => {
                                    draft.hasInit = [...draft.hasInit, 'settings'];
                                });
                                initSettings();
                                return true;
                            }
                            return false;
                        }
                        case 'repositories': {
                            if (!hasInit.includes('repositories')) {
                                setDraft((draft) => {
                                    draft.hasInit = [...draft.hasInit, 'repositories'];
                                });
                                initRepositories();
                                return true;
                            }
                            return false;
                        }
                        default: throw new Error('Bad Unit');
                    }
                };
                return {
                    init,
                    hasInit,
                };
            };

            const usePullRequests = () => {
                const trackedState = github.useTrackedState();
                const { init } = useInit$3();
                const initPullRequests = () => {
                    init('pullRequests');
                };
                return {
                    pullRequests: trackedState.pullRequests,
                    init: initPullRequests,
                };
            };

            const useRepositories = () => {
                const setDraft = github.useSetDraft();
                const { repositories } = github.useTrackedState();
                const updateWatched = react.useCallback((repository) => {
                    setDraft((draft) => {
                        const index = draft.repositories.findIndex((draftRepository) => draftRepository.fullName === repository.fullName);
                        if (index < 0) {
                            return;
                        }
                        draft.repositories[index] = repository;
                    });
                    chrome$1.runtime.send({
                        type: 'github/REPOSITORIES_UPDATE_WATCHED',
                        nextIsWatched: repository.isWatched,
                        id: repository.id,
                    });
                }, []);
                const unwatched = repositories.filter((repo) => !repo.isWatched);
                const state = {
                    all: repositories,
                    watched: repositories.filter((repo) => repo.isWatched),
                    unwatched,
                };
                return {
                    repositories: state,
                    updateWatched,
                };
            };

            const useSettings$1 = (keys) => {
                const { init: initSettings } = useInit$3();
                const state = github.useTrackedState();
                const { settings: settingsState } = state;
                const init = () => {
                    initSettings('settings');
                };
                const settings = entries(settingsState)
                    .filter((entry) => {
                    if (!entry) {
                        return false;
                    }
                    const [key] = entry;
                    return keys ? keys.includes(key) : false;
                })
                    .reduce((acc, cur) => {
                    if (cur) {
                        const [key, value] = cur;
                        acc[key] = value;
                    }
                    return acc;
                }, {});
                return {
                    settings,
                    init,
                };
            };

            const useUpdateSettings$1 = () => {
                const setDraft = github.useSetDraft();
                return react.useCallback((key, updates) => {
                    setDraft((draft) => {
                        draft.settings[key] = updates;
                        chrome$1.runtime.send({ type: 'STORAGE_SET', key: 'githubSettings', data: draft.settings });
                    });
                }, [setDraft]);
            };

            const useDispatchEvent = () => {
                const trackedState = Global$2.useTrackedState();
                const dispatch = (event) => {
                    const { reactor } = trackedState;
                    reactor.dispatchEvent('filter', event);
                };
                return {
                    dispatch,
                };
            };

            const useListenEvents = (unit) => {
                const trackedState = Global$2.useTrackedState();
                const listen = react.useCallback((eventName, callback) => {
                    const { reactor } = trackedState;
                    const localCallback = (event) => {
                        if (event.unit === unit) {
                            callback(event);
                        }
                    };
                    reactor.addEventListener(eventName, localCallback);
                }, []);
                return {
                    listen,
                };
            };

            const { storage: { guards: guards$3 }, runtime: { send: send$3, listen: listen$3 } } = chrome$1;
            const useInit$2 = () => {
                const { hasInit } = Global$2.useTrackedState();
                const setDraft = Global$2.useSetDraft();
                const storageOn = (message) => {
                    if (guards$3.filters(message)) {
                        const { rememberSelections } = message.data;
                        setDraft((draft) => {
                            draft.rememberSelections = rememberSelections;
                        });
                        return;
                    }
                    if (guards$3.visibleUnits(message)) {
                        const { data } = message;
                        setDraft((draft) => {
                            draft.visibleUnits = data;
                        });
                        return;
                    }
                };
                const getStorageKey = (initType) => {
                    switch (initType) {
                        case 'filters': return 'filters';
                        case 'units': return 'visibleUnits';
                        default: throw Error('Bad Init Type');
                    }
                };
                const init = (initType) => {
                    if (!hasInit.includes(initType)) {
                        listen$3('STORAGE_ON', storageOn);
                        setDraft((draft) => {
                            draft.hasInit = [...draft.hasInit, initType];
                        });
                        send$3({ type: 'STORAGE_GET', key: getStorageKey(initType) });
                        return true;
                    }
                    return false;
                };
                return {
                    hasInit,
                    init,
                };
            };

            const useRememberSelections = () => {
                const trackedState = Global$2.useTrackedState();
                const { init } = useInit$2();
                react.useEffect(() => {
                    init('filters');
                }, []);
                const setRememberSelections = (nextState) => {
                    chrome$1.runtime.send({
                        type: 'STORAGE_SET',
                        key: 'filters',
                        data: {
                            rememberSelections: nextState,
                            storedFilters: [],
                        },
                    });
                };
                return {
                    rememberSelections: trackedState.rememberSelections,
                    setRememberSelections,
                };
            };

            const allVisibleUnits = [
                'github',
                'highlights',
                'history',
                'jira',
                'links',
            ];

            const useUnits = () => {
                const { visibleUnits } = Global$2.useTrackedState();
                const setDraft = Global$2.useSetDraft();
                const { init } = useInit$2();
                react.useEffect(() => {
                    init('units');
                }, []);
                const setVisibleUnit = (unit, nextState) => {
                    const units = nextState ? [...visibleUnits, unit] : visibleUnits.filter((u) => u !== unit);
                    setDraft((draft) => {
                        draft.visibleUnits = units;
                    });
                    chrome$1.runtime.send({
                        type: 'STORAGE_SET',
                        key: 'visibleUnits',
                        data: units,
                    });
                };
                return {
                    allUnits: allVisibleUnits,
                    visibleUnits,
                    setVisibleUnit,
                };
            };

            const useInitFeed = () => {
                const setDraft = history.useSetDraft();
                const [isFetching, setIsFetching] = react.useState(false);
                const listener = (message) => {
                    if (message.meta.done) {
                        setIsFetching(false);
                    }
                    setDraft((draft) => {
                        draft.feed = message.data;
                    });
                };
                const init = () => {
                    const hangup = chrome$1.runtime.listen('history/FEED_RESPONSE', listener);
                    if (!isFetching) {
                        setIsFetching(true);
                        chrome$1.runtime.send({ type: 'history/FEED_FETCH' });
                    }
                    return hangup;
                };
                return init;
            };

            const useInit$1 = () => {
                const initFeed = useInitFeed();
                const setDraft = history.useSetDraft();
                const { hasInit } = history.useTrackedState();
                const init = (contextInit) => {
                    switch (contextInit) {
                        case 'feed': {
                            if (!hasInit.includes('feed')) {
                                setDraft((draft) => {
                                    draft.hasInit = [...draft.hasInit, 'feed'];
                                });
                                initFeed();
                                return true;
                            }
                            return false;
                        }
                        default: throw new Error('Bad Unit');
                    }
                };
                return {
                    init,
                    hasInit,
                };
            };

            const useFeed = () => {
                const { feed } = history.useTrackedState();
                const { init: initFeed } = useInit$1();
                const init = () => {
                    initFeed('feed');
                };
                return {
                    feed,
                    init,
                };
            };

            const { storage: { guards: guards$2 }, runtime: { send: send$2, listen: listen$2 } } = chrome$1;
            const useAuthCheck$1 = (unit, listener) => {
                const localListener = (message) => {
                    if (guards$2.isAuthenticatedMessage(message, unit)) {
                        const status = message.isAuthenticated ? 'is' : 'not';
                        listener(status);
                    }
                };
                const check = () => {
                    const message = messageTypes.isAuthenticated(unit);
                    const hangup = listen$2(message, localListener);
                    const type = messageTypes.authenticateCheck(unit);
                    send$2({
                        type,
                    });
                    return hangup;
                };
                return {
                    check,
                };
            };

            const useAuthCheck = () => {
                const setDraft = jira.useSetDraft();
                const trackedState = jira.useTrackedState();
                const listener = (status) => {
                    setDraft((draft) => {
                        draft.auth = status;
                    });
                };
                const { check } = useAuthCheck$1('jira', listener);
                return {
                    check,
                    authStatus: trackedState.auth,
                };
            };

            const useAuthStatus = () => {
                const { auth } = jira.useTrackedState();
                const setDraft = jira.useSetDraft();
                const logout = () => {
                    setDraft((draft) => {
                        draft.auth = 'not';
                    });
                    chrome$1.runtime.send({
                        type: messageTypes.logout('jira'),
                    });
                };
                return {
                    authStatus: auth,
                    logout,
                };
            };

            const useInitIssues = () => {
                const setDraft = jira.useSetDraft();
                const isFetching = react.useRef(false);
                const listener = (message) => {
                    if (message.meta.done) {
                        isFetching.current = false;
                    }
                    setDraft((draft) => {
                        draft.issues = message.data;
                        draft.issues.forEach((issue) => {
                            issue.sprints.sort((a, b) => {
                                const aDate = new Date(a.startDate || Number.POSITIVE_INFINITY);
                                const bDate = new Date(b.startDate || Number.POSITIVE_INFINITY);
                                if (aDate < bDate) {
                                    return 1;
                                }
                                if (aDate > bDate) {
                                    return -1;
                                }
                                return 0;
                            });
                        });
                    });
                };
                const init = () => {
                    const hangup = chrome$1.runtime.listen('jira/ISSUES_RESPONSE', listener);
                    if (!isFetching.current) {
                        isFetching.current = true;
                        chrome$1.runtime.send({ type: 'jira/ISSUES_FETCH' });
                    }
                    return hangup;
                };
                return init;
            };

            const useInitProjects = () => {
                const setDraft = jira.useSetDraft();
                const isFetching = react.useRef(false);
                const listener = (message) => {
                    if (message.meta.done) {
                        isFetching.current = false;
                    }
                    setDraft((draft) => {
                        const { projects, watched } = message.data;
                        draft.allProjects = projects;
                        draft.watches = watched;
                    });
                };
                const init = react.useCallback(() => {
                    const hangup = chrome$1.runtime.listen('jira/PROJECTS_RESPONSE', listener);
                    if (!isFetching.current) {
                        isFetching.current = true;
                        chrome$1.runtime.send({ type: 'jira/PROJECTS_FETCH' });
                    }
                    return hangup;
                }, []);
                return init;
            };

            const { storage: { guards: guards$1 }, runtime: { send: send$1, listen: listen$1 } } = chrome$1;
            const useInitSettings = () => {
                const setDraft = jira.useSetDraft();
                const isFetching = react.useRef(false);
                const listener = (message) => {
                    if (!guards$1.jiraSettings(message)) {
                        return;
                    }
                    const { data, meta } = message;
                    if (meta.done) {
                        isFetching.current = false;
                    }
                    setDraft((draft) => {
                        draft.settings = data;
                    });
                };
                const init = () => {
                    const hangup = listen$1('STORAGE_ON', listener);
                    if (!isFetching.current) {
                        isFetching.current = true;
                        send$1({ type: 'STORAGE_GET', key: 'jiraSettings' });
                    }
                    return hangup;
                };
                return init;
            };

            const useInit = () => {
                const initIssues = useInitIssues();
                const initProjects = useInitProjects();
                const initSettings = useInitSettings();
                const setDraft = jira.useSetDraft();
                const { hasInit } = jira.useTrackedState();
                const init = (contextInit) => {
                    if (hasInit.includes(contextInit)) {
                        return false;
                    }
                    setDraft((draft) => {
                        draft.hasInit = [...draft.hasInit, contextInit];
                    });
                    switch (contextInit) {
                        case 'issues': {
                            if (!hasInit.includes('issues')) {
                                initIssues();
                                return true;
                            }
                            return false;
                        }
                        case 'settings': {
                            if (!hasInit.includes('settings')) {
                                initSettings();
                                return true;
                            }
                            return false;
                        }
                        case 'projects': {
                            if (!hasInit.includes('projects')) {
                                initProjects();
                                return true;
                            }
                            return false;
                        }
                        default: throw new Error('Bad Unit');
                    }
                };
                return {
                    init,
                    hasInit,
                };
            };

            const useIssues = () => {
                const trackedState = jira.useTrackedState();
                const { init } = useInit();
                react.useEffect(() => {
                    init('issues');
                }, []);
                return {
                    issues: trackedState.issues,
                };
            };

            const useProjects = () => {
                const trackedState = jira.useTrackedState();
                const { init } = useInit();
                react.useEffect(() => {
                    init('projects');
                }, []);
                const updateWatched = react.useCallback((watched) => {
                    chrome$1.runtime.send({
                        type: 'jira/PROJECTS_UPDATE_WATCHED',
                        ...watched,
                    });
                }, []);
                const projects = {
                    all: trackedState.allProjects,
                    watches: trackedState.watches,
                    watchedProjects: trackedState.allProjects.filter((project) => trackedState.watches[project.id]?.statuses.length > 0),
                };
                return {
                    projects,
                    updateWatched,
                };
            };

            const useSettings = (keys) => {
                const { settings } = jira.useTrackedState();
                const data = entries(settings)
                    .filter((entry) => {
                    if (!entry) {
                        return false;
                    }
                    const [key] = entry;
                    return keys.includes(key);
                })
                    .reduce((acc, cur) => {
                    if (cur) {
                        const [key, value] = cur;
                        acc[key] = value;
                    }
                    return acc;
                }, {});
                return data;
            };

            const useUpdateSettings = () => {
                const setDraft = jira.useSetDraft();
                return react.useCallback((key, updates) => {
                    setDraft((draft) => {
                        draft.settings[key] = updates;
                        chrome$1.runtime.send({ type: 'STORAGE_SET', key: 'jiraSettings', data: draft.settings });
                    });
                }, [setDraft]);
            };

            const useCreateLink = () => {
                const setDraft = useSetDraft$1();
                const createLink = react.useCallback((link) => {
                    setDraft((draft) => {
                        draft.custom.push({
                            id: v4(),
                            url: link.url,
                            label: link.label,
                            enabled: true,
                        });
                        chrome$1.runtime.send({
                            type: 'STORAGE_SET',
                            key: 'linksCustom',
                            data: draft.custom,
                            overwrite: true,
                        });
                    });
                }, []);
                return createLink;
            };

            const useDeleteLink = () => {
                const setDraft = useSetDraft$1();
                const deleteLink = react.useCallback((linkId) => {
                    setDraft((draft) => {
                        const customIndex = draft.custom.findIndex((link) => link.id == linkId);
                        if (customIndex > -1) {
                            draft.custom = draft.custom.splice(customIndex, 1);
                            return draft;
                        }
                    });
                }, []);
                return deleteLink;
            };

            const pathsNeeded = [
                {
                    name: 'google-calendar',
                    pathsNeeded: [],
                },
                {
                    name: 'google-meet',
                    pathsNeeded: [],
                },
                {
                    name: 'new-relic',
                    pathsNeeded: [
                        {
                            name: 'account',
                            tooltipParts: [
                                {
                                    text: 'https://rpm.newrelic.com/accounts/',
                                    isPath: false,
                                },
                                {
                                    text: 'account',
                                    isPath: true,
                                },
                                {
                                    text: '/applications/123456789',
                                    isPath: false,
                                },
                            ],
                        },
                        {
                            name: 'application',
                            tooltipParts: [
                                {
                                    text: 'https://rpm.newrelic.com/accounts/123456/applications/',
                                    isPath: false,
                                },
                                {
                                    text: 'application',
                                    isPath: true,
                                },
                            ],
                        },
                    ],
                },
                {
                    name: 'gmail',
                    pathsNeeded: [],
                },
                {
                    name: 'speed-curve',
                    pathsNeeded: [
                        {
                            name: 'organization',
                            tooltipParts: [
                                {
                                    text: 'https://speedcurve.com/',
                                    isPath: false,
                                },
                                {
                                    text: 'organization',
                                    isPath: true,
                                },
                                {
                                    text: '/account',
                                    isPath: false,
                                },
                            ],
                        },
                        {
                            name: 'account',
                            tooltipParts: [
                                {
                                    text: 'https://speedcurve.com/organization/',
                                    isPath: false,
                                },
                                {
                                    text: 'account',
                                    isPath: true,
                                },
                            ],
                        },
                    ],
                },
                {
                    name: 'honey-badger',
                    pathsNeeded: [
                        {
                            name: 'project',
                            tooltipParts: [
                                {
                                    text: 'https://app.honeybadger.io/projects/',
                                    isPath: false,
                                },
                                {
                                    text: 'project',
                                    isPath: true,
                                },
                            ],
                        },
                    ],
                },
                {
                    name: 'jenkins',
                    pathsNeeded: [
                        {
                            name: 'project',
                            tooltipParts: [
                                {
                                    text: 'https://pipelines.eng.theknotww.com/blue/organizations/jenkins/',
                                    isPath: false,
                                },
                                {
                                    text: 'project',
                                    isPath: true,
                                },
                                {
                                    text: '/activity',
                                    isPath: false,
                                },
                            ],
                        },
                    ],
                },
            ];

            const urls = {
                'google-calendar': () => 'https://calendar.google.com/calendar',
                'google-meet': () => 'https://meet.google.com/',
                'new-relic': (path) => `https://rpm.newrelic.com/accounts/${path[0] || ''}/applications/${path[1] || ''}`,
                gmail: () => 'https://gmail.com/',
                'speed-curve': (path) => `https://speedcurve.com/${path[0] || ''}/${path[1] || ''}`,
                'honey-badger': (path) => `https://app.honeybadger.io/projects/${path[0] || ''}/faults?q=-is%3Aresolved+-is%3Aignored`,
                jenkins: (path) => `https://pipelines.eng.theknotww.com/blue/organizations/jenkins/${path[0] || ''}/activity`,
            };

            const buildURL = (link) => {
                const path = link.path;
                const standardURL = urls[link.id](path || []);
                return standardURL || '';
            };
            const updateStandard = (standard) => standard.map((link) => {
                const url = buildURL(link);
                const enabled = url.length > 0 ? link.enabled : false;
                return {
                    ...link,
                    url,
                    enabled,
                    pathsNeeded: pathsNeeded.find((needed) => needed.name === link.id)?.pathsNeeded || [],
                };
            });

            const all = (custom, standard) => [...custom, ...standard].filter((link) => link.enabled);
            const active = (custom, standard) => {
                const standardEnabled = standard.filter((link) => link.enabled).filter((link) => link.path.filter((path) => typeof path === 'string' && path.length > 0).length === link.pathsNeeded.length);
                const customEnabled = custom.filter((link) => link.enabled).filter((link) => validURL(link.url));
                return [...standardEnabled, ...customEnabled];
            };
            var enabled = {
                active,
                all,
            };

            const useLinks = () => {
                const trackedState = links.useTrackedState();
                const { standard, custom } = trackedState;
                const standardBuilt = trackedState.standard.map((link) => ({
                    ...link,
                    pathsNeeded: pathsNeeded.find((needed) => needed.name === link.id)?.pathsNeeded || [],
                }));
                return {
                    enabled: enabled.all(custom, standardBuilt),
                    active: enabled.active(custom, standardBuilt),
                    custom,
                    standard: standardBuilt,
                    all: [...standard, ...trackedState.custom],
                };
            };

            const useUpdateLink = () => {
                const setDraft = useSetDraft$1();
                const updateLink = (config) => {
                    const { id, key, value } = config;
                    setDraft((draft) => {
                        const standardLinkIndex = draft.standard.findIndex((link) => link.id === id);
                        if (standardLinkIndex > -1) {
                            draft.standard[standardLinkIndex][key] = value;
                            chrome$1.runtime.send({
                                type: 'STORAGE_SET',
                                key: 'linksStandard',
                                data: draft.standard,
                                overwrite: true,
                            });
                            return;
                        }
                        const customLinkIndex = draft.custom.findIndex((link) => link.id === id);
                        if (customLinkIndex > -1) {
                            draft.custom[customLinkIndex][key] = value;
                            chrome$1.runtime.send({
                                type: 'STORAGE_SET',
                                key: 'linksCustom',
                                data: draft.custom,
                                overwrite: true,
                            });
                            return;
                        }
                    });
                };
                return updateLink;
            };

            const useHotkeyLinks = () => {
                const [isEnabled, setIsEnabled] = react.useState(true);
                const { active } = useLinks();
                const updateLink = useUpdateLink();
                const trackedState = links.useTrackedState();
                const setDraft = links.useSetDraft();
                react.useEffect(() => {
                    if (!trackedState.hasInit.includes('hotkeys')) {
                        setDraft((draft) => {
                            const draftInit = draft.hasInit.filter((link) => link !== 'hotkeys');
                            draft.hasInit = [...draftInit, 'hotkeys'];
                        });
                    }
                }, []);
                react.useEffect(() => {
                    if (isEnabled) {
                        window.addEventListener('keydown', keydown);
                        return () => {
                            window.removeEventListener('keydown', keydown);
                        };
                    }
                    window.removeEventListener('keydown', keydown);
                    return () => {
                        window.removeEventListener('keydown', keydown);
                    };
                }, [active, isEnabled]);
                const keydown = (event) => {
                    if (isEnabled) {
                        const link = active
                            .find((link) => link.hotkey?.toUpperCase() === event.key.toUpperCase());
                        if (link) {
                            updateLink({
                                id: link.id,
                                key: 'isLoading',
                                value: false,
                                noStorage: true,
                            });
                            window.location.href = link.url;
                        }
                    }
                };
                const updateIsEnabled = (nextEnabled) => {
                    setIsEnabled(nextEnabled);
                };
                return updateIsEnabled;
            };

            const { storage: { guards }, runtime: { send, listen } } = chrome$1;
            const useInitLinks = () => {
                const setDraft = links.useSetDraft();
                const [isFetching, setIsFetching] = react.useState(false);
                const listener = react.useCallback((message) => {
                    setDraft((draft) => {
                        if (guards.linksStandard(message)) {
                            const standard = updateStandard(message.data);
                            draft.standard = standard;
                            return draft;
                        }
                        if (guards.linksCustom(message)) {
                            const { data: custom } = message;
                            draft.custom = custom;
                            return draft;
                        }
                        if (guards.linksOrder(message)) {
                            return draft;
                        }
                    });
                }, []);
                const init = () => {
                    const hangup = listen('STORAGE_ON', listener);
                    if (!isFetching) {
                        setIsFetching(true);
                        send({ type: 'STORAGE_GET', key: 'linksStandard' });
                        send({ type: 'STORAGE_GET', key: 'linksCustom' });
                    }
                    return hangup;
                };
                return init;
            };

            const useSaveLinks = () => {
                const save = () => {
                };
                return {
                    save,
                };
            };

            const useHide$1 = () => {
                const setDraft = modalContext.useSetDraft();
                const units = react.useCallback((units) => {
                    setDraft((draft) => {
                        draft.hiddenUnits = units;
                    });
                }, [setDraft]);
                return {
                    units,
                };
            };

            const useHide = () => {
                const trackedState = modalContext.useTrackedState();
                return {
                    selection: trackedState.selection,
                };
            };

            const useUpdate = () => {
                const setDraft = modalContext.useSetDraft();
                const selection = react.useCallback((selectionId) => {
                    setDraft((draft) => {
                        draft.selection = selectionId;
                    });
                }, [setDraft]);
                return {
                    selection,
                };
            };

            const useErrors = (unit) => {
                const [errorMessage, setError] = react.useState(null);
                const [sendId, setSendId] = react.useState(null);
                const listen = (message) => {
                    if (message.unit === unit) {
                        setError(message.message);
                        setSendId(message.meta.id);
                    }
                };
                react.useEffect(() => {
                    const hangup = chrome$1.runtime.listen('error/SERVICE_ERROR', listen);
                    return () => {
                        hangup();
                    };
                }, []);
                return {
                    errorMessage,
                    sendId,
                };
            };

            const useForceUpdate = () => {
                const [updateCount, setUpdateCount] = react.useState(0);
                const update = () => {
                    setUpdateCount((prevCount) => prevCount + 1);
                };
                return {
                    updateCount,
                    update,
                };
            };

            const useInterval = (callback, delay) => {
                const savedCallback = react.useRef(null);
                react.useEffect(() => {
                    savedCallback.current = callback;
                }, [callback]);
                react.useEffect(() => {
                    const tick = () => {
                        if (savedCallback.current) {
                            savedCallback.current();
                        }
                    };
                    if (delay !== null) {
                        const id = setInterval(tick, delay);
                        return () => clearInterval(id);
                    }
                }, [delay]);
            };

            const useIsHovered = (config) => {
                const { ref, onChange, ignore } = config;
                const [isHovered, setIsHovered] = react.useState(false);
                react.useEffect(() => {
                    if (ref.current) {
                        ref.current.addEventListener('mouseenter', mouseenter);
                        ref.current.addEventListener('mouseleave', mouseout);
                    }
                    return () => {
                        if (ref.current) {
                            ref.current.removeEventListener('mouseenter', mouseenter);
                            ref.current.removeEventListener('mouseleave', mouseout);
                        }
                    };
                }, [ref]);
                const mouseenter = () => {
                    const ignoreHover = typeof ignore === 'function' ? ignore() : ignore;
                    if (!ignoreHover) {
                        setIsHovered(true);
                        if (onChange) {
                            onChange(true);
                        }
                    }
                };
                const mouseout = () => {
                    setIsHovered(false);
                    if (onChange) {
                        onChange(false);
                    }
                };
                return {
                    isHovered,
                };
            };

            const getElement = () => {
                const element = document.createElement('div');
                element.style.position = 'relative';
                return element;
            };
            const Portal = (props) => {
                const { children, selectionTrigger } = props;
                const { selection } = useHide();
                const element = react.useRef(getElement());
                react.useEffect(() => {
                    const container = document.getElementById('modalContent');
                    if (container) {
                        if (container && selection === selectionTrigger) {
                            container.appendChild(element.current);
                        }
                    }
                    return () => {
                        if (container && selection === selectionTrigger) {
                            container.removeChild(element.current);
                        }
                    };
                }, [selection]);
                if (selection !== selectionTrigger) {
                    return null;
                }
                return reactDom.createPortal(children, element.current);
            };

            qe.div `
  display: ${({ displayType }) => displayType || 'flex'};
  flex-direction: ${({ flexRow }) => flexRow ? 'row' : 'column'};
  grid-auto-rows: auto;
  position: relative;
  grid-template-columns: auto auto;
  grid-column-gap: 12px;
`;
            qe.div `
  margin-bottom: 10px;
  padding: 4px;
  justify-content: ${({ justifyCenter }) => justifyCenter ? 'center' : 'inherit'};
  display: flex;
  flex-direction: ${({ flexRow }) => flexRow ? 'row' : 'column'};
`;
            qe.div `
  flex: 1;
  display: flex;
  justify-content: space-between;
  align-items: center;
  margin-bottom: 4px;
  margin-left: -${({ theme }) => theme.sizes.md.marginX};
  font-size: ${({ theme }) => theme.sizes.lg.fontSize};
`;
            qe.div `
  flex: 1;
  margin: 6px 0 2px 4px;
  font-size: ${(props) => props.theme.sizes.md.fontSize};
`;
            qe.div `
  flex: 1;
  position: relative;
  border-radius: ${({ theme }) => theme.sizes.sm.borderRadius};
  box-shadow: ${({ theme: { colors: { secondary: { 'accent-rgb': { r, g, b } } } } }) => {
    const lead = `rgba(${r}, ${g}, ${b},`;
    const tail = ')';
    return `0 0 2px ${lead}0.9${tail}, 0 0 4px ${lead}0.5${tail}, 0 0 8px ${lead}0.2${tail}`;
}};
  border: 1px ${(props) => props.theme.colors.primary.background} solid;
  padding: ${({ theme }) => theme.sizes.md.padding};
`;
            qe.div `
  flex: 1;
  margin-bottom: 2px;
  padding: 0 ${({ theme: { sizes: { lg } } }) => lg.paddingX};
`;

            var DefaultContext = {
              color: undefined,
              size: undefined,
              className: undefined,
              style: undefined,
              attr: undefined
            };
            var IconContext = react.createContext && react.createContext(DefaultContext);

            var __assign = null && null.__assign || function () {
              __assign = Object.assign || function (t) {
                for (var s, i = 1, n = arguments.length; i < n; i++) {
                  s = arguments[i];

                  for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];
                }

                return t;
              };

              return __assign.apply(this, arguments);
            };

            var __rest = null && null.__rest || function (s, e) {
              var t = {};

              for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0) t[p] = s[p];

              if (s != null && typeof Object.getOwnPropertySymbols === "function") for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {
                if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i])) t[p[i]] = s[p[i]];
              }
              return t;
            };

            function Tree2Element(tree) {
              return tree && tree.map(function (node, i) {
                return react.createElement(node.tag, __assign({
                  key: i
                }, node.attr), Tree2Element(node.child));
              });
            }

            function GenIcon(data) {
              return function (props) {
                return react.createElement(IconBase, __assign({
                  attr: __assign({}, data.attr)
                }, props), Tree2Element(data.child));
              };
            }
            function IconBase(props) {
              var elem = function (conf) {
                var attr = props.attr,
                    size = props.size,
                    title = props.title,
                    svgProps = __rest(props, ["attr", "size", "title"]);

                var computedSize = size || conf.size || "1em";
                var className;
                if (conf.className) className = conf.className;
                if (props.className) className = (className ? className + ' ' : '') + props.className;
                return react.createElement("svg", __assign({
                  stroke: "currentColor",
                  fill: "currentColor",
                  strokeWidth: "0"
                }, conf.attr, attr, svgProps, {
                  className: className,
                  style: __assign(__assign({
                    color: props.color || conf.color
                  }, conf.style), props.style),
                  height: computedSize,
                  width: computedSize,
                  xmlns: "http://www.w3.org/2000/svg"
                }), title && react.createElement("title", null, title), props.children);
              };

              return IconContext !== undefined ? react.createElement(IconContext.Consumer, null, function (conf) {
                return elem(conf);
              }) : elem(DefaultContext);
            }

            // THIS FILE IS AUTO GENERATED
            function AiFillCheckCircle (props) {
              return GenIcon({"tag":"svg","attr":{"viewBox":"0 0 1024 1024"},"child":[{"tag":"path","attr":{"d":"M512 64C264.6 64 64 264.6 64 512s200.6 448 448 448 448-200.6 448-448S759.4 64 512 64zm193.5 301.7l-210.6 292a31.8 31.8 0 0 1-51.7 0L318.5 484.9c-3.8-5.3 0-12.7 6.5-12.7h46.9c10.2 0 19.9 4.9 25.9 13.3l71.2 98.8 157.2-218c6-8.3 15.6-13.3 25.9-13.3H699c6.5 0 10.3 7.4 6.5 12.7z"}}]})(props);
            }function AiFillCloseCircle (props) {
              return GenIcon({"tag":"svg","attr":{"viewBox":"0 0 1024 1024"},"child":[{"tag":"path","attr":{"d":"M512 64C264.6 64 64 264.6 64 512s200.6 448 448 448 448-200.6 448-448S759.4 64 512 64zm165.4 618.2l-66-.3L512 563.4l-99.3 118.4-66.1.3c-4.4 0-8-3.5-8-8 0-1.9.7-3.7 1.9-5.2l130.1-155L340.5 359a8.32 8.32 0 0 1-1.9-5.2c0-4.4 3.6-8 8-8l66.1.3L512 464.6l99.3-118.4 66-.3c4.4 0 8 3.5 8 8 0 1.9-.7 3.7-1.9 5.2L553.5 514l130 155c1.2 1.5 1.9 3.3 1.9 5.2 0 4.4-3.6 8-8 8z"}}]})(props);
            }function AiFillDownCircle (props) {
              return GenIcon({"tag":"svg","attr":{"viewBox":"0 0 1024 1024"},"child":[{"tag":"path","attr":{"d":"M512 64C264.6 64 64 264.6 64 512s200.6 448 448 448 448-200.6 448-448S759.4 64 512 64zm184.5 353.7l-178 246a7.95 7.95 0 0 1-12.9 0l-178-246c-3.8-5.3 0-12.7 6.5-12.7H381c10.2 0 19.9 4.9 25.9 13.2L512 563.6l105.2-145.4c6-8.3 15.6-13.2 25.9-13.2H690c6.5 0 10.3 7.4 6.5 12.7z"}}]})(props);
            }function AiFillInfoCircle (props) {
              return GenIcon({"tag":"svg","attr":{"viewBox":"0 0 1024 1024"},"child":[{"tag":"path","attr":{"d":"M512 64C264.6 64 64 264.6 64 512s200.6 448 448 448 448-200.6 448-448S759.4 64 512 64zm32 664c0 4.4-3.6 8-8 8h-48c-4.4 0-8-3.6-8-8V456c0-4.4 3.6-8 8-8h48c4.4 0 8 3.6 8 8v272zm-32-344a48.01 48.01 0 0 1 0-96 48.01 48.01 0 0 1 0 96z"}}]})(props);
            }function AiFillWarning (props) {
              return GenIcon({"tag":"svg","attr":{"viewBox":"0 0 1024 1024"},"child":[{"tag":"path","attr":{"d":"M955.7 856l-416-720c-6.2-10.7-16.9-16-27.7-16s-21.6 5.3-27.7 16l-416 720C56 877.4 71.4 904 96 904h832c24.6 0 40-26.6 27.7-48zM480 416c0-4.4 3.6-8 8-8h48c4.4 0 8 3.6 8 8v184c0 4.4-3.6 8-8 8h-48c-4.4 0-8-3.6-8-8V416zm32 352a48.01 48.01 0 0 1 0-96 48.01 48.01 0 0 1 0 96z"}}]})(props);
            }function AiOutlineLoading (props) {
              return GenIcon({"tag":"svg","attr":{"viewBox":"0 0 1024 1024"},"child":[{"tag":"path","attr":{"d":"M988 548c-19.9 0-36-16.1-36-36 0-59.4-11.6-117-34.6-171.3a440.45 440.45 0 0 0-94.3-139.9 437.71 437.71 0 0 0-139.9-94.3C629 83.6 571.4 72 512 72c-19.9 0-36-16.1-36-36s16.1-36 36-36c69.1 0 136.2 13.5 199.3 40.3C772.3 66 827 103 874 150c47 47 83.9 101.8 109.7 162.7 26.7 63.1 40.2 130.2 40.2 199.3.1 19.9-16 36-35.9 36z"}}]})(props);
            }

            // THIS FILE IS AUTO GENERATED
            function VscLoading (props) {
              return GenIcon({"tag":"svg","attr":{"viewBox":"0 0 16 16","fill":"currentColor"},"child":[{"tag":"path","attr":{"d":"M8 .75c.172 0 .333.034.484.102a1.214 1.214 0 0 1 .664.664c.068.15.102.312.102.484s-.034.333-.102.484a1.214 1.214 0 0 1-.265.399 1.324 1.324 0 0 1-.399.273A1.254 1.254 0 0 1 8 3.25c-.172 0-.333-.031-.484-.094a1.324 1.324 0 0 1-.672-.672A1.254 1.254 0 0 1 6.75 2c0-.172.031-.333.094-.484.067-.151.159-.284.273-.399.115-.114.248-.203.399-.265A1.17 1.17 0 0 1 8 .75zM2.633 3.758a1.111 1.111 0 0 1 .68-1.031 1.084 1.084 0 0 1 .882 0c.136.057.253.138.352.242.104.099.185.216.242.351a1.084 1.084 0 0 1 0 .883 1.122 1.122 0 0 1-.594.594 1.169 1.169 0 0 1-.883 0 1.19 1.19 0 0 1-.359-.234 1.19 1.19 0 0 1-.234-.36 1.169 1.169 0 0 1-.086-.445zM2 7a.941.941 0 0 1 .703.297A.941.941 0 0 1 3 8a.97.97 0 0 1-.078.39 1.03 1.03 0 0 1-.531.532A.97.97 0 0 1 2 9a.97.97 0 0 1-.39-.078 1.104 1.104 0 0 1-.32-.211 1.104 1.104 0 0 1-.212-.32A.97.97 0 0 1 1 8a.97.97 0 0 1 .29-.703A.97.97 0 0 1 2 7zm.883 5.242a.887.887 0 0 1 .531-.805.863.863 0 0 1 .68 0c.11.047.203.11.281.188a.887.887 0 0 1 .188.96.887.887 0 0 1-1.148.461.913.913 0 0 1-.462-.46.863.863 0 0 1-.07-.344zM8 13.25c.208 0 .385.073.531.219A.723.723 0 0 1 8.75 14a.723.723 0 0 1-.219.531.723.723 0 0 1-.531.219.723.723 0 0 1-.531-.219A.723.723 0 0 1 7.25 14c0-.208.073-.385.219-.531A.723.723 0 0 1 8 13.25zm3.617-1.008c0-.177.06-.325.18-.445s.268-.18.445-.18.326.06.445.18c.12.12.18.268.18.445s-.06.326-.18.445a.605.605 0 0 1-.445.18.605.605 0 0 1-.445-.18.605.605 0 0 1-.18-.445zM14 7.5a.48.48 0 0 1 .352.148A.48.48 0 0 1 14.5 8a.48.48 0 0 1-.148.352A.48.48 0 0 1 14 8.5a.48.48 0 0 1-.352-.148A.48.48 0 0 1 13.5 8a.48.48 0 0 1 .148-.352A.48.48 0 0 1 14 7.5zm-1.758-5.117c.188 0 .365.036.531.11a1.413 1.413 0 0 1 .735.734c.073.166.11.343.11.53 0 .188-.037.365-.11.532a1.413 1.413 0 0 1-.735.734 1.31 1.31 0 0 1-.53.11c-.188 0-.365-.037-.532-.11a1.415 1.415 0 0 1-.734-.734 1.31 1.31 0 0 1-.11-.531c0-.188.037-.365.11-.531a1.413 1.413 0 0 1 .734-.735c.167-.073.344-.11.531-.11z"}}]})(props);
            }function VscSettingsGear (props) {
              return GenIcon({"tag":"svg","attr":{"viewBox":"0 0 24 24","fill":"currentColor"},"child":[{"tag":"path","attr":{"fillRule":"evenodd","clipRule":"evenodd","d":"M19.85 8.75l4.15.83v4.84l-4.15.83 2.35 3.52-3.43 3.43-3.52-2.35-.83 4.15H9.58l-.83-4.15-3.52 2.35-3.43-3.43 2.35-3.52L0 14.42V9.58l4.15-.83L1.8 5.23 5.23 1.8l3.52 2.35L9.58 0h4.84l.83 4.15 3.52-2.35 3.43 3.43-2.35 3.52zm-1.57 5.07l4-.81v-2l-4-.81-.54-1.3 2.29-3.43-1.43-1.43-3.43 2.29-1.3-.54-.81-4h-2l-.81 4-1.3.54-3.43-2.29-1.43 1.43L6.38 8.9l-.54 1.3-4 .81v2l4 .81.54 1.3-2.29 3.43 1.43 1.43 3.43-2.29 1.3.54.81 4h2l.81-4 1.3-.54 3.43 2.29 1.43-1.43-2.29-3.43.54-1.3zm-8.186-4.672A3.43 3.43 0 0 1 12 8.57 3.44 3.44 0 0 1 15.43 12a3.43 3.43 0 1 1-5.336-2.852zm.956 4.274c.281.188.612.288.95.288A1.7 1.7 0 0 0 13.71 12a1.71 1.71 0 1 0-2.66 1.422z"}}]})(props);
            }

            const rotate$1 = We `
  from {
    transform: rotate(0deg);
  }

  to {
    transform: rotate(360deg);
  }
`;
            const Line = qe(AiOutlineLoading) `
  height: ${(props) => props.height ? props.height : 'auto'};
  width: ${(props) => props.width ? props.width : '100px'};
  animation: ${rotate$1} ${({ speed }) => speed || 2}s infinite linear;
`;
            const Balls = qe(VscLoading) `
  height: ${(props) => props.height ? props.height : 'auto'};
  width: ${(props) => props.width ? props.width : '100px'};
  animation: ${rotate$1} ${({ speed }) => speed || 2}s infinite linear;
`;
            const IconContainer$2 = qe.div `
  display: flex;
  flex-direction: column;
  align-items: center;
  justify-content: center;
  animation: rotation 2s infinite linear;
`;

            const getBackgroundColor = (props) => {
                const { theme: { colors }, isActive, clearBackground, isDisabled } = props;
                if (isDisabled) {
                    return alpha(colors.quaternary['background-rgb'], 0.5);
                }
                if (isActive) {
                    return colors.quaternary.background;
                }
                if (clearBackground) {
                    return 'inherit';
                }
                return colors.secondary.background;
            };
            const getHoverBackgroundColor = (props) => {
                const { theme: { colors }, clearBackground, isDisabled } = props;
                if (isDisabled) {
                    return alpha(colors.quaternary['background-rgb'], 0.5);
                }
                if (clearBackground) {
                    return colors.quaternary.background;
                }
                return colors.quaternary.background;
            };
            const getColor = (props) => {
                if (props.isActive) {
                    return props.theme.colors.quaternary.foreground;
                }
                if (props.clearBackground) {
                    return props.theme.colors.tertiary.foreground;
                }
                return props.theme.colors.secondary.foreground;
            };
            const getBorderRadius = (props) => {
                if (props.round) {
                    return '50%';
                }
                return props.theme.sizes[props.size || 'lg'].borderRadius;
            };
            const getBorder$1 = (props) => {
                if (props.round) {
                    return 'inherit';
                }
                return `1px ${props.theme.colors.tertiary.accent} solid`;
            };

            const Loading$2 = qe(({ textWidth, ...rest }) => react.createElement(Balls, Object.assign({}, rest))) `
  width: 16px;
  margin: 0 ${({ textWidth }) => (textWidth - 28) / 2}px;  
`;
            const Container$k = qe.button `
  align-items: center;
  align-self: center;
  position: ${({ absolute }) => typeof absolute === 'undefined' ? 'relative' : 'absolute'};
  right: ${({ absolute }) => absolute?.right ? `${absolute.right}px` : 'auto'};
  top: ${({ absolute }) => absolute?.top ? `${absolute.top}px` : 'auto'};
  left: ${({ absolute }) => absolute?.left ? `${absolute.left}px` : 'auto'};
  bottom: ${({ absolute }) => absolute?.bottom ? `${absolute.bottom}px` : 'auto'};
  font-family: ${({ theme: { fonts }, round }) => round ? fonts.inconsolata : 'inherit'};
  background-color: ${(props) => getBackgroundColor(props)};
  border: ${(props) => getBorder$1(props)};
  border-radius: ${(props) => getBorderRadius(props)};
  color: ${(props) => getColor(props)};
  display: ${({ block }) => block ? 'block' : 'inline-block'};
  text-align: center;
  margin: ${({ size, noMargin, theme: { sizes } }) => noMargin ? '0' : sizes[size || 'lg'].margin};
  font-weight: ${({ theme, size }) => theme.sizes[size || 'md'].fontWeight};
  font-size: ${(props) => props.theme.sizes[props.size || 'md'].fontSize};
  padding: ${({ size, onlyIcon, theme: { sizes } }) => {
    const paddingSize = sizes[size || 'md'];
    if (onlyIcon) {
        return `${paddingSize.paddingX} ${paddingSize.paddingX}`;
    }
    return paddingSize.padding;
}};
  transition: 0s;
  white-space: nowrap;
  line-height: ${({ onlyIcon }) => onlyIcon ? '0' : 'inherit'};

  &:hover {
    background-color: ${(props) => getHoverBackgroundColor(props)};
    box-shadow: 0 0 4px ${(props) => props.theme.colors.secondary.accent};
    color: ${(props) => props.theme.colors.secondary.foreground};
    cursor: ${({ isDisabled }) => isDisabled ? 'inherit' : 'pointer'};
    transition: 0.5s;
  }

  & > *:hover {
    cursor: ${({ isDisabled }) => isDisabled ? 'inherit' : 'pointer'};
  }

  &:disabled {
    background-color: inherit;
    cursor: default;
  }
`;
            const IconContainer$1 = qe.div `
  position: relative;
`;

            const Button = react.forwardRef((props, ref) => {
                const { clickOnEnter, label, children, Icon, ...rest } = props;
                const buttonRef = react.useRef(null);
                react.useEffect(() => {
                    if (clickOnEnter) {
                        window.addEventListener('keydown', keydown);
                    }
                    return () => {
                        if (clickOnEnter) {
                            window.removeEventListener('keydown', keydown);
                        }
                    };
                }, [clickOnEnter]);
                const keydown = (event) => {
                    if (event.key === 'Enter' && props.onClick && buttonRef.current) {
                        simulate(buttonRef.current, 'click');
                    }
                };
                return (react.createElement(Container$k, Object.assign({ ref: mergeRefs([buttonRef, ref]), onlyIcon: !!Icon && !children }, rest),
                    react.createElement(IconContainer$1, null, Icon && react.createElement(Icon, null)),
                    label || children));
            });

            const LoadingButton = (props) => {
                const { isLoading, isDisabled, label, children, ...rest } = props;
                const [startWidth, setStartWidth] = react.useState(0);
                const standard = children || label;
                const buttonRef = react.useRef(null);
                react.useEffect(() => {
                    if (isLoading && startWidth === 0) {
                        setStartWidth(64);
                        return;
                    }
                    if (buttonRef.current && !isLoading) {
                        const width = buttonRef.current.clientWidth;
                        setStartWidth(width);
                    }
                }, [isLoading, buttonRef]);
                return (react.createElement(Button, Object.assign({}, rest, { ref: buttonRef, isDisabled: isLoading || isDisabled || rest.disabled, Icon: isLoading ? () => react.createElement(Loading$2, { textWidth: startWidth }) : undefined }), isLoading ? null : standard));
            };

            // THIS FILE IS AUTO GENERATED
            function GrClose (props) {
              return GenIcon({"tag":"svg","attr":{"viewBox":"0 0 24 24"},"child":[{"tag":"path","attr":{"fill":"none","stroke":"#000","strokeWidth":"2","d":"M3,3 L21,21 M3,21 L21,3"}}]})(props);
            }

            const Container$j = qe.div `
  position: absolute;
  /* z-index: 999; */
  left: 0;
  top: 0;
  bottom: 0;
  right: 0;
  overflow: hidden;
  background-color: rgba(0,0,0,0.4);
`;
            qe.div `
  position: absolute;
  bottom: 5vh;
  right: 5vw;
`;
            const ContentContainer$1 = qe.div `
  background-color: ${(props) => props.theme.colors.primary.background};
  margin: 10vh auto;
  padding: ${({ theme }) => theme.sizes.md.paddingY} 0 0 0;
  box-shadow: inset 0 0 8px rgba(${({ theme: { colors: { secondary: { 'accent-rgb': accent } } } }) => `${accent.r}, ${accent.g}, ${accent.b},`} 0.3);
  width: 60vw;
  border-radius: ${({ theme }) => theme.sizes.lg.borderRadius};
  height: 80vh;
  position: relative;
  border: 1px ${({ theme }) => alpha(theme.colors.primary.accent, 0.4)} solid;
  box-shadow: 0 0 6px ${({ theme }) => alpha(theme.colors.primary.accent, 0.4)};
`;
            const SelectionContentContainer = qe.div `
  overflow-y: hidden;
  display: grid;
  height: 100%;
  grid-template-columns: auto 1fr;
  grid-template-rows: 48px auto 48px;
  grid-template-areas:
    "title title"
    "tabs content"
    "footer content";
`;
            const Content$4 = qe.div `
  display: flex;
  width: 100%;
  height: 100%;
  flex-direction: column;
  align-content: space-between;
`;
            const SelectionContent = qe.div `
  overflow-y: scroll;
  transform: none;
  position: relative;
  grid-area: content;
  height: 100%;
  width: 100%;
  -ms-overflow-style: none;
  scrollbar-width: none;
  border-top-width: 1px;
  border-left-width: 1px;
  border-top-left-radius: ${({ theme }) => theme.sizes.lg.borderRadius};
  border-color: ${({ theme }) => alpha(theme.colors.primary.accent, 0.5)};
  border-style: solid;
  background-color: ${({ theme }) => theme.colors.tertiary.background};

  &::-webkit-scrollbar {
    display: none;
  }

  padding: 0 20px;
`;
            const CloseButton$1 = qe(Button) `
  position: absolute;
  top: 8px;
  right: 12px;
`;
            const Close$1 = qe(GrClose) `
  & > path {
    stroke: ${({ theme }) => theme.colors.secondary.foreground};
  }

  &:hover {
    cursor: pointer;
  }
`;
            qe.hr `
  margin-bottom: 0px;
`;
            const Heading$1 = qe.div `
  grid-area: title;
  display: flex;
  height: 100%;
  justify-content: flex-start;
  align-items: flex-end;
  font-family: ${({ theme }) => theme.fonts.nunito};
  font-size: ${({ theme }) => theme.sizes.xxl.fontSize};
  padding-left: ${({ theme }) => theme.sizes.md.paddingX};
  margin-bottom: ${({ theme }) => theme.sizes.md.marginY};
`;
            const Title$5 = qe.h2 `
  display: block;
  padding: 0 10px;
  font-size: ${(props) => props.theme.sizes.xl.fontSize};
  color: ${(props) => props.theme.colors.primary.foreground};
`;
            qe.div `
  flex: 1;
  display: flex;
  align-items: flex-end;
  justify-content: flex-start;
  grid-area: footer;
  box-shadow: 0px -4px 3px rgba(50, 50, 50, 0.75);
  background-color: ${({ theme }) => theme.colors.primary.background};
  border-left-width: 1px;
  border-color: ${({ theme }) => alpha(theme.colors.primary.accent, 0.5)};
  border-style: solid;
`;
            qe.div `
  display: flex;
  justify-self: flex-end;
  justify-content: flex-end;
  padding: 20px 30px 10px 0;
`;
            qe.div `
  position: fixed;
  right: 0;
  bottom: ${({ theme }) => theme.sizes.md.marginY};;
`;

            const Container$i = qe.div `
  height: 100%;
  grid-area: tabs;
  padding-top: 20%;
`;
            const Tab$1 = qe.div `
  position: relative;
  border-right-width: 0;
  border-color: ${({ theme }) => theme.colors.primary.accent};
  border-style: solid;
  right: -4px;
  box-shadow: inset 0 0 4px ${({ theme }) => theme.colors.secondary.accent};
  border-top-left-radius: ${({ theme }) => theme.sizes.lg.borderRadius};
  border-bottom-left-radius: ${({ theme }) => theme.sizes.lg.borderRadius};
  padding: ${({ theme }) => theme.sizes.lg.padding};
  font-size: ${({ theme }) => theme.sizes.lg.fontSize};
  margin: ${({ theme }) => theme.sizes.xxl.marginY} 0 ${({ theme }) => theme.sizes.xxl.marginY} ${({ theme }) => theme.sizes.xxl.marginX};
  color: ${({ theme }) => theme.colors.secondary.foreground};
  background-color: ${({ theme, isSelected }) => isSelected ? theme.colors.quaternary.background : theme.colors.secondary.background};

  &:hover {
    cursor: pointer;
  }
`;

            const Tab = (props) => {
                const { screen, label, handleClick } = props;
                const { selection } = modalContext.useTrackedState();
                const update = useUpdate();
                const onClick = () => {
                    update.selection(screen);
                    handleClick(screen);
                };
                return (react.createElement(Tab$1, { isSelected: selection === screen, onClick: onClick }, label));
            };

            const tabs = [
                {
                    screen: 'links',
                    label: 'Links',
                },
                {
                    screen: 'jira',
                    label: 'Jira',
                },
                {
                    screen: 'github',
                    label: 'Github',
                },
                {
                    screen: 'honeybadger',
                    label: 'Honeybadger',
                },
                {
                    screen: 'global',
                    label: 'Settings',
                },
            ];
            const Tabs = () => {
                const [selectedTab, setSelectedTab] = react.useState();
                const handleClick = (screen) => {
                    setSelectedTab(screen);
                };
                return (react.createElement(Container$i, null, tabs.map((tab) => react.createElement(Tab, Object.assign({}, tab, { key: tab.screen, handleClick: handleClick, isSelected: tab.screen === selectedTab })))));
            };

            const Modal = () => {
                const fullScreenRef = react.useRef(null);
                const { selection } = useHide();
                const update = useUpdate();
                const { save: saveLinks } = useSaveLinks();
                react.useEffect(() => {
                    document.addEventListener('keydown', keydown);
                    return () => {
                        document.removeEventListener('keydown', keydown);
                    };
                }, []);
                react.useEffect(() => {
                    if (fullScreenRef.current) {
                        fullScreenRef.current.addEventListener('click', clickOutside);
                    }
                    return () => {
                        if (fullScreenRef.current) {
                            fullScreenRef.current.removeEventListener('click', clickOutside);
                        }
                    };
                });
                const sendSave = () => {
                    saveLinks();
                };
                const closeModal = () => {
                    sendSave();
                    update.selection(null);
                };
                const keydown = (event) => {
                    if (event.key === "Escape") {
                        closeModal();
                    }
                };
                const clickOutside = (event) => {
                    if (event.target === fullScreenRef.current) {
                        closeModal();
                    }
                };
                if (!selection) {
                    return null;
                }
                return (react.createElement(Container$j, { ref: fullScreenRef },
                    react.createElement(ContentContainer$1, null,
                        react.createElement(CloseButton$1, { onClick: closeModal, round: true, Icon: Close$1 }),
                        react.createElement(Content$4, null,
                            react.createElement(SelectionContentContainer, null,
                                react.createElement(Heading$1, null,
                                    react.createElement(Title$5, null, "TKWW Assistant")),
                                react.createElement(Tabs, null),
                                react.createElement(SelectionContent, { id: "modalContent" }))))));
            };

            const Providers = ({ children }) => {
                return (react.createElement(modalContext.Provider, null,
                    react.createElement(Global$2.Provider, null, children)));
            };

            const Container$h = qe.div `
  width: calc(100% - 8px);
  height: 8px;
  background: #ccc;
  margin: 0 4px;
  border-radius: 4px;
`;
            const Bar = qe.div `
  height: 8px;
  background: #4caf50;
  border-radius: 4px;
  width: ${(props) => props.percent}%;
`;

            const Progress = (props) => {
                const { percent, hide } = props;
                if (hide) {
                    return null;
                }
                return (react.createElement(Container$h, null,
                    react.createElement(Bar, { percent: percent })));
            };

            const Row = qe.div `
  overflow-y: hidden;
  display: grid;
  grid-area: row;
  height: 100%;
  grid-template-columns: ${({ hasLeft }) => hasLeft ? '1fr 1fr' : '0px 0px'} 50px 50px ${({ hasRight }) => hasRight ? '1fr 1fr' : '0px 0px'};
  grid-template-rows: auto;
  grid-template-areas: "${({ columns }) => {
    switch (columns) {
        case 1: return 'first first first first first';
        case 2: return 'first first first second second second';
        case 3: return 'first first second second third third';
    }
}}";
`;
            const Console = qe.div `
  height: 100vh;
  width: 100vw;
  overflow: hidden;
  position: relative;
  top: 0;
  right: 0;
  left: 0;
  bottom: 0;
  display: grid;
  grid-template-rows: 1fr auto;
  grid-template-columns: 1fr;
  grid-template-areas:
  "row"
  "footer";
`;
            qe.div `
  position: absolute;
  left: 0;
  top: 0;
  bottom: 0;
  right: 0;
  background-color: rgba(0, 0, 0, 0.8);
`;
            const Data = qe.div `
  display: flex;
  flex-direction: column;
`;
            const Container$g = qe.div `
  overflow-y: hidden;
  position: relative;
  padding: 0 ${({ theme }) => theme.sizes.lg.marginX};
  display: flex;
  flex-direction: ${({ rotated }) => rotated ? 'row' : 'column'};
  margin-bottom: 20px;
  transition: 1s;
  margin-top: 10px;
  grid-area: ${({ column }) => column};
`;
            const ContentValue = qe.div `
  overflow-y: hidden;
  will-change: max-height;
  max-height: ${({ hasData, theme }) => hasData ? `${theme.windowHeight}px` : 0};
  transition: max-height 1s;
`;
            const ContentContainer = qe.div `
  margin-top: ${(props) => props.hideProgress ? '8px' : '0'};
  align-self: ${(props) => props.center ? 'center' : 'inherit'};
  display: ${(props) => props.center ? 'flex' : 'inherit'};
  justify-content: ${(props) => props.center ? 'center' : 'inherit'};
  flex-direction: ${(props) => props.center ? 'column' : 'inherit'};
  overflow-y: scroll;
  height: 100%;

  -ms-overflow-style: none;
  scrollbar-width: none;

  &::-webkit-scrollbar {
    display: none;
  }
`;

            const Content$3 = (props) => {
                const { hideProgress, hasData, children, ...rest } = props;
                const contentRef = react.useRef(null);
                const [percent, setPercent] = react.useState(0);
                react.useEffect(() => {
                    if (contentRef.current) {
                        contentRef.current.addEventListener('scroll', scroll);
                    }
                    return () => {
                        if (contentRef.current) {
                            contentRef.current.removeEventListener('scroll', scroll);
                        }
                    };
                }, [contentRef]);
                const scroll = () => {
                    if (contentRef.current) {
                        const { scrollTop, scrollHeight, clientHeight } = contentRef.current;
                        const height = scrollHeight - clientHeight;
                        const scrolled = (scrollTop / height) * 100;
                        setPercent(scrolled);
                    }
                };
                return (react.createElement(ContentValue, { hasData: hasData },
                    react.createElement(Progress, { hide: hideProgress, percent: percent }),
                    react.createElement(ContentContainer, Object.assign({ ref: contentRef }, rest), children)));
            };

            // THIS FILE IS AUTO GENERATED
            function FiCheck (props) {
              return GenIcon({"tag":"svg","attr":{"viewBox":"0 0 24 24","fill":"none","stroke":"currentColor","strokeWidth":"2","strokeLinecap":"round","strokeLinejoin":"round"},"child":[{"tag":"polyline","attr":{"points":"20 6 9 17 4 12"}}]})(props);
            }

            const Container$f = qe.div `
  position: fixed;
  left: 0;
  top: 0;
  width: 100%;
  height: 100%;
  overflow: auto;
`;
            const ClickOutside = (props) => {
                const { onClickOutside, live } = props;
                const fullScreenRef = react.useRef(null);
                react.useEffect(() => {
                    if (fullScreenRef.current) {
                        fullScreenRef.current.addEventListener('click', clickOutside);
                    }
                    return () => {
                        if (fullScreenRef.current) {
                            fullScreenRef.current.removeEventListener('click', clickOutside);
                        }
                    };
                }, []);
                const clickOutside = (event) => {
                    onClickOutside(event);
                };
                if (!live) {
                    return null;
                }
                return (react.createElement(Container$f, { ref: fullScreenRef }));
            };

            qe.div `
  width: 100px;
  position: relative;
`;
            const FloatingContainer = qe.div `
  position: absolute;
`;
            qe.div `
  display: ${({ inlineLabel }) => inlineLabel ? 'inline-block' : 'block'};
`;
            const FloatingItems = qe.div `
  position: relative;
  top: 4px;
  left: -4px;
  background-color: ${(props) => props.theme.colors.primary.background};
`;
            const FloatingItemsWithCaret = qe(FloatingItems) `
  top: 8px;

  &::after {
    border-left: 8px solid transparent;
    border-right: 8px solid transparent;
    top: -6px;
    left: 8px;
    content: "";
    width: 0;
    height: 0;
    position: absolute;
    z-index: 999;
    border-bottom-color: ${(props) => props.theme.colors.primary.accent};
    border-bottom-style: solid;
    border-bottom-width: 6px;
  }
`;
            const FloatingTitle = qe.div `
  background-color: ${(props) => props.theme.colors.primary.accent};
  color: ${(props) => props.theme.colors.tertiary.background};
  font-weight: 800;
  font-size: ${(props) => props.theme.sizes.md.fontSize};
  padding: ${(props) => props.theme.sizes.md.padding};
  border: ${(props) => getBorder(props)};
`;
            const FloatingFooter = qe.div `
  background-color: ${(props) => props.theme.colors.primary.background};
  color: ${(props) => props.theme.colors.primary.foreground};
  padding: ${({ theme: { sizes } }) => `${sizes.sm.padding} ${sizes.sm.padding} ${sizes.xs.padding}`};
  border: ${(props) => getBorder(props)};
`;
            qe.label `
  font-weight: 200;
  white-space: nowrap;
  font-size: ${({ theme }) => theme.sizes.sm.fontSize};
`;
            qe.div `
  background-color: ${(props) => props.theme.colors.primary.background};
  border: 1px ${(props) => props.theme.colors.primary.accent} solid;
  border-bottom: ${(props) => props.isActive ? 'none' : `1px ${props.theme.colors.primary.accent} solid`};
  color: ${(props) => props.theme.colors.primary.foreground};
  padding: 4px 8px;
  position: relative;
  z-index: ${(props) => props.isActive ? '99' : 'inherit'};

  &:hover {
    cursor: pointer;
  }

  &::after {
    position: absolute;
    content: "";
    top: ${(props) => props.isActive ? '4px' : '9px'};
    right: 10px;
    width: 0;
    height: 0;
    border: 5px solid transparent;
    border-color: ${(props) => props.isActive ? `transparent transparent ${props.theme.colors.primary.accent} transparent` : `${props.theme.colors.primary.accent} transparent transparent transparent`};
  }
`;
            const getBorder = (props) => {
                if (!props.isActive) {
                    return 'none';
                }
                const { r, g, b } = props.theme.colors.primary['accent-rgb'];
                return `1px rgba(${r}, ${g}, ${b}, 0.5) solid`;
            };
            const getBorderTop = (props) => {
                if (props.isAbsolute || !props.isActive || props.hasTitle) {
                    return 'none';
                }
                const { r, g, b } = props.theme.colors.primary['accent-rgb'];
                return `1px rgba(${r}, ${g}, ${b}, 0.5) solid`;
            };
            const Items$1 = qe.div `
  position: ${(props) => props.isAbsolute ? 'absolute' : 'inherit'};
  background-color: ${(props) => props.theme.colors.primary.background};
  color: ${(props) => props.theme.colors.primary.foreground};
  top: 100%;
  left: 0;
  right: 0;
  z-index: 99;
  border: ${(props) => getBorder(props)};
  border-top: ${(props) => getBorderTop(props)};
`;
            const Item$3 = qe.div `
  color: #ffffff;
  padding: 4px 8px;
  border: 1px solid transparent;
  border-color: transparent transparent rgba(0, 0, 0, 0.1) transparent;
  user-select: none;
  background-color: ${(props) => props.isSelected ? 'rgba(255, 255, 255, 0.1)' : 'inherit'};

  &:hover {
    cursor: pointer;
    background-color: rgba(255, 255, 255, 0.2);
  }
`;

            function Item$2(props) {
                const { option, onSelect, isSelected } = props;
                const onClick = () => {
                    onSelect(option, !isSelected);
                };
                return (react.createElement(Item$3, { onClick: onClick, isSelected: isSelected }, option.label));
            }

            function Items(props) {
                const { isActive, hasTitle, options, onItemSelect, isAbsolute, selectedItem } = props;
                return (react.createElement(Items$1, { hasTitle: hasTitle, isAbsolute: isAbsolute, isActive: isActive }, isActive && options.map((option) => react.createElement(Item$2, { key: option.value, isSelected: option.value === selectedItem?.value, onSelect: onItemSelect, option: option }))));
            }

            const Input$3 = qe.input `
  position: absolute;
  opacity: 0;
  height: 0;
  width: 0;

  &:hover {
    cursor: ${({ isDisabled }) => isDisabled ? 'default' : 'pointer'};;
  }
`;
            const Checkmark$1 = qe.span `
  position: absolute;
  top: 1px;
  left: 0;
  height: 11px;
  width: 11px;
  box-shadow: inset 0 0 2px rgba(${({ theme: { colors: { secondary: { 'accent-rgb': accent } } } }) => `${accent.r}, ${accent.g}, ${accent.b},`} 0.9);

  &::after {
    left: 1px;
    top: -2px;
    color: ${(props) => props.theme.colors.secondary.accent};
    position: absolute;
    transform: scale(0.8) rotate(10deg);
    content: "${'\u2713'}";
    display: ${(props) => props.isChecked ? 'inline' : 'none'};
  }
`;
            const Label$4 = qe.div `
  text-overflow: ellipsis;
  position: relative;
  top: -1px;
  text-transform:${({ capitalize }) => capitalize ? 'capitalize' : 'none'};
  opacity: ${({ isDisabled }) => isDisabled ? 0.8 : 1};

  &:hover {
    cursor: ${({ isDisabled }) => isDisabled ? 'default' : 'pointer'};;
  }
`;
            const Container$e = qe.label `
  display: block;
  position: relative;
  width: min-content;
  white-space: nowrap;
  text-overflow: ellipsis;
  padding-left: 16px;
  user-select: none;
  opacity: ${({ isDisabled }) => isDisabled ? 0.8 : 1};

  &:hover {
    cursor: ${({ isDisabled }) => isDisabled ? 'default' : 'pointer'};;
  }

  & > ${Checkmark$1} {
    background-color: ${(props) => {
    const { isHovered, isChecked, theme: { colors, baseColors }, isDisabled } = props;
    const { secondary, quaternary } = colors;
    if (isHovered && !isDisabled) {
        return isChecked ? quaternary.background : secondary.background;
    }
    return isChecked ? secondary.background : baseColors['grey-light'];
}};
  }
`;

            const Checkbox = react.forwardRef((props, ref) => {
                const { label, capitalize, children, isDisabled, handleClick, isChecked } = props;
                const [isCheckedLocal, setIsCheckedLocal] = react.useState(isChecked || false);
                const containerRef = react.useRef(null);
                const [isHovered, setIsHovered] = react.useState(false);
                react.useEffect(() => {
                    if (isChecked !== isCheckedLocal) {
                        setIsCheckedLocal(isChecked || false);
                    }
                }, [isChecked]);
                react.useEffect(() => {
                    if (containerRef.current) {
                        containerRef.current.addEventListener('mouseenter', mouseenter);
                        containerRef.current.addEventListener('mouseleave', mouseout);
                    }
                    return () => {
                        if (containerRef.current) {
                            containerRef.current.removeEventListener('mouseenter', mouseenter);
                            containerRef.current.removeEventListener('mouseleave', mouseout);
                        }
                    };
                }, [containerRef]);
                const mouseenter = () => {
                    if (!isDisabled) {
                        setIsHovered(true);
                    }
                };
                const mouseout = () => {
                    setIsHovered(false);
                };
                const onClick = (event) => {
                    event.preventDefault();
                    if (!isDisabled) {
                        if (handleClick) {
                            handleClick(!isCheckedLocal);
                        }
                        setIsCheckedLocal(!isCheckedLocal);
                    }
                };
                return (react.createElement(Container$e, { isDisabled: isDisabled, ref: containerRef, isHovered: isHovered, hasLabel: !!label, onClick: onClick, isChecked: isCheckedLocal },
                    react.createElement(Label$4, { ref: ref, capitalize: capitalize, isDisabled: isDisabled }, label || children || ''),
                    react.createElement(Input$3, { isDisabled: isDisabled, type: "checkbox" }),
                    react.createElement(Checkmark$1, { isDisabled: isDisabled, isChecked: isCheckedLocal })));
            });

            function Option$1(props) {
                const { option, onItemSelect } = props;
                const selectItem = (nextValue) => {
                    onItemSelect(option, nextValue);
                };
                return (react.createElement(Checkbox, { handleClick: selectItem, key: option.value, label: option.label }));
            }

            function Floating(props) {
                const { onCancel, isActive, selectedItem, onItemSelect, title, footerOptions, hideCaret, options } = props;
                const onClickOutside = () => {
                    onCancel();
                };
                const FloatingItems$1 = hideCaret ? FloatingItems : FloatingItemsWithCaret;
                if (!isActive) {
                    return null;
                }
                return (react.createElement(FloatingContainer, null,
                    react.createElement(ClickOutside, { live: isActive, onClickOutside: onClickOutside }),
                    react.createElement(FloatingItems$1, null,
                        title &&
                            react.createElement(FloatingTitle, { isActive: true }, title),
                        react.createElement(Items, { isActive: isActive, isAbsolute: false, hasTitle: !!title, selectedItem: selectedItem, options: options, onItemSelect: onItemSelect }),
                        footerOptions &&
                            react.createElement(FloatingFooter, { isActive: true }, footerOptions.map((option) => react.createElement(Option$1, { key: option.value, option: option, onItemSelect: onItemSelect }))))));
            }

            const rotate = We `
  from {
    transform: rotate(360deg);
  }

  to {
    transform: rotate(0deg);
  }
`;
            const SubTitle = qe.div `
  color: #ff79c6;
  text-align: center;
`;
            const TitleText = qe.h2 `
  color: ${({ theme, isDark }) => isDark ? theme.colors.secondary.foreground : 'inherit'};
`;
            const RotateElementOuter = qe.div `
  display: block;
  position: relative;
`;
            const RotateElement = qe.div `
  position: absolute;
  top: 80px;
  left: -40px;
  transform: rotate(270deg);
`;
            const Container$d = qe.div `
  display: grid;
  grid-template-columns: auto 1fr auto;
  grid-template-rows: auto;
  grid-template-areas:
    "left title right"
    "filters filters filters";
`;
            qe.div `
  grid-area: filters;
`;
            const Text$1 = qe.div `
  display: flex;
  align-items: center;
  font-size: ${(props) => props.theme.sizes.lg.fontSize};
  align-self: ${({ horizontal }) => {
    switch (horizontal) {
        case 'left': return 'start';
        default: return 'center';
    }
}};
`;
            const Icon = qe.span `
  margin-right: 6px;
  font-size: 150%;
  display: flex;
  align-items: center;
`;
            const CenterContainer = qe.div `
  display: flex;
  flex-direction: column;
  overflow-x: hidden;
  width: 100%;
  grid-area: title;
`;
            const MenuBaseContainer = qe.div `
  align-self: flex-start;
  display: flex;
`;
            const MenuLeftContainer = qe(MenuBaseContainer) `
  grid-area: left;
  justify-self: start;


  & > ${Container$k} {
    margin-right: 2px;
  }
`;
            const MenuRightContainer = qe(MenuBaseContainer) `
  grid-area: right;
  justify-self: end;

  & > ${Container$k} {
    margin-left: 2px;
  }
`;
            qe.div `
  background-color: ${getThemeColor('secondary').background};
  color: ${getThemeColor('secondary').foreground};
  position: absolute;
`;

            We `
  from {
    transform: rotate(0deg);
  }

  to {
    transform: rotate(360deg);
  }
`;
            const getIcon$1 = (iconState, Icon) => {
                switch (iconState) {
                    case 'check': return FiCheck;
                    case 'rotating': return (qe(Icon) `
        animation: ${rotate} 2s infinite linear;
      `);
                    default: return Icon;
                }
            };
            function MenuItem(props) {
                const { item: { isRotating, dropdown, handleClick, icon } } = props;
                const isDropdown = !!dropdown;
                const [isActive, setIsActive] = react.useState(false);
                const [hasMounted, setHasMounted] = react.useState(false);
                const [iconIsRotating, setIconIsRotating] = react.useState(isRotating);
                const [iconState, setIconState] = react.useState('default');
                react.useEffect(() => {
                    if (iconIsRotating) {
                        setIconState('rotating');
                        return;
                    }
                    if (!hasMounted) {
                        setHasMounted(true);
                        return;
                    }
                    setIconState('check');
                    setTimeout(() => {
                        setIconState('default');
                    }, 3000);
                }, [iconIsRotating]);
                react.useEffect(() => {
                    if (isRotating !== iconIsRotating) {
                        setIconIsRotating(isRotating);
                    }
                }, [isRotating]);
                const onButtonClick = (event) => {
                    if (handleClick) {
                        handleClick(event);
                    }
                    if (isDropdown) {
                        setIsActive(true);
                    }
                };
                const onItemSelect = (item) => {
                    dropdown?.handleClick(item);
                    onCancel();
                };
                const onCancel = () => {
                    setIsActive(false);
                };
                const Icon = getIcon$1(iconState, icon);
                return (react.createElement("div", null,
                    react.createElement(Button, { round: true, clearBackground: true, block: true, noMargin: true, isActive: isActive, Icon: Icon, onClick: onButtonClick }),
                    dropdown &&
                        react.createElement(Floating, Object.assign({ onCancel: onCancel, isActive: isActive, onItemSelect: onItemSelect, selectedItem: null }, dropdown))));
            }

            function Menu(props) {
                const { menuItems, menuLocation } = props;
                const Container = menuLocation === 'left' ? MenuLeftContainer : MenuRightContainer;
                return (react.createElement(Container, null, menuItems.map((menuItem) => react.createElement(MenuItem, { key: menuItem.id, item: menuItem }))));
            }

            const Rotator = (props) => {
                const { children, rotated } = props;
                if (!rotated) {
                    return (react.createElement(react.Fragment, null, children));
                }
                return (react.createElement(RotateElementOuter, null,
                    react.createElement(RotateElement, null, children)));
            };

            const Title$4 = (props) => {
                const { text, rotated, subText, isDark, menuConfigurations, align } = props;
                const { left, right } = menuConfigurations || {};
                return (react.createElement(Rotator, { rotated: rotated },
                    react.createElement(Container$d, null,
                        left &&
                            react.createElement(Menu, { menuItems: left, menuLocation: "left" }),
                        react.createElement(CenterContainer, { hasLeft: !!left, hasRight: !!right },
                            react.createElement(Text$1, { horizontal: align },
                                props.icon &&
                                    react.createElement(Icon, null,
                                        react.createElement(props.icon, null)),
                                react.createElement(TitleText, { isDark: isDark }, text))),
                        right &&
                            react.createElement(Menu, { menuItems: right, menuLocation: "right" })),
                    subText && react.createElement(SubTitle, null, subText)));
            };

            var Unit$1 = {
                Container: Container$g,
                Content: Content$3,
                Console,
                Data,
                MenuItem,
                Row,
                Title: Title$4,
                ContentValue,
            };

            // THIS FILE IS AUTO GENERATED
            function IoIosCloseCircleOutline (props) {
              return GenIcon({"tag":"svg","attr":{"viewBox":"0 0 512 512"},"child":[{"tag":"path","attr":{"d":"M331.3 308.7L278.6 256l52.7-52.7c6.2-6.2 6.2-16.4 0-22.6-6.2-6.2-16.4-6.2-22.6 0L256 233.4l-52.7-52.7c-6.2-6.2-15.6-7.1-22.6 0-7.1 7.1-6 16.6 0 22.6l52.7 52.7-52.7 52.7c-6.7 6.7-6.4 16.3 0 22.6 6.4 6.4 16.4 6.2 22.6 0l52.7-52.7 52.7 52.7c6.2 6.2 16.4 6.2 22.6 0 6.3-6.2 6.3-16.4 0-22.6z"}},{"tag":"path","attr":{"d":"M256 76c48.1 0 93.3 18.7 127.3 52.7S436 207.9 436 256s-18.7 93.3-52.7 127.3S304.1 436 256 436c-48.1 0-93.3-18.7-127.3-52.7S76 304.1 76 256s18.7-93.3 52.7-127.3S207.9 76 256 76m0-28C141.1 48 48 141.1 48 256s93.1 208 208 208 208-93.1 208-208S370.9 48 256 48z"}}]})(props);
            }function IoMdHelpCircle (props) {
              return GenIcon({"tag":"svg","attr":{"viewBox":"0 0 512 512"},"child":[{"tag":"path","attr":{"d":"M256 48C141.2 48 48 141.2 48 256s93.2 208 208 208 208-93.2 208-208S370.8 48 256 48zm21 333h-42v-42h42v42zm-.2-63h-41.6c0-67 62.4-62.2 62.4-103.8 0-22.9-18.7-41.7-41.6-41.7S214.4 192 214.4 214h-41.6c0-46 37.2-83 83.2-83s83.2 37.1 83.2 83.1c0 52-62.4 57.9-62.4 103.9z"}}]})(props);
            }

            const containerPosition = (position) => {
                switch (position) {
                    case 'center': return 'center';
                    case 'left': return 'flex-start';
                    case 'right': return 'flex-end';
                    default: return 'center';
                }
            };

            const Container$c = qe.div `
  margin: 8px 0;
  position: relative;
  display: ${({ inline }) => inline ? 'inline-block' : 'flex'};
  justify-content: ${(props) => containerPosition(props.containerPosition)};
  align-items: center;
`;
            const InputContainer = qe.div `
  position: relative;
  width: 100%;
`;
            const Label$3 = qe.label `
  font-weight: 200;
  display: ${({ inlineLabel }) => inlineLabel ? 'inline' : 'block'};
  font-size: ${({ theme }) => theme.sizes.sm.fontSize};
`;
            const Input$2 = qe.input `
  background-color: ${({ theme: { colors }, isDisabled, ifDisabledColorSteady }) => {
    if (ifDisabledColorSteady && isDisabled) {
        return 'transparent';
    }
    if (isDisabled) {
        return colors.tertiary.background;
    }
    return alpha(colors.primary.background, 0.6);
}};
  user-select: ${({ isDisabled }) => isDisabled ? 'none' : 'auto'};;
  border-radius: ${({ theme }) => theme.sizes.md.borderRadius};
  margin: 0 ${({ theme, noMargin }) => noMargin ? 0 : theme.sizes.md.marginX} ${({ theme, handleInvalid, noMargin }) => noMargin || !handleInvalid ? 0 : theme.sizes.lg.marginY} ${({ theme: { sizes: { md, sm } }, hasLabel, noMargin }) => {
    if (noMargin) {
        return 0;
    }
    if (hasLabel) {
        return sm.marginX;
    }
    return md.marginX;
}};
  border: 1px ${({ theme, isInvalid, isDisabled, ifDisabledColorSteady }) => {
    if (isDisabled && ifDisabledColorSteady) {
        return alpha(theme.colors.primary.background, 0.8);
    }
    if (isInvalid) {
        return alpha(theme.baseColors['red'], 0.8);
    }
    return alpha(theme.baseColors['grey-light'], 0.4);
}} solid;
  color: ${({ theme }) => theme.colors.primary.foreground};
  padding: ${({ theme }) => theme.sizes.md.padding};
  width: ${({ afterNodeWidth, narrow, maxSize }) => {
    if (narrow) {
        if (typeof narrow === 'number') {
            return `${narrow + 12}px`;
        }
        return '100px';
    }
    if (typeof maxSize !== 'undefined') {
        return 'auto';
    }
    if (afterNodeWidth) {
        return `calc(100% - ${afterNodeWidth}px)`;
    }
    return '100%';
}};
`;
            const InvalidText = qe.div `
  position: absolute;
  white-space: nowrap;
  color: ${({ theme }) => theme.baseColors.red};
  font-size: ${({ theme }) => theme.sizes.xs.fontSize};
  top: 24px;
  left: ${({ noMargin }) => noMargin ? 0 : '8px'};
`;
            const AfterNode = qe.span `
  position: absolute;
  left: ${({ hasMaxSize, inputWidth, afterNodeWidth }) => {
    if (hasMaxSize) {
        return `${inputWidth}px`;
    }
    return `${inputWidth - afterNodeWidth}px`;
}};
`;
            qe(IoIosCloseCircleOutline) `
  position: absolute;
  right: 4px;
  top: 3px;

  &:hover {
    cursor: pointer;
  }

  & > path {
    stroke: #ffffff;
  }
`;
            qe.div `
  display: flex;
  align-items: center;
`;
            qe.div `
`;
            qe.div `
  display: flex;
`;

            const Input$1 = (props) => {
                const { afterNode, containerPosition, defaultValue, focusOnMount, inlineLabel, inline, invalidText, isDisabled, handleLoseFocus, label, maxSize, onChange, onlyNumbers, onReactChange, ifDisabledColorSteady, forceRerender, value, ...rest } = props;
                const [hasFocused, setHasFocused] = react.useState(!focusOnMount);
                const [inputWidth, setInputWidth] = react.useState(100);
                const [afterNodeWidth, setAfterNodeWidth] = react.useState(0);
                const [localValue, setLocalValue] = react.useState(defaultValue || value || '');
                const inputRef = react.useRef(null);
                const afterNodeRef = react.useRef(null);
                const uuidRef = react.useRef(v4());
                const force = useForceUpdate();
                react.useEffect(() => {
                    if (forceRerender) {
                        force.update();
                    }
                }, []);
                react.useEffect(() => {
                    if (inputRef.current) {
                        const { clientWidth } = inputRef.current;
                        setInputWidth(clientWidth);
                        if (!hasFocused && focusOnMount) {
                            setHasFocused(true);
                            inputRef.current.focus();
                        }
                    }
                }, [inputRef, force.updateCount]);
                react.useEffect(() => {
                    if (value || value === '') {
                        setLocalValue(value);
                    }
                }, [value]);
                react.useEffect(() => {
                    if (afterNodeRef.current) {
                        const { clientWidth } = afterNodeRef.current;
                        setAfterNodeWidth(clientWidth);
                    }
                }, [afterNodeRef]);
                react.useEffect(() => {
                    if (inputRef.current) {
                        inputRef.current.addEventListener('blur', onBlur);
                    }
                    return () => {
                        if (inputRef.current) {
                            inputRef.current.removeEventListener('blur', onBlur);
                        }
                    };
                }, [inputRef, value]);
                react.useEffect(() => {
                    if (inputRef.current) {
                        inputRef.current.addEventListener('focus', onFocus);
                    }
                    return () => {
                        if (inputRef.current) {
                            inputRef.current.removeEventListener('focus', onFocus);
                        }
                    };
                }, [inputRef]);
                const onFocus = () => {
                    if (isDisabled && inputRef.current) {
                        inputRef.current.blur();
                    }
                };
                const onBlur = () => {
                    if (handleLoseFocus) {
                        handleLoseFocus();
                    }
                };
                const validate = (value) => {
                    if (maxSize && value.length > maxSize) {
                        return false;
                    }
                    if (onlyNumbers) {
                        const isNumber = Number(value);
                        return !!isNumber || value.length === 0;
                    }
                    return true;
                };
                const handleChange = (event) => {
                    const isValid = validate(event.target.value);
                    if (!isValid) {
                        return;
                    }
                    if (onChange) {
                        onChange(event);
                    }
                    if (onReactChange) {
                        onReactChange(event.target.value);
                    }
                    if (typeof value === 'undefined') {
                        setLocalValue(event.target.value);
                    }
                };
                return (react.createElement(react.Fragment, null,
                    label &&
                        react.createElement(Label$3, { inlineLabel: inlineLabel, htmlFor: uuidRef.current }, label),
                    react.createElement(Container$c, { inline: inline, containerPosition: containerPosition },
                        react.createElement(InputContainer, null,
                            react.createElement(Input$2, Object.assign({ afterNodeWidth: afterNodeWidth, size: maxSize ? maxSize + 1 : undefined, maxSize: maxSize, ref: inputRef, ifDisabledColorSteady: ifDisabledColorSteady, disabled: isDisabled, isDisabled: isDisabled, id: uuidRef.current, value: localValue, onChange: handleChange, hasLabel: !!label && label.length > 0 }, rest)),
                            react.createElement(InvalidText, { noMargin: props.noMargin }, invalidText)),
                        afterNode &&
                            react.createElement(AfterNode, { ref: afterNodeRef, hasMaxSize: typeof maxSize !== 'undefined', afterNodeWidth: afterNodeWidth, inputWidth: inputWidth }, afterNode))));
            };

            qe.div `
  position: absolute;
  bottom: 5vh;
  right: 5vw;
`;
            const RepositoryListsWrapper = qe.div `
  display: flex;
`;
            const SectionContent = qe.div `
  display: ${({ displayType }) => displayType || 'flex'};
  flex-direction: ${({ flexRow }) => flexRow ? 'row' : 'column'};
  grid-auto-rows: auto;
  position: relative;
  grid-template-columns: auto auto;
  grid-column-gap: 12px;
`;
            const Section$1 = qe.div `
  margin-bottom: 10px;
  padding: 4px;
  justify-content: ${({ justifyCenter }) => justifyCenter ? 'center' : 'inherit'};
  display: flex;
  flex-direction: ${({ flexRow }) => flexRow ? 'row' : 'column'};
`;
            const SectionTitle = qe.div `
  flex: 1;
  display: flex;
  justify-content: space-between;
  align-items: center;
  margin-bottom: 4px;
  margin-left: -${({ theme }) => theme.sizes.md.marginX};
  font-size: ${({ theme }) => theme.sizes.lg.fontSize};
`;
            const SectionSubTitle = qe.div `
  flex: 1;
  margin: 6px 0 2px 4px;
  font-size: ${(props) => props.theme.sizes.md.fontSize};
`;
            const SectionSubSection = qe.div `
  flex: 1;
  position: relative;
  border-radius: ${({ theme }) => theme.sizes.sm.borderRadius};
  box-shadow: ${({ theme: { colors: { secondary: { 'accent-rgb': { r, g, b } } } } }) => {
    const lead = `rgba(${r}, ${g}, ${b},`;
    const tail = ')';
    return `0 0 2px ${lead}0.9${tail}, 0 0 4px ${lead}0.5${tail}, 0 0 8px ${lead}0.2${tail}`;
}};
  border: 1px ${(props) => props.theme.colors.primary.background} solid;
  padding: ${({ theme }) => theme.sizes.md.padding};
`;
            const SectionSubContent = qe.div `
  flex: 1;
  margin-bottom: 2px;
  padding: 0 ${({ theme: { sizes: { lg } } }) => lg.paddingX};
`;
            const RightContainer = qe.div `
  position: sticky;
  float: right;
  bottom: ${({ theme }) => theme.sizes.md.marginY};;
`;

            const LoginError = (props) => {
                const { messageId, unit } = props;
                const { errorMessage, sendId } = useErrors(unit);
                const hasLastError = sendId === messageId && errorMessage !== null;
                if (!hasLastError) {
                    return null;
                }
                return (react.createElement("div", null, errorMessage));
            };

            const Login$1 = (props) => {
                const { unit } = props;
                const [lastSubmit, setLastSubmit] = react.useState(null);
                const [messageId, setMessageId] = react.useState(null);
                const [isOAuthLoading, setIsOAuthLoading] = react.useState(false);
                const [token, setToken] = react.useState();
                const { sendId } = useErrors(unit);
                react.useEffect(() => {
                    if (sendId === messageId) {
                        setIsOAuthLoading(false);
                    }
                }, [sendId]);
                const handleTokenSubmit = () => {
                    if (token) {
                        setLastSubmit('pat');
                        if (unit === 'github') {
                            const id = runtime.send({ type: 'github/AUTHENTICATE_REQUEST', token });
                            setMessageId(id);
                            return;
                        }
                        const id = runtime.send({ type: 'jira/AUTHENTICATE_REQUEST', token });
                        setMessageId(id);
                    }
                };
                const handleOAuthClick = () => {
                    setIsOAuthLoading(true);
                    setLastSubmit('oauth');
                    if (unit === 'github') {
                        const id = runtime.send({ type: 'github/AUTHENTICATE_REQUEST' });
                        setMessageId(id);
                        return;
                    }
                    const id = runtime.send({ type: 'jira/AUTHENTICATE_REQUEST' });
                    setMessageId(id);
                };
                const unitName = (unit) => {
                    switch (unit) {
                        case 'github': return 'Github';
                        case 'jira': return 'Atlassian';
                        default: return 'Service';
                    }
                };
                return (react.createElement(react.Fragment, null,
                    react.createElement(Section$1, null,
                        react.createElement(SectionTitle, null, "Login"),
                        react.createElement(SectionContent, { flexRow: true },
                            react.createElement(SectionSubSection, null,
                                react.createElement(SectionSubTitle, null, "OAuth"),
                                react.createElement(SectionSubContent, null,
                                    react.createElement(LoadingButton, { block: true, isLoading: isOAuthLoading, onClick: handleOAuthClick, size: "lg" },
                                        "Authorize through ",
                                        unitName(unit)),
                                    lastSubmit === 'oauth' &&
                                        react.createElement(LoginError, { messageId: messageId, unit: unit }))),
                            react.createElement(SectionSubSection, null,
                                react.createElement(SectionSubTitle, null, "Personal Access Token"),
                                react.createElement(SectionSubContent, null,
                                    react.createElement(Input$1, { maxSize: 50, onReactChange: setToken, inline: true }),
                                    react.createElement(LoadingButton, { onClick: handleTokenSubmit, isDisabled: !token || token.length === 0 }, "Submit"),
                                    lastSubmit === 'pat' &&
                                        react.createElement(LoginError, { messageId: messageId, unit: unit })))))));
            };

            const Logout = (props) => {
                const { handleClickLogout } = props;
                return (react.createElement(RightContainer, null,
                    react.createElement(Button, { onClick: handleClickLogout, label: "Logout" })));
            };

            function _classCallCheck$8(instance, Constructor) {
              if (!(instance instanceof Constructor)) {
                throw new TypeError("Cannot call a class as a function");
              }
            }

            function _defineProperties$8(target, props) {
              for (var i = 0; i < props.length; i++) {
                var descriptor = props[i];
                descriptor.enumerable = descriptor.enumerable || false;
                descriptor.configurable = true;
                if ("value" in descriptor) descriptor.writable = true;
                Object.defineProperty(target, descriptor.key, descriptor);
              }
            }

            function _createClass$8(Constructor, protoProps, staticProps) {
              if (protoProps) _defineProperties$8(Constructor.prototype, protoProps);
              if (staticProps) _defineProperties$8(Constructor, staticProps);
              return Constructor;
            }

            function _typeof$2(obj) {
              "@babel/helpers - typeof";

              if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") {
                _typeof$2 = function _typeof(obj) {
                  return typeof obj;
                };
              } else {
                _typeof$2 = function _typeof(obj) {
                  return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj;
                };
              }

              return _typeof$2(obj);
            }

            function _assertThisInitialized(self) {
              if (self === void 0) {
                throw new ReferenceError("this hasn't been initialised - super() hasn't been called");
              }

              return self;
            }

            function _possibleConstructorReturn(self, call) {
              if (call && (_typeof$2(call) === "object" || typeof call === "function")) {
                return call;
              }

              return _assertThisInitialized(self);
            }

            function _getPrototypeOf(o) {
              _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf(o) {
                return o.__proto__ || Object.getPrototypeOf(o);
              };
              return _getPrototypeOf(o);
            }

            function _setPrototypeOf(o, p) {
              _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) {
                o.__proto__ = p;
                return o;
              };

              return _setPrototypeOf(o, p);
            }

            function _inherits(subClass, superClass) {
              if (typeof superClass !== "function" && superClass !== null) {
                throw new TypeError("Super expression must either be null or a function");
              }

              subClass.prototype = Object.create(superClass && superClass.prototype, {
                constructor: {
                  value: subClass,
                  writable: true,
                  configurable: true
                }
              });
              if (superClass) _setPrototypeOf(subClass, superClass);
            }

            function _defineProperty$6(obj, key, value) {
              if (key in obj) {
                Object.defineProperty(obj, key, {
                  value: value,
                  enumerable: true,
                  configurable: true,
                  writable: true
                });
              } else {
                obj[key] = value;
              }

              return obj;
            }

            /**
             * Copyright (c) 2013-present, Facebook, Inc.
             *
             * This source code is licensed under the MIT license found in the
             * LICENSE file in the root directory of this source tree.
             */

            function componentWillMount() {
              // Call this.constructor.gDSFP to support sub-classes.
              var state = this.constructor.getDerivedStateFromProps(this.props, this.state);
              if (state !== null && state !== undefined) {
                this.setState(state);
              }
            }

            function componentWillReceiveProps(nextProps) {
              // Call this.constructor.gDSFP to support sub-classes.
              // Use the setState() updater to ensure state isn't stale in certain edge cases.
              function updater(prevState) {
                var state = this.constructor.getDerivedStateFromProps(nextProps, prevState);
                return state !== null && state !== undefined ? state : null;
              }
              // Binding "this" is important for shallow renderer support.
              this.setState(updater.bind(this));
            }

            function componentWillUpdate(nextProps, nextState) {
              try {
                var prevProps = this.props;
                var prevState = this.state;
                this.props = nextProps;
                this.state = nextState;
                this.__reactInternalSnapshotFlag = true;
                this.__reactInternalSnapshot = this.getSnapshotBeforeUpdate(
                  prevProps,
                  prevState
                );
              } finally {
                this.props = prevProps;
                this.state = prevState;
              }
            }

            // React may warn about cWM/cWRP/cWU methods being deprecated.
            // Add a flag to suppress these warnings for this special case.
            componentWillMount.__suppressDeprecationWarning = true;
            componentWillReceiveProps.__suppressDeprecationWarning = true;
            componentWillUpdate.__suppressDeprecationWarning = true;

            function polyfill(Component) {
              var prototype = Component.prototype;

              if (!prototype || !prototype.isReactComponent) {
                throw new Error('Can only polyfill class components');
              }

              if (
                typeof Component.getDerivedStateFromProps !== 'function' &&
                typeof prototype.getSnapshotBeforeUpdate !== 'function'
              ) {
                return Component;
              }

              // If new component APIs are defined, "unsafe" lifecycles won't be called.
              // Error if any of these lifecycles are present,
              // Because they would work differently between older and newer (16.3+) versions of React.
              var foundWillMountName = null;
              var foundWillReceivePropsName = null;
              var foundWillUpdateName = null;
              if (typeof prototype.componentWillMount === 'function') {
                foundWillMountName = 'componentWillMount';
              } else if (typeof prototype.UNSAFE_componentWillMount === 'function') {
                foundWillMountName = 'UNSAFE_componentWillMount';
              }
              if (typeof prototype.componentWillReceiveProps === 'function') {
                foundWillReceivePropsName = 'componentWillReceiveProps';
              } else if (typeof prototype.UNSAFE_componentWillReceiveProps === 'function') {
                foundWillReceivePropsName = 'UNSAFE_componentWillReceiveProps';
              }
              if (typeof prototype.componentWillUpdate === 'function') {
                foundWillUpdateName = 'componentWillUpdate';
              } else if (typeof prototype.UNSAFE_componentWillUpdate === 'function') {
                foundWillUpdateName = 'UNSAFE_componentWillUpdate';
              }
              if (
                foundWillMountName !== null ||
                foundWillReceivePropsName !== null ||
                foundWillUpdateName !== null
              ) {
                var componentName = Component.displayName || Component.name;
                var newApiName =
                  typeof Component.getDerivedStateFromProps === 'function'
                    ? 'getDerivedStateFromProps()'
                    : 'getSnapshotBeforeUpdate()';

                throw Error(
                  'Unsafe legacy lifecycles will not be called for components using new component APIs.\n\n' +
                    componentName +
                    ' uses ' +
                    newApiName +
                    ' but also contains the following legacy lifecycles:' +
                    (foundWillMountName !== null ? '\n  ' + foundWillMountName : '') +
                    (foundWillReceivePropsName !== null
                      ? '\n  ' + foundWillReceivePropsName
                      : '') +
                    (foundWillUpdateName !== null ? '\n  ' + foundWillUpdateName : '') +
                    '\n\nThe above lifecycles should be removed. Learn more about this warning here:\n' +
                    'https://fb.me/react-async-component-lifecycle-hooks'
                );
              }

              // React <= 16.2 does not support static getDerivedStateFromProps.
              // As a workaround, use cWM and cWRP to invoke the new static lifecycle.
              // Newer versions of React will ignore these lifecycles if gDSFP exists.
              if (typeof Component.getDerivedStateFromProps === 'function') {
                prototype.componentWillMount = componentWillMount;
                prototype.componentWillReceiveProps = componentWillReceiveProps;
              }

              // React <= 16.2 does not support getSnapshotBeforeUpdate.
              // As a workaround, use cWU to invoke the new lifecycle.
              // Newer versions of React will ignore that lifecycle if gSBU exists.
              if (typeof prototype.getSnapshotBeforeUpdate === 'function') {
                if (typeof prototype.componentDidUpdate !== 'function') {
                  throw new Error(
                    'Cannot polyfill getSnapshotBeforeUpdate() for components that do not define componentDidUpdate() on the prototype'
                  );
                }

                prototype.componentWillUpdate = componentWillUpdate;

                var componentDidUpdate = prototype.componentDidUpdate;

                prototype.componentDidUpdate = function componentDidUpdatePolyfill(
                  prevProps,
                  prevState,
                  maybeSnapshot
                ) {
                  // 16.3+ will not execute our will-update method;
                  // It will pass a snapshot value to did-update though.
                  // Older versions will require our polyfilled will-update value.
                  // We need to handle both cases, but can't just check for the presence of "maybeSnapshot",
                  // Because for <= 15.x versions this might be a "prevContext" object.
                  // We also can't just check "__reactInternalSnapshot",
                  // Because get-snapshot might return a falsy value.
                  // So check for the explicit __reactInternalSnapshotFlag flag to determine behavior.
                  var snapshot = this.__reactInternalSnapshotFlag
                    ? this.__reactInternalSnapshot
                    : maybeSnapshot;

                  componentDidUpdate.call(this, prevProps, prevState, snapshot);
                };
              }

              return Component;
            }

            function _extends() {
              _extends = Object.assign || function (target) {
                for (var i = 1; i < arguments.length; i++) {
                  var source = arguments[i];

                  for (var key in source) {
                    if (Object.prototype.hasOwnProperty.call(source, key)) {
                      target[key] = source[key];
                    }
                  }
                }

                return target;
              };

              return _extends.apply(this, arguments);
            }

            function toVal(mix) {
            	var k, y, str='';

            	if (typeof mix === 'string' || typeof mix === 'number') {
            		str += mix;
            	} else if (typeof mix === 'object') {
            		if (Array.isArray(mix)) {
            			for (k=0; k < mix.length; k++) {
            				if (mix[k]) {
            					if (y = toVal(mix[k])) {
            						str && (str += ' ');
            						str += y;
            					}
            				}
            			}
            		} else {
            			for (k in mix) {
            				if (mix[k]) {
            					str && (str += ' ');
            					str += k;
            				}
            			}
            		}
            	}

            	return str;
            }

            function clsx () {
            	var i=0, tmp, x, str='';
            	while (i < arguments.length) {
            		if (tmp = arguments[i++]) {
            			if (x = toVal(tmp)) {
            				str && (str += ' ');
            				str += x;
            			}
            		}
            	}
            	return str;
            }

            /**
             * Helper method that determines when to recalculate row or column metadata.
             */
            function calculateSizeAndPositionDataAndUpdateScrollOffset(_ref) {
              var cellCount = _ref.cellCount,
                  cellSize = _ref.cellSize,
                  computeMetadataCallback = _ref.computeMetadataCallback,
                  computeMetadataCallbackProps = _ref.computeMetadataCallbackProps,
                  nextCellsCount = _ref.nextCellsCount,
                  nextCellSize = _ref.nextCellSize,
                  nextScrollToIndex = _ref.nextScrollToIndex,
                  scrollToIndex = _ref.scrollToIndex,
                  updateScrollOffsetForScrollToIndex = _ref.updateScrollOffsetForScrollToIndex;

              // Don't compare cell sizes if they are functions because inline functions would cause infinite loops.
              // In that event users should use the manual recompute methods to inform of changes.
              if (cellCount !== nextCellsCount || (typeof cellSize === 'number' || typeof nextCellSize === 'number') && cellSize !== nextCellSize) {
                computeMetadataCallback(computeMetadataCallbackProps); // Updated cell metadata may have hidden the previous scrolled-to item.
                // In this case we should also update the scrollTop to ensure it stays visible.

                if (scrollToIndex >= 0 && scrollToIndex === nextScrollToIndex) {
                  updateScrollOffsetForScrollToIndex();
                }
              }
            }

            function _objectWithoutPropertiesLoose$1(source, excluded) {
              if (source == null) return {};
              var target = {};
              var sourceKeys = Object.keys(source);
              var key, i;

              for (i = 0; i < sourceKeys.length; i++) {
                key = sourceKeys[i];
                if (excluded.indexOf(key) >= 0) continue;
                target[key] = source[key];
              }

              return target;
            }

            function _objectWithoutProperties$1(source, excluded) {
              if (source == null) return {};
              var target = _objectWithoutPropertiesLoose$1(source, excluded);
              var key, i;

              if (Object.getOwnPropertySymbols) {
                var sourceSymbolKeys = Object.getOwnPropertySymbols(source);

                for (i = 0; i < sourceSymbolKeys.length; i++) {
                  key = sourceSymbolKeys[i];
                  if (excluded.indexOf(key) >= 0) continue;
                  if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue;
                  target[key] = source[key];
                }
              }

              return target;
            }

            /**
             * Copyright (c) 2013-present, Facebook, Inc.
             *
             * This source code is licensed under the MIT license found in the
             * LICENSE file in the root directory of this source tree.
             */

            var ReactPropTypesSecret$1 = 'SECRET_DO_NOT_PASS_THIS_OR_YOU_WILL_BE_FIRED';

            var ReactPropTypesSecret_1 = ReactPropTypesSecret$1;

            var printWarning$1 = function() {};

            {
              var ReactPropTypesSecret = ReactPropTypesSecret_1;
              var loggedTypeFailures = {};
              var has$1 = Function.call.bind(Object.prototype.hasOwnProperty);

              printWarning$1 = function(text) {
                var message = 'Warning: ' + text;
                if (typeof console !== 'undefined') {
                  console.error(message);
                }
                try {
                  // --- Welcome to debugging React ---
                  // This error was thrown as a convenience so that you can use this stack
                  // to find the callsite that caused this warning to fire.
                  throw new Error(message);
                } catch (x) {}
              };
            }

            /**
             * Assert that the values match with the type specs.
             * Error messages are memorized and will only be shown once.
             *
             * @param {object} typeSpecs Map of name to a ReactPropType
             * @param {object} values Runtime values that need to be type-checked
             * @param {string} location e.g. "prop", "context", "child context"
             * @param {string} componentName Name of the component for error messages.
             * @param {?Function} getStack Returns the component stack.
             * @private
             */
            function checkPropTypes(typeSpecs, values, location, componentName, getStack) {
              {
                for (var typeSpecName in typeSpecs) {
                  if (has$1(typeSpecs, typeSpecName)) {
                    var error;
                    // Prop type validation may throw. In case they do, we don't want to
                    // fail the render phase where it didn't fail before. So we log it.
                    // After these have been cleaned up, we'll let them throw.
                    try {
                      // This is intentionally an invariant that gets caught. It's the same
                      // behavior as without this statement except with a better message.
                      if (typeof typeSpecs[typeSpecName] !== 'function') {
                        var err = Error(
                          (componentName || 'React class') + ': ' + location + ' type `' + typeSpecName + '` is invalid; ' +
                          'it must be a function, usually from the `prop-types` package, but received `' + typeof typeSpecs[typeSpecName] + '`.'
                        );
                        err.name = 'Invariant Violation';
                        throw err;
                      }
                      error = typeSpecs[typeSpecName](values, typeSpecName, componentName, location, null, ReactPropTypesSecret);
                    } catch (ex) {
                      error = ex;
                    }
                    if (error && !(error instanceof Error)) {
                      printWarning$1(
                        (componentName || 'React class') + ': type specification of ' +
                        location + ' `' + typeSpecName + '` is invalid; the type checker ' +
                        'function must return `null` or an `Error` but returned a ' + typeof error + '. ' +
                        'You may have forgotten to pass an argument to the type checker ' +
                        'creator (arrayOf, instanceOf, objectOf, oneOf, oneOfType, and ' +
                        'shape all require an argument).'
                      );
                    }
                    if (error instanceof Error && !(error.message in loggedTypeFailures)) {
                      // Only monitor this failure once because there tends to be a lot of the
                      // same error.
                      loggedTypeFailures[error.message] = true;

                      var stack = getStack ? getStack() : '';

                      printWarning$1(
                        'Failed ' + location + ' type: ' + error.message + (stack != null ? stack : '')
                      );
                    }
                  }
                }
              }
            }

            /**
             * Resets warning cache when testing.
             *
             * @private
             */
            checkPropTypes.resetWarningCache = function() {
              {
                loggedTypeFailures = {};
              }
            };

            var checkPropTypes_1 = checkPropTypes;

            var has = Function.call.bind(Object.prototype.hasOwnProperty);
            var printWarning = function() {};

            {
              printWarning = function(text) {
                var message = 'Warning: ' + text;
                if (typeof console !== 'undefined') {
                  console.error(message);
                }
                try {
                  // --- Welcome to debugging React ---
                  // This error was thrown as a convenience so that you can use this stack
                  // to find the callsite that caused this warning to fire.
                  throw new Error(message);
                } catch (x) {}
              };
            }

            function emptyFunctionThatReturnsNull() {
              return null;
            }

            var factoryWithTypeCheckers = function(isValidElement, throwOnDirectAccess) {
              /* global Symbol */
              var ITERATOR_SYMBOL = typeof Symbol === 'function' && Symbol.iterator;
              var FAUX_ITERATOR_SYMBOL = '@@iterator'; // Before Symbol spec.

              /**
               * Returns the iterator method function contained on the iterable object.
               *
               * Be sure to invoke the function with the iterable as context:
               *
               *     var iteratorFn = getIteratorFn(myIterable);
               *     if (iteratorFn) {
               *       var iterator = iteratorFn.call(myIterable);
               *       ...
               *     }
               *
               * @param {?object} maybeIterable
               * @return {?function}
               */
              function getIteratorFn(maybeIterable) {
                var iteratorFn = maybeIterable && (ITERATOR_SYMBOL && maybeIterable[ITERATOR_SYMBOL] || maybeIterable[FAUX_ITERATOR_SYMBOL]);
                if (typeof iteratorFn === 'function') {
                  return iteratorFn;
                }
              }

              /**
               * Collection of methods that allow declaration and validation of props that are
               * supplied to React components. Example usage:
               *
               *   var Props = require('ReactPropTypes');
               *   var MyArticle = React.createClass({
               *     propTypes: {
               *       // An optional string prop named "description".
               *       description: Props.string,
               *
               *       // A required enum prop named "category".
               *       category: Props.oneOf(['News','Photos']).isRequired,
               *
               *       // A prop named "dialog" that requires an instance of Dialog.
               *       dialog: Props.instanceOf(Dialog).isRequired
               *     },
               *     render: function() { ... }
               *   });
               *
               * A more formal specification of how these methods are used:
               *
               *   type := array|bool|func|object|number|string|oneOf([...])|instanceOf(...)
               *   decl := ReactPropTypes.{type}(.isRequired)?
               *
               * Each and every declaration produces a function with the same signature. This
               * allows the creation of custom validation functions. For example:
               *
               *  var MyLink = React.createClass({
               *    propTypes: {
               *      // An optional string or URI prop named "href".
               *      href: function(props, propName, componentName) {
               *        var propValue = props[propName];
               *        if (propValue != null && typeof propValue !== 'string' &&
               *            !(propValue instanceof URI)) {
               *          return new Error(
               *            'Expected a string or an URI for ' + propName + ' in ' +
               *            componentName
               *          );
               *        }
               *      }
               *    },
               *    render: function() {...}
               *  });
               *
               * @internal
               */

              var ANONYMOUS = '<<anonymous>>';

              // Important!
              // Keep this list in sync with production version in `./factoryWithThrowingShims.js`.
              var ReactPropTypes = {
                array: createPrimitiveTypeChecker('array'),
                bool: createPrimitiveTypeChecker('boolean'),
                func: createPrimitiveTypeChecker('function'),
                number: createPrimitiveTypeChecker('number'),
                object: createPrimitiveTypeChecker('object'),
                string: createPrimitiveTypeChecker('string'),
                symbol: createPrimitiveTypeChecker('symbol'),

                any: createAnyTypeChecker(),
                arrayOf: createArrayOfTypeChecker,
                element: createElementTypeChecker(),
                elementType: createElementTypeTypeChecker(),
                instanceOf: createInstanceTypeChecker,
                node: createNodeChecker(),
                objectOf: createObjectOfTypeChecker,
                oneOf: createEnumTypeChecker,
                oneOfType: createUnionTypeChecker,
                shape: createShapeTypeChecker,
                exact: createStrictShapeTypeChecker,
              };

              /**
               * inlined Object.is polyfill to avoid requiring consumers ship their own
               * https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object/is
               */
              /*eslint-disable no-self-compare*/
              function is(x, y) {
                // SameValue algorithm
                if (x === y) {
                  // Steps 1-5, 7-10
                  // Steps 6.b-6.e: +0 != -0
                  return x !== 0 || 1 / x === 1 / y;
                } else {
                  // Step 6.a: NaN == NaN
                  return x !== x && y !== y;
                }
              }
              /*eslint-enable no-self-compare*/

              /**
               * We use an Error-like object for backward compatibility as people may call
               * PropTypes directly and inspect their output. However, we don't use real
               * Errors anymore. We don't inspect their stack anyway, and creating them
               * is prohibitively expensive if they are created too often, such as what
               * happens in oneOfType() for any type before the one that matched.
               */
              function PropTypeError(message) {
                this.message = message;
                this.stack = '';
              }
              // Make `instanceof Error` still work for returned errors.
              PropTypeError.prototype = Error.prototype;

              function createChainableTypeChecker(validate) {
                {
                  var manualPropTypeCallCache = {};
                  var manualPropTypeWarningCount = 0;
                }
                function checkType(isRequired, props, propName, componentName, location, propFullName, secret) {
                  componentName = componentName || ANONYMOUS;
                  propFullName = propFullName || propName;

                  if (secret !== ReactPropTypesSecret_1) {
                    if (throwOnDirectAccess) {
                      // New behavior only for users of `prop-types` package
                      var err = new Error(
                        'Calling PropTypes validators directly is not supported by the `prop-types` package. ' +
                        'Use `PropTypes.checkPropTypes()` to call them. ' +
                        'Read more at http://fb.me/use-check-prop-types'
                      );
                      err.name = 'Invariant Violation';
                      throw err;
                    } else if (typeof console !== 'undefined') {
                      // Old behavior for people using React.PropTypes
                      var cacheKey = componentName + ':' + propName;
                      if (
                        !manualPropTypeCallCache[cacheKey] &&
                        // Avoid spamming the console because they are often not actionable except for lib authors
                        manualPropTypeWarningCount < 3
                      ) {
                        printWarning(
                          'You are manually calling a React.PropTypes validation ' +
                          'function for the `' + propFullName + '` prop on `' + componentName  + '`. This is deprecated ' +
                          'and will throw in the standalone `prop-types` package. ' +
                          'You may be seeing this warning due to a third-party PropTypes ' +
                          'library. See https://fb.me/react-warning-dont-call-proptypes ' + 'for details.'
                        );
                        manualPropTypeCallCache[cacheKey] = true;
                        manualPropTypeWarningCount++;
                      }
                    }
                  }
                  if (props[propName] == null) {
                    if (isRequired) {
                      if (props[propName] === null) {
                        return new PropTypeError('The ' + location + ' `' + propFullName + '` is marked as required ' + ('in `' + componentName + '`, but its value is `null`.'));
                      }
                      return new PropTypeError('The ' + location + ' `' + propFullName + '` is marked as required in ' + ('`' + componentName + '`, but its value is `undefined`.'));
                    }
                    return null;
                  } else {
                    return validate(props, propName, componentName, location, propFullName);
                  }
                }

                var chainedCheckType = checkType.bind(null, false);
                chainedCheckType.isRequired = checkType.bind(null, true);

                return chainedCheckType;
              }

              function createPrimitiveTypeChecker(expectedType) {
                function validate(props, propName, componentName, location, propFullName, secret) {
                  var propValue = props[propName];
                  var propType = getPropType(propValue);
                  if (propType !== expectedType) {
                    // `propValue` being instance of, say, date/regexp, pass the 'object'
                    // check, but we can offer a more precise error message here rather than
                    // 'of type `object`'.
                    var preciseType = getPreciseType(propValue);

                    return new PropTypeError('Invalid ' + location + ' `' + propFullName + '` of type ' + ('`' + preciseType + '` supplied to `' + componentName + '`, expected ') + ('`' + expectedType + '`.'));
                  }
                  return null;
                }
                return createChainableTypeChecker(validate);
              }

              function createAnyTypeChecker() {
                return createChainableTypeChecker(emptyFunctionThatReturnsNull);
              }

              function createArrayOfTypeChecker(typeChecker) {
                function validate(props, propName, componentName, location, propFullName) {
                  if (typeof typeChecker !== 'function') {
                    return new PropTypeError('Property `' + propFullName + '` of component `' + componentName + '` has invalid PropType notation inside arrayOf.');
                  }
                  var propValue = props[propName];
                  if (!Array.isArray(propValue)) {
                    var propType = getPropType(propValue);
                    return new PropTypeError('Invalid ' + location + ' `' + propFullName + '` of type ' + ('`' + propType + '` supplied to `' + componentName + '`, expected an array.'));
                  }
                  for (var i = 0; i < propValue.length; i++) {
                    var error = typeChecker(propValue, i, componentName, location, propFullName + '[' + i + ']', ReactPropTypesSecret_1);
                    if (error instanceof Error) {
                      return error;
                    }
                  }
                  return null;
                }
                return createChainableTypeChecker(validate);
              }

              function createElementTypeChecker() {
                function validate(props, propName, componentName, location, propFullName) {
                  var propValue = props[propName];
                  if (!isValidElement(propValue)) {
                    var propType = getPropType(propValue);
                    return new PropTypeError('Invalid ' + location + ' `' + propFullName + '` of type ' + ('`' + propType + '` supplied to `' + componentName + '`, expected a single ReactElement.'));
                  }
                  return null;
                }
                return createChainableTypeChecker(validate);
              }

              function createElementTypeTypeChecker() {
                function validate(props, propName, componentName, location, propFullName) {
                  var propValue = props[propName];
                  if (!reactIs.isValidElementType(propValue)) {
                    var propType = getPropType(propValue);
                    return new PropTypeError('Invalid ' + location + ' `' + propFullName + '` of type ' + ('`' + propType + '` supplied to `' + componentName + '`, expected a single ReactElement type.'));
                  }
                  return null;
                }
                return createChainableTypeChecker(validate);
              }

              function createInstanceTypeChecker(expectedClass) {
                function validate(props, propName, componentName, location, propFullName) {
                  if (!(props[propName] instanceof expectedClass)) {
                    var expectedClassName = expectedClass.name || ANONYMOUS;
                    var actualClassName = getClassName(props[propName]);
                    return new PropTypeError('Invalid ' + location + ' `' + propFullName + '` of type ' + ('`' + actualClassName + '` supplied to `' + componentName + '`, expected ') + ('instance of `' + expectedClassName + '`.'));
                  }
                  return null;
                }
                return createChainableTypeChecker(validate);
              }

              function createEnumTypeChecker(expectedValues) {
                if (!Array.isArray(expectedValues)) {
                  {
                    if (arguments.length > 1) {
                      printWarning(
                        'Invalid arguments supplied to oneOf, expected an array, got ' + arguments.length + ' arguments. ' +
                        'A common mistake is to write oneOf(x, y, z) instead of oneOf([x, y, z]).'
                      );
                    } else {
                      printWarning('Invalid argument supplied to oneOf, expected an array.');
                    }
                  }
                  return emptyFunctionThatReturnsNull;
                }

                function validate(props, propName, componentName, location, propFullName) {
                  var propValue = props[propName];
                  for (var i = 0; i < expectedValues.length; i++) {
                    if (is(propValue, expectedValues[i])) {
                      return null;
                    }
                  }

                  var valuesString = JSON.stringify(expectedValues, function replacer(key, value) {
                    var type = getPreciseType(value);
                    if (type === 'symbol') {
                      return String(value);
                    }
                    return value;
                  });
                  return new PropTypeError('Invalid ' + location + ' `' + propFullName + '` of value `' + String(propValue) + '` ' + ('supplied to `' + componentName + '`, expected one of ' + valuesString + '.'));
                }
                return createChainableTypeChecker(validate);
              }

              function createObjectOfTypeChecker(typeChecker) {
                function validate(props, propName, componentName, location, propFullName) {
                  if (typeof typeChecker !== 'function') {
                    return new PropTypeError('Property `' + propFullName + '` of component `' + componentName + '` has invalid PropType notation inside objectOf.');
                  }
                  var propValue = props[propName];
                  var propType = getPropType(propValue);
                  if (propType !== 'object') {
                    return new PropTypeError('Invalid ' + location + ' `' + propFullName + '` of type ' + ('`' + propType + '` supplied to `' + componentName + '`, expected an object.'));
                  }
                  for (var key in propValue) {
                    if (has(propValue, key)) {
                      var error = typeChecker(propValue, key, componentName, location, propFullName + '.' + key, ReactPropTypesSecret_1);
                      if (error instanceof Error) {
                        return error;
                      }
                    }
                  }
                  return null;
                }
                return createChainableTypeChecker(validate);
              }

              function createUnionTypeChecker(arrayOfTypeCheckers) {
                if (!Array.isArray(arrayOfTypeCheckers)) {
                  printWarning('Invalid argument supplied to oneOfType, expected an instance of array.') ;
                  return emptyFunctionThatReturnsNull;
                }

                for (var i = 0; i < arrayOfTypeCheckers.length; i++) {
                  var checker = arrayOfTypeCheckers[i];
                  if (typeof checker !== 'function') {
                    printWarning(
                      'Invalid argument supplied to oneOfType. Expected an array of check functions, but ' +
                      'received ' + getPostfixForTypeWarning(checker) + ' at index ' + i + '.'
                    );
                    return emptyFunctionThatReturnsNull;
                  }
                }

                function validate(props, propName, componentName, location, propFullName) {
                  for (var i = 0; i < arrayOfTypeCheckers.length; i++) {
                    var checker = arrayOfTypeCheckers[i];
                    if (checker(props, propName, componentName, location, propFullName, ReactPropTypesSecret_1) == null) {
                      return null;
                    }
                  }

                  return new PropTypeError('Invalid ' + location + ' `' + propFullName + '` supplied to ' + ('`' + componentName + '`.'));
                }
                return createChainableTypeChecker(validate);
              }

              function createNodeChecker() {
                function validate(props, propName, componentName, location, propFullName) {
                  if (!isNode(props[propName])) {
                    return new PropTypeError('Invalid ' + location + ' `' + propFullName + '` supplied to ' + ('`' + componentName + '`, expected a ReactNode.'));
                  }
                  return null;
                }
                return createChainableTypeChecker(validate);
              }

              function createShapeTypeChecker(shapeTypes) {
                function validate(props, propName, componentName, location, propFullName) {
                  var propValue = props[propName];
                  var propType = getPropType(propValue);
                  if (propType !== 'object') {
                    return new PropTypeError('Invalid ' + location + ' `' + propFullName + '` of type `' + propType + '` ' + ('supplied to `' + componentName + '`, expected `object`.'));
                  }
                  for (var key in shapeTypes) {
                    var checker = shapeTypes[key];
                    if (!checker) {
                      continue;
                    }
                    var error = checker(propValue, key, componentName, location, propFullName + '.' + key, ReactPropTypesSecret_1);
                    if (error) {
                      return error;
                    }
                  }
                  return null;
                }
                return createChainableTypeChecker(validate);
              }

              function createStrictShapeTypeChecker(shapeTypes) {
                function validate(props, propName, componentName, location, propFullName) {
                  var propValue = props[propName];
                  var propType = getPropType(propValue);
                  if (propType !== 'object') {
                    return new PropTypeError('Invalid ' + location + ' `' + propFullName + '` of type `' + propType + '` ' + ('supplied to `' + componentName + '`, expected `object`.'));
                  }
                  // We need to check all keys in case some are required but missing from
                  // props.
                  var allKeys = objectAssign({}, props[propName], shapeTypes);
                  for (var key in allKeys) {
                    var checker = shapeTypes[key];
                    if (!checker) {
                      return new PropTypeError(
                        'Invalid ' + location + ' `' + propFullName + '` key `' + key + '` supplied to `' + componentName + '`.' +
                        '\nBad object: ' + JSON.stringify(props[propName], null, '  ') +
                        '\nValid keys: ' +  JSON.stringify(Object.keys(shapeTypes), null, '  ')
                      );
                    }
                    var error = checker(propValue, key, componentName, location, propFullName + '.' + key, ReactPropTypesSecret_1);
                    if (error) {
                      return error;
                    }
                  }
                  return null;
                }

                return createChainableTypeChecker(validate);
              }

              function isNode(propValue) {
                switch (typeof propValue) {
                  case 'number':
                  case 'string':
                  case 'undefined':
                    return true;
                  case 'boolean':
                    return !propValue;
                  case 'object':
                    if (Array.isArray(propValue)) {
                      return propValue.every(isNode);
                    }
                    if (propValue === null || isValidElement(propValue)) {
                      return true;
                    }

                    var iteratorFn = getIteratorFn(propValue);
                    if (iteratorFn) {
                      var iterator = iteratorFn.call(propValue);
                      var step;
                      if (iteratorFn !== propValue.entries) {
                        while (!(step = iterator.next()).done) {
                          if (!isNode(step.value)) {
                            return false;
                          }
                        }
                      } else {
                        // Iterator will provide entry [k,v] tuples rather than values.
                        while (!(step = iterator.next()).done) {
                          var entry = step.value;
                          if (entry) {
                            if (!isNode(entry[1])) {
                              return false;
                            }
                          }
                        }
                      }
                    } else {
                      return false;
                    }

                    return true;
                  default:
                    return false;
                }
              }

              function isSymbol(propType, propValue) {
                // Native Symbol.
                if (propType === 'symbol') {
                  return true;
                }

                // falsy value can't be a Symbol
                if (!propValue) {
                  return false;
                }

                // 19.4.3.5 Symbol.prototype[@@toStringTag] === 'Symbol'
                if (propValue['@@toStringTag'] === 'Symbol') {
                  return true;
                }

                // Fallback for non-spec compliant Symbols which are polyfilled.
                if (typeof Symbol === 'function' && propValue instanceof Symbol) {
                  return true;
                }

                return false;
              }

              // Equivalent of `typeof` but with special handling for array and regexp.
              function getPropType(propValue) {
                var propType = typeof propValue;
                if (Array.isArray(propValue)) {
                  return 'array';
                }
                if (propValue instanceof RegExp) {
                  // Old webkits (at least until Android 4.0) return 'function' rather than
                  // 'object' for typeof a RegExp. We'll normalize this here so that /bla/
                  // passes PropTypes.object.
                  return 'object';
                }
                if (isSymbol(propType, propValue)) {
                  return 'symbol';
                }
                return propType;
              }

              // This handles more types than `getPropType`. Only used for error messages.
              // See `createPrimitiveTypeChecker`.
              function getPreciseType(propValue) {
                if (typeof propValue === 'undefined' || propValue === null) {
                  return '' + propValue;
                }
                var propType = getPropType(propValue);
                if (propType === 'object') {
                  if (propValue instanceof Date) {
                    return 'date';
                  } else if (propValue instanceof RegExp) {
                    return 'regexp';
                  }
                }
                return propType;
              }

              // Returns a string that is postfixed to a warning about an invalid type.
              // For example, "undefined" or "of type array"
              function getPostfixForTypeWarning(value) {
                var type = getPreciseType(value);
                switch (type) {
                  case 'array':
                  case 'object':
                    return 'an ' + type;
                  case 'boolean':
                  case 'date':
                  case 'regexp':
                    return 'a ' + type;
                  default:
                    return type;
                }
              }

              // Returns class name of the object, if any.
              function getClassName(propValue) {
                if (!propValue.constructor || !propValue.constructor.name) {
                  return ANONYMOUS;
                }
                return propValue.constructor.name;
              }

              ReactPropTypes.checkPropTypes = checkPropTypes_1;
              ReactPropTypes.resetWarningCache = checkPropTypes_1.resetWarningCache;
              ReactPropTypes.PropTypes = ReactPropTypes;

              return ReactPropTypes;
            };

            var propTypes = createCommonjsModule(function (module) {
            {
              var ReactIs = reactIs;

              // By explicitly using `prop-types` you are opting into new development behavior.
              // http://fb.me/prop-types-in-prod
              var throwOnDirectAccess = true;
              module.exports = factoryWithTypeCheckers(ReactIs.isElement, throwOnDirectAccess);
            }
            });

            ({
              "columnIndex": propTypes.number.isRequired,
              "rowIndex": propTypes.number.isRequired
            });
            ({
              "columnIndex": propTypes.number.isRequired,
              "isScrolling": propTypes.bool.isRequired,
              "isVisible": propTypes.bool.isRequired,
              "key": propTypes.string.isRequired,
              "parent": propTypes.object.isRequired,
              "rowIndex": propTypes.number.isRequired,
              "style": propTypes.object.isRequired
            });
            var bpfrpt_proptype_CellRenderer = propTypes.func;
            propTypes.objectOf(propTypes.node.isRequired);
            propTypes.objectOf(propTypes.object.isRequired);
            ({
              "cellCache": propTypes.objectOf(propTypes.node.isRequired).isRequired,
              "cellRenderer": propTypes.func.isRequired,
              "columnSizeAndPositionManager": function columnSizeAndPositionManager() {
                return (typeof ScalingCellSizeAndPositionManager === "function" ? propTypes.instanceOf(ScalingCellSizeAndPositionManager).isRequired : propTypes.any.isRequired).apply(this, arguments);
              },
              "columnStartIndex": propTypes.number.isRequired,
              "columnStopIndex": propTypes.number.isRequired,
              "deferredMeasurementCache": propTypes.object,
              "horizontalOffsetAdjustment": propTypes.number.isRequired,
              "isScrolling": propTypes.bool.isRequired,
              "isScrollingOptOut": propTypes.bool.isRequired,
              "parent": propTypes.object.isRequired,
              "rowSizeAndPositionManager": function rowSizeAndPositionManager() {
                return (typeof ScalingCellSizeAndPositionManager === "function" ? propTypes.instanceOf(ScalingCellSizeAndPositionManager).isRequired : propTypes.any.isRequired).apply(this, arguments);
              },
              "rowStartIndex": propTypes.number.isRequired,
              "rowStopIndex": propTypes.number.isRequired,
              "scrollLeft": propTypes.number.isRequired,
              "scrollTop": propTypes.number.isRequired,
              "styleCache": propTypes.objectOf(propTypes.object.isRequired).isRequired,
              "verticalOffsetAdjustment": propTypes.number.isRequired,
              "visibleColumnIndices": propTypes.object.isRequired,
              "visibleRowIndices": propTypes.object.isRequired
            });
            var bpfrpt_proptype_CellRangeRenderer = propTypes.func;
            propTypes.func;
            var bpfrpt_proptype_CellSize = propTypes.oneOfType([propTypes.func, propTypes.number]);
            var bpfrpt_proptype_NoContentRenderer = propTypes.func;
            ({
              "clientHeight": propTypes.number.isRequired,
              "clientWidth": propTypes.number.isRequired,
              "scrollHeight": propTypes.number.isRequired,
              "scrollLeft": propTypes.number.isRequired,
              "scrollTop": propTypes.number.isRequired,
              "scrollWidth": propTypes.number.isRequired
            });
            ({
              "horizontal": propTypes.bool.isRequired,
              "vertical": propTypes.bool.isRequired,
              "size": propTypes.number.isRequired
            });
            ({
              "columnOverscanStartIndex": propTypes.number.isRequired,
              "columnOverscanStopIndex": propTypes.number.isRequired,
              "columnStartIndex": propTypes.number.isRequired,
              "columnStopIndex": propTypes.number.isRequired,
              "rowOverscanStartIndex": propTypes.number.isRequired,
              "rowOverscanStopIndex": propTypes.number.isRequired,
              "rowStartIndex": propTypes.number.isRequired,
              "rowStopIndex": propTypes.number.isRequired
            });
            ({
              // One of SCROLL_DIRECTION_HORIZONTAL or SCROLL_DIRECTION_VERTICAL
              "direction": propTypes.oneOf(["horizontal", "vertical"]).isRequired,
              // One of SCROLL_DIRECTION_BACKWARD or SCROLL_DIRECTION_FORWARD
              "scrollDirection": propTypes.oneOf([-1, 1]).isRequired,
              // Number of rows or columns in the current axis
              "cellCount": propTypes.number.isRequired,
              // Maximum number of cells to over-render in either direction
              "overscanCellsCount": propTypes.number.isRequired,
              // Begin of range of visible cells
              "startIndex": propTypes.number.isRequired,
              // End of range of visible cells
              "stopIndex": propTypes.number.isRequired
            });
            ({
              "overscanStartIndex": propTypes.number.isRequired,
              "overscanStopIndex": propTypes.number.isRequired
            });
            var bpfrpt_proptype_OverscanIndicesGetter = propTypes.func;
            var bpfrpt_proptype_Alignment = propTypes.oneOf(["auto", "end", "start", "center"]);
            ({
              "start": propTypes.number,
              "stop": propTypes.number
            });

            /**
             * Just-in-time calculates and caches size and position information for a collection of cells.
             */
            var CellSizeAndPositionManager =
            /*#__PURE__*/
            function () {
              // Cache of size and position data for cells, mapped by cell index.
              // Note that invalid values may exist in this map so only rely on cells up to this._lastMeasuredIndex
              // Measurements for cells up to this index can be trusted; cells afterward should be estimated.
              // Used in deferred mode to track which cells have been queued for measurement.
              function CellSizeAndPositionManager(_ref) {
                var cellCount = _ref.cellCount,
                    cellSizeGetter = _ref.cellSizeGetter,
                    estimatedCellSize = _ref.estimatedCellSize;

                _classCallCheck$8(this, CellSizeAndPositionManager);

                _defineProperty$6(this, "_cellSizeAndPositionData", {});

                _defineProperty$6(this, "_lastMeasuredIndex", -1);

                _defineProperty$6(this, "_lastBatchedIndex", -1);

                _defineProperty$6(this, "_cellCount", void 0);

                _defineProperty$6(this, "_cellSizeGetter", void 0);

                _defineProperty$6(this, "_estimatedCellSize", void 0);

                this._cellSizeGetter = cellSizeGetter;
                this._cellCount = cellCount;
                this._estimatedCellSize = estimatedCellSize;
              }

              _createClass$8(CellSizeAndPositionManager, [{
                key: "areOffsetsAdjusted",
                value: function areOffsetsAdjusted() {
                  return false;
                }
              }, {
                key: "configure",
                value: function configure(_ref2) {
                  var cellCount = _ref2.cellCount,
                      estimatedCellSize = _ref2.estimatedCellSize,
                      cellSizeGetter = _ref2.cellSizeGetter;
                  this._cellCount = cellCount;
                  this._estimatedCellSize = estimatedCellSize;
                  this._cellSizeGetter = cellSizeGetter;
                }
              }, {
                key: "getCellCount",
                value: function getCellCount() {
                  return this._cellCount;
                }
              }, {
                key: "getEstimatedCellSize",
                value: function getEstimatedCellSize() {
                  return this._estimatedCellSize;
                }
              }, {
                key: "getLastMeasuredIndex",
                value: function getLastMeasuredIndex() {
                  return this._lastMeasuredIndex;
                }
              }, {
                key: "getOffsetAdjustment",
                value: function getOffsetAdjustment() {
                  return 0;
                }
                /**
                 * This method returns the size and position for the cell at the specified index.
                 * It just-in-time calculates (or used cached values) for cells leading up to the index.
                 */

              }, {
                key: "getSizeAndPositionOfCell",
                value: function getSizeAndPositionOfCell(index) {
                  if (index < 0 || index >= this._cellCount) {
                    throw Error("Requested index ".concat(index, " is outside of range 0..").concat(this._cellCount));
                  }

                  if (index > this._lastMeasuredIndex) {
                    var lastMeasuredCellSizeAndPosition = this.getSizeAndPositionOfLastMeasuredCell();
                    var offset = lastMeasuredCellSizeAndPosition.offset + lastMeasuredCellSizeAndPosition.size;

                    for (var i = this._lastMeasuredIndex + 1; i <= index; i++) {
                      var size = this._cellSizeGetter({
                        index: i
                      }); // undefined or NaN probably means a logic error in the size getter.
                      // null means we're using CellMeasurer and haven't yet measured a given index.


                      if (size === undefined || isNaN(size)) {
                        throw Error("Invalid size returned for cell ".concat(i, " of value ").concat(size));
                      } else if (size === null) {
                        this._cellSizeAndPositionData[i] = {
                          offset: offset,
                          size: 0
                        };
                        this._lastBatchedIndex = index;
                      } else {
                        this._cellSizeAndPositionData[i] = {
                          offset: offset,
                          size: size
                        };
                        offset += size;
                        this._lastMeasuredIndex = index;
                      }
                    }
                  }

                  return this._cellSizeAndPositionData[index];
                }
              }, {
                key: "getSizeAndPositionOfLastMeasuredCell",
                value: function getSizeAndPositionOfLastMeasuredCell() {
                  return this._lastMeasuredIndex >= 0 ? this._cellSizeAndPositionData[this._lastMeasuredIndex] : {
                    offset: 0,
                    size: 0
                  };
                }
                /**
                 * Total size of all cells being measured.
                 * This value will be completely estimated initially.
                 * As cells are measured, the estimate will be updated.
                 */

              }, {
                key: "getTotalSize",
                value: function getTotalSize() {
                  var lastMeasuredCellSizeAndPosition = this.getSizeAndPositionOfLastMeasuredCell();
                  var totalSizeOfMeasuredCells = lastMeasuredCellSizeAndPosition.offset + lastMeasuredCellSizeAndPosition.size;
                  var numUnmeasuredCells = this._cellCount - this._lastMeasuredIndex - 1;
                  var totalSizeOfUnmeasuredCells = numUnmeasuredCells * this._estimatedCellSize;
                  return totalSizeOfMeasuredCells + totalSizeOfUnmeasuredCells;
                }
                /**
                 * Determines a new offset that ensures a certain cell is visible, given the current offset.
                 * If the cell is already visible then the current offset will be returned.
                 * If the current offset is too great or small, it will be adjusted just enough to ensure the specified index is visible.
                 *
                 * @param align Desired alignment within container; one of "auto" (default), "start", or "end"
                 * @param containerSize Size (width or height) of the container viewport
                 * @param currentOffset Container's current (x or y) offset
                 * @param totalSize Total size (width or height) of all cells
                 * @return Offset to use to ensure the specified cell is visible
                 */

              }, {
                key: "getUpdatedOffsetForIndex",
                value: function getUpdatedOffsetForIndex(_ref3) {
                  var _ref3$align = _ref3.align,
                      align = _ref3$align === void 0 ? 'auto' : _ref3$align,
                      containerSize = _ref3.containerSize,
                      currentOffset = _ref3.currentOffset,
                      targetIndex = _ref3.targetIndex;

                  if (containerSize <= 0) {
                    return 0;
                  }

                  var datum = this.getSizeAndPositionOfCell(targetIndex);
                  var maxOffset = datum.offset;
                  var minOffset = maxOffset - containerSize + datum.size;
                  var idealOffset;

                  switch (align) {
                    case 'start':
                      idealOffset = maxOffset;
                      break;

                    case 'end':
                      idealOffset = minOffset;
                      break;

                    case 'center':
                      idealOffset = maxOffset - (containerSize - datum.size) / 2;
                      break;

                    default:
                      idealOffset = Math.max(minOffset, Math.min(maxOffset, currentOffset));
                      break;
                  }

                  var totalSize = this.getTotalSize();
                  return Math.max(0, Math.min(totalSize - containerSize, idealOffset));
                }
              }, {
                key: "getVisibleCellRange",
                value: function getVisibleCellRange(params) {
                  var containerSize = params.containerSize,
                      offset = params.offset;
                  var totalSize = this.getTotalSize();

                  if (totalSize === 0) {
                    return {};
                  }

                  var maxOffset = offset + containerSize;

                  var start = this._findNearestCell(offset);

                  var datum = this.getSizeAndPositionOfCell(start);
                  offset = datum.offset + datum.size;
                  var stop = start;

                  while (offset < maxOffset && stop < this._cellCount - 1) {
                    stop++;
                    offset += this.getSizeAndPositionOfCell(stop).size;
                  }

                  return {
                    start: start,
                    stop: stop
                  };
                }
                /**
                 * Clear all cached values for cells after the specified index.
                 * This method should be called for any cell that has changed its size.
                 * It will not immediately perform any calculations; they'll be performed the next time getSizeAndPositionOfCell() is called.
                 */

              }, {
                key: "resetCell",
                value: function resetCell(index) {
                  this._lastMeasuredIndex = Math.min(this._lastMeasuredIndex, index - 1);
                }
              }, {
                key: "_binarySearch",
                value: function _binarySearch(high, low, offset) {
                  while (low <= high) {
                    var middle = low + Math.floor((high - low) / 2);
                    var currentOffset = this.getSizeAndPositionOfCell(middle).offset;

                    if (currentOffset === offset) {
                      return middle;
                    } else if (currentOffset < offset) {
                      low = middle + 1;
                    } else if (currentOffset > offset) {
                      high = middle - 1;
                    }
                  }

                  if (low > 0) {
                    return low - 1;
                  } else {
                    return 0;
                  }
                }
              }, {
                key: "_exponentialSearch",
                value: function _exponentialSearch(index, offset) {
                  var interval = 1;

                  while (index < this._cellCount && this.getSizeAndPositionOfCell(index).offset < offset) {
                    index += interval;
                    interval *= 2;
                  }

                  return this._binarySearch(Math.min(index, this._cellCount - 1), Math.floor(index / 2), offset);
                }
                /**
                 * Searches for the cell (index) nearest the specified offset.
                 *
                 * If no exact match is found the next lowest cell index will be returned.
                 * This allows partially visible cells (with offsets just before/above the fold) to be visible.
                 */

              }, {
                key: "_findNearestCell",
                value: function _findNearestCell(offset) {
                  if (isNaN(offset)) {
                    throw Error("Invalid offset ".concat(offset, " specified"));
                  } // Our search algorithms find the nearest match at or below the specified offset.
                  // So make sure the offset is at least 0 or no match will be found.


                  offset = Math.max(0, offset);
                  var lastMeasuredCellSizeAndPosition = this.getSizeAndPositionOfLastMeasuredCell();
                  var lastMeasuredIndex = Math.max(0, this._lastMeasuredIndex);

                  if (lastMeasuredCellSizeAndPosition.offset >= offset) {
                    // If we've already measured cells within this range just use a binary search as it's faster.
                    return this._binarySearch(lastMeasuredIndex, 0, offset);
                  } else {
                    // If we haven't yet measured this high, fallback to an exponential search with an inner binary search.
                    // The exponential search avoids pre-computing sizes for the full set of cells as a binary search would.
                    // The overall complexity for this approach is O(log n).
                    return this._exponentialSearch(lastMeasuredIndex, offset);
                  }
                }
              }]);

              return CellSizeAndPositionManager;
            }();

            var DEFAULT_MAX_ELEMENT_SIZE = 1500000;
            var CHROME_MAX_ELEMENT_SIZE = 1.67771e7;

            var isBrowser$1 = function isBrowser() {
              return typeof window !== 'undefined';
            };

            var isChrome = function isChrome() {
              return !!window.chrome;
            };

            var getMaxElementSize = function getMaxElementSize() {
              if (isBrowser$1()) {
                if (isChrome()) {
                  return CHROME_MAX_ELEMENT_SIZE;
                }
              }

              return DEFAULT_MAX_ELEMENT_SIZE;
            };

            /**
             * Extends CellSizeAndPositionManager and adds scaling behavior for lists that are too large to fit within a browser's native limits.
             */
            var ScalingCellSizeAndPositionManager =
            /*#__PURE__*/
            function () {
              function ScalingCellSizeAndPositionManager(_ref) {
                var _ref$maxScrollSize = _ref.maxScrollSize,
                    maxScrollSize = _ref$maxScrollSize === void 0 ? getMaxElementSize() : _ref$maxScrollSize,
                    params = _objectWithoutProperties$1(_ref, ["maxScrollSize"]);

                _classCallCheck$8(this, ScalingCellSizeAndPositionManager);

                _defineProperty$6(this, "_cellSizeAndPositionManager", void 0);

                _defineProperty$6(this, "_maxScrollSize", void 0);

                // Favor composition over inheritance to simplify IE10 support
                this._cellSizeAndPositionManager = new CellSizeAndPositionManager(params);
                this._maxScrollSize = maxScrollSize;
              }

              _createClass$8(ScalingCellSizeAndPositionManager, [{
                key: "areOffsetsAdjusted",
                value: function areOffsetsAdjusted() {
                  return this._cellSizeAndPositionManager.getTotalSize() > this._maxScrollSize;
                }
              }, {
                key: "configure",
                value: function configure(params) {
                  this._cellSizeAndPositionManager.configure(params);
                }
              }, {
                key: "getCellCount",
                value: function getCellCount() {
                  return this._cellSizeAndPositionManager.getCellCount();
                }
              }, {
                key: "getEstimatedCellSize",
                value: function getEstimatedCellSize() {
                  return this._cellSizeAndPositionManager.getEstimatedCellSize();
                }
              }, {
                key: "getLastMeasuredIndex",
                value: function getLastMeasuredIndex() {
                  return this._cellSizeAndPositionManager.getLastMeasuredIndex();
                }
                /**
                 * Number of pixels a cell at the given position (offset) should be shifted in order to fit within the scaled container.
                 * The offset passed to this function is scaled (safe) as well.
                 */

              }, {
                key: "getOffsetAdjustment",
                value: function getOffsetAdjustment(_ref2) {
                  var containerSize = _ref2.containerSize,
                      offset = _ref2.offset;

                  var totalSize = this._cellSizeAndPositionManager.getTotalSize();

                  var safeTotalSize = this.getTotalSize();

                  var offsetPercentage = this._getOffsetPercentage({
                    containerSize: containerSize,
                    offset: offset,
                    totalSize: safeTotalSize
                  });

                  return Math.round(offsetPercentage * (safeTotalSize - totalSize));
                }
              }, {
                key: "getSizeAndPositionOfCell",
                value: function getSizeAndPositionOfCell(index) {
                  return this._cellSizeAndPositionManager.getSizeAndPositionOfCell(index);
                }
              }, {
                key: "getSizeAndPositionOfLastMeasuredCell",
                value: function getSizeAndPositionOfLastMeasuredCell() {
                  return this._cellSizeAndPositionManager.getSizeAndPositionOfLastMeasuredCell();
                }
                /** See CellSizeAndPositionManager#getTotalSize */

              }, {
                key: "getTotalSize",
                value: function getTotalSize() {
                  return Math.min(this._maxScrollSize, this._cellSizeAndPositionManager.getTotalSize());
                }
                /** See CellSizeAndPositionManager#getUpdatedOffsetForIndex */

              }, {
                key: "getUpdatedOffsetForIndex",
                value: function getUpdatedOffsetForIndex(_ref3) {
                  var _ref3$align = _ref3.align,
                      align = _ref3$align === void 0 ? 'auto' : _ref3$align,
                      containerSize = _ref3.containerSize,
                      currentOffset = _ref3.currentOffset,
                      targetIndex = _ref3.targetIndex;
                  currentOffset = this._safeOffsetToOffset({
                    containerSize: containerSize,
                    offset: currentOffset
                  });

                  var offset = this._cellSizeAndPositionManager.getUpdatedOffsetForIndex({
                    align: align,
                    containerSize: containerSize,
                    currentOffset: currentOffset,
                    targetIndex: targetIndex
                  });

                  return this._offsetToSafeOffset({
                    containerSize: containerSize,
                    offset: offset
                  });
                }
                /** See CellSizeAndPositionManager#getVisibleCellRange */

              }, {
                key: "getVisibleCellRange",
                value: function getVisibleCellRange(_ref4) {
                  var containerSize = _ref4.containerSize,
                      offset = _ref4.offset;
                  offset = this._safeOffsetToOffset({
                    containerSize: containerSize,
                    offset: offset
                  });
                  return this._cellSizeAndPositionManager.getVisibleCellRange({
                    containerSize: containerSize,
                    offset: offset
                  });
                }
              }, {
                key: "resetCell",
                value: function resetCell(index) {
                  this._cellSizeAndPositionManager.resetCell(index);
                }
              }, {
                key: "_getOffsetPercentage",
                value: function _getOffsetPercentage(_ref5) {
                  var containerSize = _ref5.containerSize,
                      offset = _ref5.offset,
                      totalSize = _ref5.totalSize;
                  return totalSize <= containerSize ? 0 : offset / (totalSize - containerSize);
                }
              }, {
                key: "_offsetToSafeOffset",
                value: function _offsetToSafeOffset(_ref6) {
                  var containerSize = _ref6.containerSize,
                      offset = _ref6.offset;

                  var totalSize = this._cellSizeAndPositionManager.getTotalSize();

                  var safeTotalSize = this.getTotalSize();

                  if (totalSize === safeTotalSize) {
                    return offset;
                  } else {
                    var offsetPercentage = this._getOffsetPercentage({
                      containerSize: containerSize,
                      offset: offset,
                      totalSize: totalSize
                    });

                    return Math.round(offsetPercentage * (safeTotalSize - containerSize));
                  }
                }
              }, {
                key: "_safeOffsetToOffset",
                value: function _safeOffsetToOffset(_ref7) {
                  var containerSize = _ref7.containerSize,
                      offset = _ref7.offset;

                  var totalSize = this._cellSizeAndPositionManager.getTotalSize();

                  var safeTotalSize = this.getTotalSize();

                  if (totalSize === safeTotalSize) {
                    return offset;
                  } else {
                    var offsetPercentage = this._getOffsetPercentage({
                      containerSize: containerSize,
                      offset: offset,
                      totalSize: safeTotalSize
                    });

                    return Math.round(offsetPercentage * (totalSize - containerSize));
                  }
                }
              }]);

              return ScalingCellSizeAndPositionManager;
            }();

            /**
             * Helper utility that updates the specified callback whenever any of the specified indices have changed.
             */
            function createCallbackMemoizer() {
              var requireAllKeys = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : true;
              var cachedIndices = {};
              return function (_ref) {
                var callback = _ref.callback,
                    indices = _ref.indices;
                var keys = Object.keys(indices);
                var allInitialized = !requireAllKeys || keys.every(function (key) {
                  var value = indices[key];
                  return Array.isArray(value) ? value.length > 0 : value >= 0;
                });
                var indexChanged = keys.length !== Object.keys(cachedIndices).length || keys.some(function (key) {
                  var cachedValue = cachedIndices[key];
                  var value = indices[key];
                  return Array.isArray(value) ? cachedValue.join(',') !== value.join(',') : cachedValue !== value;
                });
                cachedIndices = indices;

                if (allInitialized && indexChanged) {
                  callback(indices);
                }
              };
            }

            var SCROLL_DIRECTION_BACKWARD = -1;
            var SCROLL_DIRECTION_FORWARD$1 = 1;
            /**
             * Calculates the number of cells to overscan before and after a specified range.
             * This function ensures that overscanning doesn't exceed the available cells.
             */

            function defaultOverscanIndicesGetter$1(_ref) {
              var cellCount = _ref.cellCount,
                  overscanCellsCount = _ref.overscanCellsCount,
                  scrollDirection = _ref.scrollDirection,
                  startIndex = _ref.startIndex,
                  stopIndex = _ref.stopIndex;

              if (scrollDirection === SCROLL_DIRECTION_FORWARD$1) {
                return {
                  overscanStartIndex: Math.max(0, startIndex),
                  overscanStopIndex: Math.min(cellCount - 1, stopIndex + overscanCellsCount)
                };
              } else {
                return {
                  overscanStartIndex: Math.max(0, startIndex - overscanCellsCount),
                  overscanStopIndex: Math.min(cellCount - 1, stopIndex)
                };
              }
            }

            /**
             * Helper function that determines when to update scroll offsets to ensure that a scroll-to-index remains visible.
             * This function also ensures that the scroll ofset isn't past the last column/row of cells.
             */

            function updateScrollIndexHelper(_ref) {
              var cellSize = _ref.cellSize,
                  cellSizeAndPositionManager = _ref.cellSizeAndPositionManager,
                  previousCellsCount = _ref.previousCellsCount,
                  previousCellSize = _ref.previousCellSize,
                  previousScrollToAlignment = _ref.previousScrollToAlignment,
                  previousScrollToIndex = _ref.previousScrollToIndex,
                  previousSize = _ref.previousSize,
                  scrollOffset = _ref.scrollOffset,
                  scrollToAlignment = _ref.scrollToAlignment,
                  scrollToIndex = _ref.scrollToIndex,
                  size = _ref.size,
                  sizeJustIncreasedFromZero = _ref.sizeJustIncreasedFromZero,
                  updateScrollIndexCallback = _ref.updateScrollIndexCallback;
              var cellCount = cellSizeAndPositionManager.getCellCount();
              var hasScrollToIndex = scrollToIndex >= 0 && scrollToIndex < cellCount;
              var sizeHasChanged = size !== previousSize || sizeJustIncreasedFromZero || !previousCellSize || typeof cellSize === 'number' && cellSize !== previousCellSize; // If we have a new scroll target OR if height/row-height has changed,
              // We should ensure that the scroll target is visible.

              if (hasScrollToIndex && (sizeHasChanged || scrollToAlignment !== previousScrollToAlignment || scrollToIndex !== previousScrollToIndex)) {
                updateScrollIndexCallback(scrollToIndex); // If we don't have a selected item but list size or number of children have decreased,
                // Make sure we aren't scrolled too far past the current content.
              } else if (!hasScrollToIndex && cellCount > 0 && (size < previousSize || cellCount < previousCellsCount)) {
                // We need to ensure that the current scroll offset is still within the collection's range.
                // To do this, we don't need to measure everything; CellMeasurer would perform poorly.
                // Just check to make sure we're still okay.
                // Only adjust the scroll position if we've scrolled below the last set of rows.
                if (scrollOffset > cellSizeAndPositionManager.getTotalSize() - size) {
                  updateScrollIndexCallback(cellCount - 1);
                }
              }
            }

            /**
             * Default implementation of cellRangeRenderer used by Grid.
             * This renderer supports cell-caching while the user is scrolling.
             */
            function defaultCellRangeRenderer(_ref) {
              var cellCache = _ref.cellCache,
                  cellRenderer = _ref.cellRenderer,
                  columnSizeAndPositionManager = _ref.columnSizeAndPositionManager,
                  columnStartIndex = _ref.columnStartIndex,
                  columnStopIndex = _ref.columnStopIndex,
                  deferredMeasurementCache = _ref.deferredMeasurementCache,
                  horizontalOffsetAdjustment = _ref.horizontalOffsetAdjustment,
                  isScrolling = _ref.isScrolling,
                  isScrollingOptOut = _ref.isScrollingOptOut,
                  parent = _ref.parent,
                  rowSizeAndPositionManager = _ref.rowSizeAndPositionManager,
                  rowStartIndex = _ref.rowStartIndex,
                  rowStopIndex = _ref.rowStopIndex,
                  styleCache = _ref.styleCache,
                  verticalOffsetAdjustment = _ref.verticalOffsetAdjustment,
                  visibleColumnIndices = _ref.visibleColumnIndices,
                  visibleRowIndices = _ref.visibleRowIndices;
              var renderedCells = []; // Browsers have native size limits for elements (eg Chrome 33M pixels, IE 1.5M pixes).
              // User cannot scroll beyond these size limitations.
              // In order to work around this, ScalingCellSizeAndPositionManager compresses offsets.
              // We should never cache styles for compressed offsets though as this can lead to bugs.
              // See issue #576 for more.

              var areOffsetsAdjusted = columnSizeAndPositionManager.areOffsetsAdjusted() || rowSizeAndPositionManager.areOffsetsAdjusted();
              var canCacheStyle = !isScrolling && !areOffsetsAdjusted;

              for (var rowIndex = rowStartIndex; rowIndex <= rowStopIndex; rowIndex++) {
                var rowDatum = rowSizeAndPositionManager.getSizeAndPositionOfCell(rowIndex);

                for (var columnIndex = columnStartIndex; columnIndex <= columnStopIndex; columnIndex++) {
                  var columnDatum = columnSizeAndPositionManager.getSizeAndPositionOfCell(columnIndex);
                  var isVisible = columnIndex >= visibleColumnIndices.start && columnIndex <= visibleColumnIndices.stop && rowIndex >= visibleRowIndices.start && rowIndex <= visibleRowIndices.stop;
                  var key = "".concat(rowIndex, "-").concat(columnIndex);
                  var style = void 0; // Cache style objects so shallow-compare doesn't re-render unnecessarily.

                  if (canCacheStyle && styleCache[key]) {
                    style = styleCache[key];
                  } else {
                    // In deferred mode, cells will be initially rendered before we know their size.
                    // Don't interfere with CellMeasurer's measurements by setting an invalid size.
                    if (deferredMeasurementCache && !deferredMeasurementCache.has(rowIndex, columnIndex)) {
                      // Position not-yet-measured cells at top/left 0,0,
                      // And give them width/height of 'auto' so they can grow larger than the parent Grid if necessary.
                      // Positioning them further to the right/bottom influences their measured size.
                      style = {
                        height: 'auto',
                        left: 0,
                        position: 'absolute',
                        top: 0,
                        width: 'auto'
                      };
                    } else {
                      style = {
                        height: rowDatum.size,
                        left: columnDatum.offset + horizontalOffsetAdjustment,
                        position: 'absolute',
                        top: rowDatum.offset + verticalOffsetAdjustment,
                        width: columnDatum.size
                      };
                      styleCache[key] = style;
                    }
                  }

                  var cellRendererParams = {
                    columnIndex: columnIndex,
                    isScrolling: isScrolling,
                    isVisible: isVisible,
                    key: key,
                    parent: parent,
                    rowIndex: rowIndex,
                    style: style
                  };
                  var renderedCell = void 0; // Avoid re-creating cells while scrolling.
                  // This can lead to the same cell being created many times and can cause performance issues for "heavy" cells.
                  // If a scroll is in progress- cache and reuse cells.
                  // This cache will be thrown away once scrolling completes.
                  // However if we are scaling scroll positions and sizes, we should also avoid caching.
                  // This is because the offset changes slightly as scroll position changes and caching leads to stale values.
                  // For more info refer to issue #395
                  //
                  // If isScrollingOptOut is specified, we always cache cells.
                  // For more info refer to issue #1028

                  if ((isScrollingOptOut || isScrolling) && !horizontalOffsetAdjustment && !verticalOffsetAdjustment) {
                    if (!cellCache[key]) {
                      cellCache[key] = cellRenderer(cellRendererParams);
                    }

                    renderedCell = cellCache[key]; // If the user is no longer scrolling, don't cache cells.
                    // This makes dynamic cell content difficult for users and would also lead to a heavier memory footprint.
                  } else {
                    renderedCell = cellRenderer(cellRendererParams);
                  }

                  if (renderedCell == null || renderedCell === false) {
                    continue;
                  }

                  {
                    warnAboutMissingStyle(parent, renderedCell);
                  }

                  renderedCells.push(renderedCell);
                }
              }

              return renderedCells;
            }

            function warnAboutMissingStyle(parent, renderedCell) {
              {
                if (renderedCell) {
                  // If the direct child is a CellMeasurer, then we should check its child
                  // See issue #611
                  if (renderedCell.type && renderedCell.type.__internalCellMeasurerFlag) {
                    renderedCell = renderedCell.props.children;
                  }

                  if (renderedCell && renderedCell.props && renderedCell.props.style === undefined && parent.__warnedAboutMissingStyle !== true) {
                    parent.__warnedAboutMissingStyle = true;
                    console.warn('Rendered cell should include style property for positioning.');
                  }
                }
              }
            }

            var canUseDOM = !!(typeof window !== 'undefined' && window.document && window.document.createElement);

            var size;
            function scrollbarSize(recalc) {
              if (!size && size !== 0 || recalc) {
                if (canUseDOM) {
                  var scrollDiv = document.createElement('div');
                  scrollDiv.style.position = 'absolute';
                  scrollDiv.style.top = '-9999px';
                  scrollDiv.style.width = '50px';
                  scrollDiv.style.height = '50px';
                  scrollDiv.style.overflow = 'scroll';
                  document.body.appendChild(scrollDiv);
                  size = scrollDiv.offsetWidth - scrollDiv.clientWidth;
                  document.body.removeChild(scrollDiv);
                }
              }

              return size;
            }

            // Properly handle server-side rendering.
            var win;

            if (typeof window !== 'undefined') {
              win = window;
            } else if (typeof self !== 'undefined') {
              win = self;
            } else {
              win = {};
            } // requestAnimationFrame() shim by Paul Irish
            // http://paulirish.com/2011/requestanimationframe-for-smart-animating/


            var request = win.requestAnimationFrame || win.webkitRequestAnimationFrame || win.mozRequestAnimationFrame || win.oRequestAnimationFrame || win.msRequestAnimationFrame || function (callback) {
              return win.setTimeout(callback, 1000 / 60);
            };

            var cancel = win.cancelAnimationFrame || win.webkitCancelAnimationFrame || win.mozCancelAnimationFrame || win.oCancelAnimationFrame || win.msCancelAnimationFrame || function (id) {
              win.clearTimeout(id);
            };

            var raf = request;
            var caf = cancel;

            ({
              "id": propTypes.number.isRequired
            });
            var cancelAnimationTimeout = function cancelAnimationTimeout(frame) {
              return caf(frame.id);
            };
            /**
             * Recursively calls requestAnimationFrame until a specified delay has been met or exceeded.
             * When the delay time has been reached the function you're timing out will be called.
             *
             * Credit: Joe Lambert (https://gist.github.com/joelambert/1002116#file-requesttimeout-js)
             */

            var requestAnimationTimeout = function requestAnimationTimeout(callback, delay) {
              var start; // wait for end of processing current event handler, because event handler may be long

              Promise.resolve().then(function () {
                start = Date.now();
              });

              var timeout = function timeout() {
                if (Date.now() - start >= delay) {
                  callback.call();
                } else {
                  frame.id = raf(timeout);
                }
              };

              var frame = {
                id: raf(timeout)
              };
              return frame;
            };

            var _class$6, _temp$6;

            function ownKeys$c(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }

            function _objectSpread$c(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys$c(source, true).forEach(function (key) { _defineProperty$6(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys$c(source).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }
            /**
             * Specifies the number of milliseconds during which to disable pointer events while a scroll is in progress.
             * This improves performance and makes scrolling smoother.
             */

            var DEFAULT_SCROLLING_RESET_TIME_INTERVAL$1 = 150;
            /**
             * Controls whether the Grid updates the DOM element's scrollLeft/scrollTop based on the current state or just observes it.
             * This prevents Grid from interrupting mouse-wheel animations (see issue #2).
             */

            var SCROLL_POSITION_CHANGE_REASONS$1 = {
              OBSERVED: 'observed',
              REQUESTED: 'requested'
            };

            var renderNull = function renderNull() {
              return null;
            };

            /**
             * Renders tabular data with virtualization along the vertical and horizontal axes.
             * Row heights and column widths must be known ahead of time and specified as properties.
             */
            var Grid = (_temp$6 = _class$6 =
            /*#__PURE__*/
            function (_React$PureComponent) {
              _inherits(Grid, _React$PureComponent);

              // Invokes onSectionRendered callback only when start/stop row or column indices change
              function Grid(props) {
                var _this;

                _classCallCheck$8(this, Grid);

                _this = _possibleConstructorReturn(this, _getPrototypeOf(Grid).call(this, props));

                _defineProperty$6(_assertThisInitialized(_this), "_onGridRenderedMemoizer", createCallbackMemoizer());

                _defineProperty$6(_assertThisInitialized(_this), "_onScrollMemoizer", createCallbackMemoizer(false));

                _defineProperty$6(_assertThisInitialized(_this), "_deferredInvalidateColumnIndex", null);

                _defineProperty$6(_assertThisInitialized(_this), "_deferredInvalidateRowIndex", null);

                _defineProperty$6(_assertThisInitialized(_this), "_recomputeScrollLeftFlag", false);

                _defineProperty$6(_assertThisInitialized(_this), "_recomputeScrollTopFlag", false);

                _defineProperty$6(_assertThisInitialized(_this), "_horizontalScrollBarSize", 0);

                _defineProperty$6(_assertThisInitialized(_this), "_verticalScrollBarSize", 0);

                _defineProperty$6(_assertThisInitialized(_this), "_scrollbarPresenceChanged", false);

                _defineProperty$6(_assertThisInitialized(_this), "_scrollingContainer", void 0);

                _defineProperty$6(_assertThisInitialized(_this), "_childrenToDisplay", void 0);

                _defineProperty$6(_assertThisInitialized(_this), "_columnStartIndex", void 0);

                _defineProperty$6(_assertThisInitialized(_this), "_columnStopIndex", void 0);

                _defineProperty$6(_assertThisInitialized(_this), "_rowStartIndex", void 0);

                _defineProperty$6(_assertThisInitialized(_this), "_rowStopIndex", void 0);

                _defineProperty$6(_assertThisInitialized(_this), "_renderedColumnStartIndex", 0);

                _defineProperty$6(_assertThisInitialized(_this), "_renderedColumnStopIndex", 0);

                _defineProperty$6(_assertThisInitialized(_this), "_renderedRowStartIndex", 0);

                _defineProperty$6(_assertThisInitialized(_this), "_renderedRowStopIndex", 0);

                _defineProperty$6(_assertThisInitialized(_this), "_initialScrollTop", void 0);

                _defineProperty$6(_assertThisInitialized(_this), "_initialScrollLeft", void 0);

                _defineProperty$6(_assertThisInitialized(_this), "_disablePointerEventsTimeoutId", void 0);

                _defineProperty$6(_assertThisInitialized(_this), "_styleCache", {});

                _defineProperty$6(_assertThisInitialized(_this), "_cellCache", {});

                _defineProperty$6(_assertThisInitialized(_this), "_debounceScrollEndedCallback", function () {
                  _this._disablePointerEventsTimeoutId = null; // isScrolling is used to determine if we reset styleCache

                  _this.setState({
                    isScrolling: false,
                    needToResetStyleCache: false
                  });
                });

                _defineProperty$6(_assertThisInitialized(_this), "_invokeOnGridRenderedHelper", function () {
                  var onSectionRendered = _this.props.onSectionRendered;

                  _this._onGridRenderedMemoizer({
                    callback: onSectionRendered,
                    indices: {
                      columnOverscanStartIndex: _this._columnStartIndex,
                      columnOverscanStopIndex: _this._columnStopIndex,
                      columnStartIndex: _this._renderedColumnStartIndex,
                      columnStopIndex: _this._renderedColumnStopIndex,
                      rowOverscanStartIndex: _this._rowStartIndex,
                      rowOverscanStopIndex: _this._rowStopIndex,
                      rowStartIndex: _this._renderedRowStartIndex,
                      rowStopIndex: _this._renderedRowStopIndex
                    }
                  });
                });

                _defineProperty$6(_assertThisInitialized(_this), "_setScrollingContainerRef", function (ref) {
                  _this._scrollingContainer = ref;
                });

                _defineProperty$6(_assertThisInitialized(_this), "_onScroll", function (event) {
                  // In certain edge-cases React dispatches an onScroll event with an invalid target.scrollLeft / target.scrollTop.
                  // This invalid event can be detected by comparing event.target to this component's scrollable DOM element.
                  // See issue #404 for more information.
                  if (event.target === _this._scrollingContainer) {
                    _this.handleScrollEvent(event.target);
                  }
                });

                var columnSizeAndPositionManager = new ScalingCellSizeAndPositionManager({
                  cellCount: props.columnCount,
                  cellSizeGetter: function cellSizeGetter(params) {
                    return Grid._wrapSizeGetter(props.columnWidth)(params);
                  },
                  estimatedCellSize: Grid._getEstimatedColumnSize(props)
                });
                var rowSizeAndPositionManager = new ScalingCellSizeAndPositionManager({
                  cellCount: props.rowCount,
                  cellSizeGetter: function cellSizeGetter(params) {
                    return Grid._wrapSizeGetter(props.rowHeight)(params);
                  },
                  estimatedCellSize: Grid._getEstimatedRowSize(props)
                });
                _this.state = {
                  instanceProps: {
                    columnSizeAndPositionManager: columnSizeAndPositionManager,
                    rowSizeAndPositionManager: rowSizeAndPositionManager,
                    prevColumnWidth: props.columnWidth,
                    prevRowHeight: props.rowHeight,
                    prevColumnCount: props.columnCount,
                    prevRowCount: props.rowCount,
                    prevIsScrolling: props.isScrolling === true,
                    prevScrollToColumn: props.scrollToColumn,
                    prevScrollToRow: props.scrollToRow,
                    scrollbarSize: 0,
                    scrollbarSizeMeasured: false
                  },
                  isScrolling: false,
                  scrollDirectionHorizontal: SCROLL_DIRECTION_FORWARD$1,
                  scrollDirectionVertical: SCROLL_DIRECTION_FORWARD$1,
                  scrollLeft: 0,
                  scrollTop: 0,
                  scrollPositionChangeReason: null,
                  needToResetStyleCache: false
                };

                if (props.scrollToRow > 0) {
                  _this._initialScrollTop = _this._getCalculatedScrollTop(props, _this.state);
                }

                if (props.scrollToColumn > 0) {
                  _this._initialScrollLeft = _this._getCalculatedScrollLeft(props, _this.state);
                }

                return _this;
              }
              /**
               * Gets offsets for a given cell and alignment.
               */


              _createClass$8(Grid, [{
                key: "getOffsetForCell",
                value: function getOffsetForCell() {
                  var _ref = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {},
                      _ref$alignment = _ref.alignment,
                      alignment = _ref$alignment === void 0 ? this.props.scrollToAlignment : _ref$alignment,
                      _ref$columnIndex = _ref.columnIndex,
                      columnIndex = _ref$columnIndex === void 0 ? this.props.scrollToColumn : _ref$columnIndex,
                      _ref$rowIndex = _ref.rowIndex,
                      rowIndex = _ref$rowIndex === void 0 ? this.props.scrollToRow : _ref$rowIndex;

                  var offsetProps = _objectSpread$c({}, this.props, {
                    scrollToAlignment: alignment,
                    scrollToColumn: columnIndex,
                    scrollToRow: rowIndex
                  });

                  return {
                    scrollLeft: this._getCalculatedScrollLeft(offsetProps),
                    scrollTop: this._getCalculatedScrollTop(offsetProps)
                  };
                }
                /**
                 * Gets estimated total rows' height.
                 */

              }, {
                key: "getTotalRowsHeight",
                value: function getTotalRowsHeight() {
                  return this.state.instanceProps.rowSizeAndPositionManager.getTotalSize();
                }
                /**
                 * Gets estimated total columns' width.
                 */

              }, {
                key: "getTotalColumnsWidth",
                value: function getTotalColumnsWidth() {
                  return this.state.instanceProps.columnSizeAndPositionManager.getTotalSize();
                }
                /**
                 * This method handles a scroll event originating from an external scroll control.
                 * It's an advanced method and should probably not be used unless you're implementing a custom scroll-bar solution.
                 */

              }, {
                key: "handleScrollEvent",
                value: function handleScrollEvent(_ref2) {
                  var _ref2$scrollLeft = _ref2.scrollLeft,
                      scrollLeftParam = _ref2$scrollLeft === void 0 ? 0 : _ref2$scrollLeft,
                      _ref2$scrollTop = _ref2.scrollTop,
                      scrollTopParam = _ref2$scrollTop === void 0 ? 0 : _ref2$scrollTop;

                  // On iOS, we can arrive at negative offsets by swiping past the start.
                  // To prevent flicker here, we make playing in the negative offset zone cause nothing to happen.
                  if (scrollTopParam < 0) {
                    return;
                  } // Prevent pointer events from interrupting a smooth scroll


                  this._debounceScrollEnded();

                  var _this$props = this.props,
                      autoHeight = _this$props.autoHeight,
                      autoWidth = _this$props.autoWidth,
                      height = _this$props.height,
                      width = _this$props.width;
                  var instanceProps = this.state.instanceProps; // When this component is shrunk drastically, React dispatches a series of back-to-back scroll events,
                  // Gradually converging on a scrollTop that is within the bounds of the new, smaller height.
                  // This causes a series of rapid renders that is slow for long lists.
                  // We can avoid that by doing some simple bounds checking to ensure that scroll offsets never exceed their bounds.

                  var scrollbarSize = instanceProps.scrollbarSize;
                  var totalRowsHeight = instanceProps.rowSizeAndPositionManager.getTotalSize();
                  var totalColumnsWidth = instanceProps.columnSizeAndPositionManager.getTotalSize();
                  var scrollLeft = Math.min(Math.max(0, totalColumnsWidth - width + scrollbarSize), scrollLeftParam);
                  var scrollTop = Math.min(Math.max(0, totalRowsHeight - height + scrollbarSize), scrollTopParam); // Certain devices (like Apple touchpad) rapid-fire duplicate events.
                  // Don't force a re-render if this is the case.
                  // The mouse may move faster then the animation frame does.
                  // Use requestAnimationFrame to avoid over-updating.

                  if (this.state.scrollLeft !== scrollLeft || this.state.scrollTop !== scrollTop) {
                    // Track scrolling direction so we can more efficiently overscan rows to reduce empty space around the edges while scrolling.
                    // Don't change direction for an axis unless scroll offset has changed.
                    var scrollDirectionHorizontal = scrollLeft !== this.state.scrollLeft ? scrollLeft > this.state.scrollLeft ? SCROLL_DIRECTION_FORWARD$1 : SCROLL_DIRECTION_BACKWARD : this.state.scrollDirectionHorizontal;
                    var scrollDirectionVertical = scrollTop !== this.state.scrollTop ? scrollTop > this.state.scrollTop ? SCROLL_DIRECTION_FORWARD$1 : SCROLL_DIRECTION_BACKWARD : this.state.scrollDirectionVertical;
                    var newState = {
                      isScrolling: true,
                      scrollDirectionHorizontal: scrollDirectionHorizontal,
                      scrollDirectionVertical: scrollDirectionVertical,
                      scrollPositionChangeReason: SCROLL_POSITION_CHANGE_REASONS$1.OBSERVED
                    };

                    if (!autoHeight) {
                      newState.scrollTop = scrollTop;
                    }

                    if (!autoWidth) {
                      newState.scrollLeft = scrollLeft;
                    }

                    newState.needToResetStyleCache = false;
                    this.setState(newState);
                  }

                  this._invokeOnScrollMemoizer({
                    scrollLeft: scrollLeft,
                    scrollTop: scrollTop,
                    totalColumnsWidth: totalColumnsWidth,
                    totalRowsHeight: totalRowsHeight
                  });
                }
                /**
                 * Invalidate Grid size and recompute visible cells.
                 * This is a deferred wrapper for recomputeGridSize().
                 * It sets a flag to be evaluated on cDM/cDU to avoid unnecessary renders.
                 * This method is intended for advanced use-cases like CellMeasurer.
                 */
                // @TODO (bvaughn) Add automated test coverage for this.

              }, {
                key: "invalidateCellSizeAfterRender",
                value: function invalidateCellSizeAfterRender(_ref3) {
                  var columnIndex = _ref3.columnIndex,
                      rowIndex = _ref3.rowIndex;
                  this._deferredInvalidateColumnIndex = typeof this._deferredInvalidateColumnIndex === 'number' ? Math.min(this._deferredInvalidateColumnIndex, columnIndex) : columnIndex;
                  this._deferredInvalidateRowIndex = typeof this._deferredInvalidateRowIndex === 'number' ? Math.min(this._deferredInvalidateRowIndex, rowIndex) : rowIndex;
                }
                /**
                 * Pre-measure all columns and rows in a Grid.
                 * Typically cells are only measured as needed and estimated sizes are used for cells that have not yet been measured.
                 * This method ensures that the next call to getTotalSize() returns an exact size (as opposed to just an estimated one).
                 */

              }, {
                key: "measureAllCells",
                value: function measureAllCells() {
                  var _this$props2 = this.props,
                      columnCount = _this$props2.columnCount,
                      rowCount = _this$props2.rowCount;
                  var instanceProps = this.state.instanceProps;
                  instanceProps.columnSizeAndPositionManager.getSizeAndPositionOfCell(columnCount - 1);
                  instanceProps.rowSizeAndPositionManager.getSizeAndPositionOfCell(rowCount - 1);
                }
                /**
                 * Forced recompute of row heights and column widths.
                 * This function should be called if dynamic column or row sizes have changed but nothing else has.
                 * Since Grid only receives :columnCount and :rowCount it has no way of detecting when the underlying data changes.
                 */

              }, {
                key: "recomputeGridSize",
                value: function recomputeGridSize() {
                  var _ref4 = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {},
                      _ref4$columnIndex = _ref4.columnIndex,
                      columnIndex = _ref4$columnIndex === void 0 ? 0 : _ref4$columnIndex,
                      _ref4$rowIndex = _ref4.rowIndex,
                      rowIndex = _ref4$rowIndex === void 0 ? 0 : _ref4$rowIndex;

                  var _this$props3 = this.props,
                      scrollToColumn = _this$props3.scrollToColumn,
                      scrollToRow = _this$props3.scrollToRow;
                  var instanceProps = this.state.instanceProps;
                  instanceProps.columnSizeAndPositionManager.resetCell(columnIndex);
                  instanceProps.rowSizeAndPositionManager.resetCell(rowIndex); // Cell sizes may be determined by a function property.
                  // In this case the cDU handler can't know if they changed.
                  // Store this flag to let the next cDU pass know it needs to recompute the scroll offset.

                  this._recomputeScrollLeftFlag = scrollToColumn >= 0 && (this.state.scrollDirectionHorizontal === SCROLL_DIRECTION_FORWARD$1 ? columnIndex <= scrollToColumn : columnIndex >= scrollToColumn);
                  this._recomputeScrollTopFlag = scrollToRow >= 0 && (this.state.scrollDirectionVertical === SCROLL_DIRECTION_FORWARD$1 ? rowIndex <= scrollToRow : rowIndex >= scrollToRow); // Clear cell cache in case we are scrolling;
                  // Invalid row heights likely mean invalid cached content as well.

                  this._styleCache = {};
                  this._cellCache = {};
                  this.forceUpdate();
                }
                /**
                 * Ensure column and row are visible.
                 */

              }, {
                key: "scrollToCell",
                value: function scrollToCell(_ref5) {
                  var columnIndex = _ref5.columnIndex,
                      rowIndex = _ref5.rowIndex;
                  var columnCount = this.props.columnCount;
                  var props = this.props; // Don't adjust scroll offset for single-column grids (eg List, Table).
                  // This can cause a funky scroll offset because of the vertical scrollbar width.

                  if (columnCount > 1 && columnIndex !== undefined) {
                    this._updateScrollLeftForScrollToColumn(_objectSpread$c({}, props, {
                      scrollToColumn: columnIndex
                    }));
                  }

                  if (rowIndex !== undefined) {
                    this._updateScrollTopForScrollToRow(_objectSpread$c({}, props, {
                      scrollToRow: rowIndex
                    }));
                  }
                }
              }, {
                key: "componentDidMount",
                value: function componentDidMount() {
                  var _this$props4 = this.props,
                      getScrollbarSize = _this$props4.getScrollbarSize,
                      height = _this$props4.height,
                      scrollLeft = _this$props4.scrollLeft,
                      scrollToColumn = _this$props4.scrollToColumn,
                      scrollTop = _this$props4.scrollTop,
                      scrollToRow = _this$props4.scrollToRow,
                      width = _this$props4.width;
                  var instanceProps = this.state.instanceProps; // Reset initial offsets to be ignored in browser

                  this._initialScrollTop = 0;
                  this._initialScrollLeft = 0; // If cell sizes have been invalidated (eg we are using CellMeasurer) then reset cached positions.
                  // We must do this at the start of the method as we may calculate and update scroll position below.

                  this._handleInvalidatedGridSize(); // If this component was first rendered server-side, scrollbar size will be undefined.
                  // In that event we need to remeasure.


                  if (!instanceProps.scrollbarSizeMeasured) {
                    this.setState(function (prevState) {
                      var stateUpdate = _objectSpread$c({}, prevState, {
                        needToResetStyleCache: false
                      });

                      stateUpdate.instanceProps.scrollbarSize = getScrollbarSize();
                      stateUpdate.instanceProps.scrollbarSizeMeasured = true;
                      return stateUpdate;
                    });
                  }

                  if (typeof scrollLeft === 'number' && scrollLeft >= 0 || typeof scrollTop === 'number' && scrollTop >= 0) {
                    var stateUpdate = Grid._getScrollToPositionStateUpdate({
                      prevState: this.state,
                      scrollLeft: scrollLeft,
                      scrollTop: scrollTop
                    });

                    if (stateUpdate) {
                      stateUpdate.needToResetStyleCache = false;
                      this.setState(stateUpdate);
                    }
                  } // refs don't work in `react-test-renderer`


                  if (this._scrollingContainer) {
                    // setting the ref's scrollLeft and scrollTop.
                    // Somehow in MultiGrid the main grid doesn't trigger a update on mount.
                    if (this._scrollingContainer.scrollLeft !== this.state.scrollLeft) {
                      this._scrollingContainer.scrollLeft = this.state.scrollLeft;
                    }

                    if (this._scrollingContainer.scrollTop !== this.state.scrollTop) {
                      this._scrollingContainer.scrollTop = this.state.scrollTop;
                    }
                  } // Don't update scroll offset if the size is 0; we don't render any cells in this case.
                  // Setting a state may cause us to later thing we've updated the offce when we haven't.


                  var sizeIsBiggerThanZero = height > 0 && width > 0;

                  if (scrollToColumn >= 0 && sizeIsBiggerThanZero) {
                    this._updateScrollLeftForScrollToColumn();
                  }

                  if (scrollToRow >= 0 && sizeIsBiggerThanZero) {
                    this._updateScrollTopForScrollToRow();
                  } // Update onRowsRendered callback


                  this._invokeOnGridRenderedHelper(); // Initialize onScroll callback


                  this._invokeOnScrollMemoizer({
                    scrollLeft: scrollLeft || 0,
                    scrollTop: scrollTop || 0,
                    totalColumnsWidth: instanceProps.columnSizeAndPositionManager.getTotalSize(),
                    totalRowsHeight: instanceProps.rowSizeAndPositionManager.getTotalSize()
                  });

                  this._maybeCallOnScrollbarPresenceChange();
                }
                /**
                 * @private
                 * This method updates scrollLeft/scrollTop in state for the following conditions:
                 * 1) New scroll-to-cell props have been set
                 */

              }, {
                key: "componentDidUpdate",
                value: function componentDidUpdate(prevProps, prevState) {
                  var _this2 = this;

                  var _this$props5 = this.props,
                      autoHeight = _this$props5.autoHeight,
                      autoWidth = _this$props5.autoWidth,
                      columnCount = _this$props5.columnCount,
                      height = _this$props5.height,
                      rowCount = _this$props5.rowCount,
                      scrollToAlignment = _this$props5.scrollToAlignment,
                      scrollToColumn = _this$props5.scrollToColumn,
                      scrollToRow = _this$props5.scrollToRow,
                      width = _this$props5.width;
                  var _this$state = this.state,
                      scrollLeft = _this$state.scrollLeft,
                      scrollPositionChangeReason = _this$state.scrollPositionChangeReason,
                      scrollTop = _this$state.scrollTop,
                      instanceProps = _this$state.instanceProps; // If cell sizes have been invalidated (eg we are using CellMeasurer) then reset cached positions.
                  // We must do this at the start of the method as we may calculate and update scroll position below.

                  this._handleInvalidatedGridSize(); // Handle edge case where column or row count has only just increased over 0.
                  // In this case we may have to restore a previously-specified scroll offset.
                  // For more info see bvaughn/react-virtualized/issues/218


                  var columnOrRowCountJustIncreasedFromZero = columnCount > 0 && prevProps.columnCount === 0 || rowCount > 0 && prevProps.rowCount === 0; // Make sure requested changes to :scrollLeft or :scrollTop get applied.
                  // Assigning to scrollLeft/scrollTop tells the browser to interrupt any running scroll animations,
                  // And to discard any pending async changes to the scroll position that may have happened in the meantime (e.g. on a separate scrolling thread).
                  // So we only set these when we require an adjustment of the scroll position.
                  // See issue #2 for more information.

                  if (scrollPositionChangeReason === SCROLL_POSITION_CHANGE_REASONS$1.REQUESTED) {
                    // @TRICKY :autoHeight and :autoWidth properties instructs Grid to leave :scrollTop and :scrollLeft management to an external HOC (eg WindowScroller).
                    // In this case we should avoid checking scrollingContainer.scrollTop and scrollingContainer.scrollLeft since it forces layout/flow.
                    if (!autoWidth && scrollLeft >= 0 && (scrollLeft !== this._scrollingContainer.scrollLeft || columnOrRowCountJustIncreasedFromZero)) {
                      this._scrollingContainer.scrollLeft = scrollLeft;
                    }

                    if (!autoHeight && scrollTop >= 0 && (scrollTop !== this._scrollingContainer.scrollTop || columnOrRowCountJustIncreasedFromZero)) {
                      this._scrollingContainer.scrollTop = scrollTop;
                    }
                  } // Special case where the previous size was 0:
                  // In this case we don't show any windowed cells at all.
                  // So we should always recalculate offset afterwards.


                  var sizeJustIncreasedFromZero = (prevProps.width === 0 || prevProps.height === 0) && height > 0 && width > 0; // Update scroll offsets if the current :scrollToColumn or :scrollToRow values requires it
                  // @TODO Do we also need this check or can the one in componentWillUpdate() suffice?

                  if (this._recomputeScrollLeftFlag) {
                    this._recomputeScrollLeftFlag = false;

                    this._updateScrollLeftForScrollToColumn(this.props);
                  } else {
                    updateScrollIndexHelper({
                      cellSizeAndPositionManager: instanceProps.columnSizeAndPositionManager,
                      previousCellsCount: prevProps.columnCount,
                      previousCellSize: prevProps.columnWidth,
                      previousScrollToAlignment: prevProps.scrollToAlignment,
                      previousScrollToIndex: prevProps.scrollToColumn,
                      previousSize: prevProps.width,
                      scrollOffset: scrollLeft,
                      scrollToAlignment: scrollToAlignment,
                      scrollToIndex: scrollToColumn,
                      size: width,
                      sizeJustIncreasedFromZero: sizeJustIncreasedFromZero,
                      updateScrollIndexCallback: function updateScrollIndexCallback() {
                        return _this2._updateScrollLeftForScrollToColumn(_this2.props);
                      }
                    });
                  }

                  if (this._recomputeScrollTopFlag) {
                    this._recomputeScrollTopFlag = false;

                    this._updateScrollTopForScrollToRow(this.props);
                  } else {
                    updateScrollIndexHelper({
                      cellSizeAndPositionManager: instanceProps.rowSizeAndPositionManager,
                      previousCellsCount: prevProps.rowCount,
                      previousCellSize: prevProps.rowHeight,
                      previousScrollToAlignment: prevProps.scrollToAlignment,
                      previousScrollToIndex: prevProps.scrollToRow,
                      previousSize: prevProps.height,
                      scrollOffset: scrollTop,
                      scrollToAlignment: scrollToAlignment,
                      scrollToIndex: scrollToRow,
                      size: height,
                      sizeJustIncreasedFromZero: sizeJustIncreasedFromZero,
                      updateScrollIndexCallback: function updateScrollIndexCallback() {
                        return _this2._updateScrollTopForScrollToRow(_this2.props);
                      }
                    });
                  } // Update onRowsRendered callback if start/stop indices have changed


                  this._invokeOnGridRenderedHelper(); // Changes to :scrollLeft or :scrollTop should also notify :onScroll listeners


                  if (scrollLeft !== prevState.scrollLeft || scrollTop !== prevState.scrollTop) {
                    var totalRowsHeight = instanceProps.rowSizeAndPositionManager.getTotalSize();
                    var totalColumnsWidth = instanceProps.columnSizeAndPositionManager.getTotalSize();

                    this._invokeOnScrollMemoizer({
                      scrollLeft: scrollLeft,
                      scrollTop: scrollTop,
                      totalColumnsWidth: totalColumnsWidth,
                      totalRowsHeight: totalRowsHeight
                    });
                  }

                  this._maybeCallOnScrollbarPresenceChange();
                }
              }, {
                key: "componentWillUnmount",
                value: function componentWillUnmount() {
                  if (this._disablePointerEventsTimeoutId) {
                    cancelAnimationTimeout(this._disablePointerEventsTimeoutId);
                  }
                }
                /**
                 * This method updates scrollLeft/scrollTop in state for the following conditions:
                 * 1) Empty content (0 rows or columns)
                 * 2) New scroll props overriding the current state
                 * 3) Cells-count or cells-size has changed, making previous scroll offsets invalid
                 */

              }, {
                key: "render",
                value: function render() {
                  var _this$props6 = this.props,
                      autoContainerWidth = _this$props6.autoContainerWidth,
                      autoHeight = _this$props6.autoHeight,
                      autoWidth = _this$props6.autoWidth,
                      className = _this$props6.className,
                      containerProps = _this$props6.containerProps,
                      containerRole = _this$props6.containerRole,
                      containerStyle = _this$props6.containerStyle,
                      height = _this$props6.height,
                      id = _this$props6.id,
                      noContentRenderer = _this$props6.noContentRenderer,
                      role = _this$props6.role,
                      style = _this$props6.style,
                      tabIndex = _this$props6.tabIndex,
                      width = _this$props6.width;
                  var _this$state2 = this.state,
                      instanceProps = _this$state2.instanceProps,
                      needToResetStyleCache = _this$state2.needToResetStyleCache;

                  var isScrolling = this._isScrolling();

                  var gridStyle = {
                    boxSizing: 'border-box',
                    direction: 'ltr',
                    height: autoHeight ? 'auto' : height,
                    position: 'relative',
                    width: autoWidth ? 'auto' : width,
                    WebkitOverflowScrolling: 'touch',
                    willChange: 'transform'
                  };

                  if (needToResetStyleCache) {
                    this._styleCache = {};
                  } // calculate _styleCache here
                  // if state.isScrolling (not from _isScrolling) then reset


                  if (!this.state.isScrolling) {
                    this._resetStyleCache();
                  } // calculate children to render here


                  this._calculateChildrenToRender(this.props, this.state);

                  var totalColumnsWidth = instanceProps.columnSizeAndPositionManager.getTotalSize();
                  var totalRowsHeight = instanceProps.rowSizeAndPositionManager.getTotalSize(); // Force browser to hide scrollbars when we know they aren't necessary.
                  // Otherwise once scrollbars appear they may not disappear again.
                  // For more info see issue #116

                  var verticalScrollBarSize = totalRowsHeight > height ? instanceProps.scrollbarSize : 0;
                  var horizontalScrollBarSize = totalColumnsWidth > width ? instanceProps.scrollbarSize : 0;

                  if (horizontalScrollBarSize !== this._horizontalScrollBarSize || verticalScrollBarSize !== this._verticalScrollBarSize) {
                    this._horizontalScrollBarSize = horizontalScrollBarSize;
                    this._verticalScrollBarSize = verticalScrollBarSize;
                    this._scrollbarPresenceChanged = true;
                  } // Also explicitly init styles to 'auto' if scrollbars are required.
                  // This works around an obscure edge case where external CSS styles have not yet been loaded,
                  // But an initial scroll index of offset is set as an external prop.
                  // Without this style, Grid would render the correct range of cells but would NOT update its internal offset.
                  // This was originally reported via clauderic/react-infinite-calendar/issues/23


                  gridStyle.overflowX = totalColumnsWidth + verticalScrollBarSize <= width ? 'hidden' : 'auto';
                  gridStyle.overflowY = totalRowsHeight + horizontalScrollBarSize <= height ? 'hidden' : 'auto';
                  var childrenToDisplay = this._childrenToDisplay;
                  var showNoContentRenderer = childrenToDisplay.length === 0 && height > 0 && width > 0;
                  return react.createElement("div", _extends({
                    ref: this._setScrollingContainerRef
                  }, containerProps, {
                    "aria-label": this.props['aria-label'],
                    "aria-readonly": this.props['aria-readonly'],
                    className: clsx('ReactVirtualized__Grid', className),
                    id: id,
                    onScroll: this._onScroll,
                    role: role,
                    style: _objectSpread$c({}, gridStyle, {}, style),
                    tabIndex: tabIndex
                  }), childrenToDisplay.length > 0 && react.createElement("div", {
                    className: "ReactVirtualized__Grid__innerScrollContainer",
                    role: containerRole,
                    style: _objectSpread$c({
                      width: autoContainerWidth ? 'auto' : totalColumnsWidth,
                      height: totalRowsHeight,
                      maxWidth: totalColumnsWidth,
                      maxHeight: totalRowsHeight,
                      overflow: 'hidden',
                      pointerEvents: isScrolling ? 'none' : '',
                      position: 'relative'
                    }, containerStyle)
                  }, childrenToDisplay), showNoContentRenderer && noContentRenderer());
                }
                /* ---------------------------- Helper methods ---------------------------- */

              }, {
                key: "_calculateChildrenToRender",
                value: function _calculateChildrenToRender() {
                  var props = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : this.props;
                  var state = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : this.state;
                  var cellRenderer = props.cellRenderer,
                      cellRangeRenderer = props.cellRangeRenderer,
                      columnCount = props.columnCount,
                      deferredMeasurementCache = props.deferredMeasurementCache,
                      height = props.height,
                      overscanColumnCount = props.overscanColumnCount,
                      overscanIndicesGetter = props.overscanIndicesGetter,
                      overscanRowCount = props.overscanRowCount,
                      rowCount = props.rowCount,
                      width = props.width,
                      isScrollingOptOut = props.isScrollingOptOut;
                  var scrollDirectionHorizontal = state.scrollDirectionHorizontal,
                      scrollDirectionVertical = state.scrollDirectionVertical,
                      instanceProps = state.instanceProps;
                  var scrollTop = this._initialScrollTop > 0 ? this._initialScrollTop : state.scrollTop;
                  var scrollLeft = this._initialScrollLeft > 0 ? this._initialScrollLeft : state.scrollLeft;

                  var isScrolling = this._isScrolling(props, state);

                  this._childrenToDisplay = []; // Render only enough columns and rows to cover the visible area of the grid.

                  if (height > 0 && width > 0) {
                    var visibleColumnIndices = instanceProps.columnSizeAndPositionManager.getVisibleCellRange({
                      containerSize: width,
                      offset: scrollLeft
                    });
                    var visibleRowIndices = instanceProps.rowSizeAndPositionManager.getVisibleCellRange({
                      containerSize: height,
                      offset: scrollTop
                    });
                    var horizontalOffsetAdjustment = instanceProps.columnSizeAndPositionManager.getOffsetAdjustment({
                      containerSize: width,
                      offset: scrollLeft
                    });
                    var verticalOffsetAdjustment = instanceProps.rowSizeAndPositionManager.getOffsetAdjustment({
                      containerSize: height,
                      offset: scrollTop
                    }); // Store for _invokeOnGridRenderedHelper()

                    this._renderedColumnStartIndex = visibleColumnIndices.start;
                    this._renderedColumnStopIndex = visibleColumnIndices.stop;
                    this._renderedRowStartIndex = visibleRowIndices.start;
                    this._renderedRowStopIndex = visibleRowIndices.stop;
                    var overscanColumnIndices = overscanIndicesGetter({
                      direction: 'horizontal',
                      cellCount: columnCount,
                      overscanCellsCount: overscanColumnCount,
                      scrollDirection: scrollDirectionHorizontal,
                      startIndex: typeof visibleColumnIndices.start === 'number' ? visibleColumnIndices.start : 0,
                      stopIndex: typeof visibleColumnIndices.stop === 'number' ? visibleColumnIndices.stop : -1
                    });
                    var overscanRowIndices = overscanIndicesGetter({
                      direction: 'vertical',
                      cellCount: rowCount,
                      overscanCellsCount: overscanRowCount,
                      scrollDirection: scrollDirectionVertical,
                      startIndex: typeof visibleRowIndices.start === 'number' ? visibleRowIndices.start : 0,
                      stopIndex: typeof visibleRowIndices.stop === 'number' ? visibleRowIndices.stop : -1
                    }); // Store for _invokeOnGridRenderedHelper()

                    var columnStartIndex = overscanColumnIndices.overscanStartIndex;
                    var columnStopIndex = overscanColumnIndices.overscanStopIndex;
                    var rowStartIndex = overscanRowIndices.overscanStartIndex;
                    var rowStopIndex = overscanRowIndices.overscanStopIndex; // Advanced use-cases (eg CellMeasurer) require batched measurements to determine accurate sizes.

                    if (deferredMeasurementCache) {
                      // If rows have a dynamic height, scan the rows we are about to render.
                      // If any have not yet been measured, then we need to render all columns initially,
                      // Because the height of the row is equal to the tallest cell within that row,
                      // (And so we can't know the height without measuring all column-cells first).
                      if (!deferredMeasurementCache.hasFixedHeight()) {
                        for (var rowIndex = rowStartIndex; rowIndex <= rowStopIndex; rowIndex++) {
                          if (!deferredMeasurementCache.has(rowIndex, 0)) {
                            columnStartIndex = 0;
                            columnStopIndex = columnCount - 1;
                            break;
                          }
                        }
                      } // If columns have a dynamic width, scan the columns we are about to render.
                      // If any have not yet been measured, then we need to render all rows initially,
                      // Because the width of the column is equal to the widest cell within that column,
                      // (And so we can't know the width without measuring all row-cells first).


                      if (!deferredMeasurementCache.hasFixedWidth()) {
                        for (var columnIndex = columnStartIndex; columnIndex <= columnStopIndex; columnIndex++) {
                          if (!deferredMeasurementCache.has(0, columnIndex)) {
                            rowStartIndex = 0;
                            rowStopIndex = rowCount - 1;
                            break;
                          }
                        }
                      }
                    }

                    this._childrenToDisplay = cellRangeRenderer({
                      cellCache: this._cellCache,
                      cellRenderer: cellRenderer,
                      columnSizeAndPositionManager: instanceProps.columnSizeAndPositionManager,
                      columnStartIndex: columnStartIndex,
                      columnStopIndex: columnStopIndex,
                      deferredMeasurementCache: deferredMeasurementCache,
                      horizontalOffsetAdjustment: horizontalOffsetAdjustment,
                      isScrolling: isScrolling,
                      isScrollingOptOut: isScrollingOptOut,
                      parent: this,
                      rowSizeAndPositionManager: instanceProps.rowSizeAndPositionManager,
                      rowStartIndex: rowStartIndex,
                      rowStopIndex: rowStopIndex,
                      scrollLeft: scrollLeft,
                      scrollTop: scrollTop,
                      styleCache: this._styleCache,
                      verticalOffsetAdjustment: verticalOffsetAdjustment,
                      visibleColumnIndices: visibleColumnIndices,
                      visibleRowIndices: visibleRowIndices
                    }); // update the indices

                    this._columnStartIndex = columnStartIndex;
                    this._columnStopIndex = columnStopIndex;
                    this._rowStartIndex = rowStartIndex;
                    this._rowStopIndex = rowStopIndex;
                  }
                }
                /**
                 * Sets an :isScrolling flag for a small window of time.
                 * This flag is used to disable pointer events on the scrollable portion of the Grid.
                 * This prevents jerky/stuttery mouse-wheel scrolling.
                 */

              }, {
                key: "_debounceScrollEnded",
                value: function _debounceScrollEnded() {
                  var scrollingResetTimeInterval = this.props.scrollingResetTimeInterval;

                  if (this._disablePointerEventsTimeoutId) {
                    cancelAnimationTimeout(this._disablePointerEventsTimeoutId);
                  }

                  this._disablePointerEventsTimeoutId = requestAnimationTimeout(this._debounceScrollEndedCallback, scrollingResetTimeInterval);
                }
              }, {
                key: "_handleInvalidatedGridSize",

                /**
                 * Check for batched CellMeasurer size invalidations.
                 * This will occur the first time one or more previously unmeasured cells are rendered.
                 */
                value: function _handleInvalidatedGridSize() {
                  if (typeof this._deferredInvalidateColumnIndex === 'number' && typeof this._deferredInvalidateRowIndex === 'number') {
                    var columnIndex = this._deferredInvalidateColumnIndex;
                    var rowIndex = this._deferredInvalidateRowIndex;
                    this._deferredInvalidateColumnIndex = null;
                    this._deferredInvalidateRowIndex = null;
                    this.recomputeGridSize({
                      columnIndex: columnIndex,
                      rowIndex: rowIndex
                    });
                  }
                }
              }, {
                key: "_invokeOnScrollMemoizer",
                value: function _invokeOnScrollMemoizer(_ref6) {
                  var _this3 = this;

                  var scrollLeft = _ref6.scrollLeft,
                      scrollTop = _ref6.scrollTop,
                      totalColumnsWidth = _ref6.totalColumnsWidth,
                      totalRowsHeight = _ref6.totalRowsHeight;

                  this._onScrollMemoizer({
                    callback: function callback(_ref7) {
                      var scrollLeft = _ref7.scrollLeft,
                          scrollTop = _ref7.scrollTop;
                      var _this3$props = _this3.props,
                          height = _this3$props.height,
                          onScroll = _this3$props.onScroll,
                          width = _this3$props.width;
                      onScroll({
                        clientHeight: height,
                        clientWidth: width,
                        scrollHeight: totalRowsHeight,
                        scrollLeft: scrollLeft,
                        scrollTop: scrollTop,
                        scrollWidth: totalColumnsWidth
                      });
                    },
                    indices: {
                      scrollLeft: scrollLeft,
                      scrollTop: scrollTop
                    }
                  });
                }
              }, {
                key: "_isScrolling",
                value: function _isScrolling() {
                  var props = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : this.props;
                  var state = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : this.state;
                  // If isScrolling is defined in props, use it to override the value in state
                  // This is a performance optimization for WindowScroller + Grid
                  return Object.hasOwnProperty.call(props, 'isScrolling') ? Boolean(props.isScrolling) : Boolean(state.isScrolling);
                }
              }, {
                key: "_maybeCallOnScrollbarPresenceChange",
                value: function _maybeCallOnScrollbarPresenceChange() {
                  if (this._scrollbarPresenceChanged) {
                    var onScrollbarPresenceChange = this.props.onScrollbarPresenceChange;
                    this._scrollbarPresenceChanged = false;
                    onScrollbarPresenceChange({
                      horizontal: this._horizontalScrollBarSize > 0,
                      size: this.state.instanceProps.scrollbarSize,
                      vertical: this._verticalScrollBarSize > 0
                    });
                  }
                }
              }, {
                key: "scrollToPosition",

                /**
                 * Scroll to the specified offset(s).
                 * Useful for animating position changes.
                 */
                value: function scrollToPosition(_ref8) {
                  var scrollLeft = _ref8.scrollLeft,
                      scrollTop = _ref8.scrollTop;

                  var stateUpdate = Grid._getScrollToPositionStateUpdate({
                    prevState: this.state,
                    scrollLeft: scrollLeft,
                    scrollTop: scrollTop
                  });

                  if (stateUpdate) {
                    stateUpdate.needToResetStyleCache = false;
                    this.setState(stateUpdate);
                  }
                }
              }, {
                key: "_getCalculatedScrollLeft",
                value: function _getCalculatedScrollLeft() {
                  var props = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : this.props;
                  var state = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : this.state;
                  return Grid._getCalculatedScrollLeft(props, state);
                }
              }, {
                key: "_updateScrollLeftForScrollToColumn",
                value: function _updateScrollLeftForScrollToColumn() {
                  var props = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : this.props;
                  var state = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : this.state;

                  var stateUpdate = Grid._getScrollLeftForScrollToColumnStateUpdate(props, state);

                  if (stateUpdate) {
                    stateUpdate.needToResetStyleCache = false;
                    this.setState(stateUpdate);
                  }
                }
              }, {
                key: "_getCalculatedScrollTop",
                value: function _getCalculatedScrollTop() {
                  var props = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : this.props;
                  var state = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : this.state;
                  return Grid._getCalculatedScrollTop(props, state);
                }
              }, {
                key: "_resetStyleCache",
                value: function _resetStyleCache() {
                  var styleCache = this._styleCache;
                  var cellCache = this._cellCache;
                  var isScrollingOptOut = this.props.isScrollingOptOut; // Reset cell and style caches once scrolling stops.
                  // This makes Grid simpler to use (since cells commonly change).
                  // And it keeps the caches from growing too large.
                  // Performance is most sensitive when a user is scrolling.
                  // Don't clear visible cells from cellCache if isScrollingOptOut is specified.
                  // This keeps the cellCache to a resonable size.

                  this._cellCache = {};
                  this._styleCache = {}; // Copy over the visible cell styles so avoid unnecessary re-render.

                  for (var rowIndex = this._rowStartIndex; rowIndex <= this._rowStopIndex; rowIndex++) {
                    for (var columnIndex = this._columnStartIndex; columnIndex <= this._columnStopIndex; columnIndex++) {
                      var key = "".concat(rowIndex, "-").concat(columnIndex);
                      this._styleCache[key] = styleCache[key];

                      if (isScrollingOptOut) {
                        this._cellCache[key] = cellCache[key];
                      }
                    }
                  }
                }
              }, {
                key: "_updateScrollTopForScrollToRow",
                value: function _updateScrollTopForScrollToRow() {
                  var props = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : this.props;
                  var state = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : this.state;

                  var stateUpdate = Grid._getScrollTopForScrollToRowStateUpdate(props, state);

                  if (stateUpdate) {
                    stateUpdate.needToResetStyleCache = false;
                    this.setState(stateUpdate);
                  }
                }
              }], [{
                key: "getDerivedStateFromProps",
                value: function getDerivedStateFromProps(nextProps, prevState) {
                  var newState = {};

                  if (nextProps.columnCount === 0 && prevState.scrollLeft !== 0 || nextProps.rowCount === 0 && prevState.scrollTop !== 0) {
                    newState.scrollLeft = 0;
                    newState.scrollTop = 0; // only use scroll{Left,Top} from props if scrollTo{Column,Row} isn't specified
                    // scrollTo{Column,Row} should override scroll{Left,Top}
                  } else if (nextProps.scrollLeft !== prevState.scrollLeft && nextProps.scrollToColumn < 0 || nextProps.scrollTop !== prevState.scrollTop && nextProps.scrollToRow < 0) {
                    Object.assign(newState, Grid._getScrollToPositionStateUpdate({
                      prevState: prevState,
                      scrollLeft: nextProps.scrollLeft,
                      scrollTop: nextProps.scrollTop
                    }));
                  }

                  var instanceProps = prevState.instanceProps; // Initially we should not clearStyleCache

                  newState.needToResetStyleCache = false;

                  if (nextProps.columnWidth !== instanceProps.prevColumnWidth || nextProps.rowHeight !== instanceProps.prevRowHeight) {
                    // Reset cache. set it to {} in render
                    newState.needToResetStyleCache = true;
                  }

                  instanceProps.columnSizeAndPositionManager.configure({
                    cellCount: nextProps.columnCount,
                    estimatedCellSize: Grid._getEstimatedColumnSize(nextProps),
                    cellSizeGetter: Grid._wrapSizeGetter(nextProps.columnWidth)
                  });
                  instanceProps.rowSizeAndPositionManager.configure({
                    cellCount: nextProps.rowCount,
                    estimatedCellSize: Grid._getEstimatedRowSize(nextProps),
                    cellSizeGetter: Grid._wrapSizeGetter(nextProps.rowHeight)
                  });

                  if (instanceProps.prevColumnCount === 0 || instanceProps.prevRowCount === 0) {
                    instanceProps.prevColumnCount = 0;
                    instanceProps.prevRowCount = 0;
                  } // If scrolling is controlled outside this component, clear cache when scrolling stops


                  if (nextProps.autoHeight && nextProps.isScrolling === false && instanceProps.prevIsScrolling === true) {
                    Object.assign(newState, {
                      isScrolling: false
                    });
                  }

                  var maybeStateA;
                  var maybeStateB;
                  calculateSizeAndPositionDataAndUpdateScrollOffset({
                    cellCount: instanceProps.prevColumnCount,
                    cellSize: typeof instanceProps.prevColumnWidth === 'number' ? instanceProps.prevColumnWidth : null,
                    computeMetadataCallback: function computeMetadataCallback() {
                      return instanceProps.columnSizeAndPositionManager.resetCell(0);
                    },
                    computeMetadataCallbackProps: nextProps,
                    nextCellsCount: nextProps.columnCount,
                    nextCellSize: typeof nextProps.columnWidth === 'number' ? nextProps.columnWidth : null,
                    nextScrollToIndex: nextProps.scrollToColumn,
                    scrollToIndex: instanceProps.prevScrollToColumn,
                    updateScrollOffsetForScrollToIndex: function updateScrollOffsetForScrollToIndex() {
                      maybeStateA = Grid._getScrollLeftForScrollToColumnStateUpdate(nextProps, prevState);
                    }
                  });
                  calculateSizeAndPositionDataAndUpdateScrollOffset({
                    cellCount: instanceProps.prevRowCount,
                    cellSize: typeof instanceProps.prevRowHeight === 'number' ? instanceProps.prevRowHeight : null,
                    computeMetadataCallback: function computeMetadataCallback() {
                      return instanceProps.rowSizeAndPositionManager.resetCell(0);
                    },
                    computeMetadataCallbackProps: nextProps,
                    nextCellsCount: nextProps.rowCount,
                    nextCellSize: typeof nextProps.rowHeight === 'number' ? nextProps.rowHeight : null,
                    nextScrollToIndex: nextProps.scrollToRow,
                    scrollToIndex: instanceProps.prevScrollToRow,
                    updateScrollOffsetForScrollToIndex: function updateScrollOffsetForScrollToIndex() {
                      maybeStateB = Grid._getScrollTopForScrollToRowStateUpdate(nextProps, prevState);
                    }
                  });
                  instanceProps.prevColumnCount = nextProps.columnCount;
                  instanceProps.prevColumnWidth = nextProps.columnWidth;
                  instanceProps.prevIsScrolling = nextProps.isScrolling === true;
                  instanceProps.prevRowCount = nextProps.rowCount;
                  instanceProps.prevRowHeight = nextProps.rowHeight;
                  instanceProps.prevScrollToColumn = nextProps.scrollToColumn;
                  instanceProps.prevScrollToRow = nextProps.scrollToRow; // getting scrollBarSize (moved from componentWillMount)

                  instanceProps.scrollbarSize = nextProps.getScrollbarSize();

                  if (instanceProps.scrollbarSize === undefined) {
                    instanceProps.scrollbarSizeMeasured = false;
                    instanceProps.scrollbarSize = 0;
                  } else {
                    instanceProps.scrollbarSizeMeasured = true;
                  }

                  newState.instanceProps = instanceProps;
                  return _objectSpread$c({}, newState, {}, maybeStateA, {}, maybeStateB);
                }
              }, {
                key: "_getEstimatedColumnSize",
                value: function _getEstimatedColumnSize(props) {
                  return typeof props.columnWidth === 'number' ? props.columnWidth : props.estimatedColumnSize;
                }
              }, {
                key: "_getEstimatedRowSize",
                value: function _getEstimatedRowSize(props) {
                  return typeof props.rowHeight === 'number' ? props.rowHeight : props.estimatedRowSize;
                }
              }, {
                key: "_getScrollToPositionStateUpdate",

                /**
                 * Get the updated state after scrolling to
                 * scrollLeft and scrollTop
                 */
                value: function _getScrollToPositionStateUpdate(_ref9) {
                  var prevState = _ref9.prevState,
                      scrollLeft = _ref9.scrollLeft,
                      scrollTop = _ref9.scrollTop;
                  var newState = {
                    scrollPositionChangeReason: SCROLL_POSITION_CHANGE_REASONS$1.REQUESTED
                  };

                  if (typeof scrollLeft === 'number' && scrollLeft >= 0) {
                    newState.scrollDirectionHorizontal = scrollLeft > prevState.scrollLeft ? SCROLL_DIRECTION_FORWARD$1 : SCROLL_DIRECTION_BACKWARD;
                    newState.scrollLeft = scrollLeft;
                  }

                  if (typeof scrollTop === 'number' && scrollTop >= 0) {
                    newState.scrollDirectionVertical = scrollTop > prevState.scrollTop ? SCROLL_DIRECTION_FORWARD$1 : SCROLL_DIRECTION_BACKWARD;
                    newState.scrollTop = scrollTop;
                  }

                  if (typeof scrollLeft === 'number' && scrollLeft >= 0 && scrollLeft !== prevState.scrollLeft || typeof scrollTop === 'number' && scrollTop >= 0 && scrollTop !== prevState.scrollTop) {
                    return newState;
                  }

                  return {};
                }
              }, {
                key: "_wrapSizeGetter",
                value: function _wrapSizeGetter(value) {
                  return typeof value === 'function' ? value : function () {
                    return value;
                  };
                }
              }, {
                key: "_getCalculatedScrollLeft",
                value: function _getCalculatedScrollLeft(nextProps, prevState) {
                  var columnCount = nextProps.columnCount,
                      height = nextProps.height,
                      scrollToAlignment = nextProps.scrollToAlignment,
                      scrollToColumn = nextProps.scrollToColumn,
                      width = nextProps.width;
                  var scrollLeft = prevState.scrollLeft,
                      instanceProps = prevState.instanceProps;

                  if (columnCount > 0) {
                    var finalColumn = columnCount - 1;
                    var targetIndex = scrollToColumn < 0 ? finalColumn : Math.min(finalColumn, scrollToColumn);
                    var totalRowsHeight = instanceProps.rowSizeAndPositionManager.getTotalSize();
                    var scrollBarSize = instanceProps.scrollbarSizeMeasured && totalRowsHeight > height ? instanceProps.scrollbarSize : 0;
                    return instanceProps.columnSizeAndPositionManager.getUpdatedOffsetForIndex({
                      align: scrollToAlignment,
                      containerSize: width - scrollBarSize,
                      currentOffset: scrollLeft,
                      targetIndex: targetIndex
                    });
                  }

                  return 0;
                }
              }, {
                key: "_getScrollLeftForScrollToColumnStateUpdate",
                value: function _getScrollLeftForScrollToColumnStateUpdate(nextProps, prevState) {
                  var scrollLeft = prevState.scrollLeft;

                  var calculatedScrollLeft = Grid._getCalculatedScrollLeft(nextProps, prevState);

                  if (typeof calculatedScrollLeft === 'number' && calculatedScrollLeft >= 0 && scrollLeft !== calculatedScrollLeft) {
                    return Grid._getScrollToPositionStateUpdate({
                      prevState: prevState,
                      scrollLeft: calculatedScrollLeft,
                      scrollTop: -1
                    });
                  }

                  return {};
                }
              }, {
                key: "_getCalculatedScrollTop",
                value: function _getCalculatedScrollTop(nextProps, prevState) {
                  var height = nextProps.height,
                      rowCount = nextProps.rowCount,
                      scrollToAlignment = nextProps.scrollToAlignment,
                      scrollToRow = nextProps.scrollToRow,
                      width = nextProps.width;
                  var scrollTop = prevState.scrollTop,
                      instanceProps = prevState.instanceProps;

                  if (rowCount > 0) {
                    var finalRow = rowCount - 1;
                    var targetIndex = scrollToRow < 0 ? finalRow : Math.min(finalRow, scrollToRow);
                    var totalColumnsWidth = instanceProps.columnSizeAndPositionManager.getTotalSize();
                    var scrollBarSize = instanceProps.scrollbarSizeMeasured && totalColumnsWidth > width ? instanceProps.scrollbarSize : 0;
                    return instanceProps.rowSizeAndPositionManager.getUpdatedOffsetForIndex({
                      align: scrollToAlignment,
                      containerSize: height - scrollBarSize,
                      currentOffset: scrollTop,
                      targetIndex: targetIndex
                    });
                  }

                  return 0;
                }
              }, {
                key: "_getScrollTopForScrollToRowStateUpdate",
                value: function _getScrollTopForScrollToRowStateUpdate(nextProps, prevState) {
                  var scrollTop = prevState.scrollTop;

                  var calculatedScrollTop = Grid._getCalculatedScrollTop(nextProps, prevState);

                  if (typeof calculatedScrollTop === 'number' && calculatedScrollTop >= 0 && scrollTop !== calculatedScrollTop) {
                    return Grid._getScrollToPositionStateUpdate({
                      prevState: prevState,
                      scrollLeft: -1,
                      scrollTop: calculatedScrollTop
                    });
                  }

                  return {};
                }
              }]);

              return Grid;
            }(react.PureComponent), _defineProperty$6(_class$6, "propTypes", {
              "aria-label": propTypes.string.isRequired,
              "aria-readonly": propTypes.bool,

              /**
               * Set the width of the inner scrollable container to 'auto'.
               * This is useful for single-column Grids to ensure that the column doesn't extend below a vertical scrollbar.
               */
              "autoContainerWidth": propTypes.bool.isRequired,

              /**
               * Removes fixed height from the scrollingContainer so that the total height of rows can stretch the window.
               * Intended for use with WindowScroller
               */
              "autoHeight": propTypes.bool.isRequired,

              /**
               * Removes fixed width from the scrollingContainer so that the total width of rows can stretch the window.
               * Intended for use with WindowScroller
               */
              "autoWidth": propTypes.bool.isRequired,

              /** Responsible for rendering a cell given an row and column index.  */
              "cellRenderer": function cellRenderer() {
                return (typeof bpfrpt_proptype_CellRenderer === "function" ? bpfrpt_proptype_CellRenderer.isRequired ? bpfrpt_proptype_CellRenderer.isRequired : bpfrpt_proptype_CellRenderer : propTypes.shape(bpfrpt_proptype_CellRenderer).isRequired).apply(this, arguments);
              },

              /** Responsible for rendering a group of cells given their index ranges.  */
              "cellRangeRenderer": function cellRangeRenderer() {
                return (typeof bpfrpt_proptype_CellRangeRenderer === "function" ? bpfrpt_proptype_CellRangeRenderer.isRequired ? bpfrpt_proptype_CellRangeRenderer.isRequired : bpfrpt_proptype_CellRangeRenderer : propTypes.shape(bpfrpt_proptype_CellRangeRenderer).isRequired).apply(this, arguments);
              },

              /** Optional custom CSS class name to attach to root Grid element.  */
              "className": propTypes.string,

              /** Number of columns in grid.  */
              "columnCount": propTypes.number.isRequired,

              /** Either a fixed column width (number) or a function that returns the width of a column given its index.  */
              "columnWidth": function columnWidth() {
                return (typeof bpfrpt_proptype_CellSize === "function" ? bpfrpt_proptype_CellSize.isRequired ? bpfrpt_proptype_CellSize.isRequired : bpfrpt_proptype_CellSize : propTypes.shape(bpfrpt_proptype_CellSize).isRequired).apply(this, arguments);
              },

              /** Unfiltered props for the Grid container. */
              "containerProps": propTypes.object,

              /** ARIA role for the cell-container.  */
              "containerRole": propTypes.string.isRequired,

              /** Optional inline style applied to inner cell-container */
              "containerStyle": propTypes.object.isRequired,

              /**
               * If CellMeasurer is used to measure this Grid's children, this should be a pointer to its CellMeasurerCache.
               * A shared CellMeasurerCache reference enables Grid and CellMeasurer to share measurement data.
               */
              "deferredMeasurementCache": propTypes.object,

              /**
               * Used to estimate the total width of a Grid before all of its columns have actually been measured.
               * The estimated total width is adjusted as columns are rendered.
               */
              "estimatedColumnSize": propTypes.number.isRequired,

              /**
               * Used to estimate the total height of a Grid before all of its rows have actually been measured.
               * The estimated total height is adjusted as rows are rendered.
               */
              "estimatedRowSize": propTypes.number.isRequired,

              /** Exposed for testing purposes only.  */
              "getScrollbarSize": propTypes.func.isRequired,

              /** Height of Grid; this property determines the number of visible (vs virtualized) rows.  */
              "height": propTypes.number.isRequired,

              /** Optional custom id to attach to root Grid element.  */
              "id": propTypes.string,

              /**
               * Override internal is-scrolling state tracking.
               * This property is primarily intended for use with the WindowScroller component.
               */
              "isScrolling": propTypes.bool,

              /**
               * Opt-out of isScrolling param passed to cellRangeRenderer.
               * To avoid the extra render when scroll stops.
               */
              "isScrollingOptOut": propTypes.bool.isRequired,

              /** Optional renderer to be used in place of rows when either :rowCount or :columnCount is 0.  */
              "noContentRenderer": function noContentRenderer() {
                return (typeof bpfrpt_proptype_NoContentRenderer === "function" ? bpfrpt_proptype_NoContentRenderer.isRequired ? bpfrpt_proptype_NoContentRenderer.isRequired : bpfrpt_proptype_NoContentRenderer : propTypes.shape(bpfrpt_proptype_NoContentRenderer).isRequired).apply(this, arguments);
              },

              /**
               * Callback invoked whenever the scroll offset changes within the inner scrollable region.
               * This callback can be used to sync scrolling between lists, tables, or grids.
               */
              "onScroll": propTypes.func.isRequired,

              /**
               * Called whenever a horizontal or vertical scrollbar is added or removed.
               * This prop is not intended for end-user use;
               * It is used by MultiGrid to support fixed-row/fixed-column scroll syncing.
               */
              "onScrollbarPresenceChange": propTypes.func.isRequired,

              /** Callback invoked with information about the section of the Grid that was just rendered.  */
              "onSectionRendered": propTypes.func.isRequired,

              /**
               * Number of columns to render before/after the visible section of the grid.
               * These columns can help for smoother scrolling on touch devices or browsers that send scroll events infrequently.
               */
              "overscanColumnCount": propTypes.number.isRequired,

              /**
               * Calculates the number of cells to overscan before and after a specified range.
               * This function ensures that overscanning doesn't exceed the available cells.
               */
              "overscanIndicesGetter": function overscanIndicesGetter() {
                return (typeof bpfrpt_proptype_OverscanIndicesGetter === "function" ? bpfrpt_proptype_OverscanIndicesGetter.isRequired ? bpfrpt_proptype_OverscanIndicesGetter.isRequired : bpfrpt_proptype_OverscanIndicesGetter : propTypes.shape(bpfrpt_proptype_OverscanIndicesGetter).isRequired).apply(this, arguments);
              },

              /**
               * Number of rows to render above/below the visible section of the grid.
               * These rows can help for smoother scrolling on touch devices or browsers that send scroll events infrequently.
               */
              "overscanRowCount": propTypes.number.isRequired,

              /** ARIA role for the grid element.  */
              "role": propTypes.string.isRequired,

              /**
               * Either a fixed row height (number) or a function that returns the height of a row given its index.
               * Should implement the following interface: ({ index: number }): number
               */
              "rowHeight": function rowHeight() {
                return (typeof bpfrpt_proptype_CellSize === "function" ? bpfrpt_proptype_CellSize.isRequired ? bpfrpt_proptype_CellSize.isRequired : bpfrpt_proptype_CellSize : propTypes.shape(bpfrpt_proptype_CellSize).isRequired).apply(this, arguments);
              },

              /** Number of rows in grid.  */
              "rowCount": propTypes.number.isRequired,

              /** Wait this amount of time after the last scroll event before resetting Grid `pointer-events`. */
              "scrollingResetTimeInterval": propTypes.number.isRequired,

              /** Horizontal offset. */
              "scrollLeft": propTypes.number,

              /**
               * Controls scroll-to-cell behavior of the Grid.
               * The default ("auto") scrolls the least amount possible to ensure that the specified cell is fully visible.
               * Use "start" to align cells to the top/left of the Grid and "end" to align bottom/right.
               */
              "scrollToAlignment": function scrollToAlignment() {
                return (typeof bpfrpt_proptype_Alignment === "function" ? bpfrpt_proptype_Alignment.isRequired ? bpfrpt_proptype_Alignment.isRequired : bpfrpt_proptype_Alignment : propTypes.shape(bpfrpt_proptype_Alignment).isRequired).apply(this, arguments);
              },

              /** Column index to ensure visible (by forcefully scrolling if necessary) */
              "scrollToColumn": propTypes.number.isRequired,

              /** Vertical offset. */
              "scrollTop": propTypes.number,

              /** Row index to ensure visible (by forcefully scrolling if necessary) */
              "scrollToRow": propTypes.number.isRequired,

              /** Optional inline style */
              "style": propTypes.object.isRequired,

              /** Tab index for focus */
              "tabIndex": propTypes.number,

              /** Width of Grid; this property determines the number of visible (vs virtualized) columns.  */
              "width": propTypes.number.isRequired
            }), _temp$6);

            _defineProperty$6(Grid, "defaultProps", {
              'aria-label': 'grid',
              'aria-readonly': true,
              autoContainerWidth: false,
              autoHeight: false,
              autoWidth: false,
              cellRangeRenderer: defaultCellRangeRenderer,
              containerRole: 'rowgroup',
              containerStyle: {},
              estimatedColumnSize: 100,
              estimatedRowSize: 30,
              getScrollbarSize: scrollbarSize,
              noContentRenderer: renderNull,
              onScroll: function onScroll() {},
              onScrollbarPresenceChange: function onScrollbarPresenceChange() {},
              onSectionRendered: function onSectionRendered() {},
              overscanColumnCount: 0,
              overscanIndicesGetter: defaultOverscanIndicesGetter$1,
              overscanRowCount: 10,
              role: 'grid',
              scrollingResetTimeInterval: DEFAULT_SCROLLING_RESET_TIME_INTERVAL$1,
              scrollToAlignment: 'auto',
              scrollToColumn: -1,
              scrollToRow: -1,
              style: {},
              tabIndex: 0,
              isScrollingOptOut: false
            });

            polyfill(Grid);

            var SCROLL_DIRECTION_FORWARD = 1;
            /**
             * Calculates the number of cells to overscan before and after a specified range.
             * This function ensures that overscanning doesn't exceed the available cells.
             */

            function defaultOverscanIndicesGetter(_ref) {
              var cellCount = _ref.cellCount,
                  overscanCellsCount = _ref.overscanCellsCount,
                  scrollDirection = _ref.scrollDirection,
                  startIndex = _ref.startIndex,
                  stopIndex = _ref.stopIndex;
              // Make sure we render at least 1 cell extra before and after (except near boundaries)
              // This is necessary in order to support keyboard navigation (TAB/SHIFT+TAB) in some cases
              // For more info see issues #625
              overscanCellsCount = Math.max(1, overscanCellsCount);

              if (scrollDirection === SCROLL_DIRECTION_FORWARD) {
                return {
                  overscanStartIndex: Math.max(0, startIndex - 1),
                  overscanStopIndex: Math.min(cellCount - 1, stopIndex + overscanCellsCount)
                };
              } else {
                return {
                  overscanStartIndex: Math.max(0, startIndex - overscanCellsCount),
                  overscanStopIndex: Math.min(cellCount - 1, stopIndex + 1)
                };
              }
            }

            ({
              "scrollToColumn": propTypes.number.isRequired,
              "scrollToRow": propTypes.number.isRequired
            });

            var _class$5, _temp$5;

            function ownKeys$b(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }

            function _objectSpread$b(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys$b(source, true).forEach(function (key) { _defineProperty$6(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys$b(source).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }
            /**
             * This HOC decorates a virtualized component and responds to arrow-key events by scrolling one row or column at a time.
             */

            var ArrowKeyStepper = (_temp$5 = _class$5 =
            /*#__PURE__*/
            function (_React$PureComponent) {
              _inherits(ArrowKeyStepper, _React$PureComponent);

              function ArrowKeyStepper() {
                var _getPrototypeOf2;

                var _this;

                _classCallCheck$8(this, ArrowKeyStepper);

                for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
                  args[_key] = arguments[_key];
                }

                _this = _possibleConstructorReturn(this, (_getPrototypeOf2 = _getPrototypeOf(ArrowKeyStepper)).call.apply(_getPrototypeOf2, [this].concat(args)));

                _defineProperty$6(_assertThisInitialized(_this), "state", {
                  scrollToColumn: 0,
                  scrollToRow: 0,
                  instanceProps: {
                    prevScrollToColumn: 0,
                    prevScrollToRow: 0
                  }
                });

                _defineProperty$6(_assertThisInitialized(_this), "_columnStartIndex", 0);

                _defineProperty$6(_assertThisInitialized(_this), "_columnStopIndex", 0);

                _defineProperty$6(_assertThisInitialized(_this), "_rowStartIndex", 0);

                _defineProperty$6(_assertThisInitialized(_this), "_rowStopIndex", 0);

                _defineProperty$6(_assertThisInitialized(_this), "_onKeyDown", function (event) {
                  var _this$props = _this.props,
                      columnCount = _this$props.columnCount,
                      disabled = _this$props.disabled,
                      mode = _this$props.mode,
                      rowCount = _this$props.rowCount;

                  if (disabled) {
                    return;
                  }

                  var _this$_getScrollState = _this._getScrollState(),
                      scrollToColumnPrevious = _this$_getScrollState.scrollToColumn,
                      scrollToRowPrevious = _this$_getScrollState.scrollToRow;

                  var _this$_getScrollState2 = _this._getScrollState(),
                      scrollToColumn = _this$_getScrollState2.scrollToColumn,
                      scrollToRow = _this$_getScrollState2.scrollToRow; // The above cases all prevent default event event behavior.
                  // This is to keep the grid from scrolling after the snap-to update.


                  switch (event.key) {
                    case 'ArrowDown':
                      scrollToRow = mode === 'cells' ? Math.min(scrollToRow + 1, rowCount - 1) : Math.min(_this._rowStopIndex + 1, rowCount - 1);
                      break;

                    case 'ArrowLeft':
                      scrollToColumn = mode === 'cells' ? Math.max(scrollToColumn - 1, 0) : Math.max(_this._columnStartIndex - 1, 0);
                      break;

                    case 'ArrowRight':
                      scrollToColumn = mode === 'cells' ? Math.min(scrollToColumn + 1, columnCount - 1) : Math.min(_this._columnStopIndex + 1, columnCount - 1);
                      break;

                    case 'ArrowUp':
                      scrollToRow = mode === 'cells' ? Math.max(scrollToRow - 1, 0) : Math.max(_this._rowStartIndex - 1, 0);
                      break;
                  }

                  if (scrollToColumn !== scrollToColumnPrevious || scrollToRow !== scrollToRowPrevious) {
                    event.preventDefault();

                    _this._updateScrollState({
                      scrollToColumn: scrollToColumn,
                      scrollToRow: scrollToRow
                    });
                  }
                });

                _defineProperty$6(_assertThisInitialized(_this), "_onSectionRendered", function (_ref) {
                  var columnStartIndex = _ref.columnStartIndex,
                      columnStopIndex = _ref.columnStopIndex,
                      rowStartIndex = _ref.rowStartIndex,
                      rowStopIndex = _ref.rowStopIndex;
                  _this._columnStartIndex = columnStartIndex;
                  _this._columnStopIndex = columnStopIndex;
                  _this._rowStartIndex = rowStartIndex;
                  _this._rowStopIndex = rowStopIndex;
                });

                return _this;
              }

              _createClass$8(ArrowKeyStepper, [{
                key: "setScrollIndexes",
                value: function setScrollIndexes(_ref2) {
                  var scrollToColumn = _ref2.scrollToColumn,
                      scrollToRow = _ref2.scrollToRow;
                  this.setState({
                    scrollToRow: scrollToRow,
                    scrollToColumn: scrollToColumn
                  });
                }
              }, {
                key: "render",
                value: function render() {
                  var _this$props2 = this.props,
                      className = _this$props2.className,
                      children = _this$props2.children;

                  var _this$_getScrollState3 = this._getScrollState(),
                      scrollToColumn = _this$_getScrollState3.scrollToColumn,
                      scrollToRow = _this$_getScrollState3.scrollToRow;

                  return react.createElement("div", {
                    className: className,
                    onKeyDown: this._onKeyDown
                  }, children({
                    onSectionRendered: this._onSectionRendered,
                    scrollToColumn: scrollToColumn,
                    scrollToRow: scrollToRow
                  }));
                }
              }, {
                key: "_getScrollState",
                value: function _getScrollState() {
                  return this.props.isControlled ? this.props : this.state;
                }
              }, {
                key: "_updateScrollState",
                value: function _updateScrollState(_ref3) {
                  var scrollToColumn = _ref3.scrollToColumn,
                      scrollToRow = _ref3.scrollToRow;
                  var _this$props3 = this.props,
                      isControlled = _this$props3.isControlled,
                      onScrollToChange = _this$props3.onScrollToChange;

                  if (typeof onScrollToChange === 'function') {
                    onScrollToChange({
                      scrollToColumn: scrollToColumn,
                      scrollToRow: scrollToRow
                    });
                  }

                  if (!isControlled) {
                    this.setState({
                      scrollToColumn: scrollToColumn,
                      scrollToRow: scrollToRow
                    });
                  }
                }
              }], [{
                key: "getDerivedStateFromProps",
                value: function getDerivedStateFromProps(nextProps, prevState) {
                  if (nextProps.isControlled) {
                    return {};
                  }

                  if (nextProps.scrollToColumn !== prevState.instanceProps.prevScrollToColumn || nextProps.scrollToRow !== prevState.instanceProps.prevScrollToRow) {
                    return _objectSpread$b({}, prevState, {
                      scrollToColumn: nextProps.scrollToColumn,
                      scrollToRow: nextProps.scrollToRow,
                      instanceProps: {
                        prevScrollToColumn: nextProps.scrollToColumn,
                        prevScrollToRow: nextProps.scrollToRow
                      }
                    });
                  }

                  return {};
                }
              }]);

              return ArrowKeyStepper;
            }(react.PureComponent), _defineProperty$6(_class$5, "propTypes", {
              "children": propTypes.func.isRequired,
              "className": propTypes.string,
              "columnCount": propTypes.number.isRequired,
              "disabled": propTypes.bool.isRequired,
              "isControlled": propTypes.bool.isRequired,
              "mode": propTypes.oneOf(["cells", "edges"]).isRequired,
              "onScrollToChange": propTypes.func,
              "rowCount": propTypes.number.isRequired,
              "scrollToColumn": propTypes.number.isRequired,
              "scrollToRow": propTypes.number.isRequired
            }), _temp$5);

            _defineProperty$6(ArrowKeyStepper, "defaultProps", {
              disabled: false,
              isControlled: false,
              mode: 'edges',
              scrollToColumn: 0,
              scrollToRow: 0
            });

            polyfill(ArrowKeyStepper);

            /**
             * Detect Element Resize.
             * https://github.com/sdecima/javascript-detect-element-resize
             * Sebastian Decima
             *
             * Forked from version 0.5.3; includes the following modifications:
             * 1) Guard against unsafe 'window' and 'document' references (to support SSR).
             * 2) Defer initialization code via a top-level function wrapper (to support SSR).
             * 3) Avoid unnecessary reflows by not measuring size for scroll events bubbling from children.
             * 4) Add nonce for style element.
             * 5) Added support for injecting custom window object
             **/
            function createDetectElementResize(nonce, hostWindow) {
              // Check `document` and `window` in case of server-side rendering
              var _window;

              if (typeof hostWindow !== 'undefined') {
                _window = hostWindow;
              } else if (typeof window !== 'undefined') {
                _window = window;
              } else if (typeof self !== 'undefined') {
                _window = self;
              } else {
                _window = global$1;
              }

              var attachEvent = typeof _window.document !== 'undefined' && _window.document.attachEvent;

              if (!attachEvent) {
                var requestFrame = function () {
                  var raf = _window.requestAnimationFrame || _window.mozRequestAnimationFrame || _window.webkitRequestAnimationFrame || function (fn) {
                    return _window.setTimeout(fn, 20);
                  };

                  return function (fn) {
                    return raf(fn);
                  };
                }();

                var cancelFrame = function () {
                  var cancel = _window.cancelAnimationFrame || _window.mozCancelAnimationFrame || _window.webkitCancelAnimationFrame || _window.clearTimeout;
                  return function (id) {
                    return cancel(id);
                  };
                }();

                var resetTriggers = function resetTriggers(element) {
                  var triggers = element.__resizeTriggers__,
                      expand = triggers.firstElementChild,
                      contract = triggers.lastElementChild,
                      expandChild = expand.firstElementChild;
                  contract.scrollLeft = contract.scrollWidth;
                  contract.scrollTop = contract.scrollHeight;
                  expandChild.style.width = expand.offsetWidth + 1 + 'px';
                  expandChild.style.height = expand.offsetHeight + 1 + 'px';
                  expand.scrollLeft = expand.scrollWidth;
                  expand.scrollTop = expand.scrollHeight;
                };

                var checkTriggers = function checkTriggers(element) {
                  return element.offsetWidth != element.__resizeLast__.width || element.offsetHeight != element.__resizeLast__.height;
                };

                var scrollListener = function scrollListener(e) {
                  // Don't measure (which forces) reflow for scrolls that happen inside of children!
                  if (e.target.className && typeof e.target.className.indexOf === 'function' && e.target.className.indexOf('contract-trigger') < 0 && e.target.className.indexOf('expand-trigger') < 0) {
                    return;
                  }

                  var element = this;
                  resetTriggers(this);

                  if (this.__resizeRAF__) {
                    cancelFrame(this.__resizeRAF__);
                  }

                  this.__resizeRAF__ = requestFrame(function () {
                    if (checkTriggers(element)) {
                      element.__resizeLast__.width = element.offsetWidth;
                      element.__resizeLast__.height = element.offsetHeight;

                      element.__resizeListeners__.forEach(function (fn) {
                        fn.call(element, e);
                      });
                    }
                  });
                };
                /* Detect CSS Animations support to detect element display/re-attach */


                var animation = false,
                    keyframeprefix = '',
                    animationstartevent = 'animationstart',
                    domPrefixes = 'Webkit Moz O ms'.split(' '),
                    startEvents = 'webkitAnimationStart animationstart oAnimationStart MSAnimationStart'.split(' '),
                    pfx = '';
                {
                  var elm = _window.document.createElement('fakeelement');

                  if (elm.style.animationName !== undefined) {
                    animation = true;
                  }

                  if (animation === false) {
                    for (var i = 0; i < domPrefixes.length; i++) {
                      if (elm.style[domPrefixes[i] + 'AnimationName'] !== undefined) {
                        pfx = domPrefixes[i];
                        keyframeprefix = '-' + pfx.toLowerCase() + '-';
                        animationstartevent = startEvents[i];
                        animation = true;
                        break;
                      }
                    }
                  }
                }
                var animationName = 'resizeanim';
                var animationKeyframes = '@' + keyframeprefix + 'keyframes ' + animationName + ' { from { opacity: 0; } to { opacity: 0; } } ';
                var animationStyle = keyframeprefix + 'animation: 1ms ' + animationName + '; ';
              }

              var createStyles = function createStyles(doc) {
                if (!doc.getElementById('detectElementResize')) {
                  //opacity:0 works around a chrome bug https://code.google.com/p/chromium/issues/detail?id=286360
                  var css = (animationKeyframes ? animationKeyframes : '') + '.resize-triggers { ' + (animationStyle ? animationStyle : '') + 'visibility: hidden; opacity: 0; } ' + '.resize-triggers, .resize-triggers > div, .contract-trigger:before { content: " "; display: block; position: absolute; top: 0; left: 0; height: 100%; width: 100%; overflow: hidden; z-index: -1; } .resize-triggers > div { background: #eee; overflow: auto; } .contract-trigger:before { width: 200%; height: 200%; }',
                      head = doc.head || doc.getElementsByTagName('head')[0],
                      style = doc.createElement('style');
                  style.id = 'detectElementResize';
                  style.type = 'text/css';

                  if (nonce != null) {
                    style.setAttribute('nonce', nonce);
                  }

                  if (style.styleSheet) {
                    style.styleSheet.cssText = css;
                  } else {
                    style.appendChild(doc.createTextNode(css));
                  }

                  head.appendChild(style);
                }
              };

              var addResizeListener = function addResizeListener(element, fn) {
                if (attachEvent) {
                  element.attachEvent('onresize', fn);
                } else {
                  if (!element.__resizeTriggers__) {
                    var doc = element.ownerDocument;

                    var elementStyle = _window.getComputedStyle(element);

                    if (elementStyle && elementStyle.position == 'static') {
                      element.style.position = 'relative';
                    }

                    createStyles(doc);
                    element.__resizeLast__ = {};
                    element.__resizeListeners__ = [];
                    (element.__resizeTriggers__ = doc.createElement('div')).className = 'resize-triggers';
                    var resizeTriggersHtml = '<div class="expand-trigger"><div></div></div>' + '<div class="contract-trigger"></div>';

                    if (window.trustedTypes) {
                      var staticPolicy = trustedTypes.createPolicy('react-virtualized-auto-sizer', {
                        createHTML: function createHTML() {
                          return resizeTriggersHtml;
                        }
                      });
                      element.__resizeTriggers__.innerHTML = staticPolicy.createHTML('');
                    } else {
                      element.__resizeTriggers__.innerHTML = resizeTriggersHtml;
                    }

                    element.appendChild(element.__resizeTriggers__);
                    resetTriggers(element);
                    element.addEventListener('scroll', scrollListener, true);
                    /* Listen for a css animation to detect element display/re-attach */

                    if (animationstartevent) {
                      element.__resizeTriggers__.__animationListener__ = function animationListener(e) {
                        if (e.animationName == animationName) {
                          resetTriggers(element);
                        }
                      };

                      element.__resizeTriggers__.addEventListener(animationstartevent, element.__resizeTriggers__.__animationListener__);
                    }
                  }

                  element.__resizeListeners__.push(fn);
                }
              };

              var removeResizeListener = function removeResizeListener(element, fn) {
                if (attachEvent) {
                  element.detachEvent('onresize', fn);
                } else {
                  element.__resizeListeners__.splice(element.__resizeListeners__.indexOf(fn), 1);

                  if (!element.__resizeListeners__.length) {
                    element.removeEventListener('scroll', scrollListener, true);

                    if (element.__resizeTriggers__.__animationListener__) {
                      element.__resizeTriggers__.removeEventListener(animationstartevent, element.__resizeTriggers__.__animationListener__);

                      element.__resizeTriggers__.__animationListener__ = null;
                    }

                    try {
                      element.__resizeTriggers__ = !element.removeChild(element.__resizeTriggers__);
                    } catch (e) {// Preact compat; see developit/preact-compat/issues/228
                    }
                  }
                }
              };

              return {
                addResizeListener: addResizeListener,
                removeResizeListener: removeResizeListener
              };
            }

            var _class$4, _temp$4;

            function ownKeys$a(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }

            function _objectSpread$a(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys$a(source, true).forEach(function (key) { _defineProperty$6(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys$a(source).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }
            var AutoSizer = (_temp$4 = _class$4 =
            /*#__PURE__*/
            function (_React$Component) {
              _inherits(AutoSizer, _React$Component);

              function AutoSizer() {
                var _getPrototypeOf2;

                var _this;

                _classCallCheck$8(this, AutoSizer);

                for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
                  args[_key] = arguments[_key];
                }

                _this = _possibleConstructorReturn(this, (_getPrototypeOf2 = _getPrototypeOf(AutoSizer)).call.apply(_getPrototypeOf2, [this].concat(args)));

                _defineProperty$6(_assertThisInitialized(_this), "state", {
                  height: _this.props.defaultHeight || 0,
                  width: _this.props.defaultWidth || 0
                });

                _defineProperty$6(_assertThisInitialized(_this), "_parentNode", void 0);

                _defineProperty$6(_assertThisInitialized(_this), "_autoSizer", void 0);

                _defineProperty$6(_assertThisInitialized(_this), "_window", void 0);

                _defineProperty$6(_assertThisInitialized(_this), "_detectElementResize", void 0);

                _defineProperty$6(_assertThisInitialized(_this), "_onResize", function () {
                  var _this$props = _this.props,
                      disableHeight = _this$props.disableHeight,
                      disableWidth = _this$props.disableWidth,
                      onResize = _this$props.onResize;

                  if (_this._parentNode) {
                    // Guard against AutoSizer component being removed from the DOM immediately after being added.
                    // This can result in invalid style values which can result in NaN values if we don't handle them.
                    // See issue #150 for more context.
                    var height = _this._parentNode.offsetHeight || 0;
                    var width = _this._parentNode.offsetWidth || 0;
                    var win = _this._window || window;
                    var style = win.getComputedStyle(_this._parentNode) || {};
                    var paddingLeft = parseInt(style.paddingLeft, 10) || 0;
                    var paddingRight = parseInt(style.paddingRight, 10) || 0;
                    var paddingTop = parseInt(style.paddingTop, 10) || 0;
                    var paddingBottom = parseInt(style.paddingBottom, 10) || 0;
                    var newHeight = height - paddingTop - paddingBottom;
                    var newWidth = width - paddingLeft - paddingRight;

                    if (!disableHeight && _this.state.height !== newHeight || !disableWidth && _this.state.width !== newWidth) {
                      _this.setState({
                        height: height - paddingTop - paddingBottom,
                        width: width - paddingLeft - paddingRight
                      });

                      onResize({
                        height: height,
                        width: width
                      });
                    }
                  }
                });

                _defineProperty$6(_assertThisInitialized(_this), "_setRef", function (autoSizer) {
                  _this._autoSizer = autoSizer;
                });

                return _this;
              }

              _createClass$8(AutoSizer, [{
                key: "componentDidMount",
                value: function componentDidMount() {
                  var nonce = this.props.nonce;

                  if (this._autoSizer && this._autoSizer.parentNode && this._autoSizer.parentNode.ownerDocument && this._autoSizer.parentNode.ownerDocument.defaultView && this._autoSizer.parentNode instanceof this._autoSizer.parentNode.ownerDocument.defaultView.HTMLElement) {
                    // Delay access of parentNode until mount.
                    // This handles edge-cases where the component has already been unmounted before its ref has been set,
                    // As well as libraries like react-lite which have a slightly different lifecycle.
                    this._parentNode = this._autoSizer.parentNode;
                    this._window = this._autoSizer.parentNode.ownerDocument.defaultView; // Defer requiring resize handler in order to support server-side rendering.
                    // See issue #41

                    this._detectElementResize = createDetectElementResize(nonce, this._window);

                    this._detectElementResize.addResizeListener(this._parentNode, this._onResize);

                    this._onResize();
                  }
                }
              }, {
                key: "componentWillUnmount",
                value: function componentWillUnmount() {
                  if (this._detectElementResize && this._parentNode) {
                    this._detectElementResize.removeResizeListener(this._parentNode, this._onResize);
                  }
                }
              }, {
                key: "render",
                value: function render() {
                  var _this$props2 = this.props,
                      children = _this$props2.children,
                      className = _this$props2.className,
                      disableHeight = _this$props2.disableHeight,
                      disableWidth = _this$props2.disableWidth,
                      style = _this$props2.style;
                  var _this$state = this.state,
                      height = _this$state.height,
                      width = _this$state.width; // Outer div should not force width/height since that may prevent containers from shrinking.
                  // Inner component should overflow and use calculated width/height.
                  // See issue #68 for more information.

                  var outerStyle = {
                    overflow: 'visible'
                  };
                  var childParams = {};

                  if (!disableHeight) {
                    outerStyle.height = 0;
                    childParams.height = height;
                  }

                  if (!disableWidth) {
                    outerStyle.width = 0;
                    childParams.width = width;
                  }
                  /**
                   * TODO: Avoid rendering children before the initial measurements have been collected.
                   * At best this would just be wasting cycles.
                   * Add this check into version 10 though as it could break too many ref callbacks in version 9.
                   * Note that if default width/height props were provided this would still work with SSR.
                  if (
                    height !== 0 &&
                    width !== 0
                  ) {
                    child = children({ height, width })
                  }
                  */


                  return react.createElement("div", {
                    className: className,
                    ref: this._setRef,
                    style: _objectSpread$a({}, outerStyle, {}, style)
                  }, children(childParams));
                }
              }]);

              return AutoSizer;
            }(react.Component), _defineProperty$6(_class$4, "propTypes", {
              /** Function responsible for rendering children.*/
              "children": propTypes.func.isRequired,

              /** Optional custom CSS class name to attach to root AutoSizer element.  */
              "className": propTypes.string,

              /** Default height to use for initial render; useful for SSR */
              "defaultHeight": propTypes.number,

              /** Default width to use for initial render; useful for SSR */
              "defaultWidth": propTypes.number,

              /** Disable dynamic :height property */
              "disableHeight": propTypes.bool.isRequired,

              /** Disable dynamic :width property */
              "disableWidth": propTypes.bool.isRequired,

              /** Nonce of the inlined stylesheet for Content Security Policy */
              "nonce": propTypes.string,

              /** Callback to be invoked on-resize */
              "onResize": propTypes.func.isRequired,

              /** Optional inline style */
              "style": propTypes.object
            }), _temp$4);

            _defineProperty$6(AutoSizer, "defaultProps", {
              onResize: function onResize() {},
              disableHeight: false,
              disableWidth: false,
              style: {}
            });

            var bpfrpt_proptype_CellMeasureCache = {
              "hasFixedWidth": propTypes.func.isRequired,
              "hasFixedHeight": propTypes.func.isRequired,
              "has": propTypes.func.isRequired,
              "set": propTypes.func.isRequired,
              "getHeight": propTypes.func.isRequired,
              "getWidth": propTypes.func.isRequired
            };

            var _class$3, _temp$3;

            /**
             * Wraps a cell and measures its rendered content.
             * Measurements are stored in a per-cell cache.
             * Cached-content is not be re-measured.
             */
            var CellMeasurer = (_temp$3 = _class$3 =
            /*#__PURE__*/
            function (_React$PureComponent) {
              _inherits(CellMeasurer, _React$PureComponent);

              function CellMeasurer() {
                var _getPrototypeOf2;

                var _this;

                _classCallCheck$8(this, CellMeasurer);

                for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
                  args[_key] = arguments[_key];
                }

                _this = _possibleConstructorReturn(this, (_getPrototypeOf2 = _getPrototypeOf(CellMeasurer)).call.apply(_getPrototypeOf2, [this].concat(args)));

                _defineProperty$6(_assertThisInitialized(_this), "_child", void 0);

                _defineProperty$6(_assertThisInitialized(_this), "_measure", function () {
                  var _this$props = _this.props,
                      cache = _this$props.cache,
                      _this$props$columnInd = _this$props.columnIndex,
                      columnIndex = _this$props$columnInd === void 0 ? 0 : _this$props$columnInd,
                      parent = _this$props.parent,
                      _this$props$rowIndex = _this$props.rowIndex,
                      rowIndex = _this$props$rowIndex === void 0 ? _this.props.index || 0 : _this$props$rowIndex;

                  var _this$_getCellMeasure = _this._getCellMeasurements(),
                      height = _this$_getCellMeasure.height,
                      width = _this$_getCellMeasure.width;

                  if (height !== cache.getHeight(rowIndex, columnIndex) || width !== cache.getWidth(rowIndex, columnIndex)) {
                    cache.set(rowIndex, columnIndex, width, height);

                    if (parent && typeof parent.recomputeGridSize === 'function') {
                      parent.recomputeGridSize({
                        columnIndex: columnIndex,
                        rowIndex: rowIndex
                      });
                    }
                  }
                });

                _defineProperty$6(_assertThisInitialized(_this), "_registerChild", function (element) {
                  if (element && !(element instanceof Element)) {
                    console.warn('CellMeasurer registerChild expects to be passed Element or null');
                  }

                  _this._child = element;

                  if (element) {
                    _this._maybeMeasureCell();
                  }
                });

                return _this;
              }

              _createClass$8(CellMeasurer, [{
                key: "componentDidMount",
                value: function componentDidMount() {
                  this._maybeMeasureCell();
                }
              }, {
                key: "componentDidUpdate",
                value: function componentDidUpdate() {
                  this._maybeMeasureCell();
                }
              }, {
                key: "render",
                value: function render() {
                  var children = this.props.children;
                  return typeof children === 'function' ? children({
                    measure: this._measure,
                    registerChild: this._registerChild
                  }) : children;
                }
              }, {
                key: "_getCellMeasurements",
                value: function _getCellMeasurements() {
                  var cache = this.props.cache;
                  var node = this._child || reactDom.findDOMNode(this); // TODO Check for a bad combination of fixedWidth and missing numeric width or vice versa with height

                  if (node && node.ownerDocument && node.ownerDocument.defaultView && node instanceof node.ownerDocument.defaultView.HTMLElement) {
                    var styleWidth = node.style.width;
                    var styleHeight = node.style.height; // If we are re-measuring a cell that has already been measured,
                    // It will have a hard-coded width/height from the previous measurement.
                    // The fact that we are measuring indicates this measurement is probably stale,
                    // So explicitly clear it out (eg set to "auto") so we can recalculate.
                    // See issue #593 for more info.
                    // Even if we are measuring initially- if we're inside of a MultiGrid component,
                    // Explicitly clear width/height before measuring to avoid being tainted by another Grid.
                    // eg top/left Grid renders before bottom/right Grid
                    // Since the CellMeasurerCache is shared between them this taints derived cell size values.

                    if (!cache.hasFixedWidth()) {
                      node.style.width = 'auto';
                    }

                    if (!cache.hasFixedHeight()) {
                      node.style.height = 'auto';
                    }

                    var height = Math.ceil(node.offsetHeight);
                    var width = Math.ceil(node.offsetWidth); // Reset after measuring to avoid breaking styles; see #660

                    if (styleWidth) {
                      node.style.width = styleWidth;
                    }

                    if (styleHeight) {
                      node.style.height = styleHeight;
                    }

                    return {
                      height: height,
                      width: width
                    };
                  } else {
                    return {
                      height: 0,
                      width: 0
                    };
                  }
                }
              }, {
                key: "_maybeMeasureCell",
                value: function _maybeMeasureCell() {
                  var _this$props2 = this.props,
                      cache = _this$props2.cache,
                      _this$props2$columnIn = _this$props2.columnIndex,
                      columnIndex = _this$props2$columnIn === void 0 ? 0 : _this$props2$columnIn,
                      parent = _this$props2.parent,
                      _this$props2$rowIndex = _this$props2.rowIndex,
                      rowIndex = _this$props2$rowIndex === void 0 ? this.props.index || 0 : _this$props2$rowIndex;

                  if (!cache.has(rowIndex, columnIndex)) {
                    var _this$_getCellMeasure2 = this._getCellMeasurements(),
                        height = _this$_getCellMeasure2.height,
                        width = _this$_getCellMeasure2.width;

                    cache.set(rowIndex, columnIndex, width, height); // If size has changed, let Grid know to re-render.

                    if (parent && typeof parent.invalidateCellSizeAfterRender === 'function') {
                      parent.invalidateCellSizeAfterRender({
                        columnIndex: columnIndex,
                        rowIndex: rowIndex
                      });
                    }
                  }
                }
              }]);

              return CellMeasurer;
            }(react.PureComponent), _defineProperty$6(_class$3, "propTypes", {
              "cache": function cache() {
                return (typeof bpfrpt_proptype_CellMeasureCache === "function" ? bpfrpt_proptype_CellMeasureCache.isRequired ? bpfrpt_proptype_CellMeasureCache.isRequired : bpfrpt_proptype_CellMeasureCache : propTypes.shape(bpfrpt_proptype_CellMeasureCache).isRequired).apply(this, arguments);
              },
              "children": propTypes.oneOfType([propTypes.func, propTypes.node]).isRequired,
              "columnIndex": propTypes.number,
              "index": propTypes.number,
              "parent": propTypes.shape({
                invalidateCellSizeAfterRender: propTypes.func,
                recomputeGridSize: propTypes.func
              }).isRequired,
              "rowIndex": propTypes.number
            }), _temp$3); // Used for DEV mode warning check

            _defineProperty$6(CellMeasurer, "__internalCellMeasurerFlag", false);

            {
              CellMeasurer.__internalCellMeasurerFlag = true;
            }

            function ownKeys$9(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }

            function _objectSpread$9(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys$9(source, true).forEach(function (key) { _defineProperty$6(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys$9(source).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }

            /**
             * Specifies the number of milliseconds during which to disable pointer events while a scroll is in progress.
             * This improves performance and makes scrolling smoother.
             */

            var IS_SCROLLING_TIMEOUT$1 = 150;
            /**
             * Controls whether the Grid updates the DOM element's scrollLeft/scrollTop based on the current state or just observes it.
             * This prevents Grid from interrupting mouse-wheel animations (see issue #2).
             */

            var SCROLL_POSITION_CHANGE_REASONS = {
              OBSERVED: 'observed',
              REQUESTED: 'requested'
            };
            /**
             * Monitors changes in properties (eg. cellCount) and state (eg. scroll offsets) to determine when rendering needs to occur.
             * This component does not render any visible content itself; it defers to the specified :cellLayoutManager.
             */

            var CollectionView =
            /*#__PURE__*/
            function (_React$PureComponent) {
              _inherits(CollectionView, _React$PureComponent);

              // Invokes callbacks only when their values have changed.
              function CollectionView() {
                var _getPrototypeOf2;

                var _this;

                _classCallCheck$8(this, CollectionView);

                for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
                  args[_key] = arguments[_key];
                }

                _this = _possibleConstructorReturn(this, (_getPrototypeOf2 = _getPrototypeOf(CollectionView)).call.apply(_getPrototypeOf2, [this].concat(args))); // If this component is being rendered server-side, getScrollbarSize() will return undefined.
                // We handle this case in componentDidMount()

                _defineProperty$6(_assertThisInitialized(_this), "state", {
                  isScrolling: false,
                  scrollLeft: 0,
                  scrollTop: 0
                });

                _defineProperty$6(_assertThisInitialized(_this), "_calculateSizeAndPositionDataOnNextUpdate", false);

                _defineProperty$6(_assertThisInitialized(_this), "_onSectionRenderedMemoizer", createCallbackMemoizer());

                _defineProperty$6(_assertThisInitialized(_this), "_onScrollMemoizer", createCallbackMemoizer(false));

                _defineProperty$6(_assertThisInitialized(_this), "_invokeOnSectionRenderedHelper", function () {
                  var _this$props = _this.props,
                      cellLayoutManager = _this$props.cellLayoutManager,
                      onSectionRendered = _this$props.onSectionRendered;

                  _this._onSectionRenderedMemoizer({
                    callback: onSectionRendered,
                    indices: {
                      indices: cellLayoutManager.getLastRenderedIndices()
                    }
                  });
                });

                _defineProperty$6(_assertThisInitialized(_this), "_setScrollingContainerRef", function (ref) {
                  _this._scrollingContainer = ref;
                });

                _defineProperty$6(_assertThisInitialized(_this), "_updateScrollPositionForScrollToCell", function () {
                  var _this$props2 = _this.props,
                      cellLayoutManager = _this$props2.cellLayoutManager,
                      height = _this$props2.height,
                      scrollToAlignment = _this$props2.scrollToAlignment,
                      scrollToCell = _this$props2.scrollToCell,
                      width = _this$props2.width;
                  var _this$state = _this.state,
                      scrollLeft = _this$state.scrollLeft,
                      scrollTop = _this$state.scrollTop;

                  if (scrollToCell >= 0) {
                    var scrollPosition = cellLayoutManager.getScrollPositionForCell({
                      align: scrollToAlignment,
                      cellIndex: scrollToCell,
                      height: height,
                      scrollLeft: scrollLeft,
                      scrollTop: scrollTop,
                      width: width
                    });

                    if (scrollPosition.scrollLeft !== scrollLeft || scrollPosition.scrollTop !== scrollTop) {
                      _this._setScrollPosition(scrollPosition);
                    }
                  }
                });

                _defineProperty$6(_assertThisInitialized(_this), "_onScroll", function (event) {
                  // In certain edge-cases React dispatches an onScroll event with an invalid target.scrollLeft / target.scrollTop.
                  // This invalid event can be detected by comparing event.target to this component's scrollable DOM element.
                  // See issue #404 for more information.
                  if (event.target !== _this._scrollingContainer) {
                    return;
                  } // Prevent pointer events from interrupting a smooth scroll


                  _this._enablePointerEventsAfterDelay(); // When this component is shrunk drastically, React dispatches a series of back-to-back scroll events,
                  // Gradually converging on a scrollTop that is within the bounds of the new, smaller height.
                  // This causes a series of rapid renders that is slow for long lists.
                  // We can avoid that by doing some simple bounds checking to ensure that scrollTop never exceeds the total height.


                  var _this$props3 = _this.props,
                      cellLayoutManager = _this$props3.cellLayoutManager,
                      height = _this$props3.height,
                      isScrollingChange = _this$props3.isScrollingChange,
                      width = _this$props3.width;
                  var scrollbarSize = _this._scrollbarSize;

                  var _cellLayoutManager$ge = cellLayoutManager.getTotalSize(),
                      totalHeight = _cellLayoutManager$ge.height,
                      totalWidth = _cellLayoutManager$ge.width;

                  var scrollLeft = Math.max(0, Math.min(totalWidth - width + scrollbarSize, event.target.scrollLeft));
                  var scrollTop = Math.max(0, Math.min(totalHeight - height + scrollbarSize, event.target.scrollTop)); // Certain devices (like Apple touchpad) rapid-fire duplicate events.
                  // Don't force a re-render if this is the case.
                  // The mouse may move faster then the animation frame does.
                  // Use requestAnimationFrame to avoid over-updating.

                  if (_this.state.scrollLeft !== scrollLeft || _this.state.scrollTop !== scrollTop) {
                    // Browsers with cancelable scroll events (eg. Firefox) interrupt scrolling animations if scrollTop/scrollLeft is set.
                    // Other browsers (eg. Safari) don't scroll as well without the help under certain conditions (DOM or style changes during scrolling).
                    // All things considered, this seems to be the best current work around that I'm aware of.
                    // For more information see https://github.com/bvaughn/react-virtualized/pull/124
                    var scrollPositionChangeReason = event.cancelable ? SCROLL_POSITION_CHANGE_REASONS.OBSERVED : SCROLL_POSITION_CHANGE_REASONS.REQUESTED; // Synchronously set :isScrolling the first time (since _setNextState will reschedule its animation frame each time it's called)

                    if (!_this.state.isScrolling) {
                      isScrollingChange(true);
                    }

                    _this.setState({
                      isScrolling: true,
                      scrollLeft: scrollLeft,
                      scrollPositionChangeReason: scrollPositionChangeReason,
                      scrollTop: scrollTop
                    });
                  }

                  _this._invokeOnScrollMemoizer({
                    scrollLeft: scrollLeft,
                    scrollTop: scrollTop,
                    totalWidth: totalWidth,
                    totalHeight: totalHeight
                  });
                });

                _this._scrollbarSize = scrollbarSize();

                if (_this._scrollbarSize === undefined) {
                  _this._scrollbarSizeMeasured = false;
                  _this._scrollbarSize = 0;
                } else {
                  _this._scrollbarSizeMeasured = true;
                }

                return _this;
              }
              /**
               * Forced recompute of cell sizes and positions.
               * This function should be called if cell sizes have changed but nothing else has.
               * Since cell positions are calculated by callbacks, the collection view has no way of detecting when the underlying data has changed.
               */


              _createClass$8(CollectionView, [{
                key: "recomputeCellSizesAndPositions",
                value: function recomputeCellSizesAndPositions() {
                  this._calculateSizeAndPositionDataOnNextUpdate = true;
                  this.forceUpdate();
                }
                /* ---------------------------- Component lifecycle methods ---------------------------- */

                /**
                 * @private
                 * This method updates scrollLeft/scrollTop in state for the following conditions:
                 * 1) Empty content (0 rows or columns)
                 * 2) New scroll props overriding the current state
                 * 3) Cells-count or cells-size has changed, making previous scroll offsets invalid
                 */

              }, {
                key: "componentDidMount",
                value: function componentDidMount() {
                  var _this$props4 = this.props,
                      cellLayoutManager = _this$props4.cellLayoutManager,
                      scrollLeft = _this$props4.scrollLeft,
                      scrollToCell = _this$props4.scrollToCell,
                      scrollTop = _this$props4.scrollTop; // If this component was first rendered server-side, scrollbar size will be undefined.
                  // In that event we need to remeasure.

                  if (!this._scrollbarSizeMeasured) {
                    this._scrollbarSize = scrollbarSize();
                    this._scrollbarSizeMeasured = true;
                    this.setState({});
                  }

                  if (scrollToCell >= 0) {
                    this._updateScrollPositionForScrollToCell();
                  } else if (scrollLeft >= 0 || scrollTop >= 0) {
                    this._setScrollPosition({
                      scrollLeft: scrollLeft,
                      scrollTop: scrollTop
                    });
                  } // Update onSectionRendered callback.


                  this._invokeOnSectionRenderedHelper();

                  var _cellLayoutManager$ge2 = cellLayoutManager.getTotalSize(),
                      totalHeight = _cellLayoutManager$ge2.height,
                      totalWidth = _cellLayoutManager$ge2.width; // Initialize onScroll callback.


                  this._invokeOnScrollMemoizer({
                    scrollLeft: scrollLeft || 0,
                    scrollTop: scrollTop || 0,
                    totalHeight: totalHeight,
                    totalWidth: totalWidth
                  });
                }
              }, {
                key: "componentDidUpdate",
                value: function componentDidUpdate(prevProps, prevState) {
                  var _this$props5 = this.props,
                      height = _this$props5.height,
                      scrollToAlignment = _this$props5.scrollToAlignment,
                      scrollToCell = _this$props5.scrollToCell,
                      width = _this$props5.width;
                  var _this$state2 = this.state,
                      scrollLeft = _this$state2.scrollLeft,
                      scrollPositionChangeReason = _this$state2.scrollPositionChangeReason,
                      scrollTop = _this$state2.scrollTop; // Make sure requested changes to :scrollLeft or :scrollTop get applied.
                  // Assigning to scrollLeft/scrollTop tells the browser to interrupt any running scroll animations,
                  // And to discard any pending async changes to the scroll position that may have happened in the meantime (e.g. on a separate scrolling thread).
                  // So we only set these when we require an adjustment of the scroll position.
                  // See issue #2 for more information.

                  if (scrollPositionChangeReason === SCROLL_POSITION_CHANGE_REASONS.REQUESTED) {
                    if (scrollLeft >= 0 && scrollLeft !== prevState.scrollLeft && scrollLeft !== this._scrollingContainer.scrollLeft) {
                      this._scrollingContainer.scrollLeft = scrollLeft;
                    }

                    if (scrollTop >= 0 && scrollTop !== prevState.scrollTop && scrollTop !== this._scrollingContainer.scrollTop) {
                      this._scrollingContainer.scrollTop = scrollTop;
                    }
                  } // Update scroll offsets if the current :scrollToCell values requires it


                  if (height !== prevProps.height || scrollToAlignment !== prevProps.scrollToAlignment || scrollToCell !== prevProps.scrollToCell || width !== prevProps.width) {
                    this._updateScrollPositionForScrollToCell();
                  } // Update onRowsRendered callback if start/stop indices have changed


                  this._invokeOnSectionRenderedHelper();
                }
              }, {
                key: "componentWillUnmount",
                value: function componentWillUnmount() {
                  if (this._disablePointerEventsTimeoutId) {
                    clearTimeout(this._disablePointerEventsTimeoutId);
                  }
                }
              }, {
                key: "render",
                value: function render() {
                  var _this$props6 = this.props,
                      autoHeight = _this$props6.autoHeight,
                      cellCount = _this$props6.cellCount,
                      cellLayoutManager = _this$props6.cellLayoutManager,
                      className = _this$props6.className,
                      height = _this$props6.height,
                      horizontalOverscanSize = _this$props6.horizontalOverscanSize,
                      id = _this$props6.id,
                      noContentRenderer = _this$props6.noContentRenderer,
                      style = _this$props6.style,
                      verticalOverscanSize = _this$props6.verticalOverscanSize,
                      width = _this$props6.width;
                  var _this$state3 = this.state,
                      isScrolling = _this$state3.isScrolling,
                      scrollLeft = _this$state3.scrollLeft,
                      scrollTop = _this$state3.scrollTop; // Memoization reset

                  if (this._lastRenderedCellCount !== cellCount || this._lastRenderedCellLayoutManager !== cellLayoutManager || this._calculateSizeAndPositionDataOnNextUpdate) {
                    this._lastRenderedCellCount = cellCount;
                    this._lastRenderedCellLayoutManager = cellLayoutManager;
                    this._calculateSizeAndPositionDataOnNextUpdate = false;
                    cellLayoutManager.calculateSizeAndPositionData();
                  }

                  var _cellLayoutManager$ge3 = cellLayoutManager.getTotalSize(),
                      totalHeight = _cellLayoutManager$ge3.height,
                      totalWidth = _cellLayoutManager$ge3.width; // Safely expand the rendered area by the specified overscan amount


                  var left = Math.max(0, scrollLeft - horizontalOverscanSize);
                  var top = Math.max(0, scrollTop - verticalOverscanSize);
                  var right = Math.min(totalWidth, scrollLeft + width + horizontalOverscanSize);
                  var bottom = Math.min(totalHeight, scrollTop + height + verticalOverscanSize);
                  var childrenToDisplay = height > 0 && width > 0 ? cellLayoutManager.cellRenderers({
                    height: bottom - top,
                    isScrolling: isScrolling,
                    width: right - left,
                    x: left,
                    y: top
                  }) : [];
                  var collectionStyle = {
                    boxSizing: 'border-box',
                    direction: 'ltr',
                    height: autoHeight ? 'auto' : height,
                    position: 'relative',
                    WebkitOverflowScrolling: 'touch',
                    width: width,
                    willChange: 'transform'
                  }; // Force browser to hide scrollbars when we know they aren't necessary.
                  // Otherwise once scrollbars appear they may not disappear again.
                  // For more info see issue #116

                  var verticalScrollBarSize = totalHeight > height ? this._scrollbarSize : 0;
                  var horizontalScrollBarSize = totalWidth > width ? this._scrollbarSize : 0; // Also explicitly init styles to 'auto' if scrollbars are required.
                  // This works around an obscure edge case where external CSS styles have not yet been loaded,
                  // But an initial scroll index of offset is set as an external prop.
                  // Without this style, Grid would render the correct range of cells but would NOT update its internal offset.
                  // This was originally reported via clauderic/react-infinite-calendar/issues/23

                  collectionStyle.overflowX = totalWidth + verticalScrollBarSize <= width ? 'hidden' : 'auto';
                  collectionStyle.overflowY = totalHeight + horizontalScrollBarSize <= height ? 'hidden' : 'auto';
                  return react.createElement("div", {
                    ref: this._setScrollingContainerRef,
                    "aria-label": this.props['aria-label'],
                    className: clsx('ReactVirtualized__Collection', className),
                    id: id,
                    onScroll: this._onScroll,
                    role: "grid",
                    style: _objectSpread$9({}, collectionStyle, {}, style),
                    tabIndex: 0
                  }, cellCount > 0 && react.createElement("div", {
                    className: "ReactVirtualized__Collection__innerScrollContainer",
                    style: {
                      height: totalHeight,
                      maxHeight: totalHeight,
                      maxWidth: totalWidth,
                      overflow: 'hidden',
                      pointerEvents: isScrolling ? 'none' : '',
                      width: totalWidth
                    }
                  }, childrenToDisplay), cellCount === 0 && noContentRenderer());
                }
                /* ---------------------------- Helper methods ---------------------------- */

                /**
                 * Sets an :isScrolling flag for a small window of time.
                 * This flag is used to disable pointer events on the scrollable portion of the Collection.
                 * This prevents jerky/stuttery mouse-wheel scrolling.
                 */

              }, {
                key: "_enablePointerEventsAfterDelay",
                value: function _enablePointerEventsAfterDelay() {
                  var _this2 = this;

                  if (this._disablePointerEventsTimeoutId) {
                    clearTimeout(this._disablePointerEventsTimeoutId);
                  }

                  this._disablePointerEventsTimeoutId = setTimeout(function () {
                    var isScrollingChange = _this2.props.isScrollingChange;
                    isScrollingChange(false);
                    _this2._disablePointerEventsTimeoutId = null;

                    _this2.setState({
                      isScrolling: false
                    });
                  }, IS_SCROLLING_TIMEOUT$1);
                }
              }, {
                key: "_invokeOnScrollMemoizer",
                value: function _invokeOnScrollMemoizer(_ref) {
                  var _this3 = this;

                  var scrollLeft = _ref.scrollLeft,
                      scrollTop = _ref.scrollTop,
                      totalHeight = _ref.totalHeight,
                      totalWidth = _ref.totalWidth;

                  this._onScrollMemoizer({
                    callback: function callback(_ref2) {
                      var scrollLeft = _ref2.scrollLeft,
                          scrollTop = _ref2.scrollTop;
                      var _this3$props = _this3.props,
                          height = _this3$props.height,
                          onScroll = _this3$props.onScroll,
                          width = _this3$props.width;
                      onScroll({
                        clientHeight: height,
                        clientWidth: width,
                        scrollHeight: totalHeight,
                        scrollLeft: scrollLeft,
                        scrollTop: scrollTop,
                        scrollWidth: totalWidth
                      });
                    },
                    indices: {
                      scrollLeft: scrollLeft,
                      scrollTop: scrollTop
                    }
                  });
                }
              }, {
                key: "_setScrollPosition",
                value: function _setScrollPosition(_ref3) {
                  var scrollLeft = _ref3.scrollLeft,
                      scrollTop = _ref3.scrollTop;
                  var newState = {
                    scrollPositionChangeReason: SCROLL_POSITION_CHANGE_REASONS.REQUESTED
                  };

                  if (scrollLeft >= 0) {
                    newState.scrollLeft = scrollLeft;
                  }

                  if (scrollTop >= 0) {
                    newState.scrollTop = scrollTop;
                  }

                  if (scrollLeft >= 0 && scrollLeft !== this.state.scrollLeft || scrollTop >= 0 && scrollTop !== this.state.scrollTop) {
                    this.setState(newState);
                  }
                }
              }], [{
                key: "getDerivedStateFromProps",
                value: function getDerivedStateFromProps(nextProps, prevState) {
                  if (nextProps.cellCount === 0 && (prevState.scrollLeft !== 0 || prevState.scrollTop !== 0)) {
                    return {
                      scrollLeft: 0,
                      scrollTop: 0,
                      scrollPositionChangeReason: SCROLL_POSITION_CHANGE_REASONS.REQUESTED
                    };
                  } else if (nextProps.scrollLeft !== prevState.scrollLeft || nextProps.scrollTop !== prevState.scrollTop) {
                    return {
                      scrollLeft: nextProps.scrollLeft != null ? nextProps.scrollLeft : prevState.scrollLeft,
                      scrollTop: nextProps.scrollTop != null ? nextProps.scrollTop : prevState.scrollTop,
                      scrollPositionChangeReason: SCROLL_POSITION_CHANGE_REASONS.REQUESTED
                    };
                  }

                  return null;
                }
              }]);

              return CollectionView;
            }(react.PureComponent);

            _defineProperty$6(CollectionView, "defaultProps", {
              'aria-label': 'grid',
              horizontalOverscanSize: 0,
              noContentRenderer: function noContentRenderer() {
                return null;
              },
              onScroll: function onScroll() {
                return null;
              },
              onSectionRendered: function onSectionRendered() {
                return null;
              },
              scrollToAlignment: 'auto',
              scrollToCell: -1,
              style: {},
              verticalOverscanSize: 0
            });

            CollectionView.propTypes = {
              'aria-label': propTypes.string,

              /**
               * Removes fixed height from the scrollingContainer so that the total height
               * of rows can stretch the window. Intended for use with WindowScroller
               */
              autoHeight: propTypes.bool,

              /**
               * Number of cells in collection.
               */
              cellCount: propTypes.number.isRequired,

              /**
               * Calculates cell sizes and positions and manages rendering the appropriate cells given a specified window.
               */
              cellLayoutManager: propTypes.object.isRequired,

              /**
               * Optional custom CSS class name to attach to root Collection element.
               */
              className: propTypes.string,

              /**
               * Height of Collection; this property determines the number of visible (vs virtualized) rows.
               */
              height: propTypes.number.isRequired,

              /**
               * Optional custom id to attach to root Collection element.
               */
              id: propTypes.string,

              /**
               * Enables the `Collection` to horiontally "overscan" its content similar to how `Grid` does.
               * This can reduce flicker around the edges when a user scrolls quickly.
               */
              horizontalOverscanSize: propTypes.number.isRequired,
              isScrollingChange: propTypes.func,

              /**
               * Optional renderer to be used in place of rows when either :rowCount or :cellCount is 0.
               */
              noContentRenderer: propTypes.func.isRequired,

              /**
               * Callback invoked whenever the scroll offset changes within the inner scrollable region.
               * This callback can be used to sync scrolling between lists, tables, or grids.
               * ({ clientHeight, clientWidth, scrollHeight, scrollLeft, scrollTop, scrollWidth }): void
               */
              onScroll: propTypes.func.isRequired,

              /**
               * Callback invoked with information about the section of the Collection that was just rendered.
               * This callback is passed a named :indices parameter which is an Array of the most recently rendered section indices.
               */
              onSectionRendered: propTypes.func.isRequired,

              /**
               * Horizontal offset.
               */
              scrollLeft: propTypes.number,

              /**
               * Controls scroll-to-cell behavior of the Grid.
               * The default ("auto") scrolls the least amount possible to ensure that the specified cell is fully visible.
               * Use "start" to align cells to the top/left of the Grid and "end" to align bottom/right.
               */
              scrollToAlignment: propTypes.oneOf(['auto', 'end', 'start', 'center']).isRequired,

              /**
               * Cell index to ensure visible (by forcefully scrolling if necessary).
               */
              scrollToCell: propTypes.number.isRequired,

              /**
               * Vertical offset.
               */
              scrollTop: propTypes.number,

              /**
               * Optional custom inline style to attach to root Collection element.
               */
              style: propTypes.object,

              /**
               * Enables the `Collection` to vertically "overscan" its content similar to how `Grid` does.
               * This can reduce flicker around the edges when a user scrolls quickly.
               */
              verticalOverscanSize: propTypes.number.isRequired,

              /**
               * Width of Collection; this property determines the number of visible (vs virtualized) columns.
               */
              width: propTypes.number.isRequired
            } ;
            polyfill(CollectionView);

            ({
              "index": propTypes.number.isRequired
            });
            ({
              "x": propTypes.number.isRequired,
              "y": propTypes.number.isRequired
            });
            ({
              "scrollLeft": propTypes.number.isRequired,
              "scrollTop": propTypes.number.isRequired
            });
            ({
              "height": propTypes.number.isRequired,
              "width": propTypes.number.isRequired,
              "x": propTypes.number.isRequired,
              "y": propTypes.number.isRequired
            });
            ({
              "height": propTypes.number.isRequired,
              "width": propTypes.number.isRequired
            });

            /**
             * A section of the Window.
             * Window Sections are used to group nearby cells.
             * This enables us to more quickly determine which cells to display in a given region of the Window.
             * Sections have a fixed size and contain 0 to many cells (tracked by their indices).
             */
            var Section =
            /*#__PURE__*/
            function () {
              function Section(_ref) {
                var height = _ref.height,
                    width = _ref.width,
                    x = _ref.x,
                    y = _ref.y;

                _classCallCheck$8(this, Section);

                this.height = height;
                this.width = width;
                this.x = x;
                this.y = y;
                this._indexMap = {};
                this._indices = [];
              }
              /** Add a cell to this section. */


              _createClass$8(Section, [{
                key: "addCellIndex",
                value: function addCellIndex(_ref2) {
                  var index = _ref2.index;

                  if (!this._indexMap[index]) {
                    this._indexMap[index] = true;

                    this._indices.push(index);
                  }
                }
                /** Get all cell indices that have been added to this section. */

              }, {
                key: "getCellIndices",
                value: function getCellIndices() {
                  return this._indices;
                }
                /** Intended for debugger/test purposes only */

              }, {
                key: "toString",
                value: function toString() {
                  return "".concat(this.x, ",").concat(this.y, " ").concat(this.width, "x").concat(this.height);
                }
              }]);

              return Section;
            }();

            var SECTION_SIZE = 100;

            /**
             * Contains 0 to many Sections.
             * Grows (and adds Sections) dynamically as cells are registered.
             * Automatically adds cells to the appropriate Section(s).
             */
            var SectionManager =
            /*#__PURE__*/
            function () {
              function SectionManager() {
                var sectionSize = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : SECTION_SIZE;

                _classCallCheck$8(this, SectionManager);

                this._sectionSize = sectionSize;
                this._cellMetadata = [];
                this._sections = {};
              }
              /**
               * Gets all cell indices contained in the specified region.
               * A region may encompass 1 or more Sections.
               */


              _createClass$8(SectionManager, [{
                key: "getCellIndices",
                value: function getCellIndices(_ref) {
                  var height = _ref.height,
                      width = _ref.width,
                      x = _ref.x,
                      y = _ref.y;
                  var indices = {};
                  this.getSections({
                    height: height,
                    width: width,
                    x: x,
                    y: y
                  }).forEach(function (section) {
                    return section.getCellIndices().forEach(function (index) {
                      indices[index] = index;
                    });
                  }); // Object keys are strings; this function returns numbers

                  return Object.keys(indices).map(function (index) {
                    return indices[index];
                  });
                }
                /** Get size and position information for the cell specified. */

              }, {
                key: "getCellMetadata",
                value: function getCellMetadata(_ref2) {
                  var index = _ref2.index;
                  return this._cellMetadata[index];
                }
                /** Get all Sections overlapping the specified region. */

              }, {
                key: "getSections",
                value: function getSections(_ref3) {
                  var height = _ref3.height,
                      width = _ref3.width,
                      x = _ref3.x,
                      y = _ref3.y;
                  var sectionXStart = Math.floor(x / this._sectionSize);
                  var sectionXStop = Math.floor((x + width - 1) / this._sectionSize);
                  var sectionYStart = Math.floor(y / this._sectionSize);
                  var sectionYStop = Math.floor((y + height - 1) / this._sectionSize);
                  var sections = [];

                  for (var sectionX = sectionXStart; sectionX <= sectionXStop; sectionX++) {
                    for (var sectionY = sectionYStart; sectionY <= sectionYStop; sectionY++) {
                      var key = "".concat(sectionX, ".").concat(sectionY);

                      if (!this._sections[key]) {
                        this._sections[key] = new Section({
                          height: this._sectionSize,
                          width: this._sectionSize,
                          x: sectionX * this._sectionSize,
                          y: sectionY * this._sectionSize
                        });
                      }

                      sections.push(this._sections[key]);
                    }
                  }

                  return sections;
                }
                /** Total number of Sections based on the currently registered cells. */

              }, {
                key: "getTotalSectionCount",
                value: function getTotalSectionCount() {
                  return Object.keys(this._sections).length;
                }
                /** Intended for debugger/test purposes only */

              }, {
                key: "toString",
                value: function toString() {
                  var _this = this;

                  return Object.keys(this._sections).map(function (index) {
                    return _this._sections[index].toString();
                  });
                }
                /** Adds a cell to the appropriate Sections and registers it metadata for later retrievable. */

              }, {
                key: "registerCell",
                value: function registerCell(_ref4) {
                  var cellMetadatum = _ref4.cellMetadatum,
                      index = _ref4.index;
                  this._cellMetadata[index] = cellMetadatum;
                  this.getSections(cellMetadatum).forEach(function (section) {
                    return section.addCellIndex({
                      index: index
                    });
                  });
                }
              }]);

              return SectionManager;
            }();

            function calculateSizeAndPositionData(_ref) {
              var cellCount = _ref.cellCount,
                  cellSizeAndPositionGetter = _ref.cellSizeAndPositionGetter,
                  sectionSize = _ref.sectionSize;
              var cellMetadata = [];
              var sectionManager = new SectionManager(sectionSize);
              var height = 0;
              var width = 0;

              for (var index = 0; index < cellCount; index++) {
                var cellMetadatum = cellSizeAndPositionGetter({
                  index: index
                });

                if (cellMetadatum.height == null || isNaN(cellMetadatum.height) || cellMetadatum.width == null || isNaN(cellMetadatum.width) || cellMetadatum.x == null || isNaN(cellMetadatum.x) || cellMetadatum.y == null || isNaN(cellMetadatum.y)) {
                  throw Error("Invalid metadata returned for cell ".concat(index, ":\n        x:").concat(cellMetadatum.x, ", y:").concat(cellMetadatum.y, ", width:").concat(cellMetadatum.width, ", height:").concat(cellMetadatum.height));
                }

                height = Math.max(height, cellMetadatum.y + cellMetadatum.height);
                width = Math.max(width, cellMetadatum.x + cellMetadatum.width);
                cellMetadata[index] = cellMetadatum;
                sectionManager.registerCell({
                  cellMetadatum: cellMetadatum,
                  index: index
                });
              }

              return {
                cellMetadata: cellMetadata,
                height: height,
                sectionManager: sectionManager,
                width: width
              };
            }

            /**
             * Determines a new offset that ensures a certain cell is visible, given the current offset.
             * If the cell is already visible then the current offset will be returned.
             * If the current offset is too great or small, it will be adjusted just enough to ensure the specified index is visible.
             *
             * @param align Desired alignment within container; one of "auto" (default), "start", or "end"
             * @param cellOffset Offset (x or y) position for cell
             * @param cellSize Size (width or height) of cell
             * @param containerSize Total size (width or height) of the container
             * @param currentOffset Container's current (x or y) offset
             * @return Offset to use to ensure the specified cell is visible
             */
            function getUpdatedOffsetForIndex(_ref) {
              var _ref$align = _ref.align,
                  align = _ref$align === void 0 ? 'auto' : _ref$align,
                  cellOffset = _ref.cellOffset,
                  cellSize = _ref.cellSize,
                  containerSize = _ref.containerSize,
                  currentOffset = _ref.currentOffset;
              var maxOffset = cellOffset;
              var minOffset = maxOffset - containerSize + cellSize;

              switch (align) {
                case 'start':
                  return maxOffset;

                case 'end':
                  return minOffset;

                case 'center':
                  return maxOffset - (containerSize - cellSize) / 2;

                default:
                  return Math.max(minOffset, Math.min(maxOffset, currentOffset));
              }
            }

            /**
             * Renders scattered or non-linear data.
             * Unlike Grid, which renders checkerboard data, Collection can render arbitrarily positioned- even overlapping- data.
             */
            var Collection =
            /*#__PURE__*/
            function (_React$PureComponent) {
              _inherits(Collection, _React$PureComponent);

              function Collection(props, context) {
                var _this;

                _classCallCheck$8(this, Collection);

                _this = _possibleConstructorReturn(this, _getPrototypeOf(Collection).call(this, props, context));
                _this._cellMetadata = [];
                _this._lastRenderedCellIndices = []; // Cell cache during scroll (for performance)

                _this._cellCache = [];
                _this._isScrollingChange = _this._isScrollingChange.bind(_assertThisInitialized(_this));
                _this._setCollectionViewRef = _this._setCollectionViewRef.bind(_assertThisInitialized(_this));
                return _this;
              }

              _createClass$8(Collection, [{
                key: "forceUpdate",
                value: function forceUpdate() {
                  if (this._collectionView !== undefined) {
                    this._collectionView.forceUpdate();
                  }
                }
                /** See Collection#recomputeCellSizesAndPositions */

              }, {
                key: "recomputeCellSizesAndPositions",
                value: function recomputeCellSizesAndPositions() {
                  this._cellCache = [];

                  this._collectionView.recomputeCellSizesAndPositions();
                }
                /** React lifecycle methods */

              }, {
                key: "render",
                value: function render() {
                  var props = _extends({}, this.props);

                  return react.createElement(CollectionView, _extends({
                    cellLayoutManager: this,
                    isScrollingChange: this._isScrollingChange,
                    ref: this._setCollectionViewRef
                  }, props));
                }
                /** CellLayoutManager interface */

              }, {
                key: "calculateSizeAndPositionData",
                value: function calculateSizeAndPositionData$1() {
                  var _this$props = this.props,
                      cellCount = _this$props.cellCount,
                      cellSizeAndPositionGetter = _this$props.cellSizeAndPositionGetter,
                      sectionSize = _this$props.sectionSize;

                  var data = calculateSizeAndPositionData({
                    cellCount: cellCount,
                    cellSizeAndPositionGetter: cellSizeAndPositionGetter,
                    sectionSize: sectionSize
                  });

                  this._cellMetadata = data.cellMetadata;
                  this._sectionManager = data.sectionManager;
                  this._height = data.height;
                  this._width = data.width;
                }
                /**
                 * Returns the most recently rendered set of cell indices.
                 */

              }, {
                key: "getLastRenderedIndices",
                value: function getLastRenderedIndices() {
                  return this._lastRenderedCellIndices;
                }
                /**
                 * Calculates the minimum amount of change from the current scroll position to ensure the specified cell is (fully) visible.
                 */

              }, {
                key: "getScrollPositionForCell",
                value: function getScrollPositionForCell(_ref) {
                  var align = _ref.align,
                      cellIndex = _ref.cellIndex,
                      height = _ref.height,
                      scrollLeft = _ref.scrollLeft,
                      scrollTop = _ref.scrollTop,
                      width = _ref.width;
                  var cellCount = this.props.cellCount;

                  if (cellIndex >= 0 && cellIndex < cellCount) {
                    var cellMetadata = this._cellMetadata[cellIndex];
                    scrollLeft = getUpdatedOffsetForIndex({
                      align: align,
                      cellOffset: cellMetadata.x,
                      cellSize: cellMetadata.width,
                      containerSize: width,
                      currentOffset: scrollLeft,
                      targetIndex: cellIndex
                    });
                    scrollTop = getUpdatedOffsetForIndex({
                      align: align,
                      cellOffset: cellMetadata.y,
                      cellSize: cellMetadata.height,
                      containerSize: height,
                      currentOffset: scrollTop,
                      targetIndex: cellIndex
                    });
                  }

                  return {
                    scrollLeft: scrollLeft,
                    scrollTop: scrollTop
                  };
                }
              }, {
                key: "getTotalSize",
                value: function getTotalSize() {
                  return {
                    height: this._height,
                    width: this._width
                  };
                }
              }, {
                key: "cellRenderers",
                value: function cellRenderers(_ref2) {
                  var _this2 = this;

                  var height = _ref2.height,
                      isScrolling = _ref2.isScrolling,
                      width = _ref2.width,
                      x = _ref2.x,
                      y = _ref2.y;
                  var _this$props2 = this.props,
                      cellGroupRenderer = _this$props2.cellGroupRenderer,
                      cellRenderer = _this$props2.cellRenderer; // Store for later calls to getLastRenderedIndices()

                  this._lastRenderedCellIndices = this._sectionManager.getCellIndices({
                    height: height,
                    width: width,
                    x: x,
                    y: y
                  });
                  return cellGroupRenderer({
                    cellCache: this._cellCache,
                    cellRenderer: cellRenderer,
                    cellSizeAndPositionGetter: function cellSizeAndPositionGetter(_ref3) {
                      var index = _ref3.index;
                      return _this2._sectionManager.getCellMetadata({
                        index: index
                      });
                    },
                    indices: this._lastRenderedCellIndices,
                    isScrolling: isScrolling
                  });
                }
              }, {
                key: "_isScrollingChange",
                value: function _isScrollingChange(isScrolling) {
                  if (!isScrolling) {
                    this._cellCache = [];
                  }
                }
              }, {
                key: "_setCollectionViewRef",
                value: function _setCollectionViewRef(ref) {
                  this._collectionView = ref;
                }
              }]);

              return Collection;
            }(react.PureComponent);

            _defineProperty$6(Collection, "defaultProps", {
              'aria-label': 'grid',
              cellGroupRenderer: defaultCellGroupRenderer
            });
            Collection.propTypes = {
              'aria-label': propTypes.string,

              /**
               * Number of cells in Collection.
               */
              cellCount: propTypes.number.isRequired,

              /**
               * Responsible for rendering a group of cells given their indices.
               * Should implement the following interface: ({
               *   cellSizeAndPositionGetter:Function,
               *   indices: Array<number>,
               *   cellRenderer: Function
               * }): Array<PropTypes.node>
               */
              cellGroupRenderer: propTypes.func.isRequired,

              /**
               * Responsible for rendering a cell given an row and column index.
               * Should implement the following interface: ({ index: number, key: string, style: object }): PropTypes.element
               */
              cellRenderer: propTypes.func.isRequired,

              /**
               * Callback responsible for returning size and offset/position information for a given cell (index).
               * ({ index: number }): { height: number, width: number, x: number, y: number }
               */
              cellSizeAndPositionGetter: propTypes.func.isRequired,

              /**
               * Optionally override the size of the sections a Collection's cells are split into.
               */
              sectionSize: propTypes.number
            } ;

            function defaultCellGroupRenderer(_ref4) {
              var cellCache = _ref4.cellCache,
                  cellRenderer = _ref4.cellRenderer,
                  cellSizeAndPositionGetter = _ref4.cellSizeAndPositionGetter,
                  indices = _ref4.indices,
                  isScrolling = _ref4.isScrolling;
              return indices.map(function (index) {
                var cellMetadata = cellSizeAndPositionGetter({
                  index: index
                });
                var cellRendererProps = {
                  index: index,
                  isScrolling: isScrolling,
                  key: index,
                  style: {
                    height: cellMetadata.height,
                    left: cellMetadata.x,
                    position: 'absolute',
                    top: cellMetadata.y,
                    width: cellMetadata.width
                  }
                }; // Avoid re-creating cells while scrolling.
                // This can lead to the same cell being created many times and can cause performance issues for "heavy" cells.
                // If a scroll is in progress- cache and reuse cells.
                // This cache will be thrown away once scrolling complets.

                if (isScrolling) {
                  if (!(index in cellCache)) {
                    cellCache[index] = cellRenderer(cellRendererProps);
                  }

                  return cellCache[index];
                } else {
                  return cellRenderer(cellRendererProps);
                }
              }).filter(function (renderedCell) {
                return !!renderedCell;
              });
            }

            ({
              /**
               * Function responsible for rendering a virtualized Grid.
               * This function should implement the following signature:
               * ({ adjustedWidth, getColumnWidth, registerChild }) => PropTypes.element
               *
               * The specified :getColumnWidth function should be passed to the Grid's :columnWidth property.
               * The :registerChild should be passed to the Grid's :ref property.
               * The :adjustedWidth property is optional; it reflects the lesser of the overall width or the width of all columns.
               */
              children: propTypes.func.isRequired,

              /** Optional maximum allowed column width */
              columnMaxWidth: propTypes.number,

              /** Optional minimum allowed column width */
              columnMinWidth: propTypes.number,

              /** Number of columns in Grid or Table child */
              columnCount: propTypes.number.isRequired,

              /** Width of Grid or Table child */
              width: propTypes.number.isRequired
            }) ;

            function _arrayLikeToArray$2(arr, len) {
              if (len == null || len > arr.length) len = arr.length;

              for (var i = 0, arr2 = new Array(len); i < len; i++) {
                arr2[i] = arr[i];
              }

              return arr2;
            }

            function _arrayWithoutHoles(arr) {
              if (Array.isArray(arr)) return _arrayLikeToArray$2(arr);
            }

            function _iterableToArray(iter) {
              if (typeof Symbol !== "undefined" && iter[Symbol.iterator] != null || iter["@@iterator"] != null) return Array.from(iter);
            }

            function _unsupportedIterableToArray$2(o, minLen) {
              if (!o) return;
              if (typeof o === "string") return _arrayLikeToArray$2(o, minLen);
              var n = Object.prototype.toString.call(o).slice(8, -1);
              if (n === "Object" && o.constructor) n = o.constructor.name;
              if (n === "Map" || n === "Set") return Array.from(o);
              if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray$2(o, minLen);
            }

            function _nonIterableSpread() {
              throw new TypeError("Invalid attempt to spread non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.");
            }

            function _toConsumableArray(arr) {
              return _arrayWithoutHoles(arr) || _iterableToArray(arr) || _unsupportedIterableToArray$2(arr) || _nonIterableSpread();
            }

            /**
             * Higher-order component that manages lazy-loading for "infinite" data.
             * This component decorates a virtual component and just-in-time prefetches rows as a user scrolls.
             * It is intended as a convenience component; fork it if you'd like finer-grained control over data-loading.
             */

            var InfiniteLoader =
            /*#__PURE__*/
            function (_React$PureComponent) {
              _inherits(InfiniteLoader, _React$PureComponent);

              function InfiniteLoader(props, context) {
                var _this;

                _classCallCheck$8(this, InfiniteLoader);

                _this = _possibleConstructorReturn(this, _getPrototypeOf(InfiniteLoader).call(this, props, context));
                _this._loadMoreRowsMemoizer = createCallbackMemoizer();
                _this._onRowsRendered = _this._onRowsRendered.bind(_assertThisInitialized(_this));
                _this._registerChild = _this._registerChild.bind(_assertThisInitialized(_this));
                return _this;
              }

              _createClass$8(InfiniteLoader, [{
                key: "resetLoadMoreRowsCache",
                value: function resetLoadMoreRowsCache(autoReload) {
                  this._loadMoreRowsMemoizer = createCallbackMemoizer();

                  if (autoReload) {
                    this._doStuff(this._lastRenderedStartIndex, this._lastRenderedStopIndex);
                  }
                }
              }, {
                key: "render",
                value: function render() {
                  var children = this.props.children;
                  return children({
                    onRowsRendered: this._onRowsRendered,
                    registerChild: this._registerChild
                  });
                }
              }, {
                key: "_loadUnloadedRanges",
                value: function _loadUnloadedRanges(unloadedRanges) {
                  var _this2 = this;

                  var loadMoreRows = this.props.loadMoreRows;
                  unloadedRanges.forEach(function (unloadedRange) {
                    var promise = loadMoreRows(unloadedRange);

                    if (promise) {
                      promise.then(function () {
                        // Refresh the visible rows if any of them have just been loaded.
                        // Otherwise they will remain in their unloaded visual state.
                        if (isRangeVisible({
                          lastRenderedStartIndex: _this2._lastRenderedStartIndex,
                          lastRenderedStopIndex: _this2._lastRenderedStopIndex,
                          startIndex: unloadedRange.startIndex,
                          stopIndex: unloadedRange.stopIndex
                        })) {
                          if (_this2._registeredChild) {
                            forceUpdateReactVirtualizedComponent(_this2._registeredChild, _this2._lastRenderedStartIndex);
                          }
                        }
                      });
                    }
                  });
                }
              }, {
                key: "_onRowsRendered",
                value: function _onRowsRendered(_ref) {
                  var startIndex = _ref.startIndex,
                      stopIndex = _ref.stopIndex;
                  this._lastRenderedStartIndex = startIndex;
                  this._lastRenderedStopIndex = stopIndex;

                  this._doStuff(startIndex, stopIndex);
                }
              }, {
                key: "_doStuff",
                value: function _doStuff(startIndex, stopIndex) {
                  var _ref2,
                      _this3 = this;

                  var _this$props = this.props,
                      isRowLoaded = _this$props.isRowLoaded,
                      minimumBatchSize = _this$props.minimumBatchSize,
                      rowCount = _this$props.rowCount,
                      threshold = _this$props.threshold;
                  var unloadedRanges = scanForUnloadedRanges({
                    isRowLoaded: isRowLoaded,
                    minimumBatchSize: minimumBatchSize,
                    rowCount: rowCount,
                    startIndex: Math.max(0, startIndex - threshold),
                    stopIndex: Math.min(rowCount - 1, stopIndex + threshold)
                  }); // For memoize comparison

                  var squashedUnloadedRanges = (_ref2 = []).concat.apply(_ref2, _toConsumableArray(unloadedRanges.map(function (_ref3) {
                    var startIndex = _ref3.startIndex,
                        stopIndex = _ref3.stopIndex;
                    return [startIndex, stopIndex];
                  })));

                  this._loadMoreRowsMemoizer({
                    callback: function callback() {
                      _this3._loadUnloadedRanges(unloadedRanges);
                    },
                    indices: {
                      squashedUnloadedRanges: squashedUnloadedRanges
                    }
                  });
                }
              }, {
                key: "_registerChild",
                value: function _registerChild(registeredChild) {
                  this._registeredChild = registeredChild;
                }
              }]);

              return InfiniteLoader;
            }(react.PureComponent);
            /**
             * Determines if the specified start/stop range is visible based on the most recently rendered range.
             */


            _defineProperty$6(InfiniteLoader, "defaultProps", {
              minimumBatchSize: 10,
              rowCount: 0,
              threshold: 15
            });
            InfiniteLoader.propTypes = {
              /**
               * Function responsible for rendering a virtualized component.
               * This function should implement the following signature:
               * ({ onRowsRendered, registerChild }) => PropTypes.element
               *
               * The specified :onRowsRendered function should be passed through to the child's :onRowsRendered property.
               * The :registerChild callback should be set as the virtualized component's :ref.
               */
              children: propTypes.func.isRequired,

              /**
               * Function responsible for tracking the loaded state of each row.
               * It should implement the following signature: ({ index: number }): boolean
               */
              isRowLoaded: propTypes.func.isRequired,

              /**
               * Callback to be invoked when more rows must be loaded.
               * It should implement the following signature: ({ startIndex, stopIndex }): Promise
               * The returned Promise should be resolved once row data has finished loading.
               * It will be used to determine when to refresh the list with the newly-loaded data.
               * This callback may be called multiple times in reaction to a single scroll event.
               */
              loadMoreRows: propTypes.func.isRequired,

              /**
               * Minimum number of rows to be loaded at a time.
               * This property can be used to batch requests to reduce HTTP requests.
               */
              minimumBatchSize: propTypes.number.isRequired,

              /**
               * Number of rows in list; can be arbitrary high number if actual number is unknown.
               */
              rowCount: propTypes.number.isRequired,

              /**
               * Threshold at which to pre-fetch data.
               * A threshold X means that data will start loading when a user scrolls within X rows.
               * This value defaults to 15.
               */
              threshold: propTypes.number.isRequired
            } ;
            function isRangeVisible(_ref4) {
              var lastRenderedStartIndex = _ref4.lastRenderedStartIndex,
                  lastRenderedStopIndex = _ref4.lastRenderedStopIndex,
                  startIndex = _ref4.startIndex,
                  stopIndex = _ref4.stopIndex;
              return !(startIndex > lastRenderedStopIndex || stopIndex < lastRenderedStartIndex);
            }
            /**
             * Returns all of the ranges within a larger range that contain unloaded rows.
             */

            function scanForUnloadedRanges(_ref5) {
              var isRowLoaded = _ref5.isRowLoaded,
                  minimumBatchSize = _ref5.minimumBatchSize,
                  rowCount = _ref5.rowCount,
                  startIndex = _ref5.startIndex,
                  stopIndex = _ref5.stopIndex;
              var unloadedRanges = [];
              var rangeStartIndex = null;
              var rangeStopIndex = null;

              for (var index = startIndex; index <= stopIndex; index++) {
                var loaded = isRowLoaded({
                  index: index
                });

                if (!loaded) {
                  rangeStopIndex = index;

                  if (rangeStartIndex === null) {
                    rangeStartIndex = index;
                  }
                } else if (rangeStopIndex !== null) {
                  unloadedRanges.push({
                    startIndex: rangeStartIndex,
                    stopIndex: rangeStopIndex
                  });
                  rangeStartIndex = rangeStopIndex = null;
                }
              } // If :rangeStopIndex is not null it means we haven't ran out of unloaded rows.
              // Scan forward to try filling our :minimumBatchSize.


              if (rangeStopIndex !== null) {
                var potentialStopIndex = Math.min(Math.max(rangeStopIndex, rangeStartIndex + minimumBatchSize - 1), rowCount - 1);

                for (var _index = rangeStopIndex + 1; _index <= potentialStopIndex; _index++) {
                  if (!isRowLoaded({
                    index: _index
                  })) {
                    rangeStopIndex = _index;
                  } else {
                    break;
                  }
                }

                unloadedRanges.push({
                  startIndex: rangeStartIndex,
                  stopIndex: rangeStopIndex
                });
              } // Check to see if our first range ended prematurely.
              // In this case we should scan backwards to try filling our :minimumBatchSize.


              if (unloadedRanges.length) {
                var firstUnloadedRange = unloadedRanges[0];

                while (firstUnloadedRange.stopIndex - firstUnloadedRange.startIndex + 1 < minimumBatchSize && firstUnloadedRange.startIndex > 0) {
                  var _index2 = firstUnloadedRange.startIndex - 1;

                  if (!isRowLoaded({
                    index: _index2
                  })) {
                    firstUnloadedRange.startIndex = _index2;
                  } else {
                    break;
                  }
                }
              }

              return unloadedRanges;
            }
            /**
             * Since RV components use shallowCompare we need to force a render (even though props haven't changed).
             * However InfiniteLoader may wrap a Grid or it may wrap a Table or List.
             * In the first case the built-in React forceUpdate() method is sufficient to force a re-render,
             * But in the latter cases we need to use the RV-specific forceUpdateGrid() method.
             * Else the inner Grid will not be re-rendered and visuals may be stale.
             *
             * Additionally, while a Grid is scrolling the cells can be cached,
             * So it's important to invalidate that cache by recalculating sizes
             * before forcing a rerender.
             */

            function forceUpdateReactVirtualizedComponent(component) {
              var currentIndex = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 0;
              var recomputeSize = typeof component.recomputeGridSize === 'function' ? component.recomputeGridSize : component.recomputeRowHeights;

              if (recomputeSize) {
                recomputeSize.call(component, currentIndex);
              } else {
                component.forceUpdate();
              }
            }

            ({
              "index": propTypes.number.isRequired,
              "isScrolling": propTypes.bool.isRequired,
              "isVisible": propTypes.bool.isRequired,
              "key": propTypes.string.isRequired,
              "parent": propTypes.object.isRequired,
              "style": propTypes.object.isRequired
            });
            var bpfrpt_proptype_RowRenderer = propTypes.func;
            ({
              "overscanStartIndex": propTypes.number.isRequired,
              "overscanStopIndex": propTypes.number.isRequired,
              "startIndex": propTypes.number.isRequired,
              "stopIndex": propTypes.number.isRequired
            });
            ({
              "clientHeight": propTypes.number.isRequired,
              "scrollHeight": propTypes.number.isRequired,
              "scrollTop": propTypes.number.isRequired
            });

            var _class$2, _temp$2;
            /**
             * It is inefficient to create and manage a large list of DOM elements within a scrolling container
             * if only a few of those elements are visible. The primary purpose of this component is to improve
             * performance by only rendering the DOM nodes that a user is able to see based on their current
             * scroll position.
             *
             * This component renders a virtualized list of elements with either fixed or dynamic heights.
             */

            var List = (_temp$2 = _class$2 =
            /*#__PURE__*/
            function (_React$PureComponent) {
              _inherits(List, _React$PureComponent);

              function List() {
                var _getPrototypeOf2;

                var _this;

                _classCallCheck$8(this, List);

                for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
                  args[_key] = arguments[_key];
                }

                _this = _possibleConstructorReturn(this, (_getPrototypeOf2 = _getPrototypeOf(List)).call.apply(_getPrototypeOf2, [this].concat(args)));

                _defineProperty$6(_assertThisInitialized(_this), "Grid", void 0);

                _defineProperty$6(_assertThisInitialized(_this), "_cellRenderer", function (_ref) {
                  var parent = _ref.parent,
                      rowIndex = _ref.rowIndex,
                      style = _ref.style,
                      isScrolling = _ref.isScrolling,
                      isVisible = _ref.isVisible,
                      key = _ref.key;
                  var rowRenderer = _this.props.rowRenderer; // TRICKY The style object is sometimes cached by Grid.
                  // This prevents new style objects from bypassing shallowCompare().
                  // However as of React 16, style props are auto-frozen (at least in dev mode)
                  // Check to make sure we can still modify the style before proceeding.
                  // https://github.com/facebook/react/commit/977357765b44af8ff0cfea327866861073095c12#commitcomment-20648713

                  var widthDescriptor = Object.getOwnPropertyDescriptor(style, 'width');

                  if (widthDescriptor && widthDescriptor.writable) {
                    // By default, List cells should be 100% width.
                    // This prevents them from flowing under a scrollbar (if present).
                    style.width = '100%';
                  }

                  return rowRenderer({
                    index: rowIndex,
                    style: style,
                    isScrolling: isScrolling,
                    isVisible: isVisible,
                    key: key,
                    parent: parent
                  });
                });

                _defineProperty$6(_assertThisInitialized(_this), "_setRef", function (ref) {
                  _this.Grid = ref;
                });

                _defineProperty$6(_assertThisInitialized(_this), "_onScroll", function (_ref2) {
                  var clientHeight = _ref2.clientHeight,
                      scrollHeight = _ref2.scrollHeight,
                      scrollTop = _ref2.scrollTop;
                  var onScroll = _this.props.onScroll;
                  onScroll({
                    clientHeight: clientHeight,
                    scrollHeight: scrollHeight,
                    scrollTop: scrollTop
                  });
                });

                _defineProperty$6(_assertThisInitialized(_this), "_onSectionRendered", function (_ref3) {
                  var rowOverscanStartIndex = _ref3.rowOverscanStartIndex,
                      rowOverscanStopIndex = _ref3.rowOverscanStopIndex,
                      rowStartIndex = _ref3.rowStartIndex,
                      rowStopIndex = _ref3.rowStopIndex;
                  var onRowsRendered = _this.props.onRowsRendered;
                  onRowsRendered({
                    overscanStartIndex: rowOverscanStartIndex,
                    overscanStopIndex: rowOverscanStopIndex,
                    startIndex: rowStartIndex,
                    stopIndex: rowStopIndex
                  });
                });

                return _this;
              }

              _createClass$8(List, [{
                key: "forceUpdateGrid",
                value: function forceUpdateGrid() {
                  if (this.Grid) {
                    this.Grid.forceUpdate();
                  }
                }
                /** See Grid#getOffsetForCell */

              }, {
                key: "getOffsetForRow",
                value: function getOffsetForRow(_ref4) {
                  var alignment = _ref4.alignment,
                      index = _ref4.index;

                  if (this.Grid) {
                    var _this$Grid$getOffsetF = this.Grid.getOffsetForCell({
                      alignment: alignment,
                      rowIndex: index,
                      columnIndex: 0
                    }),
                        scrollTop = _this$Grid$getOffsetF.scrollTop;

                    return scrollTop;
                  }

                  return 0;
                }
                /** CellMeasurer compatibility */

              }, {
                key: "invalidateCellSizeAfterRender",
                value: function invalidateCellSizeAfterRender(_ref5) {
                  var columnIndex = _ref5.columnIndex,
                      rowIndex = _ref5.rowIndex;

                  if (this.Grid) {
                    this.Grid.invalidateCellSizeAfterRender({
                      rowIndex: rowIndex,
                      columnIndex: columnIndex
                    });
                  }
                }
                /** See Grid#measureAllCells */

              }, {
                key: "measureAllRows",
                value: function measureAllRows() {
                  if (this.Grid) {
                    this.Grid.measureAllCells();
                  }
                }
                /** CellMeasurer compatibility */

              }, {
                key: "recomputeGridSize",
                value: function recomputeGridSize() {
                  var _ref6 = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {},
                      _ref6$columnIndex = _ref6.columnIndex,
                      columnIndex = _ref6$columnIndex === void 0 ? 0 : _ref6$columnIndex,
                      _ref6$rowIndex = _ref6.rowIndex,
                      rowIndex = _ref6$rowIndex === void 0 ? 0 : _ref6$rowIndex;

                  if (this.Grid) {
                    this.Grid.recomputeGridSize({
                      rowIndex: rowIndex,
                      columnIndex: columnIndex
                    });
                  }
                }
                /** See Grid#recomputeGridSize */

              }, {
                key: "recomputeRowHeights",
                value: function recomputeRowHeights() {
                  var index = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 0;

                  if (this.Grid) {
                    this.Grid.recomputeGridSize({
                      rowIndex: index,
                      columnIndex: 0
                    });
                  }
                }
                /** See Grid#scrollToPosition */

              }, {
                key: "scrollToPosition",
                value: function scrollToPosition() {
                  var scrollTop = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 0;

                  if (this.Grid) {
                    this.Grid.scrollToPosition({
                      scrollTop: scrollTop
                    });
                  }
                }
                /** See Grid#scrollToCell */

              }, {
                key: "scrollToRow",
                value: function scrollToRow() {
                  var index = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 0;

                  if (this.Grid) {
                    this.Grid.scrollToCell({
                      columnIndex: 0,
                      rowIndex: index
                    });
                  }
                }
              }, {
                key: "render",
                value: function render() {
                  var _this$props = this.props,
                      className = _this$props.className,
                      noRowsRenderer = _this$props.noRowsRenderer,
                      scrollToIndex = _this$props.scrollToIndex,
                      width = _this$props.width;
                  var classNames = clsx('ReactVirtualized__List', className);
                  return react.createElement(Grid, _extends({}, this.props, {
                    autoContainerWidth: true,
                    cellRenderer: this._cellRenderer,
                    className: classNames,
                    columnWidth: width,
                    columnCount: 1,
                    noContentRenderer: noRowsRenderer,
                    onScroll: this._onScroll,
                    onSectionRendered: this._onSectionRendered,
                    ref: this._setRef,
                    scrollToRow: scrollToIndex
                  }));
                }
              }]);

              return List;
            }(react.PureComponent), _defineProperty$6(_class$2, "propTypes", {
              "aria-label": propTypes.string,

              /**
               * Removes fixed height from the scrollingContainer so that the total height
               * of rows can stretch the window. Intended for use with WindowScroller
               */
              "autoHeight": propTypes.bool.isRequired,

              /** Optional CSS class name */
              "className": propTypes.string,

              /**
               * Used to estimate the total height of a List before all of its rows have actually been measured.
               * The estimated total height is adjusted as rows are rendered.
               */
              "estimatedRowSize": propTypes.number.isRequired,

              /** Height constraint for list (determines how many actual rows are rendered) */
              "height": propTypes.number.isRequired,

              /** Optional renderer to be used in place of rows when rowCount is 0 */
              "noRowsRenderer": function noRowsRenderer() {
                return (typeof bpfrpt_proptype_NoContentRenderer === "function" ? bpfrpt_proptype_NoContentRenderer.isRequired ? bpfrpt_proptype_NoContentRenderer.isRequired : bpfrpt_proptype_NoContentRenderer : propTypes.shape(bpfrpt_proptype_NoContentRenderer).isRequired).apply(this, arguments);
              },

              /** Callback invoked with information about the slice of rows that were just rendered.  */
              "onRowsRendered": propTypes.func.isRequired,

              /**
               * Callback invoked whenever the scroll offset changes within the inner scrollable region.
               * This callback can be used to sync scrolling between lists, tables, or grids.
               */
              "onScroll": propTypes.func.isRequired,

              /** See Grid#overscanIndicesGetter */
              "overscanIndicesGetter": function overscanIndicesGetter() {
                return (typeof bpfrpt_proptype_OverscanIndicesGetter === "function" ? bpfrpt_proptype_OverscanIndicesGetter.isRequired ? bpfrpt_proptype_OverscanIndicesGetter.isRequired : bpfrpt_proptype_OverscanIndicesGetter : propTypes.shape(bpfrpt_proptype_OverscanIndicesGetter).isRequired).apply(this, arguments);
              },

              /**
               * Number of rows to render above/below the visible bounds of the list.
               * These rows can help for smoother scrolling on touch devices.
               */
              "overscanRowCount": propTypes.number.isRequired,

              /** Either a fixed row height (number) or a function that returns the height of a row given its index.  */
              "rowHeight": function rowHeight() {
                return (typeof bpfrpt_proptype_CellSize === "function" ? bpfrpt_proptype_CellSize.isRequired ? bpfrpt_proptype_CellSize.isRequired : bpfrpt_proptype_CellSize : propTypes.shape(bpfrpt_proptype_CellSize).isRequired).apply(this, arguments);
              },

              /** Responsible for rendering a row given an index; ({ index: number }): node */
              "rowRenderer": function rowRenderer() {
                return (typeof bpfrpt_proptype_RowRenderer === "function" ? bpfrpt_proptype_RowRenderer.isRequired ? bpfrpt_proptype_RowRenderer.isRequired : bpfrpt_proptype_RowRenderer : propTypes.shape(bpfrpt_proptype_RowRenderer).isRequired).apply(this, arguments);
              },

              /** Number of rows in list. */
              "rowCount": propTypes.number.isRequired,

              /** See Grid#scrollToAlignment */
              "scrollToAlignment": function scrollToAlignment() {
                return (typeof bpfrpt_proptype_Alignment === "function" ? bpfrpt_proptype_Alignment.isRequired ? bpfrpt_proptype_Alignment.isRequired : bpfrpt_proptype_Alignment : propTypes.shape(bpfrpt_proptype_Alignment).isRequired).apply(this, arguments);
              },

              /** Row index to ensure visible (by forcefully scrolling if necessary) */
              "scrollToIndex": propTypes.number.isRequired,

              /** Vertical offset. */
              "scrollTop": propTypes.number,

              /** Optional inline style */
              "style": propTypes.object.isRequired,

              /** Tab index for focus */
              "tabIndex": propTypes.number,

              /** Width of list */
              "width": propTypes.number.isRequired
            }), _temp$2);

            _defineProperty$6(List, "defaultProps", {
              autoHeight: false,
              estimatedRowSize: 30,
              onScroll: function onScroll() {},
              noRowsRenderer: function noRowsRenderer() {
                return null;
              },
              onRowsRendered: function onRowsRendered() {},
              overscanIndicesGetter: defaultOverscanIndicesGetter,
              overscanRowCount: 10,
              scrollToAlignment: 'auto',
              scrollToIndex: -1,
              style: {}
            });

            function _arrayWithHoles$2(arr) {
              if (Array.isArray(arr)) return arr;
            }

            function _iterableToArrayLimit$2(arr, i) {
              var _i = arr && (typeof Symbol !== "undefined" && arr[Symbol.iterator] || arr["@@iterator"]);

              if (_i == null) return;
              var _arr = [];
              var _n = true;
              var _d = false;

              var _s, _e;

              try {
                for (_i = _i.call(arr); !(_n = (_s = _i.next()).done); _n = true) {
                  _arr.push(_s.value);

                  if (i && _arr.length === i) break;
                }
              } catch (err) {
                _d = true;
                _e = err;
              } finally {
                try {
                  if (!_n && _i["return"] != null) _i["return"]();
                } finally {
                  if (_d) throw _e;
                }
              }

              return _arr;
            }

            function _nonIterableRest$2() {
              throw new TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.");
            }

            function _slicedToArray$2(arr, i) {
              return _arrayWithHoles$2(arr) || _iterableToArrayLimit$2(arr, i) || _unsupportedIterableToArray$2(arr, i) || _nonIterableRest$2();
            }

            /**
             * Binary Search Bounds
             * https://github.com/mikolalysenko/binary-search-bounds
             * Mikola Lysenko
             *
             * Inlined because of Content Security Policy issue caused by the use of `new Function(...)` syntax.
             * Issue reported here: https://github.com/mikolalysenko/binary-search-bounds/issues/5
             **/
            function _GEA(a, l, h, y) {
              var i = h + 1;

              while (l <= h) {
                var m = l + h >>> 1,
                    x = a[m];

                if (x >= y) {
                  i = m;
                  h = m - 1;
                } else {
                  l = m + 1;
                }
              }

              return i;
            }

            function _GEP(a, l, h, y, c) {
              var i = h + 1;

              while (l <= h) {
                var m = l + h >>> 1,
                    x = a[m];

                if (c(x, y) >= 0) {
                  i = m;
                  h = m - 1;
                } else {
                  l = m + 1;
                }
              }

              return i;
            }

            function dispatchBsearchGE(a, y, c, l, h) {
              if (typeof c === 'function') {
                return _GEP(a, l === void 0 ? 0 : l | 0, h === void 0 ? a.length - 1 : h | 0, y, c);
              } else {
                return _GEA(a, c === void 0 ? 0 : c | 0, l === void 0 ? a.length - 1 : l | 0, y);
              }
            }

            function _GTA(a, l, h, y) {
              var i = h + 1;

              while (l <= h) {
                var m = l + h >>> 1,
                    x = a[m];

                if (x > y) {
                  i = m;
                  h = m - 1;
                } else {
                  l = m + 1;
                }
              }

              return i;
            }

            function _GTP(a, l, h, y, c) {
              var i = h + 1;

              while (l <= h) {
                var m = l + h >>> 1,
                    x = a[m];

                if (c(x, y) > 0) {
                  i = m;
                  h = m - 1;
                } else {
                  l = m + 1;
                }
              }

              return i;
            }

            function dispatchBsearchGT(a, y, c, l, h) {
              if (typeof c === 'function') {
                return _GTP(a, l === void 0 ? 0 : l | 0, h === void 0 ? a.length - 1 : h | 0, y, c);
              } else {
                return _GTA(a, c === void 0 ? 0 : c | 0, l === void 0 ? a.length - 1 : l | 0, y);
              }
            }

            function _LTA(a, l, h, y) {
              var i = l - 1;

              while (l <= h) {
                var m = l + h >>> 1,
                    x = a[m];

                if (x < y) {
                  i = m;
                  l = m + 1;
                } else {
                  h = m - 1;
                }
              }

              return i;
            }

            function _LTP(a, l, h, y, c) {
              var i = l - 1;

              while (l <= h) {
                var m = l + h >>> 1,
                    x = a[m];

                if (c(x, y) < 0) {
                  i = m;
                  l = m + 1;
                } else {
                  h = m - 1;
                }
              }

              return i;
            }

            function dispatchBsearchLT(a, y, c, l, h) {
              if (typeof c === 'function') {
                return _LTP(a, l === void 0 ? 0 : l | 0, h === void 0 ? a.length - 1 : h | 0, y, c);
              } else {
                return _LTA(a, c === void 0 ? 0 : c | 0, l === void 0 ? a.length - 1 : l | 0, y);
              }
            }

            function _LEA(a, l, h, y) {
              var i = l - 1;

              while (l <= h) {
                var m = l + h >>> 1,
                    x = a[m];

                if (x <= y) {
                  i = m;
                  l = m + 1;
                } else {
                  h = m - 1;
                }
              }

              return i;
            }

            function _LEP(a, l, h, y, c) {
              var i = l - 1;

              while (l <= h) {
                var m = l + h >>> 1,
                    x = a[m];

                if (c(x, y) <= 0) {
                  i = m;
                  l = m + 1;
                } else {
                  h = m - 1;
                }
              }

              return i;
            }

            function dispatchBsearchLE(a, y, c, l, h) {
              if (typeof c === 'function') {
                return _LEP(a, l === void 0 ? 0 : l | 0, h === void 0 ? a.length - 1 : h | 0, y, c);
              } else {
                return _LEA(a, c === void 0 ? 0 : c | 0, l === void 0 ? a.length - 1 : l | 0, y);
              }
            }

            function _EQA(a, l, h, y) {

              while (l <= h) {
                var m = l + h >>> 1,
                    x = a[m];

                if (x === y) {
                  return m;
                } else if (x <= y) {
                  l = m + 1;
                } else {
                  h = m - 1;
                }
              }

              return -1;
            }

            function _EQP(a, l, h, y, c) {

              while (l <= h) {
                var m = l + h >>> 1,
                    x = a[m];
                var p = c(x, y);

                if (p === 0) {
                  return m;
                } else if (p <= 0) {
                  l = m + 1;
                } else {
                  h = m - 1;
                }
              }

              return -1;
            }

            function dispatchBsearchEQ(a, y, c, l, h) {
              if (typeof c === 'function') {
                return _EQP(a, l === void 0 ? 0 : l | 0, h === void 0 ? a.length - 1 : h | 0, y, c);
              } else {
                return _EQA(a, c === void 0 ? 0 : c | 0, l === void 0 ? a.length - 1 : l | 0, y);
              }
            }

            var bounds = {
              ge: dispatchBsearchGE,
              gt: dispatchBsearchGT,
              lt: dispatchBsearchLT,
              le: dispatchBsearchLE,
              eq: dispatchBsearchEQ
            };

            /**
             * Binary Search Bounds
             * https://github.com/mikolalysenko/interval-tree-1d
             * Mikola Lysenko
             *
             * Inlined because of Content Security Policy issue caused by the use of `new Function(...)` syntax in an upstream dependency.
             * Issue reported here: https://github.com/mikolalysenko/binary-search-bounds/issues/5
             **/
            var NOT_FOUND = 0;
            var SUCCESS = 1;
            var EMPTY = 2;

            function IntervalTreeNode(mid, left, right, leftPoints, rightPoints) {
              this.mid = mid;
              this.left = left;
              this.right = right;
              this.leftPoints = leftPoints;
              this.rightPoints = rightPoints;
              this.count = (left ? left.count : 0) + (right ? right.count : 0) + leftPoints.length;
            }

            var proto = IntervalTreeNode.prototype;

            function copy(a, b) {
              a.mid = b.mid;
              a.left = b.left;
              a.right = b.right;
              a.leftPoints = b.leftPoints;
              a.rightPoints = b.rightPoints;
              a.count = b.count;
            }

            function rebuild(node, intervals) {
              var ntree = createIntervalTree(intervals);
              node.mid = ntree.mid;
              node.left = ntree.left;
              node.right = ntree.right;
              node.leftPoints = ntree.leftPoints;
              node.rightPoints = ntree.rightPoints;
              node.count = ntree.count;
            }

            function rebuildWithInterval(node, interval) {
              var intervals = node.intervals([]);
              intervals.push(interval);
              rebuild(node, intervals);
            }

            function rebuildWithoutInterval(node, interval) {
              var intervals = node.intervals([]);
              var idx = intervals.indexOf(interval);

              if (idx < 0) {
                return NOT_FOUND;
              }

              intervals.splice(idx, 1);
              rebuild(node, intervals);
              return SUCCESS;
            }

            proto.intervals = function (result) {
              result.push.apply(result, this.leftPoints);

              if (this.left) {
                this.left.intervals(result);
              }

              if (this.right) {
                this.right.intervals(result);
              }

              return result;
            };

            proto.insert = function (interval) {
              var weight = this.count - this.leftPoints.length;
              this.count += 1;

              if (interval[1] < this.mid) {
                if (this.left) {
                  if (4 * (this.left.count + 1) > 3 * (weight + 1)) {
                    rebuildWithInterval(this, interval);
                  } else {
                    this.left.insert(interval);
                  }
                } else {
                  this.left = createIntervalTree([interval]);
                }
              } else if (interval[0] > this.mid) {
                if (this.right) {
                  if (4 * (this.right.count + 1) > 3 * (weight + 1)) {
                    rebuildWithInterval(this, interval);
                  } else {
                    this.right.insert(interval);
                  }
                } else {
                  this.right = createIntervalTree([interval]);
                }
              } else {
                var l = bounds.ge(this.leftPoints, interval, compareBegin);
                var r = bounds.ge(this.rightPoints, interval, compareEnd);
                this.leftPoints.splice(l, 0, interval);
                this.rightPoints.splice(r, 0, interval);
              }
            };

            proto.remove = function (interval) {
              var weight = this.count - this.leftPoints;

              if (interval[1] < this.mid) {
                if (!this.left) {
                  return NOT_FOUND;
                }

                var rw = this.right ? this.right.count : 0;

                if (4 * rw > 3 * (weight - 1)) {
                  return rebuildWithoutInterval(this, interval);
                }

                var r = this.left.remove(interval);

                if (r === EMPTY) {
                  this.left = null;
                  this.count -= 1;
                  return SUCCESS;
                } else if (r === SUCCESS) {
                  this.count -= 1;
                }

                return r;
              } else if (interval[0] > this.mid) {
                if (!this.right) {
                  return NOT_FOUND;
                }

                var lw = this.left ? this.left.count : 0;

                if (4 * lw > 3 * (weight - 1)) {
                  return rebuildWithoutInterval(this, interval);
                }

                var r = this.right.remove(interval);

                if (r === EMPTY) {
                  this.right = null;
                  this.count -= 1;
                  return SUCCESS;
                } else if (r === SUCCESS) {
                  this.count -= 1;
                }

                return r;
              } else {
                if (this.count === 1) {
                  if (this.leftPoints[0] === interval) {
                    return EMPTY;
                  } else {
                    return NOT_FOUND;
                  }
                }

                if (this.leftPoints.length === 1 && this.leftPoints[0] === interval) {
                  if (this.left && this.right) {
                    var p = this;
                    var n = this.left;

                    while (n.right) {
                      p = n;
                      n = n.right;
                    }

                    if (p === this) {
                      n.right = this.right;
                    } else {
                      var l = this.left;
                      var r = this.right;
                      p.count -= n.count;
                      p.right = n.left;
                      n.left = l;
                      n.right = r;
                    }

                    copy(this, n);
                    this.count = (this.left ? this.left.count : 0) + (this.right ? this.right.count : 0) + this.leftPoints.length;
                  } else if (this.left) {
                    copy(this, this.left);
                  } else {
                    copy(this, this.right);
                  }

                  return SUCCESS;
                }

                for (var l = bounds.ge(this.leftPoints, interval, compareBegin); l < this.leftPoints.length; ++l) {
                  if (this.leftPoints[l][0] !== interval[0]) {
                    break;
                  }

                  if (this.leftPoints[l] === interval) {
                    this.count -= 1;
                    this.leftPoints.splice(l, 1);

                    for (var r = bounds.ge(this.rightPoints, interval, compareEnd); r < this.rightPoints.length; ++r) {
                      if (this.rightPoints[r][1] !== interval[1]) {
                        break;
                      } else if (this.rightPoints[r] === interval) {
                        this.rightPoints.splice(r, 1);
                        return SUCCESS;
                      }
                    }
                  }
                }

                return NOT_FOUND;
              }
            };

            function reportLeftRange(arr, hi, cb) {
              for (var i = 0; i < arr.length && arr[i][0] <= hi; ++i) {
                var r = cb(arr[i]);

                if (r) {
                  return r;
                }
              }
            }

            function reportRightRange(arr, lo, cb) {
              for (var i = arr.length - 1; i >= 0 && arr[i][1] >= lo; --i) {
                var r = cb(arr[i]);

                if (r) {
                  return r;
                }
              }
            }

            function reportRange(arr, cb) {
              for (var i = 0; i < arr.length; ++i) {
                var r = cb(arr[i]);

                if (r) {
                  return r;
                }
              }
            }

            proto.queryPoint = function (x, cb) {
              if (x < this.mid) {
                if (this.left) {
                  var r = this.left.queryPoint(x, cb);

                  if (r) {
                    return r;
                  }
                }

                return reportLeftRange(this.leftPoints, x, cb);
              } else if (x > this.mid) {
                if (this.right) {
                  var r = this.right.queryPoint(x, cb);

                  if (r) {
                    return r;
                  }
                }

                return reportRightRange(this.rightPoints, x, cb);
              } else {
                return reportRange(this.leftPoints, cb);
              }
            };

            proto.queryInterval = function (lo, hi, cb) {
              if (lo < this.mid && this.left) {
                var r = this.left.queryInterval(lo, hi, cb);

                if (r) {
                  return r;
                }
              }

              if (hi > this.mid && this.right) {
                var r = this.right.queryInterval(lo, hi, cb);

                if (r) {
                  return r;
                }
              }

              if (hi < this.mid) {
                return reportLeftRange(this.leftPoints, hi, cb);
              } else if (lo > this.mid) {
                return reportRightRange(this.rightPoints, lo, cb);
              } else {
                return reportRange(this.leftPoints, cb);
              }
            };

            function compareNumbers(a, b) {
              return a - b;
            }

            function compareBegin(a, b) {
              var d = a[0] - b[0];

              if (d) {
                return d;
              }

              return a[1] - b[1];
            }

            function compareEnd(a, b) {
              var d = a[1] - b[1];

              if (d) {
                return d;
              }

              return a[0] - b[0];
            }

            function createIntervalTree(intervals) {
              if (intervals.length === 0) {
                return null;
              }

              var pts = [];

              for (var i = 0; i < intervals.length; ++i) {
                pts.push(intervals[i][0], intervals[i][1]);
              }

              pts.sort(compareNumbers);
              var mid = pts[pts.length >> 1];
              var leftIntervals = [];
              var rightIntervals = [];
              var centerIntervals = [];

              for (var i = 0; i < intervals.length; ++i) {
                var s = intervals[i];

                if (s[1] < mid) {
                  leftIntervals.push(s);
                } else if (mid < s[0]) {
                  rightIntervals.push(s);
                } else {
                  centerIntervals.push(s);
                }
              } //Split center intervals


              var leftPoints = centerIntervals;
              var rightPoints = centerIntervals.slice();
              leftPoints.sort(compareBegin);
              rightPoints.sort(compareEnd);
              return new IntervalTreeNode(mid, createIntervalTree(leftIntervals), createIntervalTree(rightIntervals), leftPoints, rightPoints);
            } //User friendly wrapper that makes it possible to support empty trees


            function IntervalTree(root) {
              this.root = root;
            }

            var tproto = IntervalTree.prototype;

            tproto.insert = function (interval) {
              if (this.root) {
                this.root.insert(interval);
              } else {
                this.root = new IntervalTreeNode(interval[0], null, null, [interval], [interval]);
              }
            };

            tproto.remove = function (interval) {
              if (this.root) {
                var r = this.root.remove(interval);

                if (r === EMPTY) {
                  this.root = null;
                }

                return r !== NOT_FOUND;
              }

              return false;
            };

            tproto.queryPoint = function (p, cb) {
              if (this.root) {
                return this.root.queryPoint(p, cb);
              }
            };

            tproto.queryInterval = function (lo, hi, cb) {
              if (lo <= hi && this.root) {
                return this.root.queryInterval(lo, hi, cb);
              }
            };

            Object.defineProperty(tproto, 'count', {
              get: function get() {
                if (this.root) {
                  return this.root.count;
                }

                return 0;
              }
            });
            Object.defineProperty(tproto, 'intervals', {
              get: function get() {
                if (this.root) {
                  return this.root.intervals([]);
                }

                return [];
              }
            });
            function createWrapper(intervals) {
              if (!intervals || intervals.length === 0) {
                return new IntervalTree(null);
              }

              return new IntervalTree(createIntervalTree(intervals));
            }

            // Position cache requirements:
            //   O(log(n)) lookup of cells to render for a given viewport size
            //   O(1) lookup of shortest measured column (so we know when to enter phase 1)
            var PositionCache =
            /*#__PURE__*/
            function () {
              function PositionCache() {
                _classCallCheck$8(this, PositionCache);

                _defineProperty$6(this, "_columnSizeMap", {});

                _defineProperty$6(this, "_intervalTree", createWrapper());

                _defineProperty$6(this, "_leftMap", {});
              }

              _createClass$8(PositionCache, [{
                key: "estimateTotalHeight",
                value: function estimateTotalHeight(cellCount, columnCount, defaultCellHeight) {
                  var unmeasuredCellCount = cellCount - this.count;
                  return this.tallestColumnSize + Math.ceil(unmeasuredCellCount / columnCount) * defaultCellHeight;
                } // Render all cells visible within the viewport range defined.

              }, {
                key: "range",
                value: function range(scrollTop, clientHeight, renderCallback) {
                  var _this = this;

                  this._intervalTree.queryInterval(scrollTop, scrollTop + clientHeight, function (_ref) {
                    var _ref2 = _slicedToArray$2(_ref, 3),
                        top = _ref2[0];
                        _ref2[1];
                        var index = _ref2[2];

                    return renderCallback(index, _this._leftMap[index], top);
                  });
                }
              }, {
                key: "setPosition",
                value: function setPosition(index, left, top, height) {
                  this._intervalTree.insert([top, top + height, index]);

                  this._leftMap[index] = left;
                  var columnSizeMap = this._columnSizeMap;
                  var columnHeight = columnSizeMap[left];

                  if (columnHeight === undefined) {
                    columnSizeMap[left] = top + height;
                  } else {
                    columnSizeMap[left] = Math.max(columnHeight, top + height);
                  }
                }
              }, {
                key: "count",
                get: function get() {
                  return this._intervalTree.count;
                }
              }, {
                key: "shortestColumnSize",
                get: function get() {
                  var columnSizeMap = this._columnSizeMap;
                  var size = 0;

                  for (var i in columnSizeMap) {
                    var height = columnSizeMap[i];
                    size = size === 0 ? height : Math.min(size, height);
                  }

                  return size;
                }
              }, {
                key: "tallestColumnSize",
                get: function get() {
                  var columnSizeMap = this._columnSizeMap;
                  var size = 0;

                  for (var i in columnSizeMap) {
                    var height = columnSizeMap[i];
                    size = Math.max(size, height);
                  }

                  return size;
                }
              }]);

              return PositionCache;
            }();

            var _class$1, _temp$1;

            function ownKeys$8(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }

            function _objectSpread$8(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys$8(source, true).forEach(function (key) { _defineProperty$6(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys$8(source).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }
            var emptyObject = {};
            /**
             * Specifies the number of miliseconds during which to disable pointer events while a scroll is in progress.
             * This improves performance and makes scrolling smoother.
             */

            var DEFAULT_SCROLLING_RESET_TIME_INTERVAL = 150;
            /**
             * This component efficiently displays arbitrarily positioned cells using windowing techniques.
             * Cell position is determined by an injected `cellPositioner` property.
             * Windowing is vertical; this component does not support horizontal scrolling.
             *
             * Rendering occurs in two phases:
             * 1) First pass uses estimated cell sizes (provided by the cache) to determine how many cells to measure in a batch.
             *    Batch size is chosen using a fast, naive layout algorithm that stacks images in order until the viewport has been filled.
             *    After measurement is complete (componentDidMount or componentDidUpdate) this component evaluates positioned cells
             *    in order to determine if another measurement pass is required (eg if actual cell sizes were less than estimated sizes).
             *    All measurements are permanently cached (keyed by `keyMapper`) for performance purposes.
             * 2) Second pass uses the external `cellPositioner` to layout cells.
             *    At this time the positioner has access to cached size measurements for all cells.
             *    The positions it returns are cached by Masonry for fast access later.
             *    Phase one is repeated if the user scrolls beyond the current layout's bounds.
             *    If the layout is invalidated due to eg a resize, cached positions can be cleared using `recomputeCellPositions()`.
             *
             * Animation constraints:
             *   Simple animations are supported (eg translate/slide into place on initial reveal).
             *   More complex animations are not (eg flying from one position to another on resize).
             *
             * Layout constraints:
             *   This component supports multi-column layout.
             *   The height of each item may vary.
             *   The width of each item must not exceed the width of the column it is "in".
             *   The left position of all items within a column must align.
             *   (Items may not span multiple columns.)
             */

            var Masonry = (_temp$1 = _class$1 =
            /*#__PURE__*/
            function (_React$PureComponent) {
              _inherits(Masonry, _React$PureComponent);

              function Masonry() {
                var _getPrototypeOf2;

                var _this;

                _classCallCheck$8(this, Masonry);

                for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
                  args[_key] = arguments[_key];
                }

                _this = _possibleConstructorReturn(this, (_getPrototypeOf2 = _getPrototypeOf(Masonry)).call.apply(_getPrototypeOf2, [this].concat(args)));

                _defineProperty$6(_assertThisInitialized(_this), "state", {
                  isScrolling: false,
                  scrollTop: 0
                });

                _defineProperty$6(_assertThisInitialized(_this), "_debounceResetIsScrollingId", void 0);

                _defineProperty$6(_assertThisInitialized(_this), "_invalidateOnUpdateStartIndex", null);

                _defineProperty$6(_assertThisInitialized(_this), "_invalidateOnUpdateStopIndex", null);

                _defineProperty$6(_assertThisInitialized(_this), "_positionCache", new PositionCache());

                _defineProperty$6(_assertThisInitialized(_this), "_startIndex", null);

                _defineProperty$6(_assertThisInitialized(_this), "_startIndexMemoized", null);

                _defineProperty$6(_assertThisInitialized(_this), "_stopIndex", null);

                _defineProperty$6(_assertThisInitialized(_this), "_stopIndexMemoized", null);

                _defineProperty$6(_assertThisInitialized(_this), "_debounceResetIsScrollingCallback", function () {
                  _this.setState({
                    isScrolling: false
                  });
                });

                _defineProperty$6(_assertThisInitialized(_this), "_setScrollingContainerRef", function (ref) {
                  _this._scrollingContainer = ref;
                });

                _defineProperty$6(_assertThisInitialized(_this), "_onScroll", function (event) {
                  var height = _this.props.height;
                  var eventScrollTop = event.currentTarget.scrollTop; // When this component is shrunk drastically, React dispatches a series of back-to-back scroll events,
                  // Gradually converging on a scrollTop that is within the bounds of the new, smaller height.
                  // This causes a series of rapid renders that is slow for long lists.
                  // We can avoid that by doing some simple bounds checking to ensure that scroll offsets never exceed their bounds.

                  var scrollTop = Math.min(Math.max(0, _this._getEstimatedTotalHeight() - height), eventScrollTop); // On iOS, we can arrive at negative offsets by swiping past the start or end.
                  // Avoid re-rendering in this case as it can cause problems; see #532 for more.

                  if (eventScrollTop !== scrollTop) {
                    return;
                  } // Prevent pointer events from interrupting a smooth scroll


                  _this._debounceResetIsScrolling(); // Certain devices (like Apple touchpad) rapid-fire duplicate events.
                  // Don't force a re-render if this is the case.
                  // The mouse may move faster then the animation frame does.
                  // Use requestAnimationFrame to avoid over-updating.


                  if (_this.state.scrollTop !== scrollTop) {
                    _this.setState({
                      isScrolling: true,
                      scrollTop: scrollTop
                    });
                  }
                });

                return _this;
              }

              _createClass$8(Masonry, [{
                key: "clearCellPositions",
                value: function clearCellPositions() {
                  this._positionCache = new PositionCache();
                  this.forceUpdate();
                } // HACK This method signature was intended for Grid

              }, {
                key: "invalidateCellSizeAfterRender",
                value: function invalidateCellSizeAfterRender(_ref) {
                  var index = _ref.rowIndex;

                  if (this._invalidateOnUpdateStartIndex === null) {
                    this._invalidateOnUpdateStartIndex = index;
                    this._invalidateOnUpdateStopIndex = index;
                  } else {
                    this._invalidateOnUpdateStartIndex = Math.min(this._invalidateOnUpdateStartIndex, index);
                    this._invalidateOnUpdateStopIndex = Math.max(this._invalidateOnUpdateStopIndex, index);
                  }
                }
              }, {
                key: "recomputeCellPositions",
                value: function recomputeCellPositions() {
                  var stopIndex = this._positionCache.count - 1;
                  this._positionCache = new PositionCache();

                  this._populatePositionCache(0, stopIndex);

                  this.forceUpdate();
                }
              }, {
                key: "componentDidMount",
                value: function componentDidMount() {
                  this._checkInvalidateOnUpdate();

                  this._invokeOnScrollCallback();

                  this._invokeOnCellsRenderedCallback();
                }
              }, {
                key: "componentDidUpdate",
                value: function componentDidUpdate(prevProps, prevState) {
                  this._checkInvalidateOnUpdate();

                  this._invokeOnScrollCallback();

                  this._invokeOnCellsRenderedCallback();

                  if (this.props.scrollTop !== prevProps.scrollTop) {
                    this._debounceResetIsScrolling();
                  }
                }
              }, {
                key: "componentWillUnmount",
                value: function componentWillUnmount() {
                  if (this._debounceResetIsScrollingId) {
                    cancelAnimationTimeout(this._debounceResetIsScrollingId);
                  }
                }
              }, {
                key: "render",
                value: function render() {
                  var _this2 = this;

                  var _this$props = this.props,
                      autoHeight = _this$props.autoHeight,
                      cellCount = _this$props.cellCount,
                      cellMeasurerCache = _this$props.cellMeasurerCache,
                      cellRenderer = _this$props.cellRenderer,
                      className = _this$props.className,
                      height = _this$props.height,
                      id = _this$props.id,
                      keyMapper = _this$props.keyMapper,
                      overscanByPixels = _this$props.overscanByPixels,
                      role = _this$props.role,
                      style = _this$props.style,
                      tabIndex = _this$props.tabIndex,
                      width = _this$props.width,
                      rowDirection = _this$props.rowDirection;
                  var _this$state = this.state,
                      isScrolling = _this$state.isScrolling,
                      scrollTop = _this$state.scrollTop;
                  var children = [];

                  var estimateTotalHeight = this._getEstimatedTotalHeight();

                  var shortestColumnSize = this._positionCache.shortestColumnSize;
                  var measuredCellCount = this._positionCache.count;
                  var startIndex = 0;
                  var stopIndex;

                  this._positionCache.range(Math.max(0, scrollTop - overscanByPixels), height + overscanByPixels * 2, function (index, left, top) {
                    var _style;

                    if (typeof stopIndex === 'undefined') {
                      startIndex = index;
                      stopIndex = index;
                    } else {
                      startIndex = Math.min(startIndex, index);
                      stopIndex = Math.max(stopIndex, index);
                    }

                    children.push(cellRenderer({
                      index: index,
                      isScrolling: isScrolling,
                      key: keyMapper(index),
                      parent: _this2,
                      style: (_style = {
                        height: cellMeasurerCache.getHeight(index)
                      }, _defineProperty$6(_style, rowDirection === 'ltr' ? 'left' : 'right', left), _defineProperty$6(_style, "position", 'absolute'), _defineProperty$6(_style, "top", top), _defineProperty$6(_style, "width", cellMeasurerCache.getWidth(index)), _style)
                    }));
                  }); // We need to measure additional cells for this layout


                  if (shortestColumnSize < scrollTop + height + overscanByPixels && measuredCellCount < cellCount) {
                    var batchSize = Math.min(cellCount - measuredCellCount, Math.ceil((scrollTop + height + overscanByPixels - shortestColumnSize) / cellMeasurerCache.defaultHeight * width / cellMeasurerCache.defaultWidth));

                    for (var _index = measuredCellCount; _index < measuredCellCount + batchSize; _index++) {
                      stopIndex = _index;
                      children.push(cellRenderer({
                        index: _index,
                        isScrolling: isScrolling,
                        key: keyMapper(_index),
                        parent: this,
                        style: {
                          width: cellMeasurerCache.getWidth(_index)
                        }
                      }));
                    }
                  }

                  this._startIndex = startIndex;
                  this._stopIndex = stopIndex;
                  return react.createElement("div", {
                    ref: this._setScrollingContainerRef,
                    "aria-label": this.props['aria-label'],
                    className: clsx('ReactVirtualized__Masonry', className),
                    id: id,
                    onScroll: this._onScroll,
                    role: role,
                    style: _objectSpread$8({
                      boxSizing: 'border-box',
                      direction: 'ltr',
                      height: autoHeight ? 'auto' : height,
                      overflowX: 'hidden',
                      overflowY: estimateTotalHeight < height ? 'hidden' : 'auto',
                      position: 'relative',
                      width: width,
                      WebkitOverflowScrolling: 'touch',
                      willChange: 'transform'
                    }, style),
                    tabIndex: tabIndex
                  }, react.createElement("div", {
                    className: "ReactVirtualized__Masonry__innerScrollContainer",
                    style: {
                      width: '100%',
                      height: estimateTotalHeight,
                      maxWidth: '100%',
                      maxHeight: estimateTotalHeight,
                      overflow: 'hidden',
                      pointerEvents: isScrolling ? 'none' : '',
                      position: 'relative'
                    }
                  }, children));
                }
              }, {
                key: "_checkInvalidateOnUpdate",
                value: function _checkInvalidateOnUpdate() {
                  if (typeof this._invalidateOnUpdateStartIndex === 'number') {
                    var startIndex = this._invalidateOnUpdateStartIndex;
                    var stopIndex = this._invalidateOnUpdateStopIndex;
                    this._invalidateOnUpdateStartIndex = null;
                    this._invalidateOnUpdateStopIndex = null; // Query external layout logic for position of newly-measured cells

                    this._populatePositionCache(startIndex, stopIndex);

                    this.forceUpdate();
                  }
                }
              }, {
                key: "_debounceResetIsScrolling",
                value: function _debounceResetIsScrolling() {
                  var scrollingResetTimeInterval = this.props.scrollingResetTimeInterval;

                  if (this._debounceResetIsScrollingId) {
                    cancelAnimationTimeout(this._debounceResetIsScrollingId);
                  }

                  this._debounceResetIsScrollingId = requestAnimationTimeout(this._debounceResetIsScrollingCallback, scrollingResetTimeInterval);
                }
              }, {
                key: "_getEstimatedTotalHeight",
                value: function _getEstimatedTotalHeight() {
                  var _this$props2 = this.props,
                      cellCount = _this$props2.cellCount,
                      cellMeasurerCache = _this$props2.cellMeasurerCache,
                      width = _this$props2.width;
                  var estimatedColumnCount = Math.max(1, Math.floor(width / cellMeasurerCache.defaultWidth));
                  return this._positionCache.estimateTotalHeight(cellCount, estimatedColumnCount, cellMeasurerCache.defaultHeight);
                }
              }, {
                key: "_invokeOnScrollCallback",
                value: function _invokeOnScrollCallback() {
                  var _this$props3 = this.props,
                      height = _this$props3.height,
                      onScroll = _this$props3.onScroll;
                  var scrollTop = this.state.scrollTop;

                  if (this._onScrollMemoized !== scrollTop) {
                    onScroll({
                      clientHeight: height,
                      scrollHeight: this._getEstimatedTotalHeight(),
                      scrollTop: scrollTop
                    });
                    this._onScrollMemoized = scrollTop;
                  }
                }
              }, {
                key: "_invokeOnCellsRenderedCallback",
                value: function _invokeOnCellsRenderedCallback() {
                  if (this._startIndexMemoized !== this._startIndex || this._stopIndexMemoized !== this._stopIndex) {
                    var onCellsRendered = this.props.onCellsRendered;
                    onCellsRendered({
                      startIndex: this._startIndex,
                      stopIndex: this._stopIndex
                    });
                    this._startIndexMemoized = this._startIndex;
                    this._stopIndexMemoized = this._stopIndex;
                  }
                }
              }, {
                key: "_populatePositionCache",
                value: function _populatePositionCache(startIndex, stopIndex) {
                  var _this$props4 = this.props,
                      cellMeasurerCache = _this$props4.cellMeasurerCache,
                      cellPositioner = _this$props4.cellPositioner;

                  for (var _index2 = startIndex; _index2 <= stopIndex; _index2++) {
                    var _cellPositioner = cellPositioner(_index2),
                        left = _cellPositioner.left,
                        top = _cellPositioner.top;

                    this._positionCache.setPosition(_index2, left, top, cellMeasurerCache.getHeight(_index2));
                  }
                }
              }], [{
                key: "getDerivedStateFromProps",
                value: function getDerivedStateFromProps(nextProps, prevState) {
                  if (nextProps.scrollTop !== undefined && prevState.scrollTop !== nextProps.scrollTop) {
                    return {
                      isScrolling: true,
                      scrollTop: nextProps.scrollTop
                    };
                  }

                  return null;
                }
              }]);

              return Masonry;
            }(react.PureComponent), _defineProperty$6(_class$1, "propTypes", {
              "autoHeight": propTypes.bool.isRequired,
              "cellCount": propTypes.number.isRequired,
              "cellMeasurerCache": function cellMeasurerCache() {
                return (typeof CellMeasurerCache === "function" ? propTypes.instanceOf(CellMeasurerCache).isRequired : propTypes.any.isRequired).apply(this, arguments);
              },
              "cellPositioner": function cellPositioner() {
                return (typeof Positioner === "function" ? propTypes.instanceOf(Positioner).isRequired : propTypes.any.isRequired).apply(this, arguments);
              },
              "cellRenderer": function cellRenderer() {
                return (typeof CellRenderer === "function" ? propTypes.instanceOf(CellRenderer).isRequired : propTypes.any.isRequired).apply(this, arguments);
              },
              "className": propTypes.string,
              "height": propTypes.number.isRequired,
              "id": propTypes.string,
              "keyMapper": function keyMapper() {
                return (typeof KeyMapper === "function" ? propTypes.instanceOf(KeyMapper).isRequired : propTypes.any.isRequired).apply(this, arguments);
              },
              "onCellsRendered": function onCellsRendered() {
                return (typeof OnCellsRenderedCallback === "function" ? propTypes.instanceOf(OnCellsRenderedCallback) : propTypes.any).apply(this, arguments);
              },
              "onScroll": function onScroll() {
                return (typeof OnScrollCallback === "function" ? propTypes.instanceOf(OnScrollCallback) : propTypes.any).apply(this, arguments);
              },
              "overscanByPixels": propTypes.number.isRequired,
              "role": propTypes.string.isRequired,
              "scrollingResetTimeInterval": propTypes.number.isRequired,
              "style": function style(props, propName, componentName) {
                if (!Object.prototype.hasOwnProperty.call(props, propName)) {
                  throw new Error("Prop `".concat(propName, "` has type 'any' or 'mixed', but was not provided to `").concat(componentName, "`. Pass undefined or any other value."));
                }
              },
              "tabIndex": propTypes.number.isRequired,
              "width": propTypes.number.isRequired,
              "rowDirection": propTypes.string.isRequired,
              "scrollTop": propTypes.number
            }), _temp$1);

            _defineProperty$6(Masonry, "defaultProps", {
              autoHeight: false,
              keyMapper: identity,
              onCellsRendered: noop,
              onScroll: noop,
              overscanByPixels: 20,
              role: 'grid',
              scrollingResetTimeInterval: DEFAULT_SCROLLING_RESET_TIME_INTERVAL,
              style: emptyObject,
              tabIndex: 0,
              rowDirection: 'ltr'
            });

            function identity(value) {
              return value;
            }

            function noop() {}

            ({
              "defaultHeight": propTypes.number.isRequired,
              "defaultWidth": propTypes.number.isRequired,
              "getHeight": propTypes.func.isRequired,
              "getWidth": propTypes.func.isRequired
            });
            polyfill(Masonry);
            propTypes.func;

            /**
             * Caches measurements for a given cell.
             */
            var CellMeasurerCacheDecorator =
            /*#__PURE__*/
            function () {
              function CellMeasurerCacheDecorator() {
                var _this = this;

                var params = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};

                _classCallCheck$8(this, CellMeasurerCacheDecorator);

                _defineProperty$6(this, "_cellMeasurerCache", void 0);

                _defineProperty$6(this, "_columnIndexOffset", void 0);

                _defineProperty$6(this, "_rowIndexOffset", void 0);

                _defineProperty$6(this, "columnWidth", function (_ref) {
                  var index = _ref.index;

                  _this._cellMeasurerCache.columnWidth({
                    index: index + _this._columnIndexOffset
                  });
                });

                _defineProperty$6(this, "rowHeight", function (_ref2) {
                  var index = _ref2.index;

                  _this._cellMeasurerCache.rowHeight({
                    index: index + _this._rowIndexOffset
                  });
                });

                var cellMeasurerCache = params.cellMeasurerCache,
                    _params$columnIndexOf = params.columnIndexOffset,
                    columnIndexOffset = _params$columnIndexOf === void 0 ? 0 : _params$columnIndexOf,
                    _params$rowIndexOffse = params.rowIndexOffset,
                    rowIndexOffset = _params$rowIndexOffse === void 0 ? 0 : _params$rowIndexOffse;
                this._cellMeasurerCache = cellMeasurerCache;
                this._columnIndexOffset = columnIndexOffset;
                this._rowIndexOffset = rowIndexOffset;
              }

              _createClass$8(CellMeasurerCacheDecorator, [{
                key: "clear",
                value: function clear(rowIndex, columnIndex) {
                  this._cellMeasurerCache.clear(rowIndex + this._rowIndexOffset, columnIndex + this._columnIndexOffset);
                }
              }, {
                key: "clearAll",
                value: function clearAll() {
                  this._cellMeasurerCache.clearAll();
                }
              }, {
                key: "hasFixedHeight",
                value: function hasFixedHeight() {
                  return this._cellMeasurerCache.hasFixedHeight();
                }
              }, {
                key: "hasFixedWidth",
                value: function hasFixedWidth() {
                  return this._cellMeasurerCache.hasFixedWidth();
                }
              }, {
                key: "getHeight",
                value: function getHeight(rowIndex) {
                  var columnIndex = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 0;
                  return this._cellMeasurerCache.getHeight(rowIndex + this._rowIndexOffset, columnIndex + this._columnIndexOffset);
                }
              }, {
                key: "getWidth",
                value: function getWidth(rowIndex) {
                  var columnIndex = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 0;
                  return this._cellMeasurerCache.getWidth(rowIndex + this._rowIndexOffset, columnIndex + this._columnIndexOffset);
                }
              }, {
                key: "has",
                value: function has(rowIndex) {
                  var columnIndex = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 0;
                  return this._cellMeasurerCache.has(rowIndex + this._rowIndexOffset, columnIndex + this._columnIndexOffset);
                }
              }, {
                key: "set",
                value: function set(rowIndex, columnIndex, width, height) {
                  this._cellMeasurerCache.set(rowIndex + this._rowIndexOffset, columnIndex + this._columnIndexOffset, width, height);
                }
              }, {
                key: "defaultHeight",
                get: function get() {
                  return this._cellMeasurerCache.defaultHeight;
                }
              }, {
                key: "defaultWidth",
                get: function get() {
                  return this._cellMeasurerCache.defaultWidth;
                }
              }]);

              return CellMeasurerCacheDecorator;
            }();

            function ownKeys$7(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }

            function _objectSpread$7(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys$7(source, true).forEach(function (key) { _defineProperty$6(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys$7(source).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }
            var SCROLLBAR_SIZE_BUFFER = 20;
            /**
             * Renders 1, 2, or 4 Grids depending on configuration.
             * A main (body) Grid will always be rendered.
             * Optionally, 1-2 Grids for sticky header rows will also be rendered.
             * If no sticky columns, only 1 sticky header Grid will be rendered.
             * If sticky columns, 2 sticky header Grids will be rendered.
             */

            var MultiGrid =
            /*#__PURE__*/
            function (_React$PureComponent) {
              _inherits(MultiGrid, _React$PureComponent);

              function MultiGrid(props, context) {
                var _this;

                _classCallCheck$8(this, MultiGrid);

                _this = _possibleConstructorReturn(this, _getPrototypeOf(MultiGrid).call(this, props, context));

                _defineProperty$6(_assertThisInitialized(_this), "state", {
                  scrollLeft: 0,
                  scrollTop: 0,
                  scrollbarSize: 0,
                  showHorizontalScrollbar: false,
                  showVerticalScrollbar: false
                });

                _defineProperty$6(_assertThisInitialized(_this), "_deferredInvalidateColumnIndex", null);

                _defineProperty$6(_assertThisInitialized(_this), "_deferredInvalidateRowIndex", null);

                _defineProperty$6(_assertThisInitialized(_this), "_bottomLeftGridRef", function (ref) {
                  _this._bottomLeftGrid = ref;
                });

                _defineProperty$6(_assertThisInitialized(_this), "_bottomRightGridRef", function (ref) {
                  _this._bottomRightGrid = ref;
                });

                _defineProperty$6(_assertThisInitialized(_this), "_cellRendererBottomLeftGrid", function (_ref) {
                  var rowIndex = _ref.rowIndex,
                      rest = _objectWithoutProperties$1(_ref, ["rowIndex"]);

                  var _this$props = _this.props,
                      cellRenderer = _this$props.cellRenderer,
                      fixedRowCount = _this$props.fixedRowCount,
                      rowCount = _this$props.rowCount;

                  if (rowIndex === rowCount - fixedRowCount) {
                    return react.createElement("div", {
                      key: rest.key,
                      style: _objectSpread$7({}, rest.style, {
                        height: SCROLLBAR_SIZE_BUFFER
                      })
                    });
                  } else {
                    return cellRenderer(_objectSpread$7({}, rest, {
                      parent: _assertThisInitialized(_this),
                      rowIndex: rowIndex + fixedRowCount
                    }));
                  }
                });

                _defineProperty$6(_assertThisInitialized(_this), "_cellRendererBottomRightGrid", function (_ref2) {
                  var columnIndex = _ref2.columnIndex,
                      rowIndex = _ref2.rowIndex,
                      rest = _objectWithoutProperties$1(_ref2, ["columnIndex", "rowIndex"]);

                  var _this$props2 = _this.props,
                      cellRenderer = _this$props2.cellRenderer,
                      fixedColumnCount = _this$props2.fixedColumnCount,
                      fixedRowCount = _this$props2.fixedRowCount;
                  return cellRenderer(_objectSpread$7({}, rest, {
                    columnIndex: columnIndex + fixedColumnCount,
                    parent: _assertThisInitialized(_this),
                    rowIndex: rowIndex + fixedRowCount
                  }));
                });

                _defineProperty$6(_assertThisInitialized(_this), "_cellRendererTopRightGrid", function (_ref3) {
                  var columnIndex = _ref3.columnIndex,
                      rest = _objectWithoutProperties$1(_ref3, ["columnIndex"]);

                  var _this$props3 = _this.props,
                      cellRenderer = _this$props3.cellRenderer,
                      columnCount = _this$props3.columnCount,
                      fixedColumnCount = _this$props3.fixedColumnCount;

                  if (columnIndex === columnCount - fixedColumnCount) {
                    return react.createElement("div", {
                      key: rest.key,
                      style: _objectSpread$7({}, rest.style, {
                        width: SCROLLBAR_SIZE_BUFFER
                      })
                    });
                  } else {
                    return cellRenderer(_objectSpread$7({}, rest, {
                      columnIndex: columnIndex + fixedColumnCount,
                      parent: _assertThisInitialized(_this)
                    }));
                  }
                });

                _defineProperty$6(_assertThisInitialized(_this), "_columnWidthRightGrid", function (_ref4) {
                  var index = _ref4.index;
                  var _this$props4 = _this.props,
                      columnCount = _this$props4.columnCount,
                      fixedColumnCount = _this$props4.fixedColumnCount,
                      columnWidth = _this$props4.columnWidth;
                  var _this$state = _this.state,
                      scrollbarSize = _this$state.scrollbarSize,
                      showHorizontalScrollbar = _this$state.showHorizontalScrollbar; // An extra cell is added to the count
                  // This gives the smaller Grid extra room for offset,
                  // In case the main (bottom right) Grid has a scrollbar
                  // If no scrollbar, the extra space is overflow:hidden anyway

                  if (showHorizontalScrollbar && index === columnCount - fixedColumnCount) {
                    return scrollbarSize;
                  }

                  return typeof columnWidth === 'function' ? columnWidth({
                    index: index + fixedColumnCount
                  }) : columnWidth;
                });

                _defineProperty$6(_assertThisInitialized(_this), "_onScroll", function (scrollInfo) {
                  var scrollLeft = scrollInfo.scrollLeft,
                      scrollTop = scrollInfo.scrollTop;

                  _this.setState({
                    scrollLeft: scrollLeft,
                    scrollTop: scrollTop
                  });

                  var onScroll = _this.props.onScroll;

                  if (onScroll) {
                    onScroll(scrollInfo);
                  }
                });

                _defineProperty$6(_assertThisInitialized(_this), "_onScrollbarPresenceChange", function (_ref5) {
                  var horizontal = _ref5.horizontal,
                      size = _ref5.size,
                      vertical = _ref5.vertical;
                  var _this$state2 = _this.state,
                      showHorizontalScrollbar = _this$state2.showHorizontalScrollbar,
                      showVerticalScrollbar = _this$state2.showVerticalScrollbar;

                  if (horizontal !== showHorizontalScrollbar || vertical !== showVerticalScrollbar) {
                    _this.setState({
                      scrollbarSize: size,
                      showHorizontalScrollbar: horizontal,
                      showVerticalScrollbar: vertical
                    });

                    var onScrollbarPresenceChange = _this.props.onScrollbarPresenceChange;

                    if (typeof onScrollbarPresenceChange === 'function') {
                      onScrollbarPresenceChange({
                        horizontal: horizontal,
                        size: size,
                        vertical: vertical
                      });
                    }
                  }
                });

                _defineProperty$6(_assertThisInitialized(_this), "_onScrollLeft", function (scrollInfo) {
                  var scrollLeft = scrollInfo.scrollLeft;

                  _this._onScroll({
                    scrollLeft: scrollLeft,
                    scrollTop: _this.state.scrollTop
                  });
                });

                _defineProperty$6(_assertThisInitialized(_this), "_onScrollTop", function (scrollInfo) {
                  var scrollTop = scrollInfo.scrollTop;

                  _this._onScroll({
                    scrollTop: scrollTop,
                    scrollLeft: _this.state.scrollLeft
                  });
                });

                _defineProperty$6(_assertThisInitialized(_this), "_rowHeightBottomGrid", function (_ref6) {
                  var index = _ref6.index;
                  var _this$props5 = _this.props,
                      fixedRowCount = _this$props5.fixedRowCount,
                      rowCount = _this$props5.rowCount,
                      rowHeight = _this$props5.rowHeight;
                  var _this$state3 = _this.state,
                      scrollbarSize = _this$state3.scrollbarSize,
                      showVerticalScrollbar = _this$state3.showVerticalScrollbar; // An extra cell is added to the count
                  // This gives the smaller Grid extra room for offset,
                  // In case the main (bottom right) Grid has a scrollbar
                  // If no scrollbar, the extra space is overflow:hidden anyway

                  if (showVerticalScrollbar && index === rowCount - fixedRowCount) {
                    return scrollbarSize;
                  }

                  return typeof rowHeight === 'function' ? rowHeight({
                    index: index + fixedRowCount
                  }) : rowHeight;
                });

                _defineProperty$6(_assertThisInitialized(_this), "_topLeftGridRef", function (ref) {
                  _this._topLeftGrid = ref;
                });

                _defineProperty$6(_assertThisInitialized(_this), "_topRightGridRef", function (ref) {
                  _this._topRightGrid = ref;
                });

                var deferredMeasurementCache = props.deferredMeasurementCache,
                    _fixedColumnCount = props.fixedColumnCount,
                    _fixedRowCount = props.fixedRowCount;

                _this._maybeCalculateCachedStyles(true);

                if (deferredMeasurementCache) {
                  _this._deferredMeasurementCacheBottomLeftGrid = _fixedRowCount > 0 ? new CellMeasurerCacheDecorator({
                    cellMeasurerCache: deferredMeasurementCache,
                    columnIndexOffset: 0,
                    rowIndexOffset: _fixedRowCount
                  }) : deferredMeasurementCache;
                  _this._deferredMeasurementCacheBottomRightGrid = _fixedColumnCount > 0 || _fixedRowCount > 0 ? new CellMeasurerCacheDecorator({
                    cellMeasurerCache: deferredMeasurementCache,
                    columnIndexOffset: _fixedColumnCount,
                    rowIndexOffset: _fixedRowCount
                  }) : deferredMeasurementCache;
                  _this._deferredMeasurementCacheTopRightGrid = _fixedColumnCount > 0 ? new CellMeasurerCacheDecorator({
                    cellMeasurerCache: deferredMeasurementCache,
                    columnIndexOffset: _fixedColumnCount,
                    rowIndexOffset: 0
                  }) : deferredMeasurementCache;
                }

                return _this;
              }

              _createClass$8(MultiGrid, [{
                key: "forceUpdateGrids",
                value: function forceUpdateGrids() {
                  this._bottomLeftGrid && this._bottomLeftGrid.forceUpdate();
                  this._bottomRightGrid && this._bottomRightGrid.forceUpdate();
                  this._topLeftGrid && this._topLeftGrid.forceUpdate();
                  this._topRightGrid && this._topRightGrid.forceUpdate();
                }
                /** See Grid#invalidateCellSizeAfterRender */

              }, {
                key: "invalidateCellSizeAfterRender",
                value: function invalidateCellSizeAfterRender() {
                  var _ref7 = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {},
                      _ref7$columnIndex = _ref7.columnIndex,
                      columnIndex = _ref7$columnIndex === void 0 ? 0 : _ref7$columnIndex,
                      _ref7$rowIndex = _ref7.rowIndex,
                      rowIndex = _ref7$rowIndex === void 0 ? 0 : _ref7$rowIndex;

                  this._deferredInvalidateColumnIndex = typeof this._deferredInvalidateColumnIndex === 'number' ? Math.min(this._deferredInvalidateColumnIndex, columnIndex) : columnIndex;
                  this._deferredInvalidateRowIndex = typeof this._deferredInvalidateRowIndex === 'number' ? Math.min(this._deferredInvalidateRowIndex, rowIndex) : rowIndex;
                }
                /** See Grid#measureAllCells */

              }, {
                key: "measureAllCells",
                value: function measureAllCells() {
                  this._bottomLeftGrid && this._bottomLeftGrid.measureAllCells();
                  this._bottomRightGrid && this._bottomRightGrid.measureAllCells();
                  this._topLeftGrid && this._topLeftGrid.measureAllCells();
                  this._topRightGrid && this._topRightGrid.measureAllCells();
                }
                /** See Grid#recomputeGridSize */

              }, {
                key: "recomputeGridSize",
                value: function recomputeGridSize() {
                  var _ref8 = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {},
                      _ref8$columnIndex = _ref8.columnIndex,
                      columnIndex = _ref8$columnIndex === void 0 ? 0 : _ref8$columnIndex,
                      _ref8$rowIndex = _ref8.rowIndex,
                      rowIndex = _ref8$rowIndex === void 0 ? 0 : _ref8$rowIndex;

                  var _this$props6 = this.props,
                      fixedColumnCount = _this$props6.fixedColumnCount,
                      fixedRowCount = _this$props6.fixedRowCount;
                  var adjustedColumnIndex = Math.max(0, columnIndex - fixedColumnCount);
                  var adjustedRowIndex = Math.max(0, rowIndex - fixedRowCount);
                  this._bottomLeftGrid && this._bottomLeftGrid.recomputeGridSize({
                    columnIndex: columnIndex,
                    rowIndex: adjustedRowIndex
                  });
                  this._bottomRightGrid && this._bottomRightGrid.recomputeGridSize({
                    columnIndex: adjustedColumnIndex,
                    rowIndex: adjustedRowIndex
                  });
                  this._topLeftGrid && this._topLeftGrid.recomputeGridSize({
                    columnIndex: columnIndex,
                    rowIndex: rowIndex
                  });
                  this._topRightGrid && this._topRightGrid.recomputeGridSize({
                    columnIndex: adjustedColumnIndex,
                    rowIndex: rowIndex
                  });
                  this._leftGridWidth = null;
                  this._topGridHeight = null;

                  this._maybeCalculateCachedStyles(true);
                }
              }, {
                key: "componentDidMount",
                value: function componentDidMount() {
                  var _this$props7 = this.props,
                      scrollLeft = _this$props7.scrollLeft,
                      scrollTop = _this$props7.scrollTop;

                  if (scrollLeft > 0 || scrollTop > 0) {
                    var newState = {};

                    if (scrollLeft > 0) {
                      newState.scrollLeft = scrollLeft;
                    }

                    if (scrollTop > 0) {
                      newState.scrollTop = scrollTop;
                    }

                    this.setState(newState);
                  }

                  this._handleInvalidatedGridSize();
                }
              }, {
                key: "componentDidUpdate",
                value: function componentDidUpdate() {
                  this._handleInvalidatedGridSize();
                }
              }, {
                key: "render",
                value: function render() {
                  var _this$props8 = this.props,
                      onScroll = _this$props8.onScroll,
                      onSectionRendered = _this$props8.onSectionRendered;
                      _this$props8.onScrollbarPresenceChange;
                      _this$props8.scrollLeft;
                      var scrollToColumn = _this$props8.scrollToColumn;
                      _this$props8.scrollTop;
                      var scrollToRow = _this$props8.scrollToRow,
                      rest = _objectWithoutProperties$1(_this$props8, ["onScroll", "onSectionRendered", "onScrollbarPresenceChange", "scrollLeft", "scrollToColumn", "scrollTop", "scrollToRow"]);

                  this._prepareForRender(); // Don't render any of our Grids if there are no cells.
                  // This mirrors what Grid does,
                  // And prevents us from recording inaccurage measurements when used with CellMeasurer.


                  if (this.props.width === 0 || this.props.height === 0) {
                    return null;
                  } // scrollTop and scrollLeft props are explicitly filtered out and ignored


                  var _this$state4 = this.state,
                      scrollLeft = _this$state4.scrollLeft,
                      scrollTop = _this$state4.scrollTop;
                  return react.createElement("div", {
                    style: this._containerOuterStyle
                  }, react.createElement("div", {
                    style: this._containerTopStyle
                  }, this._renderTopLeftGrid(rest), this._renderTopRightGrid(_objectSpread$7({}, rest, {
                    onScroll: onScroll,
                    scrollLeft: scrollLeft
                  }))), react.createElement("div", {
                    style: this._containerBottomStyle
                  }, this._renderBottomLeftGrid(_objectSpread$7({}, rest, {
                    onScroll: onScroll,
                    scrollTop: scrollTop
                  })), this._renderBottomRightGrid(_objectSpread$7({}, rest, {
                    onScroll: onScroll,
                    onSectionRendered: onSectionRendered,
                    scrollLeft: scrollLeft,
                    scrollToColumn: scrollToColumn,
                    scrollToRow: scrollToRow,
                    scrollTop: scrollTop
                  }))));
                }
              }, {
                key: "_getBottomGridHeight",
                value: function _getBottomGridHeight(props) {
                  var height = props.height;

                  var topGridHeight = this._getTopGridHeight(props);

                  return height - topGridHeight;
                }
              }, {
                key: "_getLeftGridWidth",
                value: function _getLeftGridWidth(props) {
                  var fixedColumnCount = props.fixedColumnCount,
                      columnWidth = props.columnWidth;

                  if (this._leftGridWidth == null) {
                    if (typeof columnWidth === 'function') {
                      var leftGridWidth = 0;

                      for (var index = 0; index < fixedColumnCount; index++) {
                        leftGridWidth += columnWidth({
                          index: index
                        });
                      }

                      this._leftGridWidth = leftGridWidth;
                    } else {
                      this._leftGridWidth = columnWidth * fixedColumnCount;
                    }
                  }

                  return this._leftGridWidth;
                }
              }, {
                key: "_getRightGridWidth",
                value: function _getRightGridWidth(props) {
                  var width = props.width;

                  var leftGridWidth = this._getLeftGridWidth(props);

                  return width - leftGridWidth;
                }
              }, {
                key: "_getTopGridHeight",
                value: function _getTopGridHeight(props) {
                  var fixedRowCount = props.fixedRowCount,
                      rowHeight = props.rowHeight;

                  if (this._topGridHeight == null) {
                    if (typeof rowHeight === 'function') {
                      var topGridHeight = 0;

                      for (var index = 0; index < fixedRowCount; index++) {
                        topGridHeight += rowHeight({
                          index: index
                        });
                      }

                      this._topGridHeight = topGridHeight;
                    } else {
                      this._topGridHeight = rowHeight * fixedRowCount;
                    }
                  }

                  return this._topGridHeight;
                }
              }, {
                key: "_handleInvalidatedGridSize",
                value: function _handleInvalidatedGridSize() {
                  if (typeof this._deferredInvalidateColumnIndex === 'number') {
                    var columnIndex = this._deferredInvalidateColumnIndex;
                    var rowIndex = this._deferredInvalidateRowIndex;
                    this._deferredInvalidateColumnIndex = null;
                    this._deferredInvalidateRowIndex = null;
                    this.recomputeGridSize({
                      columnIndex: columnIndex,
                      rowIndex: rowIndex
                    });
                    this.forceUpdate();
                  }
                }
                /**
                 * Avoid recreating inline styles each render; this bypasses Grid's shallowCompare.
                 * This method recalculates styles only when specific props change.
                 */

              }, {
                key: "_maybeCalculateCachedStyles",
                value: function _maybeCalculateCachedStyles(resetAll) {
                  var _this$props9 = this.props,
                      columnWidth = _this$props9.columnWidth,
                      enableFixedColumnScroll = _this$props9.enableFixedColumnScroll,
                      enableFixedRowScroll = _this$props9.enableFixedRowScroll,
                      height = _this$props9.height,
                      fixedColumnCount = _this$props9.fixedColumnCount,
                      fixedRowCount = _this$props9.fixedRowCount,
                      rowHeight = _this$props9.rowHeight,
                      style = _this$props9.style,
                      styleBottomLeftGrid = _this$props9.styleBottomLeftGrid,
                      styleBottomRightGrid = _this$props9.styleBottomRightGrid,
                      styleTopLeftGrid = _this$props9.styleTopLeftGrid,
                      styleTopRightGrid = _this$props9.styleTopRightGrid,
                      width = _this$props9.width;
                  var sizeChange = resetAll || height !== this._lastRenderedHeight || width !== this._lastRenderedWidth;
                  var leftSizeChange = resetAll || columnWidth !== this._lastRenderedColumnWidth || fixedColumnCount !== this._lastRenderedFixedColumnCount;
                  var topSizeChange = resetAll || fixedRowCount !== this._lastRenderedFixedRowCount || rowHeight !== this._lastRenderedRowHeight;

                  if (resetAll || sizeChange || style !== this._lastRenderedStyle) {
                    this._containerOuterStyle = _objectSpread$7({
                      height: height,
                      overflow: 'visible',
                      // Let :focus outline show through
                      width: width
                    }, style);
                  }

                  if (resetAll || sizeChange || topSizeChange) {
                    this._containerTopStyle = {
                      height: this._getTopGridHeight(this.props),
                      position: 'relative',
                      width: width
                    };
                    this._containerBottomStyle = {
                      height: height - this._getTopGridHeight(this.props),
                      overflow: 'visible',
                      // Let :focus outline show through
                      position: 'relative',
                      width: width
                    };
                  }

                  if (resetAll || styleBottomLeftGrid !== this._lastRenderedStyleBottomLeftGrid) {
                    this._bottomLeftGridStyle = _objectSpread$7({
                      left: 0,
                      overflowX: 'hidden',
                      overflowY: enableFixedColumnScroll ? 'auto' : 'hidden',
                      position: 'absolute'
                    }, styleBottomLeftGrid);
                  }

                  if (resetAll || leftSizeChange || styleBottomRightGrid !== this._lastRenderedStyleBottomRightGrid) {
                    this._bottomRightGridStyle = _objectSpread$7({
                      left: this._getLeftGridWidth(this.props),
                      position: 'absolute'
                    }, styleBottomRightGrid);
                  }

                  if (resetAll || styleTopLeftGrid !== this._lastRenderedStyleTopLeftGrid) {
                    this._topLeftGridStyle = _objectSpread$7({
                      left: 0,
                      overflowX: 'hidden',
                      overflowY: 'hidden',
                      position: 'absolute',
                      top: 0
                    }, styleTopLeftGrid);
                  }

                  if (resetAll || leftSizeChange || styleTopRightGrid !== this._lastRenderedStyleTopRightGrid) {
                    this._topRightGridStyle = _objectSpread$7({
                      left: this._getLeftGridWidth(this.props),
                      overflowX: enableFixedRowScroll ? 'auto' : 'hidden',
                      overflowY: 'hidden',
                      position: 'absolute',
                      top: 0
                    }, styleTopRightGrid);
                  }

                  this._lastRenderedColumnWidth = columnWidth;
                  this._lastRenderedFixedColumnCount = fixedColumnCount;
                  this._lastRenderedFixedRowCount = fixedRowCount;
                  this._lastRenderedHeight = height;
                  this._lastRenderedRowHeight = rowHeight;
                  this._lastRenderedStyle = style;
                  this._lastRenderedStyleBottomLeftGrid = styleBottomLeftGrid;
                  this._lastRenderedStyleBottomRightGrid = styleBottomRightGrid;
                  this._lastRenderedStyleTopLeftGrid = styleTopLeftGrid;
                  this._lastRenderedStyleTopRightGrid = styleTopRightGrid;
                  this._lastRenderedWidth = width;
                }
              }, {
                key: "_prepareForRender",
                value: function _prepareForRender() {
                  if (this._lastRenderedColumnWidth !== this.props.columnWidth || this._lastRenderedFixedColumnCount !== this.props.fixedColumnCount) {
                    this._leftGridWidth = null;
                  }

                  if (this._lastRenderedFixedRowCount !== this.props.fixedRowCount || this._lastRenderedRowHeight !== this.props.rowHeight) {
                    this._topGridHeight = null;
                  }

                  this._maybeCalculateCachedStyles();

                  this._lastRenderedColumnWidth = this.props.columnWidth;
                  this._lastRenderedFixedColumnCount = this.props.fixedColumnCount;
                  this._lastRenderedFixedRowCount = this.props.fixedRowCount;
                  this._lastRenderedRowHeight = this.props.rowHeight;
                }
              }, {
                key: "_renderBottomLeftGrid",
                value: function _renderBottomLeftGrid(props) {
                  var enableFixedColumnScroll = props.enableFixedColumnScroll,
                      fixedColumnCount = props.fixedColumnCount,
                      fixedRowCount = props.fixedRowCount,
                      rowCount = props.rowCount,
                      hideBottomLeftGridScrollbar = props.hideBottomLeftGridScrollbar;
                  var showVerticalScrollbar = this.state.showVerticalScrollbar;

                  if (!fixedColumnCount) {
                    return null;
                  }

                  var additionalRowCount = showVerticalScrollbar ? 1 : 0,
                      height = this._getBottomGridHeight(props),
                      width = this._getLeftGridWidth(props),
                      scrollbarSize = this.state.showVerticalScrollbar ? this.state.scrollbarSize : 0,
                      gridWidth = hideBottomLeftGridScrollbar ? width + scrollbarSize : width;

                  var bottomLeftGrid = react.createElement(Grid, _extends({}, props, {
                    cellRenderer: this._cellRendererBottomLeftGrid,
                    className: this.props.classNameBottomLeftGrid,
                    columnCount: fixedColumnCount,
                    deferredMeasurementCache: this._deferredMeasurementCacheBottomLeftGrid,
                    height: height,
                    onScroll: enableFixedColumnScroll ? this._onScrollTop : undefined,
                    ref: this._bottomLeftGridRef,
                    rowCount: Math.max(0, rowCount - fixedRowCount) + additionalRowCount,
                    rowHeight: this._rowHeightBottomGrid,
                    style: this._bottomLeftGridStyle,
                    tabIndex: null,
                    width: gridWidth
                  }));

                  if (hideBottomLeftGridScrollbar) {
                    return react.createElement("div", {
                      className: "BottomLeftGrid_ScrollWrapper",
                      style: _objectSpread$7({}, this._bottomLeftGridStyle, {
                        height: height,
                        width: width,
                        overflowY: 'hidden'
                      })
                    }, bottomLeftGrid);
                  }

                  return bottomLeftGrid;
                }
              }, {
                key: "_renderBottomRightGrid",
                value: function _renderBottomRightGrid(props) {
                  var columnCount = props.columnCount,
                      fixedColumnCount = props.fixedColumnCount,
                      fixedRowCount = props.fixedRowCount,
                      rowCount = props.rowCount,
                      scrollToColumn = props.scrollToColumn,
                      scrollToRow = props.scrollToRow;
                  return react.createElement(Grid, _extends({}, props, {
                    cellRenderer: this._cellRendererBottomRightGrid,
                    className: this.props.classNameBottomRightGrid,
                    columnCount: Math.max(0, columnCount - fixedColumnCount),
                    columnWidth: this._columnWidthRightGrid,
                    deferredMeasurementCache: this._deferredMeasurementCacheBottomRightGrid,
                    height: this._getBottomGridHeight(props),
                    onScroll: this._onScroll,
                    onScrollbarPresenceChange: this._onScrollbarPresenceChange,
                    ref: this._bottomRightGridRef,
                    rowCount: Math.max(0, rowCount - fixedRowCount),
                    rowHeight: this._rowHeightBottomGrid,
                    scrollToColumn: scrollToColumn - fixedColumnCount,
                    scrollToRow: scrollToRow - fixedRowCount,
                    style: this._bottomRightGridStyle,
                    width: this._getRightGridWidth(props)
                  }));
                }
              }, {
                key: "_renderTopLeftGrid",
                value: function _renderTopLeftGrid(props) {
                  var fixedColumnCount = props.fixedColumnCount,
                      fixedRowCount = props.fixedRowCount;

                  if (!fixedColumnCount || !fixedRowCount) {
                    return null;
                  }

                  return react.createElement(Grid, _extends({}, props, {
                    className: this.props.classNameTopLeftGrid,
                    columnCount: fixedColumnCount,
                    height: this._getTopGridHeight(props),
                    ref: this._topLeftGridRef,
                    rowCount: fixedRowCount,
                    style: this._topLeftGridStyle,
                    tabIndex: null,
                    width: this._getLeftGridWidth(props)
                  }));
                }
              }, {
                key: "_renderTopRightGrid",
                value: function _renderTopRightGrid(props) {
                  var columnCount = props.columnCount,
                      enableFixedRowScroll = props.enableFixedRowScroll,
                      fixedColumnCount = props.fixedColumnCount,
                      fixedRowCount = props.fixedRowCount,
                      scrollLeft = props.scrollLeft,
                      hideTopRightGridScrollbar = props.hideTopRightGridScrollbar;
                  var _this$state5 = this.state,
                      showHorizontalScrollbar = _this$state5.showHorizontalScrollbar,
                      scrollbarSize = _this$state5.scrollbarSize;

                  if (!fixedRowCount) {
                    return null;
                  }

                  var additionalColumnCount = showHorizontalScrollbar ? 1 : 0,
                      height = this._getTopGridHeight(props),
                      width = this._getRightGridWidth(props),
                      additionalHeight = showHorizontalScrollbar ? scrollbarSize : 0;

                  var gridHeight = height,
                      style = this._topRightGridStyle;

                  if (hideTopRightGridScrollbar) {
                    gridHeight = height + additionalHeight;
                    style = _objectSpread$7({}, this._topRightGridStyle, {
                      left: 0
                    });
                  }

                  var topRightGrid = react.createElement(Grid, _extends({}, props, {
                    cellRenderer: this._cellRendererTopRightGrid,
                    className: this.props.classNameTopRightGrid,
                    columnCount: Math.max(0, columnCount - fixedColumnCount) + additionalColumnCount,
                    columnWidth: this._columnWidthRightGrid,
                    deferredMeasurementCache: this._deferredMeasurementCacheTopRightGrid,
                    height: gridHeight,
                    onScroll: enableFixedRowScroll ? this._onScrollLeft : undefined,
                    ref: this._topRightGridRef,
                    rowCount: fixedRowCount,
                    scrollLeft: scrollLeft,
                    style: style,
                    tabIndex: null,
                    width: width
                  }));

                  if (hideTopRightGridScrollbar) {
                    return react.createElement("div", {
                      className: "TopRightGrid_ScrollWrapper",
                      style: _objectSpread$7({}, this._topRightGridStyle, {
                        height: height,
                        width: width,
                        overflowX: 'hidden'
                      })
                    }, topRightGrid);
                  }

                  return topRightGrid;
                }
              }], [{
                key: "getDerivedStateFromProps",
                value: function getDerivedStateFromProps(nextProps, prevState) {
                  if (nextProps.scrollLeft !== prevState.scrollLeft || nextProps.scrollTop !== prevState.scrollTop) {
                    return {
                      scrollLeft: nextProps.scrollLeft != null && nextProps.scrollLeft >= 0 ? nextProps.scrollLeft : prevState.scrollLeft,
                      scrollTop: nextProps.scrollTop != null && nextProps.scrollTop >= 0 ? nextProps.scrollTop : prevState.scrollTop
                    };
                  }

                  return null;
                }
              }]);

              return MultiGrid;
            }(react.PureComponent);

            _defineProperty$6(MultiGrid, "defaultProps", {
              classNameBottomLeftGrid: '',
              classNameBottomRightGrid: '',
              classNameTopLeftGrid: '',
              classNameTopRightGrid: '',
              enableFixedColumnScroll: false,
              enableFixedRowScroll: false,
              fixedColumnCount: 0,
              fixedRowCount: 0,
              scrollToColumn: -1,
              scrollToRow: -1,
              style: {},
              styleBottomLeftGrid: {},
              styleBottomRightGrid: {},
              styleTopLeftGrid: {},
              styleTopRightGrid: {},
              hideTopRightGridScrollbar: false,
              hideBottomLeftGridScrollbar: false
            });

            MultiGrid.propTypes = {
              classNameBottomLeftGrid: propTypes.string.isRequired,
              classNameBottomRightGrid: propTypes.string.isRequired,
              classNameTopLeftGrid: propTypes.string.isRequired,
              classNameTopRightGrid: propTypes.string.isRequired,
              enableFixedColumnScroll: propTypes.bool.isRequired,
              enableFixedRowScroll: propTypes.bool.isRequired,
              fixedColumnCount: propTypes.number.isRequired,
              fixedRowCount: propTypes.number.isRequired,
              onScrollbarPresenceChange: propTypes.func,
              style: propTypes.object.isRequired,
              styleBottomLeftGrid: propTypes.object.isRequired,
              styleBottomRightGrid: propTypes.object.isRequired,
              styleTopLeftGrid: propTypes.object.isRequired,
              styleTopRightGrid: propTypes.object.isRequired,
              hideTopRightGridScrollbar: propTypes.bool,
              hideBottomLeftGridScrollbar: propTypes.bool
            } ;
            polyfill(MultiGrid);

            ({
              /**
               * Function responsible for rendering 2 or more virtualized components.
               * This function should implement the following signature:
               * ({ onScroll, scrollLeft, scrollTop }) => PropTypes.element
               */
              children: propTypes.func.isRequired
            }) ;

            ({
              "columnData": propTypes.any,
              "dataKey": propTypes.string.isRequired,
              "rowData": function rowData(props, propName, componentName) {
                if (!Object.prototype.hasOwnProperty.call(props, propName)) {
                  throw new Error("Prop `".concat(propName, "` has type 'any' or 'mixed', but was not provided to `").concat(componentName, "`. Pass undefined or any other value."));
                }
              }
            });
            ({
              "cellData": propTypes.any,
              "columnData": propTypes.any,
              "dataKey": propTypes.string.isRequired,
              "rowData": function rowData(props, propName, componentName) {
                if (!Object.prototype.hasOwnProperty.call(props, propName)) {
                  throw new Error("Prop `".concat(propName, "` has type 'any' or 'mixed', but was not provided to `").concat(componentName, "`. Pass undefined or any other value."));
                }
              },
              "rowIndex": propTypes.number.isRequired
            });
            var bpfrpt_proptype_HeaderRowRendererParams = {
              "className": propTypes.string.isRequired,
              "columns": propTypes.arrayOf(function (props, propName, componentName) {
                if (!Object.prototype.hasOwnProperty.call(props, propName)) {
                  throw new Error("Prop `".concat(propName, "` has type 'any' or 'mixed', but was not provided to `").concat(componentName, "`. Pass undefined or any other value."));
                }
              }).isRequired,
              "style": function style(props, propName, componentName) {
                if (!Object.prototype.hasOwnProperty.call(props, propName)) {
                  throw new Error("Prop `".concat(propName, "` has type 'any' or 'mixed', but was not provided to `").concat(componentName, "`. Pass undefined or any other value."));
                }
              }
            };
            var bpfrpt_proptype_HeaderRendererParams = {
              "columnData": propTypes.any,
              "dataKey": propTypes.string.isRequired,
              "disableSort": propTypes.bool,
              "label": propTypes.any,
              "sortBy": propTypes.string,
              "sortDirection": propTypes.string
            };
            var bpfrpt_proptype_RowRendererParams = {
              "className": propTypes.string.isRequired,
              "columns": propTypes.arrayOf(function (props, propName, componentName) {
                if (!Object.prototype.hasOwnProperty.call(props, propName)) {
                  throw new Error("Prop `".concat(propName, "` has type 'any' or 'mixed', but was not provided to `").concat(componentName, "`. Pass undefined or any other value."));
                }
              }).isRequired,
              "index": propTypes.number.isRequired,
              "isScrolling": propTypes.bool.isRequired,
              "onRowClick": propTypes.func,
              "onRowDoubleClick": propTypes.func,
              "onRowMouseOver": propTypes.func,
              "onRowMouseOut": propTypes.func,
              "rowData": function rowData(props, propName, componentName) {
                if (!Object.prototype.hasOwnProperty.call(props, propName)) {
                  throw new Error("Prop `".concat(propName, "` has type 'any' or 'mixed', but was not provided to `").concat(componentName, "`. Pass undefined or any other value."));
                }
              },
              "style": function style(props, propName, componentName) {
                if (!Object.prototype.hasOwnProperty.call(props, propName)) {
                  throw new Error("Prop `".concat(propName, "` has type 'any' or 'mixed', but was not provided to `").concat(componentName, "`. Pass undefined or any other value."));
                }
              },
              "key": propTypes.string.isRequired
            };

            /**
             * Default accessor for returning a cell value for a given attribute.
             * This function expects to operate on either a vanilla Object or an Immutable Map.
             * You should override the column's cellDataGetter if your data is some other type of object.
             */
            function defaultCellDataGetter(_ref) {
              var dataKey = _ref.dataKey,
                  rowData = _ref.rowData;

              if (typeof rowData.get === 'function') {
                return rowData.get(dataKey);
              } else {
                return rowData[dataKey];
              }
            }

            /**
             * Default cell renderer that displays an attribute as a simple string
             * You should override the column's cellRenderer if your data is some other type of object.
             */
            function defaultCellRenderer(_ref) {
              var cellData = _ref.cellData;

              if (cellData == null) {
                return '';
              } else {
                return String(cellData);
              }
            }

            function defaultHeaderRowRenderer(_ref) {
              var className = _ref.className,
                  columns = _ref.columns,
                  style = _ref.style;
              return react.createElement("div", {
                className: className,
                role: "row",
                style: style
              }, columns);
            }
            defaultHeaderRowRenderer.propTypes = bpfrpt_proptype_HeaderRowRendererParams === propTypes.any ? {} : bpfrpt_proptype_HeaderRowRendererParams;

            var SortDirection = {
              /**
               * Sort items in ascending order.
               * This means arranging from the lowest value to the highest (e.g. a-z, 0-9).
               */
              ASC: 'ASC',

              /**
               * Sort items in descending order.
               * This means arranging from the highest value to the lowest (e.g. z-a, 9-0).
               */
              DESC: 'DESC'
            };

            /**
             * Displayed beside a header to indicate that a Table is currently sorted by this column.
             */

            function SortIndicator(_ref) {
              var sortDirection = _ref.sortDirection;
              var classNames = clsx('ReactVirtualized__Table__sortableHeaderIcon', {
                'ReactVirtualized__Table__sortableHeaderIcon--ASC': sortDirection === SortDirection.ASC,
                'ReactVirtualized__Table__sortableHeaderIcon--DESC': sortDirection === SortDirection.DESC
              });
              return react.createElement("svg", {
                className: classNames,
                width: 18,
                height: 18,
                viewBox: "0 0 24 24"
              }, sortDirection === SortDirection.ASC ? react.createElement("path", {
                d: "M7 14l5-5 5 5z"
              }) : react.createElement("path", {
                d: "M7 10l5 5 5-5z"
              }), react.createElement("path", {
                d: "M0 0h24v24H0z",
                fill: "none"
              }));
            }
            SortIndicator.propTypes = {
              sortDirection: propTypes.oneOf([SortDirection.ASC, SortDirection.DESC])
            } ;

            /**
             * Default table header renderer.
             */
            function defaultHeaderRenderer(_ref) {
              var dataKey = _ref.dataKey,
                  label = _ref.label,
                  sortBy = _ref.sortBy,
                  sortDirection = _ref.sortDirection;
              var showSortIndicator = sortBy === dataKey;
              var children = [react.createElement("span", {
                className: "ReactVirtualized__Table__headerTruncatedText",
                key: "label",
                title: typeof label === 'string' ? label : null
              }, label)];

              if (showSortIndicator) {
                children.push(react.createElement(SortIndicator, {
                  key: "SortIndicator",
                  sortDirection: sortDirection
                }));
              }

              return children;
            }
            defaultHeaderRenderer.propTypes = bpfrpt_proptype_HeaderRendererParams === propTypes.any ? {} : bpfrpt_proptype_HeaderRendererParams;

            /**
             * Default row renderer for Table.
             */
            function defaultRowRenderer(_ref) {
              var className = _ref.className,
                  columns = _ref.columns,
                  index = _ref.index,
                  key = _ref.key,
                  onRowClick = _ref.onRowClick,
                  onRowDoubleClick = _ref.onRowDoubleClick,
                  onRowMouseOut = _ref.onRowMouseOut,
                  onRowMouseOver = _ref.onRowMouseOver,
                  onRowRightClick = _ref.onRowRightClick,
                  rowData = _ref.rowData,
                  style = _ref.style;
              var a11yProps = {
                'aria-rowindex': index + 1
              };

              if (onRowClick || onRowDoubleClick || onRowMouseOut || onRowMouseOver || onRowRightClick) {
                a11yProps['aria-label'] = 'row';
                a11yProps.tabIndex = 0;

                if (onRowClick) {
                  a11yProps.onClick = function (event) {
                    return onRowClick({
                      event: event,
                      index: index,
                      rowData: rowData
                    });
                  };
                }

                if (onRowDoubleClick) {
                  a11yProps.onDoubleClick = function (event) {
                    return onRowDoubleClick({
                      event: event,
                      index: index,
                      rowData: rowData
                    });
                  };
                }

                if (onRowMouseOut) {
                  a11yProps.onMouseOut = function (event) {
                    return onRowMouseOut({
                      event: event,
                      index: index,
                      rowData: rowData
                    });
                  };
                }

                if (onRowMouseOver) {
                  a11yProps.onMouseOver = function (event) {
                    return onRowMouseOver({
                      event: event,
                      index: index,
                      rowData: rowData
                    });
                  };
                }

                if (onRowRightClick) {
                  a11yProps.onContextMenu = function (event) {
                    return onRowRightClick({
                      event: event,
                      index: index,
                      rowData: rowData
                    });
                  };
                }
              }

              return react.createElement("div", _extends({}, a11yProps, {
                className: className,
                key: key,
                role: "row",
                style: style
              }), columns);
            }
            defaultRowRenderer.propTypes = bpfrpt_proptype_RowRendererParams === propTypes.any ? {} : bpfrpt_proptype_RowRendererParams;

            /**
             * Describes the header and cell contents of a table column.
             */

            var Column =
            /*#__PURE__*/
            function (_React$Component) {
              _inherits(Column, _React$Component);

              function Column() {
                _classCallCheck$8(this, Column);

                return _possibleConstructorReturn(this, _getPrototypeOf(Column).apply(this, arguments));
              }

              return Column;
            }(react.Component);

            _defineProperty$6(Column, "defaultProps", {
              cellDataGetter: defaultCellDataGetter,
              cellRenderer: defaultCellRenderer,
              defaultSortDirection: SortDirection.ASC,
              flexGrow: 0,
              flexShrink: 1,
              headerRenderer: defaultHeaderRenderer,
              style: {}
            });
            Column.propTypes = {
              /** Optional aria-label value to set on the column header */
              'aria-label': propTypes.string,

              /**
               * Callback responsible for returning a cell's data, given its :dataKey
               * ({ columnData: any, dataKey: string, rowData: any }): any
               */
              cellDataGetter: propTypes.func,

              /**
               * Callback responsible for rendering a cell's contents.
               * ({ cellData: any, columnData: any, dataKey: string, rowData: any, rowIndex: number }): node
               */
              cellRenderer: propTypes.func,

              /** Optional CSS class to apply to cell */
              className: propTypes.string,

              /** Optional additional data passed to this column's :cellDataGetter */
              columnData: propTypes.object,

              /** Uniquely identifies the row-data attribute corresponding to this cell */
              dataKey: propTypes.any.isRequired,

              /** Optional direction to be used when clicked the first time */
              defaultSortDirection: propTypes.oneOf([SortDirection.ASC, SortDirection.DESC]),

              /** If sort is enabled for the table at large, disable it for this column */
              disableSort: propTypes.bool,

              /** Flex grow style; defaults to 0 */
              flexGrow: propTypes.number,

              /** Flex shrink style; defaults to 1 */
              flexShrink: propTypes.number,

              /** Optional CSS class to apply to this column's header */
              headerClassName: propTypes.string,

              /**
               * Optional callback responsible for rendering a column header contents.
               * ({ columnData: object, dataKey: string, disableSort: boolean, label: node, sortBy: string, sortDirection: string }): PropTypes.node
               */
              headerRenderer: propTypes.func.isRequired,

              /** Optional inline style to apply to this column's header */
              headerStyle: propTypes.object,

              /** Optional id to set on the column header */
              id: propTypes.string,

              /** Header label for this column */
              label: propTypes.node,

              /** Maximum width of column; this property will only be used if :flexGrow is > 0. */
              maxWidth: propTypes.number,

              /** Minimum width of column. */
              minWidth: propTypes.number,

              /** Optional inline style to apply to cell */
              style: propTypes.object,

              /** Flex basis (width) for this column; This value can grow or shrink based on :flexGrow and :flexShrink properties. */
              width: propTypes.number.isRequired
            } ;

            function ownKeys$6(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }

            function _objectSpread$6(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys$6(source, true).forEach(function (key) { _defineProperty$6(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys$6(source).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }
            /**
             * Table component with fixed headers and virtualized rows for improved performance with large data sets.
             * This component expects explicit width, height, and padding parameters.
             */

            var Table =
            /*#__PURE__*/
            function (_React$PureComponent) {
              _inherits(Table, _React$PureComponent);

              function Table(props) {
                var _this;

                _classCallCheck$8(this, Table);

                _this = _possibleConstructorReturn(this, _getPrototypeOf(Table).call(this, props));
                _this.state = {
                  scrollbarWidth: 0
                };
                _this._createColumn = _this._createColumn.bind(_assertThisInitialized(_this));
                _this._createRow = _this._createRow.bind(_assertThisInitialized(_this));
                _this._onScroll = _this._onScroll.bind(_assertThisInitialized(_this));
                _this._onSectionRendered = _this._onSectionRendered.bind(_assertThisInitialized(_this));
                _this._setRef = _this._setRef.bind(_assertThisInitialized(_this));
                return _this;
              }

              _createClass$8(Table, [{
                key: "forceUpdateGrid",
                value: function forceUpdateGrid() {
                  if (this.Grid) {
                    this.Grid.forceUpdate();
                  }
                }
                /** See Grid#getOffsetForCell */

              }, {
                key: "getOffsetForRow",
                value: function getOffsetForRow(_ref) {
                  var alignment = _ref.alignment,
                      index = _ref.index;

                  if (this.Grid) {
                    var _this$Grid$getOffsetF = this.Grid.getOffsetForCell({
                      alignment: alignment,
                      rowIndex: index
                    }),
                        scrollTop = _this$Grid$getOffsetF.scrollTop;

                    return scrollTop;
                  }

                  return 0;
                }
                /** CellMeasurer compatibility */

              }, {
                key: "invalidateCellSizeAfterRender",
                value: function invalidateCellSizeAfterRender(_ref2) {
                  var columnIndex = _ref2.columnIndex,
                      rowIndex = _ref2.rowIndex;

                  if (this.Grid) {
                    this.Grid.invalidateCellSizeAfterRender({
                      rowIndex: rowIndex,
                      columnIndex: columnIndex
                    });
                  }
                }
                /** See Grid#measureAllCells */

              }, {
                key: "measureAllRows",
                value: function measureAllRows() {
                  if (this.Grid) {
                    this.Grid.measureAllCells();
                  }
                }
                /** CellMeasurer compatibility */

              }, {
                key: "recomputeGridSize",
                value: function recomputeGridSize() {
                  var _ref3 = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {},
                      _ref3$columnIndex = _ref3.columnIndex,
                      columnIndex = _ref3$columnIndex === void 0 ? 0 : _ref3$columnIndex,
                      _ref3$rowIndex = _ref3.rowIndex,
                      rowIndex = _ref3$rowIndex === void 0 ? 0 : _ref3$rowIndex;

                  if (this.Grid) {
                    this.Grid.recomputeGridSize({
                      rowIndex: rowIndex,
                      columnIndex: columnIndex
                    });
                  }
                }
                /** See Grid#recomputeGridSize */

              }, {
                key: "recomputeRowHeights",
                value: function recomputeRowHeights() {
                  var index = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 0;

                  if (this.Grid) {
                    this.Grid.recomputeGridSize({
                      rowIndex: index
                    });
                  }
                }
                /** See Grid#scrollToPosition */

              }, {
                key: "scrollToPosition",
                value: function scrollToPosition() {
                  var scrollTop = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 0;

                  if (this.Grid) {
                    this.Grid.scrollToPosition({
                      scrollTop: scrollTop
                    });
                  }
                }
                /** See Grid#scrollToCell */

              }, {
                key: "scrollToRow",
                value: function scrollToRow() {
                  var index = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 0;

                  if (this.Grid) {
                    this.Grid.scrollToCell({
                      columnIndex: 0,
                      rowIndex: index
                    });
                  }
                }
              }, {
                key: "getScrollbarWidth",
                value: function getScrollbarWidth() {
                  if (this.Grid) {
                    var _Grid = reactDom.findDOMNode(this.Grid);

                    var clientWidth = _Grid.clientWidth || 0;
                    var offsetWidth = _Grid.offsetWidth || 0;
                    return offsetWidth - clientWidth;
                  }

                  return 0;
                }
              }, {
                key: "componentDidMount",
                value: function componentDidMount() {
                  this._setScrollbarWidth();
                }
              }, {
                key: "componentDidUpdate",
                value: function componentDidUpdate() {
                  this._setScrollbarWidth();
                }
              }, {
                key: "render",
                value: function render() {
                  var _this2 = this;

                  var _this$props = this.props,
                      children = _this$props.children,
                      className = _this$props.className,
                      disableHeader = _this$props.disableHeader,
                      gridClassName = _this$props.gridClassName,
                      gridStyle = _this$props.gridStyle,
                      headerHeight = _this$props.headerHeight,
                      headerRowRenderer = _this$props.headerRowRenderer,
                      height = _this$props.height,
                      id = _this$props.id,
                      noRowsRenderer = _this$props.noRowsRenderer,
                      rowClassName = _this$props.rowClassName,
                      rowStyle = _this$props.rowStyle,
                      scrollToIndex = _this$props.scrollToIndex,
                      style = _this$props.style,
                      width = _this$props.width;
                  var scrollbarWidth = this.state.scrollbarWidth;
                  var availableRowsHeight = disableHeader ? height : height - headerHeight;
                  var rowClass = typeof rowClassName === 'function' ? rowClassName({
                    index: -1
                  }) : rowClassName;
                  var rowStyleObject = typeof rowStyle === 'function' ? rowStyle({
                    index: -1
                  }) : rowStyle; // Precompute and cache column styles before rendering rows and columns to speed things up

                  this._cachedColumnStyles = [];
                  react.Children.toArray(children).forEach(function (column, index) {
                    var flexStyles = _this2._getFlexStyleForColumn(column, column.props.style);

                    _this2._cachedColumnStyles[index] = _objectSpread$6({
                      overflow: 'hidden'
                    }, flexStyles);
                  }); // Note that we specify :rowCount, :scrollbarWidth, :sortBy, and :sortDirection as properties on Grid even though these have nothing to do with Grid.
                  // This is done because Grid is a pure component and won't update unless its properties or state has changed.
                  // Any property that should trigger a re-render of Grid then is specified here to avoid a stale display.

                  return react.createElement("div", {
                    "aria-label": this.props['aria-label'],
                    "aria-labelledby": this.props['aria-labelledby'],
                    "aria-colcount": react.Children.toArray(children).length,
                    "aria-rowcount": this.props.rowCount,
                    className: clsx('ReactVirtualized__Table', className),
                    id: id,
                    role: "grid",
                    style: style
                  }, !disableHeader && headerRowRenderer({
                    className: clsx('ReactVirtualized__Table__headerRow', rowClass),
                    columns: this._getHeaderColumns(),
                    style: _objectSpread$6({
                      height: headerHeight,
                      overflow: 'hidden',
                      paddingRight: scrollbarWidth,
                      width: width
                    }, rowStyleObject)
                  }), react.createElement(Grid, _extends({}, this.props, {
                    "aria-readonly": null,
                    autoContainerWidth: true,
                    className: clsx('ReactVirtualized__Table__Grid', gridClassName),
                    cellRenderer: this._createRow,
                    columnWidth: width,
                    columnCount: 1,
                    height: availableRowsHeight,
                    id: undefined,
                    noContentRenderer: noRowsRenderer,
                    onScroll: this._onScroll,
                    onSectionRendered: this._onSectionRendered,
                    ref: this._setRef,
                    role: "rowgroup",
                    scrollbarWidth: scrollbarWidth,
                    scrollToRow: scrollToIndex,
                    style: _objectSpread$6({}, gridStyle, {
                      overflowX: 'hidden'
                    })
                  })));
                }
              }, {
                key: "_createColumn",
                value: function _createColumn(_ref4) {
                  var column = _ref4.column,
                      columnIndex = _ref4.columnIndex,
                      isScrolling = _ref4.isScrolling,
                      parent = _ref4.parent,
                      rowData = _ref4.rowData,
                      rowIndex = _ref4.rowIndex;
                  var onColumnClick = this.props.onColumnClick;
                  var _column$props = column.props,
                      cellDataGetter = _column$props.cellDataGetter,
                      cellRenderer = _column$props.cellRenderer,
                      className = _column$props.className,
                      columnData = _column$props.columnData,
                      dataKey = _column$props.dataKey,
                      id = _column$props.id;
                  var cellData = cellDataGetter({
                    columnData: columnData,
                    dataKey: dataKey,
                    rowData: rowData
                  });
                  var renderedCell = cellRenderer({
                    cellData: cellData,
                    columnData: columnData,
                    columnIndex: columnIndex,
                    dataKey: dataKey,
                    isScrolling: isScrolling,
                    parent: parent,
                    rowData: rowData,
                    rowIndex: rowIndex
                  });

                  var onClick = function onClick(event) {
                    onColumnClick && onColumnClick({
                      columnData: columnData,
                      dataKey: dataKey,
                      event: event
                    });
                  };

                  var style = this._cachedColumnStyles[columnIndex];
                  var title = typeof renderedCell === 'string' ? renderedCell : null; // Avoid using object-spread syntax with multiple objects here,
                  // Since it results in an extra method call to 'babel-runtime/helpers/extends'
                  // See PR https://github.com/bvaughn/react-virtualized/pull/942

                  return react.createElement("div", {
                    "aria-colindex": columnIndex + 1,
                    "aria-describedby": id,
                    className: clsx('ReactVirtualized__Table__rowColumn', className),
                    key: 'Row' + rowIndex + '-' + 'Col' + columnIndex,
                    onClick: onClick,
                    role: "gridcell",
                    style: style,
                    title: title
                  }, renderedCell);
                }
              }, {
                key: "_createHeader",
                value: function _createHeader(_ref5) {
                  var column = _ref5.column,
                      index = _ref5.index;
                  var _this$props2 = this.props,
                      headerClassName = _this$props2.headerClassName,
                      headerStyle = _this$props2.headerStyle,
                      onHeaderClick = _this$props2.onHeaderClick,
                      sort = _this$props2.sort,
                      sortBy = _this$props2.sortBy,
                      sortDirection = _this$props2.sortDirection;
                  var _column$props2 = column.props,
                      columnData = _column$props2.columnData,
                      dataKey = _column$props2.dataKey,
                      defaultSortDirection = _column$props2.defaultSortDirection,
                      disableSort = _column$props2.disableSort,
                      headerRenderer = _column$props2.headerRenderer,
                      id = _column$props2.id,
                      label = _column$props2.label;
                  var sortEnabled = !disableSort && sort;
                  var classNames = clsx('ReactVirtualized__Table__headerColumn', headerClassName, column.props.headerClassName, {
                    ReactVirtualized__Table__sortableHeaderColumn: sortEnabled
                  });

                  var style = this._getFlexStyleForColumn(column, _objectSpread$6({}, headerStyle, {}, column.props.headerStyle));

                  var renderedHeader = headerRenderer({
                    columnData: columnData,
                    dataKey: dataKey,
                    disableSort: disableSort,
                    label: label,
                    sortBy: sortBy,
                    sortDirection: sortDirection
                  });
                  var headerOnClick, headerOnKeyDown, headerTabIndex, headerAriaSort, headerAriaLabel;

                  if (sortEnabled || onHeaderClick) {
                    // If this is a sortable header, clicking it should update the table data's sorting.
                    var isFirstTimeSort = sortBy !== dataKey; // If this is the firstTime sort of this column, use the column default sort order.
                    // Otherwise, invert the direction of the sort.

                    var newSortDirection = isFirstTimeSort ? defaultSortDirection : sortDirection === SortDirection.DESC ? SortDirection.ASC : SortDirection.DESC;

                    var onClick = function onClick(event) {
                      sortEnabled && sort({
                        defaultSortDirection: defaultSortDirection,
                        event: event,
                        sortBy: dataKey,
                        sortDirection: newSortDirection
                      });
                      onHeaderClick && onHeaderClick({
                        columnData: columnData,
                        dataKey: dataKey,
                        event: event
                      });
                    };

                    var onKeyDown = function onKeyDown(event) {
                      if (event.key === 'Enter' || event.key === ' ') {
                        onClick(event);
                      }
                    };

                    headerAriaLabel = column.props['aria-label'] || label || dataKey;
                    headerAriaSort = 'none';
                    headerTabIndex = 0;
                    headerOnClick = onClick;
                    headerOnKeyDown = onKeyDown;
                  }

                  if (sortBy === dataKey) {
                    headerAriaSort = sortDirection === SortDirection.ASC ? 'ascending' : 'descending';
                  } // Avoid using object-spread syntax with multiple objects here,
                  // Since it results in an extra method call to 'babel-runtime/helpers/extends'
                  // See PR https://github.com/bvaughn/react-virtualized/pull/942


                  return react.createElement("div", {
                    "aria-label": headerAriaLabel,
                    "aria-sort": headerAriaSort,
                    className: classNames,
                    id: id,
                    key: 'Header-Col' + index,
                    onClick: headerOnClick,
                    onKeyDown: headerOnKeyDown,
                    role: "columnheader",
                    style: style,
                    tabIndex: headerTabIndex
                  }, renderedHeader);
                }
              }, {
                key: "_createRow",
                value: function _createRow(_ref6) {
                  var _this3 = this;

                  var index = _ref6.rowIndex,
                      isScrolling = _ref6.isScrolling,
                      key = _ref6.key,
                      parent = _ref6.parent,
                      style = _ref6.style;
                  var _this$props3 = this.props,
                      children = _this$props3.children,
                      onRowClick = _this$props3.onRowClick,
                      onRowDoubleClick = _this$props3.onRowDoubleClick,
                      onRowRightClick = _this$props3.onRowRightClick,
                      onRowMouseOver = _this$props3.onRowMouseOver,
                      onRowMouseOut = _this$props3.onRowMouseOut,
                      rowClassName = _this$props3.rowClassName,
                      rowGetter = _this$props3.rowGetter,
                      rowRenderer = _this$props3.rowRenderer,
                      rowStyle = _this$props3.rowStyle;
                  var scrollbarWidth = this.state.scrollbarWidth;
                  var rowClass = typeof rowClassName === 'function' ? rowClassName({
                    index: index
                  }) : rowClassName;
                  var rowStyleObject = typeof rowStyle === 'function' ? rowStyle({
                    index: index
                  }) : rowStyle;
                  var rowData = rowGetter({
                    index: index
                  });
                  var columns = react.Children.toArray(children).map(function (column, columnIndex) {
                    return _this3._createColumn({
                      column: column,
                      columnIndex: columnIndex,
                      isScrolling: isScrolling,
                      parent: parent,
                      rowData: rowData,
                      rowIndex: index,
                      scrollbarWidth: scrollbarWidth
                    });
                  });
                  var className = clsx('ReactVirtualized__Table__row', rowClass);

                  var flattenedStyle = _objectSpread$6({}, style, {
                    height: this._getRowHeight(index),
                    overflow: 'hidden',
                    paddingRight: scrollbarWidth
                  }, rowStyleObject);

                  return rowRenderer({
                    className: className,
                    columns: columns,
                    index: index,
                    isScrolling: isScrolling,
                    key: key,
                    onRowClick: onRowClick,
                    onRowDoubleClick: onRowDoubleClick,
                    onRowRightClick: onRowRightClick,
                    onRowMouseOver: onRowMouseOver,
                    onRowMouseOut: onRowMouseOut,
                    rowData: rowData,
                    style: flattenedStyle
                  });
                }
                /**
                 * Determines the flex-shrink, flex-grow, and width values for a cell (header or column).
                 */

              }, {
                key: "_getFlexStyleForColumn",
                value: function _getFlexStyleForColumn(column) {
                  var customStyle = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};
                  var flexValue = "".concat(column.props.flexGrow, " ").concat(column.props.flexShrink, " ").concat(column.props.width, "px");

                  var style = _objectSpread$6({}, customStyle, {
                    flex: flexValue,
                    msFlex: flexValue,
                    WebkitFlex: flexValue
                  });

                  if (column.props.maxWidth) {
                    style.maxWidth = column.props.maxWidth;
                  }

                  if (column.props.minWidth) {
                    style.minWidth = column.props.minWidth;
                  }

                  return style;
                }
              }, {
                key: "_getHeaderColumns",
                value: function _getHeaderColumns() {
                  var _this4 = this;

                  var _this$props4 = this.props,
                      children = _this$props4.children,
                      disableHeader = _this$props4.disableHeader;
                  var items = disableHeader ? [] : react.Children.toArray(children);
                  return items.map(function (column, index) {
                    return _this4._createHeader({
                      column: column,
                      index: index
                    });
                  });
                }
              }, {
                key: "_getRowHeight",
                value: function _getRowHeight(rowIndex) {
                  var rowHeight = this.props.rowHeight;
                  return typeof rowHeight === 'function' ? rowHeight({
                    index: rowIndex
                  }) : rowHeight;
                }
              }, {
                key: "_onScroll",
                value: function _onScroll(_ref7) {
                  var clientHeight = _ref7.clientHeight,
                      scrollHeight = _ref7.scrollHeight,
                      scrollTop = _ref7.scrollTop;
                  var onScroll = this.props.onScroll;
                  onScroll({
                    clientHeight: clientHeight,
                    scrollHeight: scrollHeight,
                    scrollTop: scrollTop
                  });
                }
              }, {
                key: "_onSectionRendered",
                value: function _onSectionRendered(_ref8) {
                  var rowOverscanStartIndex = _ref8.rowOverscanStartIndex,
                      rowOverscanStopIndex = _ref8.rowOverscanStopIndex,
                      rowStartIndex = _ref8.rowStartIndex,
                      rowStopIndex = _ref8.rowStopIndex;
                  var onRowsRendered = this.props.onRowsRendered;
                  onRowsRendered({
                    overscanStartIndex: rowOverscanStartIndex,
                    overscanStopIndex: rowOverscanStopIndex,
                    startIndex: rowStartIndex,
                    stopIndex: rowStopIndex
                  });
                }
              }, {
                key: "_setRef",
                value: function _setRef(ref) {
                  this.Grid = ref;
                }
              }, {
                key: "_setScrollbarWidth",
                value: function _setScrollbarWidth() {
                  var scrollbarWidth = this.getScrollbarWidth();
                  this.setState({
                    scrollbarWidth: scrollbarWidth
                  });
                }
              }]);

              return Table;
            }(react.PureComponent);

            _defineProperty$6(Table, "defaultProps", {
              disableHeader: false,
              estimatedRowSize: 30,
              headerHeight: 0,
              headerStyle: {},
              noRowsRenderer: function noRowsRenderer() {
                return null;
              },
              onRowsRendered: function onRowsRendered() {
                return null;
              },
              onScroll: function onScroll() {
                return null;
              },
              overscanIndicesGetter: defaultOverscanIndicesGetter,
              overscanRowCount: 10,
              rowRenderer: defaultRowRenderer,
              headerRowRenderer: defaultHeaderRowRenderer,
              rowStyle: {},
              scrollToAlignment: 'auto',
              scrollToIndex: -1,
              style: {}
            });
            Table.propTypes = {
              /** This is just set on the grid top element. */
              'aria-label': propTypes.string,

              /** This is just set on the grid top element. */
              'aria-labelledby': propTypes.string,

              /**
               * Removes fixed height from the scrollingContainer so that the total height
               * of rows can stretch the window. Intended for use with WindowScroller
               */
              autoHeight: propTypes.bool,

              /** One or more Columns describing the data displayed in this row */
              children: function children(props) {
                var children = react.Children.toArray(props.children);

                for (var i = 0; i < children.length; i++) {
                  var childType = children[i].type;

                  if (childType !== Column && !(childType.prototype instanceof Column)) {
                    return new Error('Table only accepts children of type Column');
                  }
                }
              },

              /** Optional CSS class name */
              className: propTypes.string,

              /** Disable rendering the header at all */
              disableHeader: propTypes.bool,

              /**
               * Used to estimate the total height of a Table before all of its rows have actually been measured.
               * The estimated total height is adjusted as rows are rendered.
               */
              estimatedRowSize: propTypes.number.isRequired,

              /** Optional custom CSS class name to attach to inner Grid element. */
              gridClassName: propTypes.string,

              /** Optional inline style to attach to inner Grid element. */
              gridStyle: propTypes.object,

              /** Optional CSS class to apply to all column headers */
              headerClassName: propTypes.string,

              /** Fixed height of header row */
              headerHeight: propTypes.number.isRequired,

              /**
               * Responsible for rendering a table row given an array of columns:
               * Should implement the following interface: ({
               *   className: string,
               *   columns: any[],
               *   style: any
               * }): PropTypes.node
               */
              headerRowRenderer: propTypes.func,

              /** Optional custom inline style to attach to table header columns. */
              headerStyle: propTypes.object,

              /** Fixed/available height for out DOM element */
              height: propTypes.number.isRequired,

              /** Optional id */
              id: propTypes.string,

              /** Optional renderer to be used in place of table body rows when rowCount is 0 */
              noRowsRenderer: propTypes.func,

              /**
               * Optional callback when a column is clicked.
               * ({ columnData: any, dataKey: string }): void
               */
              onColumnClick: propTypes.func,

              /**
               * Optional callback when a column's header is clicked.
               * ({ columnData: any, dataKey: string }): void
               */
              onHeaderClick: propTypes.func,

              /**
               * Callback invoked when a user clicks on a table row.
               * ({ index: number }): void
               */
              onRowClick: propTypes.func,

              /**
               * Callback invoked when a user double-clicks on a table row.
               * ({ index: number }): void
               */
              onRowDoubleClick: propTypes.func,

              /**
               * Callback invoked when the mouse leaves a table row.
               * ({ index: number }): void
               */
              onRowMouseOut: propTypes.func,

              /**
               * Callback invoked when a user moves the mouse over a table row.
               * ({ index: number }): void
               */
              onRowMouseOver: propTypes.func,

              /**
               * Callback invoked when a user right-clicks on a table row.
               * ({ index: number }): void
               */
              onRowRightClick: propTypes.func,

              /**
               * Callback invoked with information about the slice of rows that were just rendered.
               * ({ startIndex, stopIndex }): void
               */
              onRowsRendered: propTypes.func,

              /**
               * Callback invoked whenever the scroll offset changes within the inner scrollable region.
               * This callback can be used to sync scrolling between lists, tables, or grids.
               * ({ clientHeight, scrollHeight, scrollTop }): void
               */
              onScroll: propTypes.func.isRequired,

              /** See Grid#overscanIndicesGetter */
              overscanIndicesGetter: propTypes.func.isRequired,

              /**
               * Number of rows to render above/below the visible bounds of the list.
               * These rows can help for smoother scrolling on touch devices.
               */
              overscanRowCount: propTypes.number.isRequired,

              /**
               * Optional CSS class to apply to all table rows (including the header row).
               * This property can be a CSS class name (string) or a function that returns a class name.
               * If a function is provided its signature should be: ({ index: number }): string
               */
              rowClassName: propTypes.oneOfType([propTypes.string, propTypes.func]),

              /**
               * Callback responsible for returning a data row given an index.
               * ({ index: number }): any
               */
              rowGetter: propTypes.func.isRequired,

              /**
               * Either a fixed row height (number) or a function that returns the height of a row given its index.
               * ({ index: number }): number
               */
              rowHeight: propTypes.oneOfType([propTypes.number, propTypes.func]).isRequired,

              /** Number of rows in table. */
              rowCount: propTypes.number.isRequired,

              /**
               * Responsible for rendering a table row given an array of columns:
               * Should implement the following interface: ({
               *   className: string,
               *   columns: Array,
               *   index: number,
               *   isScrolling: boolean,
               *   onRowClick: ?Function,
               *   onRowDoubleClick: ?Function,
               *   onRowMouseOver: ?Function,
               *   onRowMouseOut: ?Function,
               *   rowData: any,
               *   style: any
               * }): PropTypes.node
               */
              rowRenderer: propTypes.func,

              /** Optional custom inline style to attach to table rows. */
              rowStyle: propTypes.oneOfType([propTypes.object, propTypes.func]).isRequired,

              /** See Grid#scrollToAlignment */
              scrollToAlignment: propTypes.oneOf(['auto', 'end', 'start', 'center']).isRequired,

              /** Row index to ensure visible (by forcefully scrolling if necessary) */
              scrollToIndex: propTypes.number.isRequired,

              /** Vertical offset. */
              scrollTop: propTypes.number,

              /**
               * Sort function to be called if a sortable header is clicked.
               * Should implement the following interface: ({
               *   defaultSortDirection: 'ASC' | 'DESC',
               *   event: MouseEvent,
               *   sortBy: string,
               *   sortDirection: SortDirection
               * }): void
               */
              sort: propTypes.func,

              /** Table data is currently sorted by this :dataKey (if it is sorted at all) */
              sortBy: propTypes.string,

              /** Table data is currently sorted in this direction (if it is sorted at all) */
              sortDirection: propTypes.oneOf([SortDirection.ASC, SortDirection.DESC]),

              /** Optional inline style */
              style: propTypes.object,

              /** Tab index for focus */
              tabIndex: propTypes.number,

              /** Width of list */
              width: propTypes.number.isRequired
            } ;

            var mountedInstances$1 = [];
            var originalBodyPointerEvents = null;
            var disablePointerEventsTimeoutId = null;

            function enablePointerEventsIfDisabled() {
              if (disablePointerEventsTimeoutId) {
                disablePointerEventsTimeoutId = null;

                if (document.body && originalBodyPointerEvents != null) {
                  document.body.style.pointerEvents = originalBodyPointerEvents;
                }

                originalBodyPointerEvents = null;
              }
            }

            function enablePointerEventsAfterDelayCallback() {
              enablePointerEventsIfDisabled();
              mountedInstances$1.forEach(function (instance) {
                return instance.__resetIsScrolling();
              });
            }

            function enablePointerEventsAfterDelay() {
              if (disablePointerEventsTimeoutId) {
                cancelAnimationTimeout(disablePointerEventsTimeoutId);
              }

              var maximumTimeout = 0;
              mountedInstances$1.forEach(function (instance) {
                maximumTimeout = Math.max(maximumTimeout, instance.props.scrollingResetTimeInterval);
              });
              disablePointerEventsTimeoutId = requestAnimationTimeout(enablePointerEventsAfterDelayCallback, maximumTimeout);
            }

            function onScrollWindow(event) {
              if (event.currentTarget === window && originalBodyPointerEvents == null && document.body) {
                originalBodyPointerEvents = document.body.style.pointerEvents;
                document.body.style.pointerEvents = 'none';
              }

              enablePointerEventsAfterDelay();
              mountedInstances$1.forEach(function (instance) {
                if (instance.props.scrollElement === event.currentTarget) {
                  instance.__handleWindowScrollEvent();
                }
              });
            }

            function registerScrollListener(component, element) {
              if (!mountedInstances$1.some(function (instance) {
                return instance.props.scrollElement === element;
              })) {
                element.addEventListener('scroll', onScrollWindow);
              }

              mountedInstances$1.push(component);
            }
            function unregisterScrollListener(component, element) {
              mountedInstances$1 = mountedInstances$1.filter(function (instance) {
                return instance !== component;
              });

              if (!mountedInstances$1.length) {
                element.removeEventListener('scroll', onScrollWindow);

                if (disablePointerEventsTimeoutId) {
                  cancelAnimationTimeout(disablePointerEventsTimeoutId);
                  enablePointerEventsIfDisabled();
                }
              }
            }

            /**
             * Gets the dimensions of the element, accounting for API differences between
             * `window` and other DOM elements.
             */
            // TODO Move this into WindowScroller and import from there
            var isWindow = function isWindow(element) {
              return element === window;
            };

            var getBoundingBox = function getBoundingBox(element) {
              return element.getBoundingClientRect();
            };

            function getDimensions(scrollElement, props) {
              if (!scrollElement) {
                return {
                  height: props.serverHeight,
                  width: props.serverWidth
                };
              } else if (isWindow(scrollElement)) {
                var _window = window,
                    innerHeight = _window.innerHeight,
                    innerWidth = _window.innerWidth;
                return {
                  height: typeof innerHeight === 'number' ? innerHeight : 0,
                  width: typeof innerWidth === 'number' ? innerWidth : 0
                };
              } else {
                return getBoundingBox(scrollElement);
              }
            }
            /**
             * Gets the vertical and horizontal position of an element within its scroll container.
             * Elements that have been “scrolled past” return negative values.
             * Handles edge-case where a user is navigating back (history) from an already-scrolled page.
             * In this case the body’s top or left position will be a negative number and this element’s top or left will be increased (by that amount).
             */

            function getPositionOffset(element, container) {
              if (isWindow(container) && document.documentElement) {
                var containerElement = document.documentElement;
                var elementRect = getBoundingBox(element);
                var containerRect = getBoundingBox(containerElement);
                return {
                  top: elementRect.top - containerRect.top,
                  left: elementRect.left - containerRect.left
                };
              } else {
                var scrollOffset = getScrollOffset(container);

                var _elementRect = getBoundingBox(element);

                var _containerRect = getBoundingBox(container);

                return {
                  top: _elementRect.top + scrollOffset.top - _containerRect.top,
                  left: _elementRect.left + scrollOffset.left - _containerRect.left
                };
              }
            }
            /**
             * Gets the vertical and horizontal scroll amount of the element, accounting for IE compatibility
             * and API differences between `window` and other DOM elements.
             */

            function getScrollOffset(element) {
              if (isWindow(element) && document.documentElement) {
                return {
                  top: 'scrollY' in window ? window.scrollY : document.documentElement.scrollTop,
                  left: 'scrollX' in window ? window.scrollX : document.documentElement.scrollLeft
                };
              } else {
                return {
                  top: element.scrollTop,
                  left: element.scrollLeft
                };
              }
            }

            var _class, _temp;

            function ownKeys$5(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }

            function _objectSpread$5(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys$5(source, true).forEach(function (key) { _defineProperty$6(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys$5(source).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }

            /**
             * Specifies the number of miliseconds during which to disable pointer events while a scroll is in progress.
             * This improves performance and makes scrolling smoother.
             */
            var IS_SCROLLING_TIMEOUT = 150;

            var getWindow$1 = function getWindow() {
              return typeof window !== 'undefined' ? window : undefined;
            };

            var WindowScroller = (_temp = _class =
            /*#__PURE__*/
            function (_React$PureComponent) {
              _inherits(WindowScroller, _React$PureComponent);

              function WindowScroller() {
                var _getPrototypeOf2;

                var _this;

                _classCallCheck$8(this, WindowScroller);

                for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
                  args[_key] = arguments[_key];
                }

                _this = _possibleConstructorReturn(this, (_getPrototypeOf2 = _getPrototypeOf(WindowScroller)).call.apply(_getPrototypeOf2, [this].concat(args)));

                _defineProperty$6(_assertThisInitialized(_this), "_window", getWindow$1());

                _defineProperty$6(_assertThisInitialized(_this), "_isMounted", false);

                _defineProperty$6(_assertThisInitialized(_this), "_positionFromTop", 0);

                _defineProperty$6(_assertThisInitialized(_this), "_positionFromLeft", 0);

                _defineProperty$6(_assertThisInitialized(_this), "_detectElementResize", void 0);

                _defineProperty$6(_assertThisInitialized(_this), "_child", void 0);

                _defineProperty$6(_assertThisInitialized(_this), "state", _objectSpread$5({}, getDimensions(_this.props.scrollElement, _this.props), {
                  isScrolling: false,
                  scrollLeft: 0,
                  scrollTop: 0
                }));

                _defineProperty$6(_assertThisInitialized(_this), "_registerChild", function (element) {
                  if (element && !(element instanceof Element)) {
                    console.warn('WindowScroller registerChild expects to be passed Element or null');
                  }

                  _this._child = element;

                  _this.updatePosition();
                });

                _defineProperty$6(_assertThisInitialized(_this), "_onChildScroll", function (_ref) {
                  var scrollTop = _ref.scrollTop;

                  if (_this.state.scrollTop === scrollTop) {
                    return;
                  }

                  var scrollElement = _this.props.scrollElement;

                  if (scrollElement) {
                    if (typeof scrollElement.scrollTo === 'function') {
                      scrollElement.scrollTo(0, scrollTop + _this._positionFromTop);
                    } else {
                      scrollElement.scrollTop = scrollTop + _this._positionFromTop;
                    }
                  }
                });

                _defineProperty$6(_assertThisInitialized(_this), "_registerResizeListener", function (element) {
                  if (element === window) {
                    window.addEventListener('resize', _this._onResize, false);
                  } else {
                    _this._detectElementResize.addResizeListener(element, _this._onResize);
                  }
                });

                _defineProperty$6(_assertThisInitialized(_this), "_unregisterResizeListener", function (element) {
                  if (element === window) {
                    window.removeEventListener('resize', _this._onResize, false);
                  } else if (element) {
                    _this._detectElementResize.removeResizeListener(element, _this._onResize);
                  }
                });

                _defineProperty$6(_assertThisInitialized(_this), "_onResize", function () {
                  _this.updatePosition();
                });

                _defineProperty$6(_assertThisInitialized(_this), "__handleWindowScrollEvent", function () {
                  if (!_this._isMounted) {
                    return;
                  }

                  var onScroll = _this.props.onScroll;
                  var scrollElement = _this.props.scrollElement;

                  if (scrollElement) {
                    var scrollOffset = getScrollOffset(scrollElement);
                    var scrollLeft = Math.max(0, scrollOffset.left - _this._positionFromLeft);
                    var scrollTop = Math.max(0, scrollOffset.top - _this._positionFromTop);

                    _this.setState({
                      isScrolling: true,
                      scrollLeft: scrollLeft,
                      scrollTop: scrollTop
                    });

                    onScroll({
                      scrollLeft: scrollLeft,
                      scrollTop: scrollTop
                    });
                  }
                });

                _defineProperty$6(_assertThisInitialized(_this), "__resetIsScrolling", function () {
                  _this.setState({
                    isScrolling: false
                  });
                });

                return _this;
              }

              _createClass$8(WindowScroller, [{
                key: "updatePosition",
                value: function updatePosition() {
                  var scrollElement = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : this.props.scrollElement;
                  var onResize = this.props.onResize;
                  var _this$state = this.state,
                      height = _this$state.height,
                      width = _this$state.width;
                  var thisNode = this._child || reactDom.findDOMNode(this);

                  if (thisNode instanceof Element && scrollElement) {
                    var offset = getPositionOffset(thisNode, scrollElement);
                    this._positionFromTop = offset.top;
                    this._positionFromLeft = offset.left;
                  }

                  var dimensions = getDimensions(scrollElement, this.props);

                  if (height !== dimensions.height || width !== dimensions.width) {
                    this.setState({
                      height: dimensions.height,
                      width: dimensions.width
                    });
                    onResize({
                      height: dimensions.height,
                      width: dimensions.width
                    });
                  }
                }
              }, {
                key: "componentDidMount",
                value: function componentDidMount() {
                  var scrollElement = this.props.scrollElement;
                  this._detectElementResize = createDetectElementResize();
                  this.updatePosition(scrollElement);

                  if (scrollElement) {
                    registerScrollListener(this, scrollElement);

                    this._registerResizeListener(scrollElement);
                  }

                  this._isMounted = true;
                }
              }, {
                key: "componentDidUpdate",
                value: function componentDidUpdate(prevProps, prevState) {
                  var scrollElement = this.props.scrollElement;
                  var prevScrollElement = prevProps.scrollElement;

                  if (prevScrollElement !== scrollElement && prevScrollElement != null && scrollElement != null) {
                    this.updatePosition(scrollElement);
                    unregisterScrollListener(this, prevScrollElement);
                    registerScrollListener(this, scrollElement);

                    this._unregisterResizeListener(prevScrollElement);

                    this._registerResizeListener(scrollElement);
                  }
                }
              }, {
                key: "componentWillUnmount",
                value: function componentWillUnmount() {
                  var scrollElement = this.props.scrollElement;

                  if (scrollElement) {
                    unregisterScrollListener(this, scrollElement);

                    this._unregisterResizeListener(scrollElement);
                  }

                  this._isMounted = false;
                }
              }, {
                key: "render",
                value: function render() {
                  var children = this.props.children;
                  var _this$state2 = this.state,
                      isScrolling = _this$state2.isScrolling,
                      scrollTop = _this$state2.scrollTop,
                      scrollLeft = _this$state2.scrollLeft,
                      height = _this$state2.height,
                      width = _this$state2.width;
                  return children({
                    onChildScroll: this._onChildScroll,
                    registerChild: this._registerChild,
                    height: height,
                    isScrolling: isScrolling,
                    scrollLeft: scrollLeft,
                    scrollTop: scrollTop,
                    width: width
                  });
                }
              }]);

              return WindowScroller;
            }(react.PureComponent), _defineProperty$6(_class, "propTypes", {
              /**
               * Function responsible for rendering children.
               * This function should implement the following signature:
               * ({ height, isScrolling, scrollLeft, scrollTop, width }) => PropTypes.element
               */
              "children": propTypes.func.isRequired,

              /** Callback to be invoked on-resize: ({ height, width }) */
              "onResize": propTypes.func.isRequired,

              /** Callback to be invoked on-scroll: ({ scrollLeft, scrollTop }) */
              "onScroll": propTypes.func.isRequired,

              /** Element to attach scroll event listeners. Defaults to window. */
              "scrollElement": propTypes.oneOfType([propTypes.any, function () {
                return (typeof Element === "function" ? propTypes.instanceOf(Element) : propTypes.any).apply(this, arguments);
              }]),

              /**
               * Wait this amount of time after the last scroll event before resetting child `pointer-events`.
               */
              "scrollingResetTimeInterval": propTypes.number.isRequired,

              /** Height used for server-side rendering */
              "serverHeight": propTypes.number.isRequired,

              /** Width used for server-side rendering */
              "serverWidth": propTypes.number.isRequired
            }), _temp);

            _defineProperty$6(WindowScroller, "defaultProps", {
              onResize: function onResize() {},
              onScroll: function onScroll() {},
              scrollingResetTimeInterval: IS_SCROLLING_TIMEOUT,
              scrollElement: getWindow$1(),
              serverHeight: 0,
              serverWidth: 0
            });

            const LoadingMessage = qe.div `
  margin-left: 0.3rem;
`;
            const Title$3 = qe.div `
  font-size: ${({ theme }) => theme.sizes.md.fontSize};
  padding: ${({ theme }) => theme.sizes.lg.padding};
  background-color: ${({ theme }) => theme.colors.secondary.background};
  color: ${({ theme }) => theme.colors.secondary.foreground};
  border-top-left-radius: ${({ theme }) => theme.sizes.lg.borderRadius};
  border-top-right-radius: ${({ theme }) => theme.sizes.lg.borderRadius};
`;
            const RepoListContainer = qe.div `
  flex: 1;
  margin: 10px;
  border-radius: ${({ theme }) => theme.sizes.lg.borderRadius};
  background: ${({ theme }) => theme.colors.primary.background};;
  border: 1px solid #898C9F;
`;
            const Repos = qe.div `
  padding: ${({ theme }) => theme.sizes.xl.padding};
`;
            qe.input `
  visibility: hidden;
`;
            qe.label `
  &::before {
    border-radius: 2px;
    border: 2px solid #3C3F52;
    content: "${(props) => props.isSelected ? '\u2713' : ''}";
    display: inline-block;
    font: 8px / 1em sans-serif;
    height: 12px;
    margin: 0 .3rem 0 -0.5rem;
    padding: 0;
    vertical-align: text-bottom;
    width: 12px;
    background-color: #8E909C;
  }
`;
            qe.div `
  white-space: nowrap;
  text-overflow: ellipsis;
  overflow: hidden;
  min-width: 0px;
  &:hover {
    cursor: pointer;
  }
`;
            const RepoContainer = qe.div `
  display: flex;

  &:hover {
    cursor: pointer;
  }
`;

            const availableDots = [
                '.',
                '..',
                '...',
            ];
            const getDots = (count) => {
                const index = count % availableDots.length;
                return availableDots[index];
            };
            const Loading$1 = (props) => {
                const { message } = props;
                const [count, setCount] = react.useState(0);
                useInterval(() => {
                    setCount(count + 1);
                }, 300);
                const dots = getDots(count);
                return (react.createElement(LoadingMessage, null,
                    message,
                    dots));
            };

            var top = 'top';
            var bottom = 'bottom';
            var right = 'right';
            var left = 'left';
            var auto = 'auto';
            var basePlacements = [top, bottom, right, left];
            var start = 'start';
            var end = 'end';
            var clippingParents = 'clippingParents';
            var viewport = 'viewport';
            var popper = 'popper';
            var reference = 'reference';
            var variationPlacements = /*#__PURE__*/basePlacements.reduce(function (acc, placement) {
              return acc.concat([placement + "-" + start, placement + "-" + end]);
            }, []);
            var placements = /*#__PURE__*/[].concat(basePlacements, [auto]).reduce(function (acc, placement) {
              return acc.concat([placement, placement + "-" + start, placement + "-" + end]);
            }, []); // modifiers that need to read the DOM

            var beforeRead = 'beforeRead';
            var read = 'read';
            var afterRead = 'afterRead'; // pure-logic modifiers

            var beforeMain = 'beforeMain';
            var main = 'main';
            var afterMain = 'afterMain'; // modifier with the purpose to write to the DOM (or write into a framework state)

            var beforeWrite = 'beforeWrite';
            var write = 'write';
            var afterWrite = 'afterWrite';
            var modifierPhases = [beforeRead, read, afterRead, beforeMain, main, afterMain, beforeWrite, write, afterWrite];

            function getNodeName(element) {
              return element ? (element.nodeName || '').toLowerCase() : null;
            }

            function getWindow(node) {
              if (node == null) {
                return window;
              }

              if (node.toString() !== '[object Window]') {
                var ownerDocument = node.ownerDocument;
                return ownerDocument ? ownerDocument.defaultView || window : window;
              }

              return node;
            }

            function isElement$1(node) {
              var OwnElement = getWindow(node).Element;
              return node instanceof OwnElement || node instanceof Element;
            }

            function isHTMLElement(node) {
              var OwnElement = getWindow(node).HTMLElement;
              return node instanceof OwnElement || node instanceof HTMLElement;
            }

            function isShadowRoot(node) {
              // IE 11 has no ShadowRoot
              if (typeof ShadowRoot === 'undefined') {
                return false;
              }

              var OwnElement = getWindow(node).ShadowRoot;
              return node instanceof OwnElement || node instanceof ShadowRoot;
            }

            // and applies them to the HTMLElements such as popper and arrow

            function applyStyles(_ref) {
              var state = _ref.state;
              Object.keys(state.elements).forEach(function (name) {
                var style = state.styles[name] || {};
                var attributes = state.attributes[name] || {};
                var element = state.elements[name]; // arrow is optional + virtual elements

                if (!isHTMLElement(element) || !getNodeName(element)) {
                  return;
                } // Flow doesn't support to extend this property, but it's the most
                // effective way to apply styles to an HTMLElement
                // $FlowFixMe[cannot-write]


                Object.assign(element.style, style);
                Object.keys(attributes).forEach(function (name) {
                  var value = attributes[name];

                  if (value === false) {
                    element.removeAttribute(name);
                  } else {
                    element.setAttribute(name, value === true ? '' : value);
                  }
                });
              });
            }

            function effect$2(_ref2) {
              var state = _ref2.state;
              var initialStyles = {
                popper: {
                  position: state.options.strategy,
                  left: '0',
                  top: '0',
                  margin: '0'
                },
                arrow: {
                  position: 'absolute'
                },
                reference: {}
              };
              Object.assign(state.elements.popper.style, initialStyles.popper);
              state.styles = initialStyles;

              if (state.elements.arrow) {
                Object.assign(state.elements.arrow.style, initialStyles.arrow);
              }

              return function () {
                Object.keys(state.elements).forEach(function (name) {
                  var element = state.elements[name];
                  var attributes = state.attributes[name] || {};
                  var styleProperties = Object.keys(state.styles.hasOwnProperty(name) ? state.styles[name] : initialStyles[name]); // Set all values to an empty string to unset them

                  var style = styleProperties.reduce(function (style, property) {
                    style[property] = '';
                    return style;
                  }, {}); // arrow is optional + virtual elements

                  if (!isHTMLElement(element) || !getNodeName(element)) {
                    return;
                  }

                  Object.assign(element.style, style);
                  Object.keys(attributes).forEach(function (attribute) {
                    element.removeAttribute(attribute);
                  });
                });
              };
            } // eslint-disable-next-line import/no-unused-modules


            var applyStyles$1 = {
              name: 'applyStyles',
              enabled: true,
              phase: 'write',
              fn: applyStyles,
              effect: effect$2,
              requires: ['computeStyles']
            };

            function getBasePlacement$1(placement) {
              return placement.split('-')[0];
            }

            function getBoundingClientRect(element) {
              var rect = element.getBoundingClientRect();
              return {
                width: rect.width,
                height: rect.height,
                top: rect.top,
                right: rect.right,
                bottom: rect.bottom,
                left: rect.left,
                x: rect.left,
                y: rect.top
              };
            }

            // means it doesn't take into account transforms.

            function getLayoutRect(element) {
              var clientRect = getBoundingClientRect(element); // Use the clientRect sizes if it's not been transformed.
              // Fixes https://github.com/popperjs/popper-core/issues/1223

              var width = element.offsetWidth;
              var height = element.offsetHeight;

              if (Math.abs(clientRect.width - width) <= 1) {
                width = clientRect.width;
              }

              if (Math.abs(clientRect.height - height) <= 1) {
                height = clientRect.height;
              }

              return {
                x: element.offsetLeft,
                y: element.offsetTop,
                width: width,
                height: height
              };
            }

            function contains(parent, child) {
              var rootNode = child.getRootNode && child.getRootNode(); // First, attempt with faster native method

              if (parent.contains(child)) {
                return true;
              } // then fallback to custom implementation with Shadow DOM support
              else if (rootNode && isShadowRoot(rootNode)) {
                  var next = child;

                  do {
                    if (next && parent.isSameNode(next)) {
                      return true;
                    } // $FlowFixMe[prop-missing]: need a better way to handle this...


                    next = next.parentNode || next.host;
                  } while (next);
                } // Give up, the result is false


              return false;
            }

            function getComputedStyle(element) {
              return getWindow(element).getComputedStyle(element);
            }

            function isTableElement(element) {
              return ['table', 'td', 'th'].indexOf(getNodeName(element)) >= 0;
            }

            function getDocumentElement(element) {
              // $FlowFixMe[incompatible-return]: assume body is always available
              return ((isElement$1(element) ? element.ownerDocument : // $FlowFixMe[prop-missing]
              element.document) || window.document).documentElement;
            }

            function getParentNode(element) {
              if (getNodeName(element) === 'html') {
                return element;
              }

              return (// this is a quicker (but less type safe) way to save quite some bytes from the bundle
                // $FlowFixMe[incompatible-return]
                // $FlowFixMe[prop-missing]
                element.assignedSlot || // step into the shadow DOM of the parent of a slotted node
                element.parentNode || ( // DOM Element detected
                isShadowRoot(element) ? element.host : null) || // ShadowRoot detected
                // $FlowFixMe[incompatible-call]: HTMLElement is a Node
                getDocumentElement(element) // fallback

              );
            }

            function getTrueOffsetParent(element) {
              if (!isHTMLElement(element) || // https://github.com/popperjs/popper-core/issues/837
              getComputedStyle(element).position === 'fixed') {
                return null;
              }

              return element.offsetParent;
            } // `.offsetParent` reports `null` for fixed elements, while absolute elements
            // return the containing block


            function getContainingBlock(element) {
              var isFirefox = navigator.userAgent.toLowerCase().indexOf('firefox') !== -1;
              var isIE = navigator.userAgent.indexOf('Trident') !== -1;

              if (isIE && isHTMLElement(element)) {
                // In IE 9, 10 and 11 fixed elements containing block is always established by the viewport
                var elementCss = getComputedStyle(element);

                if (elementCss.position === 'fixed') {
                  return null;
                }
              }

              var currentNode = getParentNode(element);

              while (isHTMLElement(currentNode) && ['html', 'body'].indexOf(getNodeName(currentNode)) < 0) {
                var css = getComputedStyle(currentNode); // This is non-exhaustive but covers the most common CSS properties that
                // create a containing block.
                // https://developer.mozilla.org/en-US/docs/Web/CSS/Containing_block#identifying_the_containing_block

                if (css.transform !== 'none' || css.perspective !== 'none' || css.contain === 'paint' || ['transform', 'perspective'].indexOf(css.willChange) !== -1 || isFirefox && css.willChange === 'filter' || isFirefox && css.filter && css.filter !== 'none') {
                  return currentNode;
                } else {
                  currentNode = currentNode.parentNode;
                }
              }

              return null;
            } // Gets the closest ancestor positioned element. Handles some edge cases,
            // such as table ancestors and cross browser bugs.


            function getOffsetParent(element) {
              var window = getWindow(element);
              var offsetParent = getTrueOffsetParent(element);

              while (offsetParent && isTableElement(offsetParent) && getComputedStyle(offsetParent).position === 'static') {
                offsetParent = getTrueOffsetParent(offsetParent);
              }

              if (offsetParent && (getNodeName(offsetParent) === 'html' || getNodeName(offsetParent) === 'body' && getComputedStyle(offsetParent).position === 'static')) {
                return window;
              }

              return offsetParent || getContainingBlock(element) || window;
            }

            function getMainAxisFromPlacement(placement) {
              return ['top', 'bottom'].indexOf(placement) >= 0 ? 'x' : 'y';
            }

            var max = Math.max;
            var min = Math.min;
            var round = Math.round;

            function within(min$1, value, max$1) {
              return max(min$1, min(value, max$1));
            }

            function getFreshSideObject() {
              return {
                top: 0,
                right: 0,
                bottom: 0,
                left: 0
              };
            }

            function mergePaddingObject(paddingObject) {
              return Object.assign({}, getFreshSideObject(), paddingObject);
            }

            function expandToHashMap(value, keys) {
              return keys.reduce(function (hashMap, key) {
                hashMap[key] = value;
                return hashMap;
              }, {});
            }

            var toPaddingObject = function toPaddingObject(padding, state) {
              padding = typeof padding === 'function' ? padding(Object.assign({}, state.rects, {
                placement: state.placement
              })) : padding;
              return mergePaddingObject(typeof padding !== 'number' ? padding : expandToHashMap(padding, basePlacements));
            };

            function arrow(_ref) {
              var _state$modifiersData$;

              var state = _ref.state,
                  name = _ref.name,
                  options = _ref.options;
              var arrowElement = state.elements.arrow;
              var popperOffsets = state.modifiersData.popperOffsets;
              var basePlacement = getBasePlacement$1(state.placement);
              var axis = getMainAxisFromPlacement(basePlacement);
              var isVertical = [left, right].indexOf(basePlacement) >= 0;
              var len = isVertical ? 'height' : 'width';

              if (!arrowElement || !popperOffsets) {
                return;
              }

              var paddingObject = toPaddingObject(options.padding, state);
              var arrowRect = getLayoutRect(arrowElement);
              var minProp = axis === 'y' ? top : left;
              var maxProp = axis === 'y' ? bottom : right;
              var endDiff = state.rects.reference[len] + state.rects.reference[axis] - popperOffsets[axis] - state.rects.popper[len];
              var startDiff = popperOffsets[axis] - state.rects.reference[axis];
              var arrowOffsetParent = getOffsetParent(arrowElement);
              var clientSize = arrowOffsetParent ? axis === 'y' ? arrowOffsetParent.clientHeight || 0 : arrowOffsetParent.clientWidth || 0 : 0;
              var centerToReference = endDiff / 2 - startDiff / 2; // Make sure the arrow doesn't overflow the popper if the center point is
              // outside of the popper bounds

              var min = paddingObject[minProp];
              var max = clientSize - arrowRect[len] - paddingObject[maxProp];
              var center = clientSize / 2 - arrowRect[len] / 2 + centerToReference;
              var offset = within(min, center, max); // Prevents breaking syntax highlighting...

              var axisProp = axis;
              state.modifiersData[name] = (_state$modifiersData$ = {}, _state$modifiersData$[axisProp] = offset, _state$modifiersData$.centerOffset = offset - center, _state$modifiersData$);
            }

            function effect$1(_ref2) {
              var state = _ref2.state,
                  options = _ref2.options;
              var _options$element = options.element,
                  arrowElement = _options$element === void 0 ? '[data-popper-arrow]' : _options$element;

              if (arrowElement == null) {
                return;
              } // CSS selector


              if (typeof arrowElement === 'string') {
                arrowElement = state.elements.popper.querySelector(arrowElement);

                if (!arrowElement) {
                  return;
                }
              }

              {
                if (!isHTMLElement(arrowElement)) {
                  console.error(['Popper: "arrow" element must be an HTMLElement (not an SVGElement).', 'To use an SVG arrow, wrap it in an HTMLElement that will be used as', 'the arrow.'].join(' '));
                }
              }

              if (!contains(state.elements.popper, arrowElement)) {
                {
                  console.error(['Popper: "arrow" modifier\'s `element` must be a child of the popper', 'element.'].join(' '));
                }

                return;
              }

              state.elements.arrow = arrowElement;
            } // eslint-disable-next-line import/no-unused-modules


            var arrow$1 = {
              name: 'arrow',
              enabled: true,
              phase: 'main',
              fn: arrow,
              effect: effect$1,
              requires: ['popperOffsets'],
              requiresIfExists: ['preventOverflow']
            };

            var unsetSides = {
              top: 'auto',
              right: 'auto',
              bottom: 'auto',
              left: 'auto'
            }; // Round the offsets to the nearest suitable subpixel based on the DPR.
            // Zooming can change the DPR, but it seems to report a value that will
            // cleanly divide the values into the appropriate subpixels.

            function roundOffsetsByDPR(_ref) {
              var x = _ref.x,
                  y = _ref.y;
              var win = window;
              var dpr = win.devicePixelRatio || 1;
              return {
                x: round(round(x * dpr) / dpr) || 0,
                y: round(round(y * dpr) / dpr) || 0
              };
            }

            function mapToStyles(_ref2) {
              var _Object$assign2;

              var popper = _ref2.popper,
                  popperRect = _ref2.popperRect,
                  placement = _ref2.placement,
                  offsets = _ref2.offsets,
                  position = _ref2.position,
                  gpuAcceleration = _ref2.gpuAcceleration,
                  adaptive = _ref2.adaptive,
                  roundOffsets = _ref2.roundOffsets;

              var _ref3 = roundOffsets === true ? roundOffsetsByDPR(offsets) : typeof roundOffsets === 'function' ? roundOffsets(offsets) : offsets,
                  _ref3$x = _ref3.x,
                  x = _ref3$x === void 0 ? 0 : _ref3$x,
                  _ref3$y = _ref3.y,
                  y = _ref3$y === void 0 ? 0 : _ref3$y;

              var hasX = offsets.hasOwnProperty('x');
              var hasY = offsets.hasOwnProperty('y');
              var sideX = left;
              var sideY = top;
              var win = window;

              if (adaptive) {
                var offsetParent = getOffsetParent(popper);
                var heightProp = 'clientHeight';
                var widthProp = 'clientWidth';

                if (offsetParent === getWindow(popper)) {
                  offsetParent = getDocumentElement(popper);

                  if (getComputedStyle(offsetParent).position !== 'static') {
                    heightProp = 'scrollHeight';
                    widthProp = 'scrollWidth';
                  }
                } // $FlowFixMe[incompatible-cast]: force type refinement, we compare offsetParent with window above, but Flow doesn't detect it


                offsetParent = offsetParent;

                if (placement === top) {
                  sideY = bottom; // $FlowFixMe[prop-missing]

                  y -= offsetParent[heightProp] - popperRect.height;
                  y *= gpuAcceleration ? 1 : -1;
                }

                if (placement === left) {
                  sideX = right; // $FlowFixMe[prop-missing]

                  x -= offsetParent[widthProp] - popperRect.width;
                  x *= gpuAcceleration ? 1 : -1;
                }
              }

              var commonStyles = Object.assign({
                position: position
              }, adaptive && unsetSides);

              if (gpuAcceleration) {
                var _Object$assign;

                return Object.assign({}, commonStyles, (_Object$assign = {}, _Object$assign[sideY] = hasY ? '0' : '', _Object$assign[sideX] = hasX ? '0' : '', _Object$assign.transform = (win.devicePixelRatio || 1) < 2 ? "translate(" + x + "px, " + y + "px)" : "translate3d(" + x + "px, " + y + "px, 0)", _Object$assign));
              }

              return Object.assign({}, commonStyles, (_Object$assign2 = {}, _Object$assign2[sideY] = hasY ? y + "px" : '', _Object$assign2[sideX] = hasX ? x + "px" : '', _Object$assign2.transform = '', _Object$assign2));
            }

            function computeStyles(_ref4) {
              var state = _ref4.state,
                  options = _ref4.options;
              var _options$gpuAccelerat = options.gpuAcceleration,
                  gpuAcceleration = _options$gpuAccelerat === void 0 ? true : _options$gpuAccelerat,
                  _options$adaptive = options.adaptive,
                  adaptive = _options$adaptive === void 0 ? true : _options$adaptive,
                  _options$roundOffsets = options.roundOffsets,
                  roundOffsets = _options$roundOffsets === void 0 ? true : _options$roundOffsets;

              {
                var transitionProperty = getComputedStyle(state.elements.popper).transitionProperty || '';

                if (adaptive && ['transform', 'top', 'right', 'bottom', 'left'].some(function (property) {
                  return transitionProperty.indexOf(property) >= 0;
                })) {
                  console.warn(['Popper: Detected CSS transitions on at least one of the following', 'CSS properties: "transform", "top", "right", "bottom", "left".', '\n\n', 'Disable the "computeStyles" modifier\'s `adaptive` option to allow', 'for smooth transitions, or remove these properties from the CSS', 'transition declaration on the popper element if only transitioning', 'opacity or background-color for example.', '\n\n', 'We recommend using the popper element as a wrapper around an inner', 'element that can have any CSS property transitioned for animations.'].join(' '));
                }
              }

              var commonStyles = {
                placement: getBasePlacement$1(state.placement),
                popper: state.elements.popper,
                popperRect: state.rects.popper,
                gpuAcceleration: gpuAcceleration
              };

              if (state.modifiersData.popperOffsets != null) {
                state.styles.popper = Object.assign({}, state.styles.popper, mapToStyles(Object.assign({}, commonStyles, {
                  offsets: state.modifiersData.popperOffsets,
                  position: state.options.strategy,
                  adaptive: adaptive,
                  roundOffsets: roundOffsets
                })));
              }

              if (state.modifiersData.arrow != null) {
                state.styles.arrow = Object.assign({}, state.styles.arrow, mapToStyles(Object.assign({}, commonStyles, {
                  offsets: state.modifiersData.arrow,
                  position: 'absolute',
                  adaptive: false,
                  roundOffsets: roundOffsets
                })));
              }

              state.attributes.popper = Object.assign({}, state.attributes.popper, {
                'data-popper-placement': state.placement
              });
            } // eslint-disable-next-line import/no-unused-modules


            var computeStyles$1 = {
              name: 'computeStyles',
              enabled: true,
              phase: 'beforeWrite',
              fn: computeStyles,
              data: {}
            };

            var passive = {
              passive: true
            };

            function effect(_ref) {
              var state = _ref.state,
                  instance = _ref.instance,
                  options = _ref.options;
              var _options$scroll = options.scroll,
                  scroll = _options$scroll === void 0 ? true : _options$scroll,
                  _options$resize = options.resize,
                  resize = _options$resize === void 0 ? true : _options$resize;
              var window = getWindow(state.elements.popper);
              var scrollParents = [].concat(state.scrollParents.reference, state.scrollParents.popper);

              if (scroll) {
                scrollParents.forEach(function (scrollParent) {
                  scrollParent.addEventListener('scroll', instance.update, passive);
                });
              }

              if (resize) {
                window.addEventListener('resize', instance.update, passive);
              }

              return function () {
                if (scroll) {
                  scrollParents.forEach(function (scrollParent) {
                    scrollParent.removeEventListener('scroll', instance.update, passive);
                  });
                }

                if (resize) {
                  window.removeEventListener('resize', instance.update, passive);
                }
              };
            } // eslint-disable-next-line import/no-unused-modules


            var eventListeners = {
              name: 'eventListeners',
              enabled: true,
              phase: 'write',
              fn: function fn() {},
              effect: effect,
              data: {}
            };

            var hash$1 = {
              left: 'right',
              right: 'left',
              bottom: 'top',
              top: 'bottom'
            };
            function getOppositePlacement(placement) {
              return placement.replace(/left|right|bottom|top/g, function (matched) {
                return hash$1[matched];
              });
            }

            var hash = {
              start: 'end',
              end: 'start'
            };
            function getOppositeVariationPlacement(placement) {
              return placement.replace(/start|end/g, function (matched) {
                return hash[matched];
              });
            }

            function getWindowScroll(node) {
              var win = getWindow(node);
              var scrollLeft = win.pageXOffset;
              var scrollTop = win.pageYOffset;
              return {
                scrollLeft: scrollLeft,
                scrollTop: scrollTop
              };
            }

            function getWindowScrollBarX(element) {
              // If <html> has a CSS width greater than the viewport, then this will be
              // incorrect for RTL.
              // Popper 1 is broken in this case and never had a bug report so let's assume
              // it's not an issue. I don't think anyone ever specifies width on <html>
              // anyway.
              // Browsers where the left scrollbar doesn't cause an issue report `0` for
              // this (e.g. Edge 2019, IE11, Safari)
              return getBoundingClientRect(getDocumentElement(element)).left + getWindowScroll(element).scrollLeft;
            }

            function getViewportRect(element) {
              var win = getWindow(element);
              var html = getDocumentElement(element);
              var visualViewport = win.visualViewport;
              var width = html.clientWidth;
              var height = html.clientHeight;
              var x = 0;
              var y = 0; // NB: This isn't supported on iOS <= 12. If the keyboard is open, the popper
              // can be obscured underneath it.
              // Also, `html.clientHeight` adds the bottom bar height in Safari iOS, even
              // if it isn't open, so if this isn't available, the popper will be detected
              // to overflow the bottom of the screen too early.

              if (visualViewport) {
                width = visualViewport.width;
                height = visualViewport.height; // Uses Layout Viewport (like Chrome; Safari does not currently)
                // In Chrome, it returns a value very close to 0 (+/-) but contains rounding
                // errors due to floating point numbers, so we need to check precision.
                // Safari returns a number <= 0, usually < -1 when pinch-zoomed
                // Feature detection fails in mobile emulation mode in Chrome.
                // Math.abs(win.innerWidth / visualViewport.scale - visualViewport.width) <
                // 0.001
                // Fallback here: "Not Safari" userAgent

                if (!/^((?!chrome|android).)*safari/i.test(navigator.userAgent)) {
                  x = visualViewport.offsetLeft;
                  y = visualViewport.offsetTop;
                }
              }

              return {
                width: width,
                height: height,
                x: x + getWindowScrollBarX(element),
                y: y
              };
            }

            // of the `<html>` and `<body>` rect bounds if horizontally scrollable

            function getDocumentRect(element) {
              var _element$ownerDocumen;

              var html = getDocumentElement(element);
              var winScroll = getWindowScroll(element);
              var body = (_element$ownerDocumen = element.ownerDocument) == null ? void 0 : _element$ownerDocumen.body;
              var width = max(html.scrollWidth, html.clientWidth, body ? body.scrollWidth : 0, body ? body.clientWidth : 0);
              var height = max(html.scrollHeight, html.clientHeight, body ? body.scrollHeight : 0, body ? body.clientHeight : 0);
              var x = -winScroll.scrollLeft + getWindowScrollBarX(element);
              var y = -winScroll.scrollTop;

              if (getComputedStyle(body || html).direction === 'rtl') {
                x += max(html.clientWidth, body ? body.clientWidth : 0) - width;
              }

              return {
                width: width,
                height: height,
                x: x,
                y: y
              };
            }

            function isScrollParent(element) {
              // Firefox wants us to check `-x` and `-y` variations as well
              var _getComputedStyle = getComputedStyle(element),
                  overflow = _getComputedStyle.overflow,
                  overflowX = _getComputedStyle.overflowX,
                  overflowY = _getComputedStyle.overflowY;

              return /auto|scroll|overlay|hidden/.test(overflow + overflowY + overflowX);
            }

            function getScrollParent(node) {
              if (['html', 'body', '#document'].indexOf(getNodeName(node)) >= 0) {
                // $FlowFixMe[incompatible-return]: assume body is always available
                return node.ownerDocument.body;
              }

              if (isHTMLElement(node) && isScrollParent(node)) {
                return node;
              }

              return getScrollParent(getParentNode(node));
            }

            /*
            given a DOM element, return the list of all scroll parents, up the list of ancesors
            until we get to the top window object. This list is what we attach scroll listeners
            to, because if any of these parent elements scroll, we'll need to re-calculate the
            reference element's position.
            */

            function listScrollParents(element, list) {
              var _element$ownerDocumen;

              if (list === void 0) {
                list = [];
              }

              var scrollParent = getScrollParent(element);
              var isBody = scrollParent === ((_element$ownerDocumen = element.ownerDocument) == null ? void 0 : _element$ownerDocumen.body);
              var win = getWindow(scrollParent);
              var target = isBody ? [win].concat(win.visualViewport || [], isScrollParent(scrollParent) ? scrollParent : []) : scrollParent;
              var updatedList = list.concat(target);
              return isBody ? updatedList : // $FlowFixMe[incompatible-call]: isBody tells us target will be an HTMLElement here
              updatedList.concat(listScrollParents(getParentNode(target)));
            }

            function rectToClientRect(rect) {
              return Object.assign({}, rect, {
                left: rect.x,
                top: rect.y,
                right: rect.x + rect.width,
                bottom: rect.y + rect.height
              });
            }

            function getInnerBoundingClientRect(element) {
              var rect = getBoundingClientRect(element);
              rect.top = rect.top + element.clientTop;
              rect.left = rect.left + element.clientLeft;
              rect.bottom = rect.top + element.clientHeight;
              rect.right = rect.left + element.clientWidth;
              rect.width = element.clientWidth;
              rect.height = element.clientHeight;
              rect.x = rect.left;
              rect.y = rect.top;
              return rect;
            }

            function getClientRectFromMixedType(element, clippingParent) {
              return clippingParent === viewport ? rectToClientRect(getViewportRect(element)) : isHTMLElement(clippingParent) ? getInnerBoundingClientRect(clippingParent) : rectToClientRect(getDocumentRect(getDocumentElement(element)));
            } // A "clipping parent" is an overflowable container with the characteristic of
            // clipping (or hiding) overflowing elements with a position different from
            // `initial`


            function getClippingParents(element) {
              var clippingParents = listScrollParents(getParentNode(element));
              var canEscapeClipping = ['absolute', 'fixed'].indexOf(getComputedStyle(element).position) >= 0;
              var clipperElement = canEscapeClipping && isHTMLElement(element) ? getOffsetParent(element) : element;

              if (!isElement$1(clipperElement)) {
                return [];
              } // $FlowFixMe[incompatible-return]: https://github.com/facebook/flow/issues/1414


              return clippingParents.filter(function (clippingParent) {
                return isElement$1(clippingParent) && contains(clippingParent, clipperElement) && getNodeName(clippingParent) !== 'body';
              });
            } // Gets the maximum area that the element is visible in due to any number of
            // clipping parents


            function getClippingRect(element, boundary, rootBoundary) {
              var mainClippingParents = boundary === 'clippingParents' ? getClippingParents(element) : [].concat(boundary);
              var clippingParents = [].concat(mainClippingParents, [rootBoundary]);
              var firstClippingParent = clippingParents[0];
              var clippingRect = clippingParents.reduce(function (accRect, clippingParent) {
                var rect = getClientRectFromMixedType(element, clippingParent);
                accRect.top = max(rect.top, accRect.top);
                accRect.right = min(rect.right, accRect.right);
                accRect.bottom = min(rect.bottom, accRect.bottom);
                accRect.left = max(rect.left, accRect.left);
                return accRect;
              }, getClientRectFromMixedType(element, firstClippingParent));
              clippingRect.width = clippingRect.right - clippingRect.left;
              clippingRect.height = clippingRect.bottom - clippingRect.top;
              clippingRect.x = clippingRect.left;
              clippingRect.y = clippingRect.top;
              return clippingRect;
            }

            function getVariation(placement) {
              return placement.split('-')[1];
            }

            function computeOffsets(_ref) {
              var reference = _ref.reference,
                  element = _ref.element,
                  placement = _ref.placement;
              var basePlacement = placement ? getBasePlacement$1(placement) : null;
              var variation = placement ? getVariation(placement) : null;
              var commonX = reference.x + reference.width / 2 - element.width / 2;
              var commonY = reference.y + reference.height / 2 - element.height / 2;
              var offsets;

              switch (basePlacement) {
                case top:
                  offsets = {
                    x: commonX,
                    y: reference.y - element.height
                  };
                  break;

                case bottom:
                  offsets = {
                    x: commonX,
                    y: reference.y + reference.height
                  };
                  break;

                case right:
                  offsets = {
                    x: reference.x + reference.width,
                    y: commonY
                  };
                  break;

                case left:
                  offsets = {
                    x: reference.x - element.width,
                    y: commonY
                  };
                  break;

                default:
                  offsets = {
                    x: reference.x,
                    y: reference.y
                  };
              }

              var mainAxis = basePlacement ? getMainAxisFromPlacement(basePlacement) : null;

              if (mainAxis != null) {
                var len = mainAxis === 'y' ? 'height' : 'width';

                switch (variation) {
                  case start:
                    offsets[mainAxis] = offsets[mainAxis] - (reference[len] / 2 - element[len] / 2);
                    break;

                  case end:
                    offsets[mainAxis] = offsets[mainAxis] + (reference[len] / 2 - element[len] / 2);
                    break;
                }
              }

              return offsets;
            }

            function detectOverflow(state, options) {
              if (options === void 0) {
                options = {};
              }

              var _options = options,
                  _options$placement = _options.placement,
                  placement = _options$placement === void 0 ? state.placement : _options$placement,
                  _options$boundary = _options.boundary,
                  boundary = _options$boundary === void 0 ? clippingParents : _options$boundary,
                  _options$rootBoundary = _options.rootBoundary,
                  rootBoundary = _options$rootBoundary === void 0 ? viewport : _options$rootBoundary,
                  _options$elementConte = _options.elementContext,
                  elementContext = _options$elementConte === void 0 ? popper : _options$elementConte,
                  _options$altBoundary = _options.altBoundary,
                  altBoundary = _options$altBoundary === void 0 ? false : _options$altBoundary,
                  _options$padding = _options.padding,
                  padding = _options$padding === void 0 ? 0 : _options$padding;
              var paddingObject = mergePaddingObject(typeof padding !== 'number' ? padding : expandToHashMap(padding, basePlacements));
              var altContext = elementContext === popper ? reference : popper;
              var referenceElement = state.elements.reference;
              var popperRect = state.rects.popper;
              var element = state.elements[altBoundary ? altContext : elementContext];
              var clippingClientRect = getClippingRect(isElement$1(element) ? element : element.contextElement || getDocumentElement(state.elements.popper), boundary, rootBoundary);
              var referenceClientRect = getBoundingClientRect(referenceElement);
              var popperOffsets = computeOffsets({
                reference: referenceClientRect,
                element: popperRect,
                strategy: 'absolute',
                placement: placement
              });
              var popperClientRect = rectToClientRect(Object.assign({}, popperRect, popperOffsets));
              var elementClientRect = elementContext === popper ? popperClientRect : referenceClientRect; // positive = overflowing the clipping rect
              // 0 or negative = within the clipping rect

              var overflowOffsets = {
                top: clippingClientRect.top - elementClientRect.top + paddingObject.top,
                bottom: elementClientRect.bottom - clippingClientRect.bottom + paddingObject.bottom,
                left: clippingClientRect.left - elementClientRect.left + paddingObject.left,
                right: elementClientRect.right - clippingClientRect.right + paddingObject.right
              };
              var offsetData = state.modifiersData.offset; // Offsets can be applied only to the popper element

              if (elementContext === popper && offsetData) {
                var offset = offsetData[placement];
                Object.keys(overflowOffsets).forEach(function (key) {
                  var multiply = [right, bottom].indexOf(key) >= 0 ? 1 : -1;
                  var axis = [top, bottom].indexOf(key) >= 0 ? 'y' : 'x';
                  overflowOffsets[key] += offset[axis] * multiply;
                });
              }

              return overflowOffsets;
            }

            function computeAutoPlacement(state, options) {
              if (options === void 0) {
                options = {};
              }

              var _options = options,
                  placement = _options.placement,
                  boundary = _options.boundary,
                  rootBoundary = _options.rootBoundary,
                  padding = _options.padding,
                  flipVariations = _options.flipVariations,
                  _options$allowedAutoP = _options.allowedAutoPlacements,
                  allowedAutoPlacements = _options$allowedAutoP === void 0 ? placements : _options$allowedAutoP;
              var variation = getVariation(placement);
              var placements$1 = variation ? flipVariations ? variationPlacements : variationPlacements.filter(function (placement) {
                return getVariation(placement) === variation;
              }) : basePlacements;
              var allowedPlacements = placements$1.filter(function (placement) {
                return allowedAutoPlacements.indexOf(placement) >= 0;
              });

              if (allowedPlacements.length === 0) {
                allowedPlacements = placements$1;

                {
                  console.error(['Popper: The `allowedAutoPlacements` option did not allow any', 'placements. Ensure the `placement` option matches the variation', 'of the allowed placements.', 'For example, "auto" cannot be used to allow "bottom-start".', 'Use "auto-start" instead.'].join(' '));
                }
              } // $FlowFixMe[incompatible-type]: Flow seems to have problems with two array unions...


              var overflows = allowedPlacements.reduce(function (acc, placement) {
                acc[placement] = detectOverflow(state, {
                  placement: placement,
                  boundary: boundary,
                  rootBoundary: rootBoundary,
                  padding: padding
                })[getBasePlacement$1(placement)];
                return acc;
              }, {});
              return Object.keys(overflows).sort(function (a, b) {
                return overflows[a] - overflows[b];
              });
            }

            function getExpandedFallbackPlacements(placement) {
              if (getBasePlacement$1(placement) === auto) {
                return [];
              }

              var oppositePlacement = getOppositePlacement(placement);
              return [getOppositeVariationPlacement(placement), oppositePlacement, getOppositeVariationPlacement(oppositePlacement)];
            }

            function flip(_ref) {
              var state = _ref.state,
                  options = _ref.options,
                  name = _ref.name;

              if (state.modifiersData[name]._skip) {
                return;
              }

              var _options$mainAxis = options.mainAxis,
                  checkMainAxis = _options$mainAxis === void 0 ? true : _options$mainAxis,
                  _options$altAxis = options.altAxis,
                  checkAltAxis = _options$altAxis === void 0 ? true : _options$altAxis,
                  specifiedFallbackPlacements = options.fallbackPlacements,
                  padding = options.padding,
                  boundary = options.boundary,
                  rootBoundary = options.rootBoundary,
                  altBoundary = options.altBoundary,
                  _options$flipVariatio = options.flipVariations,
                  flipVariations = _options$flipVariatio === void 0 ? true : _options$flipVariatio,
                  allowedAutoPlacements = options.allowedAutoPlacements;
              var preferredPlacement = state.options.placement;
              var basePlacement = getBasePlacement$1(preferredPlacement);
              var isBasePlacement = basePlacement === preferredPlacement;
              var fallbackPlacements = specifiedFallbackPlacements || (isBasePlacement || !flipVariations ? [getOppositePlacement(preferredPlacement)] : getExpandedFallbackPlacements(preferredPlacement));
              var placements = [preferredPlacement].concat(fallbackPlacements).reduce(function (acc, placement) {
                return acc.concat(getBasePlacement$1(placement) === auto ? computeAutoPlacement(state, {
                  placement: placement,
                  boundary: boundary,
                  rootBoundary: rootBoundary,
                  padding: padding,
                  flipVariations: flipVariations,
                  allowedAutoPlacements: allowedAutoPlacements
                }) : placement);
              }, []);
              var referenceRect = state.rects.reference;
              var popperRect = state.rects.popper;
              var checksMap = new Map();
              var makeFallbackChecks = true;
              var firstFittingPlacement = placements[0];

              for (var i = 0; i < placements.length; i++) {
                var placement = placements[i];

                var _basePlacement = getBasePlacement$1(placement);

                var isStartVariation = getVariation(placement) === start;
                var isVertical = [top, bottom].indexOf(_basePlacement) >= 0;
                var len = isVertical ? 'width' : 'height';
                var overflow = detectOverflow(state, {
                  placement: placement,
                  boundary: boundary,
                  rootBoundary: rootBoundary,
                  altBoundary: altBoundary,
                  padding: padding
                });
                var mainVariationSide = isVertical ? isStartVariation ? right : left : isStartVariation ? bottom : top;

                if (referenceRect[len] > popperRect[len]) {
                  mainVariationSide = getOppositePlacement(mainVariationSide);
                }

                var altVariationSide = getOppositePlacement(mainVariationSide);
                var checks = [];

                if (checkMainAxis) {
                  checks.push(overflow[_basePlacement] <= 0);
                }

                if (checkAltAxis) {
                  checks.push(overflow[mainVariationSide] <= 0, overflow[altVariationSide] <= 0);
                }

                if (checks.every(function (check) {
                  return check;
                })) {
                  firstFittingPlacement = placement;
                  makeFallbackChecks = false;
                  break;
                }

                checksMap.set(placement, checks);
              }

              if (makeFallbackChecks) {
                // `2` may be desired in some cases – research later
                var numberOfChecks = flipVariations ? 3 : 1;

                var _loop = function _loop(_i) {
                  var fittingPlacement = placements.find(function (placement) {
                    var checks = checksMap.get(placement);

                    if (checks) {
                      return checks.slice(0, _i).every(function (check) {
                        return check;
                      });
                    }
                  });

                  if (fittingPlacement) {
                    firstFittingPlacement = fittingPlacement;
                    return "break";
                  }
                };

                for (var _i = numberOfChecks; _i > 0; _i--) {
                  var _ret = _loop(_i);

                  if (_ret === "break") break;
                }
              }

              if (state.placement !== firstFittingPlacement) {
                state.modifiersData[name]._skip = true;
                state.placement = firstFittingPlacement;
                state.reset = true;
              }
            } // eslint-disable-next-line import/no-unused-modules


            var flip$1 = {
              name: 'flip',
              enabled: true,
              phase: 'main',
              fn: flip,
              requiresIfExists: ['offset'],
              data: {
                _skip: false
              }
            };

            function getSideOffsets(overflow, rect, preventedOffsets) {
              if (preventedOffsets === void 0) {
                preventedOffsets = {
                  x: 0,
                  y: 0
                };
              }

              return {
                top: overflow.top - rect.height - preventedOffsets.y,
                right: overflow.right - rect.width + preventedOffsets.x,
                bottom: overflow.bottom - rect.height + preventedOffsets.y,
                left: overflow.left - rect.width - preventedOffsets.x
              };
            }

            function isAnySideFullyClipped(overflow) {
              return [top, right, bottom, left].some(function (side) {
                return overflow[side] >= 0;
              });
            }

            function hide(_ref) {
              var state = _ref.state,
                  name = _ref.name;
              var referenceRect = state.rects.reference;
              var popperRect = state.rects.popper;
              var preventedOffsets = state.modifiersData.preventOverflow;
              var referenceOverflow = detectOverflow(state, {
                elementContext: 'reference'
              });
              var popperAltOverflow = detectOverflow(state, {
                altBoundary: true
              });
              var referenceClippingOffsets = getSideOffsets(referenceOverflow, referenceRect);
              var popperEscapeOffsets = getSideOffsets(popperAltOverflow, popperRect, preventedOffsets);
              var isReferenceHidden = isAnySideFullyClipped(referenceClippingOffsets);
              var hasPopperEscaped = isAnySideFullyClipped(popperEscapeOffsets);
              state.modifiersData[name] = {
                referenceClippingOffsets: referenceClippingOffsets,
                popperEscapeOffsets: popperEscapeOffsets,
                isReferenceHidden: isReferenceHidden,
                hasPopperEscaped: hasPopperEscaped
              };
              state.attributes.popper = Object.assign({}, state.attributes.popper, {
                'data-popper-reference-hidden': isReferenceHidden,
                'data-popper-escaped': hasPopperEscaped
              });
            } // eslint-disable-next-line import/no-unused-modules


            var hide$1 = {
              name: 'hide',
              enabled: true,
              phase: 'main',
              requiresIfExists: ['preventOverflow'],
              fn: hide
            };

            function distanceAndSkiddingToXY(placement, rects, offset) {
              var basePlacement = getBasePlacement$1(placement);
              var invertDistance = [left, top].indexOf(basePlacement) >= 0 ? -1 : 1;

              var _ref = typeof offset === 'function' ? offset(Object.assign({}, rects, {
                placement: placement
              })) : offset,
                  skidding = _ref[0],
                  distance = _ref[1];

              skidding = skidding || 0;
              distance = (distance || 0) * invertDistance;
              return [left, right].indexOf(basePlacement) >= 0 ? {
                x: distance,
                y: skidding
              } : {
                x: skidding,
                y: distance
              };
            }

            function offset(_ref2) {
              var state = _ref2.state,
                  options = _ref2.options,
                  name = _ref2.name;
              var _options$offset = options.offset,
                  offset = _options$offset === void 0 ? [0, 0] : _options$offset;
              var data = placements.reduce(function (acc, placement) {
                acc[placement] = distanceAndSkiddingToXY(placement, state.rects, offset);
                return acc;
              }, {});
              var _data$state$placement = data[state.placement],
                  x = _data$state$placement.x,
                  y = _data$state$placement.y;

              if (state.modifiersData.popperOffsets != null) {
                state.modifiersData.popperOffsets.x += x;
                state.modifiersData.popperOffsets.y += y;
              }

              state.modifiersData[name] = data;
            } // eslint-disable-next-line import/no-unused-modules


            var offset$1 = {
              name: 'offset',
              enabled: true,
              phase: 'main',
              requires: ['popperOffsets'],
              fn: offset
            };

            function popperOffsets(_ref) {
              var state = _ref.state,
                  name = _ref.name;
              // Offsets are the actual position the popper needs to have to be
              // properly positioned near its reference element
              // This is the most basic placement, and will be adjusted by
              // the modifiers in the next step
              state.modifiersData[name] = computeOffsets({
                reference: state.rects.reference,
                element: state.rects.popper,
                strategy: 'absolute',
                placement: state.placement
              });
            } // eslint-disable-next-line import/no-unused-modules


            var popperOffsets$1 = {
              name: 'popperOffsets',
              enabled: true,
              phase: 'read',
              fn: popperOffsets,
              data: {}
            };

            function getAltAxis(axis) {
              return axis === 'x' ? 'y' : 'x';
            }

            function preventOverflow(_ref) {
              var state = _ref.state,
                  options = _ref.options,
                  name = _ref.name;
              var _options$mainAxis = options.mainAxis,
                  checkMainAxis = _options$mainAxis === void 0 ? true : _options$mainAxis,
                  _options$altAxis = options.altAxis,
                  checkAltAxis = _options$altAxis === void 0 ? false : _options$altAxis,
                  boundary = options.boundary,
                  rootBoundary = options.rootBoundary,
                  altBoundary = options.altBoundary,
                  padding = options.padding,
                  _options$tether = options.tether,
                  tether = _options$tether === void 0 ? true : _options$tether,
                  _options$tetherOffset = options.tetherOffset,
                  tetherOffset = _options$tetherOffset === void 0 ? 0 : _options$tetherOffset;
              var overflow = detectOverflow(state, {
                boundary: boundary,
                rootBoundary: rootBoundary,
                padding: padding,
                altBoundary: altBoundary
              });
              var basePlacement = getBasePlacement$1(state.placement);
              var variation = getVariation(state.placement);
              var isBasePlacement = !variation;
              var mainAxis = getMainAxisFromPlacement(basePlacement);
              var altAxis = getAltAxis(mainAxis);
              var popperOffsets = state.modifiersData.popperOffsets;
              var referenceRect = state.rects.reference;
              var popperRect = state.rects.popper;
              var tetherOffsetValue = typeof tetherOffset === 'function' ? tetherOffset(Object.assign({}, state.rects, {
                placement: state.placement
              })) : tetherOffset;
              var data = {
                x: 0,
                y: 0
              };

              if (!popperOffsets) {
                return;
              }

              if (checkMainAxis || checkAltAxis) {
                var mainSide = mainAxis === 'y' ? top : left;
                var altSide = mainAxis === 'y' ? bottom : right;
                var len = mainAxis === 'y' ? 'height' : 'width';
                var offset = popperOffsets[mainAxis];
                var min$1 = popperOffsets[mainAxis] + overflow[mainSide];
                var max$1 = popperOffsets[mainAxis] - overflow[altSide];
                var additive = tether ? -popperRect[len] / 2 : 0;
                var minLen = variation === start ? referenceRect[len] : popperRect[len];
                var maxLen = variation === start ? -popperRect[len] : -referenceRect[len]; // We need to include the arrow in the calculation so the arrow doesn't go
                // outside the reference bounds

                var arrowElement = state.elements.arrow;
                var arrowRect = tether && arrowElement ? getLayoutRect(arrowElement) : {
                  width: 0,
                  height: 0
                };
                var arrowPaddingObject = state.modifiersData['arrow#persistent'] ? state.modifiersData['arrow#persistent'].padding : getFreshSideObject();
                var arrowPaddingMin = arrowPaddingObject[mainSide];
                var arrowPaddingMax = arrowPaddingObject[altSide]; // If the reference length is smaller than the arrow length, we don't want
                // to include its full size in the calculation. If the reference is small
                // and near the edge of a boundary, the popper can overflow even if the
                // reference is not overflowing as well (e.g. virtual elements with no
                // width or height)

                var arrowLen = within(0, referenceRect[len], arrowRect[len]);
                var minOffset = isBasePlacement ? referenceRect[len] / 2 - additive - arrowLen - arrowPaddingMin - tetherOffsetValue : minLen - arrowLen - arrowPaddingMin - tetherOffsetValue;
                var maxOffset = isBasePlacement ? -referenceRect[len] / 2 + additive + arrowLen + arrowPaddingMax + tetherOffsetValue : maxLen + arrowLen + arrowPaddingMax + tetherOffsetValue;
                var arrowOffsetParent = state.elements.arrow && getOffsetParent(state.elements.arrow);
                var clientOffset = arrowOffsetParent ? mainAxis === 'y' ? arrowOffsetParent.clientTop || 0 : arrowOffsetParent.clientLeft || 0 : 0;
                var offsetModifierValue = state.modifiersData.offset ? state.modifiersData.offset[state.placement][mainAxis] : 0;
                var tetherMin = popperOffsets[mainAxis] + minOffset - offsetModifierValue - clientOffset;
                var tetherMax = popperOffsets[mainAxis] + maxOffset - offsetModifierValue;

                if (checkMainAxis) {
                  var preventedOffset = within(tether ? min(min$1, tetherMin) : min$1, offset, tether ? max(max$1, tetherMax) : max$1);
                  popperOffsets[mainAxis] = preventedOffset;
                  data[mainAxis] = preventedOffset - offset;
                }

                if (checkAltAxis) {
                  var _mainSide = mainAxis === 'x' ? top : left;

                  var _altSide = mainAxis === 'x' ? bottom : right;

                  var _offset = popperOffsets[altAxis];

                  var _min = _offset + overflow[_mainSide];

                  var _max = _offset - overflow[_altSide];

                  var _preventedOffset = within(tether ? min(_min, tetherMin) : _min, _offset, tether ? max(_max, tetherMax) : _max);

                  popperOffsets[altAxis] = _preventedOffset;
                  data[altAxis] = _preventedOffset - _offset;
                }
              }

              state.modifiersData[name] = data;
            } // eslint-disable-next-line import/no-unused-modules


            var preventOverflow$1 = {
              name: 'preventOverflow',
              enabled: true,
              phase: 'main',
              fn: preventOverflow,
              requiresIfExists: ['offset']
            };

            function getHTMLElementScroll(element) {
              return {
                scrollLeft: element.scrollLeft,
                scrollTop: element.scrollTop
              };
            }

            function getNodeScroll(node) {
              if (node === getWindow(node) || !isHTMLElement(node)) {
                return getWindowScroll(node);
              } else {
                return getHTMLElementScroll(node);
              }
            }

            // Composite means it takes into account transforms as well as layout.

            function getCompositeRect(elementOrVirtualElement, offsetParent, isFixed) {
              if (isFixed === void 0) {
                isFixed = false;
              }

              var documentElement = getDocumentElement(offsetParent);
              var rect = getBoundingClientRect(elementOrVirtualElement);
              var isOffsetParentAnElement = isHTMLElement(offsetParent);
              var scroll = {
                scrollLeft: 0,
                scrollTop: 0
              };
              var offsets = {
                x: 0,
                y: 0
              };

              if (isOffsetParentAnElement || !isOffsetParentAnElement && !isFixed) {
                if (getNodeName(offsetParent) !== 'body' || // https://github.com/popperjs/popper-core/issues/1078
                isScrollParent(documentElement)) {
                  scroll = getNodeScroll(offsetParent);
                }

                if (isHTMLElement(offsetParent)) {
                  offsets = getBoundingClientRect(offsetParent);
                  offsets.x += offsetParent.clientLeft;
                  offsets.y += offsetParent.clientTop;
                } else if (documentElement) {
                  offsets.x = getWindowScrollBarX(documentElement);
                }
              }

              return {
                x: rect.left + scroll.scrollLeft - offsets.x,
                y: rect.top + scroll.scrollTop - offsets.y,
                width: rect.width,
                height: rect.height
              };
            }

            function order(modifiers) {
              var map = new Map();
              var visited = new Set();
              var result = [];
              modifiers.forEach(function (modifier) {
                map.set(modifier.name, modifier);
              }); // On visiting object, check for its dependencies and visit them recursively

              function sort(modifier) {
                visited.add(modifier.name);
                var requires = [].concat(modifier.requires || [], modifier.requiresIfExists || []);
                requires.forEach(function (dep) {
                  if (!visited.has(dep)) {
                    var depModifier = map.get(dep);

                    if (depModifier) {
                      sort(depModifier);
                    }
                  }
                });
                result.push(modifier);
              }

              modifiers.forEach(function (modifier) {
                if (!visited.has(modifier.name)) {
                  // check for visited object
                  sort(modifier);
                }
              });
              return result;
            }

            function orderModifiers(modifiers) {
              // order based on dependencies
              var orderedModifiers = order(modifiers); // order based on phase

              return modifierPhases.reduce(function (acc, phase) {
                return acc.concat(orderedModifiers.filter(function (modifier) {
                  return modifier.phase === phase;
                }));
              }, []);
            }

            function debounce$1(fn) {
              var pending;
              return function () {
                if (!pending) {
                  pending = new Promise(function (resolve) {
                    Promise.resolve().then(function () {
                      pending = undefined;
                      resolve(fn());
                    });
                  });
                }

                return pending;
              };
            }

            function format(str) {
              for (var _len = arguments.length, args = new Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++) {
                args[_key - 1] = arguments[_key];
              }

              return [].concat(args).reduce(function (p, c) {
                return p.replace(/%s/, c);
              }, str);
            }

            var INVALID_MODIFIER_ERROR = 'Popper: modifier "%s" provided an invalid %s property, expected %s but got %s';
            var MISSING_DEPENDENCY_ERROR = 'Popper: modifier "%s" requires "%s", but "%s" modifier is not available';
            var VALID_PROPERTIES = ['name', 'enabled', 'phase', 'fn', 'effect', 'requires', 'options'];
            function validateModifiers(modifiers) {
              modifiers.forEach(function (modifier) {
                Object.keys(modifier).forEach(function (key) {
                  switch (key) {
                    case 'name':
                      if (typeof modifier.name !== 'string') {
                        console.error(format(INVALID_MODIFIER_ERROR, String(modifier.name), '"name"', '"string"', "\"" + String(modifier.name) + "\""));
                      }

                      break;

                    case 'enabled':
                      if (typeof modifier.enabled !== 'boolean') {
                        console.error(format(INVALID_MODIFIER_ERROR, modifier.name, '"enabled"', '"boolean"', "\"" + String(modifier.enabled) + "\""));
                      }

                    case 'phase':
                      if (modifierPhases.indexOf(modifier.phase) < 0) {
                        console.error(format(INVALID_MODIFIER_ERROR, modifier.name, '"phase"', "either " + modifierPhases.join(', '), "\"" + String(modifier.phase) + "\""));
                      }

                      break;

                    case 'fn':
                      if (typeof modifier.fn !== 'function') {
                        console.error(format(INVALID_MODIFIER_ERROR, modifier.name, '"fn"', '"function"', "\"" + String(modifier.fn) + "\""));
                      }

                      break;

                    case 'effect':
                      if (typeof modifier.effect !== 'function') {
                        console.error(format(INVALID_MODIFIER_ERROR, modifier.name, '"effect"', '"function"', "\"" + String(modifier.fn) + "\""));
                      }

                      break;

                    case 'requires':
                      if (!Array.isArray(modifier.requires)) {
                        console.error(format(INVALID_MODIFIER_ERROR, modifier.name, '"requires"', '"array"', "\"" + String(modifier.requires) + "\""));
                      }

                      break;

                    case 'requiresIfExists':
                      if (!Array.isArray(modifier.requiresIfExists)) {
                        console.error(format(INVALID_MODIFIER_ERROR, modifier.name, '"requiresIfExists"', '"array"', "\"" + String(modifier.requiresIfExists) + "\""));
                      }

                      break;

                    case 'options':
                    case 'data':
                      break;

                    default:
                      console.error("PopperJS: an invalid property has been provided to the \"" + modifier.name + "\" modifier, valid properties are " + VALID_PROPERTIES.map(function (s) {
                        return "\"" + s + "\"";
                      }).join(', ') + "; but \"" + key + "\" was provided.");
                  }

                  modifier.requires && modifier.requires.forEach(function (requirement) {
                    if (modifiers.find(function (mod) {
                      return mod.name === requirement;
                    }) == null) {
                      console.error(format(MISSING_DEPENDENCY_ERROR, String(modifier.name), requirement, requirement));
                    }
                  });
                });
              });
            }

            function uniqueBy(arr, fn) {
              var identifiers = new Set();
              return arr.filter(function (item) {
                var identifier = fn(item);

                if (!identifiers.has(identifier)) {
                  identifiers.add(identifier);
                  return true;
                }
              });
            }

            function mergeByName(modifiers) {
              var merged = modifiers.reduce(function (merged, current) {
                var existing = merged[current.name];
                merged[current.name] = existing ? Object.assign({}, existing, current, {
                  options: Object.assign({}, existing.options, current.options),
                  data: Object.assign({}, existing.data, current.data)
                }) : current;
                return merged;
              }, {}); // IE11 does not support Object.values

              return Object.keys(merged).map(function (key) {
                return merged[key];
              });
            }

            var INVALID_ELEMENT_ERROR = 'Popper: Invalid reference or popper argument provided. They must be either a DOM element or virtual element.';
            var INFINITE_LOOP_ERROR = 'Popper: An infinite loop in the modifiers cycle has been detected! The cycle has been interrupted to prevent a browser crash.';
            var DEFAULT_OPTIONS = {
              placement: 'bottom',
              modifiers: [],
              strategy: 'absolute'
            };

            function areValidElements() {
              for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
                args[_key] = arguments[_key];
              }

              return !args.some(function (element) {
                return !(element && typeof element.getBoundingClientRect === 'function');
              });
            }

            function popperGenerator(generatorOptions) {
              if (generatorOptions === void 0) {
                generatorOptions = {};
              }

              var _generatorOptions = generatorOptions,
                  _generatorOptions$def = _generatorOptions.defaultModifiers,
                  defaultModifiers = _generatorOptions$def === void 0 ? [] : _generatorOptions$def,
                  _generatorOptions$def2 = _generatorOptions.defaultOptions,
                  defaultOptions = _generatorOptions$def2 === void 0 ? DEFAULT_OPTIONS : _generatorOptions$def2;
              return function createPopper(reference, popper, options) {
                if (options === void 0) {
                  options = defaultOptions;
                }

                var state = {
                  placement: 'bottom',
                  orderedModifiers: [],
                  options: Object.assign({}, DEFAULT_OPTIONS, defaultOptions),
                  modifiersData: {},
                  elements: {
                    reference: reference,
                    popper: popper
                  },
                  attributes: {},
                  styles: {}
                };
                var effectCleanupFns = [];
                var isDestroyed = false;
                var instance = {
                  state: state,
                  setOptions: function setOptions(options) {
                    cleanupModifierEffects();
                    state.options = Object.assign({}, defaultOptions, state.options, options);
                    state.scrollParents = {
                      reference: isElement$1(reference) ? listScrollParents(reference) : reference.contextElement ? listScrollParents(reference.contextElement) : [],
                      popper: listScrollParents(popper)
                    }; // Orders the modifiers based on their dependencies and `phase`
                    // properties

                    var orderedModifiers = orderModifiers(mergeByName([].concat(defaultModifiers, state.options.modifiers))); // Strip out disabled modifiers

                    state.orderedModifiers = orderedModifiers.filter(function (m) {
                      return m.enabled;
                    }); // Validate the provided modifiers so that the consumer will get warned
                    // if one of the modifiers is invalid for any reason

                    {
                      var modifiers = uniqueBy([].concat(orderedModifiers, state.options.modifiers), function (_ref) {
                        var name = _ref.name;
                        return name;
                      });
                      validateModifiers(modifiers);

                      if (getBasePlacement$1(state.options.placement) === auto) {
                        var flipModifier = state.orderedModifiers.find(function (_ref2) {
                          var name = _ref2.name;
                          return name === 'flip';
                        });

                        if (!flipModifier) {
                          console.error(['Popper: "auto" placements require the "flip" modifier be', 'present and enabled to work.'].join(' '));
                        }
                      }

                      var _getComputedStyle = getComputedStyle(popper),
                          marginTop = _getComputedStyle.marginTop,
                          marginRight = _getComputedStyle.marginRight,
                          marginBottom = _getComputedStyle.marginBottom,
                          marginLeft = _getComputedStyle.marginLeft; // We no longer take into account `margins` on the popper, and it can
                      // cause bugs with positioning, so we'll warn the consumer


                      if ([marginTop, marginRight, marginBottom, marginLeft].some(function (margin) {
                        return parseFloat(margin);
                      })) {
                        console.warn(['Popper: CSS "margin" styles cannot be used to apply padding', 'between the popper and its reference element or boundary.', 'To replicate margin, use the `offset` modifier, as well as', 'the `padding` option in the `preventOverflow` and `flip`', 'modifiers.'].join(' '));
                      }
                    }

                    runModifierEffects();
                    return instance.update();
                  },
                  // Sync update – it will always be executed, even if not necessary. This
                  // is useful for low frequency updates where sync behavior simplifies the
                  // logic.
                  // For high frequency updates (e.g. `resize` and `scroll` events), always
                  // prefer the async Popper#update method
                  forceUpdate: function forceUpdate() {
                    if (isDestroyed) {
                      return;
                    }

                    var _state$elements = state.elements,
                        reference = _state$elements.reference,
                        popper = _state$elements.popper; // Don't proceed if `reference` or `popper` are not valid elements
                    // anymore

                    if (!areValidElements(reference, popper)) {
                      {
                        console.error(INVALID_ELEMENT_ERROR);
                      }

                      return;
                    } // Store the reference and popper rects to be read by modifiers


                    state.rects = {
                      reference: getCompositeRect(reference, getOffsetParent(popper), state.options.strategy === 'fixed'),
                      popper: getLayoutRect(popper)
                    }; // Modifiers have the ability to reset the current update cycle. The
                    // most common use case for this is the `flip` modifier changing the
                    // placement, which then needs to re-run all the modifiers, because the
                    // logic was previously ran for the previous placement and is therefore
                    // stale/incorrect

                    state.reset = false;
                    state.placement = state.options.placement; // On each update cycle, the `modifiersData` property for each modifier
                    // is filled with the initial data specified by the modifier. This means
                    // it doesn't persist and is fresh on each update.
                    // To ensure persistent data, use `${name}#persistent`

                    state.orderedModifiers.forEach(function (modifier) {
                      return state.modifiersData[modifier.name] = Object.assign({}, modifier.data);
                    });
                    var __debug_loops__ = 0;

                    for (var index = 0; index < state.orderedModifiers.length; index++) {
                      {
                        __debug_loops__ += 1;

                        if (__debug_loops__ > 100) {
                          console.error(INFINITE_LOOP_ERROR);
                          break;
                        }
                      }

                      if (state.reset === true) {
                        state.reset = false;
                        index = -1;
                        continue;
                      }

                      var _state$orderedModifie = state.orderedModifiers[index],
                          fn = _state$orderedModifie.fn,
                          _state$orderedModifie2 = _state$orderedModifie.options,
                          _options = _state$orderedModifie2 === void 0 ? {} : _state$orderedModifie2,
                          name = _state$orderedModifie.name;

                      if (typeof fn === 'function') {
                        state = fn({
                          state: state,
                          options: _options,
                          name: name,
                          instance: instance
                        }) || state;
                      }
                    }
                  },
                  // Async and optimistically optimized update – it will not be executed if
                  // not necessary (debounced to run at most once-per-tick)
                  update: debounce$1(function () {
                    return new Promise(function (resolve) {
                      instance.forceUpdate();
                      resolve(state);
                    });
                  }),
                  destroy: function destroy() {
                    cleanupModifierEffects();
                    isDestroyed = true;
                  }
                };

                if (!areValidElements(reference, popper)) {
                  {
                    console.error(INVALID_ELEMENT_ERROR);
                  }

                  return instance;
                }

                instance.setOptions(options).then(function (state) {
                  if (!isDestroyed && options.onFirstUpdate) {
                    options.onFirstUpdate(state);
                  }
                }); // Modifiers have the ability to execute arbitrary code before the first
                // update cycle runs. They will be executed in the same order as the update
                // cycle. This is useful when a modifier adds some persistent data that
                // other modifiers need to use, but the modifier is run after the dependent
                // one.

                function runModifierEffects() {
                  state.orderedModifiers.forEach(function (_ref3) {
                    var name = _ref3.name,
                        _ref3$options = _ref3.options,
                        options = _ref3$options === void 0 ? {} : _ref3$options,
                        effect = _ref3.effect;

                    if (typeof effect === 'function') {
                      var cleanupFn = effect({
                        state: state,
                        name: name,
                        instance: instance,
                        options: options
                      });

                      var noopFn = function noopFn() {};

                      effectCleanupFns.push(cleanupFn || noopFn);
                    }
                  });
                }

                function cleanupModifierEffects() {
                  effectCleanupFns.forEach(function (fn) {
                    return fn();
                  });
                  effectCleanupFns = [];
                }

                return instance;
              };
            }

            var defaultModifiers = [eventListeners, popperOffsets$1, computeStyles$1, applyStyles$1, offset$1, flip$1, preventOverflow$1, arrow$1, hide$1];
            var createPopper = /*#__PURE__*/popperGenerator({
              defaultModifiers: defaultModifiers
            }); // eslint-disable-next-line import/no-unused-modules

            var CONTENT_CLASS = "tippy-content";
            var BACKDROP_CLASS = "tippy-backdrop";
            var ARROW_CLASS = "tippy-arrow";
            var SVG_ARROW_CLASS = "tippy-svg-arrow";
            var TOUCH_OPTIONS = {
              passive: true,
              capture: true
            };

            function hasOwnProperty(obj, key) {
              return {}.hasOwnProperty.call(obj, key);
            }
            function getValueAtIndexOrReturn(value, index, defaultValue) {
              if (Array.isArray(value)) {
                var v = value[index];
                return v == null ? Array.isArray(defaultValue) ? defaultValue[index] : defaultValue : v;
              }

              return value;
            }
            function isType(value, type) {
              var str = {}.toString.call(value);
              return str.indexOf('[object') === 0 && str.indexOf(type + "]") > -1;
            }
            function invokeWithArgsOrReturn(value, args) {
              return typeof value === 'function' ? value.apply(void 0, args) : value;
            }
            function debounce(fn, ms) {
              // Avoid wrapping in `setTimeout` if ms is 0 anyway
              if (ms === 0) {
                return fn;
              }

              var timeout;
              return function (arg) {
                clearTimeout(timeout);
                timeout = setTimeout(function () {
                  fn(arg);
                }, ms);
              };
            }
            function removeProperties(obj, keys) {
              var clone = Object.assign({}, obj);
              keys.forEach(function (key) {
                delete clone[key];
              });
              return clone;
            }
            function splitBySpaces(value) {
              return value.split(/\s+/).filter(Boolean);
            }
            function normalizeToArray(value) {
              return [].concat(value);
            }
            function pushIfUnique(arr, value) {
              if (arr.indexOf(value) === -1) {
                arr.push(value);
              }
            }
            function unique(arr) {
              return arr.filter(function (item, index) {
                return arr.indexOf(item) === index;
              });
            }
            function getBasePlacement(placement) {
              return placement.split('-')[0];
            }
            function arrayFrom(value) {
              return [].slice.call(value);
            }
            function removeUndefinedProps(obj) {
              return Object.keys(obj).reduce(function (acc, key) {
                if (obj[key] !== undefined) {
                  acc[key] = obj[key];
                }

                return acc;
              }, {});
            }

            function div() {
              return document.createElement('div');
            }
            function isElement(value) {
              return ['Element', 'Fragment'].some(function (type) {
                return isType(value, type);
              });
            }
            function isNodeList(value) {
              return isType(value, 'NodeList');
            }
            function isMouseEvent(value) {
              return isType(value, 'MouseEvent');
            }
            function isReferenceElement(value) {
              return !!(value && value._tippy && value._tippy.reference === value);
            }
            function getArrayOfElements(value) {
              if (isElement(value)) {
                return [value];
              }

              if (isNodeList(value)) {
                return arrayFrom(value);
              }

              if (Array.isArray(value)) {
                return value;
              }

              return arrayFrom(document.querySelectorAll(value));
            }
            function setTransitionDuration(els, value) {
              els.forEach(function (el) {
                if (el) {
                  el.style.transitionDuration = value + "ms";
                }
              });
            }
            function setVisibilityState(els, state) {
              els.forEach(function (el) {
                if (el) {
                  el.setAttribute('data-state', state);
                }
              });
            }
            function getOwnerDocument(elementOrElements) {
              var _element$ownerDocumen;

              var _normalizeToArray = normalizeToArray(elementOrElements),
                  element = _normalizeToArray[0]; // Elements created via a <template> have an ownerDocument with no reference to the body


              return (element == null ? void 0 : (_element$ownerDocumen = element.ownerDocument) == null ? void 0 : _element$ownerDocumen.body) ? element.ownerDocument : document;
            }
            function isCursorOutsideInteractiveBorder(popperTreeData, event) {
              var clientX = event.clientX,
                  clientY = event.clientY;
              return popperTreeData.every(function (_ref) {
                var popperRect = _ref.popperRect,
                    popperState = _ref.popperState,
                    props = _ref.props;
                var interactiveBorder = props.interactiveBorder;
                var basePlacement = getBasePlacement(popperState.placement);
                var offsetData = popperState.modifiersData.offset;

                if (!offsetData) {
                  return true;
                }

                var topDistance = basePlacement === 'bottom' ? offsetData.top.y : 0;
                var bottomDistance = basePlacement === 'top' ? offsetData.bottom.y : 0;
                var leftDistance = basePlacement === 'right' ? offsetData.left.x : 0;
                var rightDistance = basePlacement === 'left' ? offsetData.right.x : 0;
                var exceedsTop = popperRect.top - clientY + topDistance > interactiveBorder;
                var exceedsBottom = clientY - popperRect.bottom - bottomDistance > interactiveBorder;
                var exceedsLeft = popperRect.left - clientX + leftDistance > interactiveBorder;
                var exceedsRight = clientX - popperRect.right - rightDistance > interactiveBorder;
                return exceedsTop || exceedsBottom || exceedsLeft || exceedsRight;
              });
            }
            function updateTransitionEndListener(box, action, listener) {
              var method = action + "EventListener"; // some browsers apparently support `transition` (unprefixed) but only fire
              // `webkitTransitionEnd`...

              ['transitionend', 'webkitTransitionEnd'].forEach(function (event) {
                box[method](event, listener);
              });
            }

            var currentInput = {
              isTouch: false
            };
            var lastMouseMoveTime = 0;
            /**
             * When a `touchstart` event is fired, it's assumed the user is using touch
             * input. We'll bind a `mousemove` event listener to listen for mouse input in
             * the future. This way, the `isTouch` property is fully dynamic and will handle
             * hybrid devices that use a mix of touch + mouse input.
             */

            function onDocumentTouchStart() {
              if (currentInput.isTouch) {
                return;
              }

              currentInput.isTouch = true;

              if (window.performance) {
                document.addEventListener('mousemove', onDocumentMouseMove);
              }
            }
            /**
             * When two `mousemove` event are fired consecutively within 20ms, it's assumed
             * the user is using mouse input again. `mousemove` can fire on touch devices as
             * well, but very rarely that quickly.
             */

            function onDocumentMouseMove() {
              var now = performance.now();

              if (now - lastMouseMoveTime < 20) {
                currentInput.isTouch = false;
                document.removeEventListener('mousemove', onDocumentMouseMove);
              }

              lastMouseMoveTime = now;
            }
            /**
             * When an element is in focus and has a tippy, leaving the tab/window and
             * returning causes it to show again. For mouse users this is unexpected, but
             * for keyboard use it makes sense.
             * TODO: find a better technique to solve this problem
             */

            function onWindowBlur() {
              var activeElement = document.activeElement;

              if (isReferenceElement(activeElement)) {
                var instance = activeElement._tippy;

                if (activeElement.blur && !instance.state.isVisible) {
                  activeElement.blur();
                }
              }
            }
            function bindGlobalEventListeners() {
              document.addEventListener('touchstart', onDocumentTouchStart, TOUCH_OPTIONS);
              window.addEventListener('blur', onWindowBlur);
            }

            var isBrowser = typeof window !== 'undefined' && typeof document !== 'undefined';
            var ua = isBrowser ? navigator.userAgent : '';
            var isIE = /MSIE |Trident\//.test(ua);

            function createMemoryLeakWarning(method) {
              var txt = method === 'destroy' ? 'n already-' : ' ';
              return [method + "() was called on a" + txt + "destroyed instance. This is a no-op but", 'indicates a potential memory leak.'].join(' ');
            }
            function clean(value) {
              var spacesAndTabs = /[ \t]{2,}/g;
              var lineStartWithSpaces = /^[ \t]*/gm;
              return value.replace(spacesAndTabs, ' ').replace(lineStartWithSpaces, '').trim();
            }

            function getDevMessage(message) {
              return clean("\n  %ctippy.js\n\n  %c" + clean(message) + "\n\n  %c\uD83D\uDC77\u200D This is a development-only message. It will be removed in production.\n  ");
            }

            function getFormattedMessage(message) {
              return [getDevMessage(message), // title
              'color: #00C584; font-size: 1.3em; font-weight: bold;', // message
              'line-height: 1.5', // footer
              'color: #a6a095;'];
            } // Assume warnings and errors never have the same message

            var visitedMessages;

            {
              resetVisitedMessages();
            }

            function resetVisitedMessages() {
              visitedMessages = new Set();
            }
            function warnWhen(condition, message) {
              if (condition && !visitedMessages.has(message)) {
                var _console;

                visitedMessages.add(message);

                (_console = console).warn.apply(_console, getFormattedMessage(message));
              }
            }
            function errorWhen(condition, message) {
              if (condition && !visitedMessages.has(message)) {
                var _console2;

                visitedMessages.add(message);

                (_console2 = console).error.apply(_console2, getFormattedMessage(message));
              }
            }
            function validateTargets(targets) {
              var didPassFalsyValue = !targets;
              var didPassPlainObject = Object.prototype.toString.call(targets) === '[object Object]' && !targets.addEventListener;
              errorWhen(didPassFalsyValue, ['tippy() was passed', '`' + String(targets) + '`', 'as its targets (first) argument. Valid types are: String, Element,', 'Element[], or NodeList.'].join(' '));
              errorWhen(didPassPlainObject, ['tippy() was passed a plain object which is not supported as an argument', 'for virtual positioning. Use props.getReferenceClientRect instead.'].join(' '));
            }

            var pluginProps = {
              animateFill: false,
              followCursor: false,
              inlinePositioning: false,
              sticky: false
            };
            var renderProps = {
              allowHTML: false,
              animation: 'fade',
              arrow: true,
              content: '',
              inertia: false,
              maxWidth: 350,
              role: 'tooltip',
              theme: '',
              zIndex: 9999
            };
            var defaultProps = Object.assign({
              appendTo: function appendTo() {
                return document.body;
              },
              aria: {
                content: 'auto',
                expanded: 'auto'
              },
              delay: 0,
              duration: [300, 250],
              getReferenceClientRect: null,
              hideOnClick: true,
              ignoreAttributes: false,
              interactive: false,
              interactiveBorder: 2,
              interactiveDebounce: 0,
              moveTransition: '',
              offset: [0, 10],
              onAfterUpdate: function onAfterUpdate() {},
              onBeforeUpdate: function onBeforeUpdate() {},
              onCreate: function onCreate() {},
              onDestroy: function onDestroy() {},
              onHidden: function onHidden() {},
              onHide: function onHide() {},
              onMount: function onMount() {},
              onShow: function onShow() {},
              onShown: function onShown() {},
              onTrigger: function onTrigger() {},
              onUntrigger: function onUntrigger() {},
              onClickOutside: function onClickOutside() {},
              placement: 'top',
              plugins: [],
              popperOptions: {},
              render: null,
              showOnCreate: false,
              touch: true,
              trigger: 'mouseenter focus',
              triggerTarget: null
            }, pluginProps, {}, renderProps);
            var defaultKeys = Object.keys(defaultProps);
            var setDefaultProps = function setDefaultProps(partialProps) {
              /* istanbul ignore else */
              {
                validateProps(partialProps, []);
              }

              var keys = Object.keys(partialProps);
              keys.forEach(function (key) {
                defaultProps[key] = partialProps[key];
              });
            };
            function getExtendedPassedProps(passedProps) {
              var plugins = passedProps.plugins || [];
              var pluginProps = plugins.reduce(function (acc, plugin) {
                var name = plugin.name,
                    defaultValue = plugin.defaultValue;

                if (name) {
                  acc[name] = passedProps[name] !== undefined ? passedProps[name] : defaultValue;
                }

                return acc;
              }, {});
              return Object.assign({}, passedProps, {}, pluginProps);
            }
            function getDataAttributeProps(reference, plugins) {
              var propKeys = plugins ? Object.keys(getExtendedPassedProps(Object.assign({}, defaultProps, {
                plugins: plugins
              }))) : defaultKeys;
              var props = propKeys.reduce(function (acc, key) {
                var valueAsString = (reference.getAttribute("data-tippy-" + key) || '').trim();

                if (!valueAsString) {
                  return acc;
                }

                if (key === 'content') {
                  acc[key] = valueAsString;
                } else {
                  try {
                    acc[key] = JSON.parse(valueAsString);
                  } catch (e) {
                    acc[key] = valueAsString;
                  }
                }

                return acc;
              }, {});
              return props;
            }
            function evaluateProps(reference, props) {
              var out = Object.assign({}, props, {
                content: invokeWithArgsOrReturn(props.content, [reference])
              }, props.ignoreAttributes ? {} : getDataAttributeProps(reference, props.plugins));
              out.aria = Object.assign({}, defaultProps.aria, {}, out.aria);
              out.aria = {
                expanded: out.aria.expanded === 'auto' ? props.interactive : out.aria.expanded,
                content: out.aria.content === 'auto' ? props.interactive ? null : 'describedby' : out.aria.content
              };
              return out;
            }
            function validateProps(partialProps, plugins) {
              if (partialProps === void 0) {
                partialProps = {};
              }

              if (plugins === void 0) {
                plugins = [];
              }

              var keys = Object.keys(partialProps);
              keys.forEach(function (prop) {
                var nonPluginProps = removeProperties(defaultProps, Object.keys(pluginProps));
                var didPassUnknownProp = !hasOwnProperty(nonPluginProps, prop); // Check if the prop exists in `plugins`

                if (didPassUnknownProp) {
                  didPassUnknownProp = plugins.filter(function (plugin) {
                    return plugin.name === prop;
                  }).length === 0;
                }

                warnWhen(didPassUnknownProp, ["`" + prop + "`", "is not a valid prop. You may have spelled it incorrectly, or if it's", 'a plugin, forgot to pass it in an array as props.plugins.', '\n\n', 'All props: https://atomiks.github.io/tippyjs/v6/all-props/\n', 'Plugins: https://atomiks.github.io/tippyjs/v6/plugins/'].join(' '));
              });
            }

            function getChildren(popper) {
              var box = popper.firstElementChild;
              var boxChildren = arrayFrom(box.children);
              return {
                box: box,
                content: boxChildren.find(function (node) {
                  return node.classList.contains(CONTENT_CLASS);
                }),
                arrow: boxChildren.find(function (node) {
                  return node.classList.contains(ARROW_CLASS) || node.classList.contains(SVG_ARROW_CLASS);
                }),
                backdrop: boxChildren.find(function (node) {
                  return node.classList.contains(BACKDROP_CLASS);
                })
              };
            }

            var idCounter = 1;
            var mouseMoveListeners = []; // Used by `hideAll()`

            var mountedInstances = [];
            function createTippy(reference, passedProps) {
              var props = evaluateProps(reference, Object.assign({}, defaultProps, {}, getExtendedPassedProps(removeUndefinedProps(passedProps)))); // ===========================================================================
              // 🔒 Private members
              // ===========================================================================

              var showTimeout;
              var hideTimeout;
              var scheduleHideAnimationFrame;
              var isVisibleFromClick = false;
              var didHideDueToDocumentMouseDown = false;
              var didTouchMove = false;
              var ignoreOnFirstUpdate = false;
              var lastTriggerEvent;
              var currentTransitionEndListener;
              var onFirstUpdate;
              var listeners = [];
              var debouncedOnMouseMove = debounce(onMouseMove, props.interactiveDebounce);
              var currentTarget; // ===========================================================================
              // 🔑 Public members
              // ===========================================================================

              var id = idCounter++;
              var popperInstance = null;
              var plugins = unique(props.plugins);
              var state = {
                // Is the instance currently enabled?
                isEnabled: true,
                // Is the tippy currently showing and not transitioning out?
                isVisible: false,
                // Has the instance been destroyed?
                isDestroyed: false,
                // Is the tippy currently mounted to the DOM?
                isMounted: false,
                // Has the tippy finished transitioning in?
                isShown: false
              };
              var instance = {
                // properties
                id: id,
                reference: reference,
                popper: div(),
                popperInstance: popperInstance,
                props: props,
                state: state,
                plugins: plugins,
                // methods
                clearDelayTimeouts: clearDelayTimeouts,
                setProps: setProps,
                setContent: setContent,
                show: show,
                hide: hide,
                hideWithInteractivity: hideWithInteractivity,
                enable: enable,
                disable: disable,
                unmount: unmount,
                destroy: destroy
              }; // TODO: Investigate why this early return causes a TDZ error in the tests —
              // it doesn't seem to happen in the browser

              /* istanbul ignore if */

              if (!props.render) {
                {
                  errorWhen(true, 'render() function has not been supplied.');
                }

                return instance;
              } // ===========================================================================
              // Initial mutations
              // ===========================================================================


              var _props$render = props.render(instance),
                  popper = _props$render.popper,
                  onUpdate = _props$render.onUpdate;

              popper.setAttribute('data-tippy-root', '');
              popper.id = "tippy-" + instance.id;
              instance.popper = popper;
              reference._tippy = instance;
              popper._tippy = instance;
              var pluginsHooks = plugins.map(function (plugin) {
                return plugin.fn(instance);
              });
              var hasAriaExpanded = reference.hasAttribute('aria-expanded');
              addListeners();
              handleAriaExpandedAttribute();
              handleStyles();
              invokeHook('onCreate', [instance]);

              if (props.showOnCreate) {
                scheduleShow();
              } // Prevent a tippy with a delay from hiding if the cursor left then returned
              // before it started hiding


              popper.addEventListener('mouseenter', function () {
                if (instance.props.interactive && instance.state.isVisible) {
                  instance.clearDelayTimeouts();
                }
              });
              popper.addEventListener('mouseleave', function (event) {
                if (instance.props.interactive && instance.props.trigger.indexOf('mouseenter') >= 0) {
                  getDocument().addEventListener('mousemove', debouncedOnMouseMove);
                  debouncedOnMouseMove(event);
                }
              });
              return instance; // ===========================================================================
              // 🔒 Private methods
              // ===========================================================================

              function getNormalizedTouchSettings() {
                var touch = instance.props.touch;
                return Array.isArray(touch) ? touch : [touch, 0];
              }

              function getIsCustomTouchBehavior() {
                return getNormalizedTouchSettings()[0] === 'hold';
              }

              function getIsDefaultRenderFn() {
                var _instance$props$rende;

                // @ts-ignore
                return !!((_instance$props$rende = instance.props.render) == null ? void 0 : _instance$props$rende.$$tippy);
              }

              function getCurrentTarget() {
                return currentTarget || reference;
              }

              function getDocument() {
                var parent = getCurrentTarget().parentNode;
                return parent ? getOwnerDocument(parent) : document;
              }

              function getDefaultTemplateChildren() {
                return getChildren(popper);
              }

              function getDelay(isShow) {
                // For touch or keyboard input, force `0` delay for UX reasons
                // Also if the instance is mounted but not visible (transitioning out),
                // ignore delay
                if (instance.state.isMounted && !instance.state.isVisible || currentInput.isTouch || lastTriggerEvent && lastTriggerEvent.type === 'focus') {
                  return 0;
                }

                return getValueAtIndexOrReturn(instance.props.delay, isShow ? 0 : 1, defaultProps.delay);
              }

              function handleStyles() {
                popper.style.pointerEvents = instance.props.interactive && instance.state.isVisible ? '' : 'none';
                popper.style.zIndex = "" + instance.props.zIndex;
              }

              function invokeHook(hook, args, shouldInvokePropsHook) {
                if (shouldInvokePropsHook === void 0) {
                  shouldInvokePropsHook = true;
                }

                pluginsHooks.forEach(function (pluginHooks) {
                  if (pluginHooks[hook]) {
                    pluginHooks[hook].apply(void 0, args);
                  }
                });

                if (shouldInvokePropsHook) {
                  var _instance$props;

                  (_instance$props = instance.props)[hook].apply(_instance$props, args);
                }
              }

              function handleAriaContentAttribute() {
                var aria = instance.props.aria;

                if (!aria.content) {
                  return;
                }

                var attr = "aria-" + aria.content;
                var id = popper.id;
                var nodes = normalizeToArray(instance.props.triggerTarget || reference);
                nodes.forEach(function (node) {
                  var currentValue = node.getAttribute(attr);

                  if (instance.state.isVisible) {
                    node.setAttribute(attr, currentValue ? currentValue + " " + id : id);
                  } else {
                    var nextValue = currentValue && currentValue.replace(id, '').trim();

                    if (nextValue) {
                      node.setAttribute(attr, nextValue);
                    } else {
                      node.removeAttribute(attr);
                    }
                  }
                });
              }

              function handleAriaExpandedAttribute() {
                if (hasAriaExpanded || !instance.props.aria.expanded) {
                  return;
                }

                var nodes = normalizeToArray(instance.props.triggerTarget || reference);
                nodes.forEach(function (node) {
                  if (instance.props.interactive) {
                    node.setAttribute('aria-expanded', instance.state.isVisible && node === getCurrentTarget() ? 'true' : 'false');
                  } else {
                    node.removeAttribute('aria-expanded');
                  }
                });
              }

              function cleanupInteractiveMouseListeners() {
                getDocument().removeEventListener('mousemove', debouncedOnMouseMove);
                mouseMoveListeners = mouseMoveListeners.filter(function (listener) {
                  return listener !== debouncedOnMouseMove;
                });
              }

              function onDocumentPress(event) {
                // Moved finger to scroll instead of an intentional tap outside
                if (currentInput.isTouch) {
                  if (didTouchMove || event.type === 'mousedown') {
                    return;
                  }
                } // Clicked on interactive popper


                if (instance.props.interactive && popper.contains(event.target)) {
                  return;
                } // Clicked on the event listeners target


                if (getCurrentTarget().contains(event.target)) {
                  if (currentInput.isTouch) {
                    return;
                  }

                  if (instance.state.isVisible && instance.props.trigger.indexOf('click') >= 0) {
                    return;
                  }
                } else {
                  invokeHook('onClickOutside', [instance, event]);
                }

                if (instance.props.hideOnClick === true) {
                  instance.clearDelayTimeouts();
                  instance.hide(); // `mousedown` event is fired right before `focus` if pressing the
                  // currentTarget. This lets a tippy with `focus` trigger know that it
                  // should not show

                  didHideDueToDocumentMouseDown = true;
                  setTimeout(function () {
                    didHideDueToDocumentMouseDown = false;
                  }); // The listener gets added in `scheduleShow()`, but this may be hiding it
                  // before it shows, and hide()'s early bail-out behavior can prevent it
                  // from being cleaned up

                  if (!instance.state.isMounted) {
                    removeDocumentPress();
                  }
                }
              }

              function onTouchMove() {
                didTouchMove = true;
              }

              function onTouchStart() {
                didTouchMove = false;
              }

              function addDocumentPress() {
                var doc = getDocument();
                doc.addEventListener('mousedown', onDocumentPress, true);
                doc.addEventListener('touchend', onDocumentPress, TOUCH_OPTIONS);
                doc.addEventListener('touchstart', onTouchStart, TOUCH_OPTIONS);
                doc.addEventListener('touchmove', onTouchMove, TOUCH_OPTIONS);
              }

              function removeDocumentPress() {
                var doc = getDocument();
                doc.removeEventListener('mousedown', onDocumentPress, true);
                doc.removeEventListener('touchend', onDocumentPress, TOUCH_OPTIONS);
                doc.removeEventListener('touchstart', onTouchStart, TOUCH_OPTIONS);
                doc.removeEventListener('touchmove', onTouchMove, TOUCH_OPTIONS);
              }

              function onTransitionedOut(duration, callback) {
                onTransitionEnd(duration, function () {
                  if (!instance.state.isVisible && popper.parentNode && popper.parentNode.contains(popper)) {
                    callback();
                  }
                });
              }

              function onTransitionedIn(duration, callback) {
                onTransitionEnd(duration, callback);
              }

              function onTransitionEnd(duration, callback) {
                var box = getDefaultTemplateChildren().box;

                function listener(event) {
                  if (event.target === box) {
                    updateTransitionEndListener(box, 'remove', listener);
                    callback();
                  }
                } // Make callback synchronous if duration is 0
                // `transitionend` won't fire otherwise


                if (duration === 0) {
                  return callback();
                }

                updateTransitionEndListener(box, 'remove', currentTransitionEndListener);
                updateTransitionEndListener(box, 'add', listener);
                currentTransitionEndListener = listener;
              }

              function on(eventType, handler, options) {
                if (options === void 0) {
                  options = false;
                }

                var nodes = normalizeToArray(instance.props.triggerTarget || reference);
                nodes.forEach(function (node) {
                  node.addEventListener(eventType, handler, options);
                  listeners.push({
                    node: node,
                    eventType: eventType,
                    handler: handler,
                    options: options
                  });
                });
              }

              function addListeners() {
                if (getIsCustomTouchBehavior()) {
                  on('touchstart', onTrigger, {
                    passive: true
                  });
                  on('touchend', onMouseLeave, {
                    passive: true
                  });
                }

                splitBySpaces(instance.props.trigger).forEach(function (eventType) {
                  if (eventType === 'manual') {
                    return;
                  }

                  on(eventType, onTrigger);

                  switch (eventType) {
                    case 'mouseenter':
                      on('mouseleave', onMouseLeave);
                      break;

                    case 'focus':
                      on(isIE ? 'focusout' : 'blur', onBlurOrFocusOut);
                      break;

                    case 'focusin':
                      on('focusout', onBlurOrFocusOut);
                      break;
                  }
                });
              }

              function removeListeners() {
                listeners.forEach(function (_ref) {
                  var node = _ref.node,
                      eventType = _ref.eventType,
                      handler = _ref.handler,
                      options = _ref.options;
                  node.removeEventListener(eventType, handler, options);
                });
                listeners = [];
              }

              function onTrigger(event) {
                var _lastTriggerEvent;

                var shouldScheduleClickHide = false;

                if (!instance.state.isEnabled || isEventListenerStopped(event) || didHideDueToDocumentMouseDown) {
                  return;
                }

                var wasFocused = ((_lastTriggerEvent = lastTriggerEvent) == null ? void 0 : _lastTriggerEvent.type) === 'focus';
                lastTriggerEvent = event;
                currentTarget = event.currentTarget;
                handleAriaExpandedAttribute();

                if (!instance.state.isVisible && isMouseEvent(event)) {
                  // If scrolling, `mouseenter` events can be fired if the cursor lands
                  // over a new target, but `mousemove` events don't get fired. This
                  // causes interactive tooltips to get stuck open until the cursor is
                  // moved
                  mouseMoveListeners.forEach(function (listener) {
                    return listener(event);
                  });
                } // Toggle show/hide when clicking click-triggered tooltips


                if (event.type === 'click' && (instance.props.trigger.indexOf('mouseenter') < 0 || isVisibleFromClick) && instance.props.hideOnClick !== false && instance.state.isVisible) {
                  shouldScheduleClickHide = true;
                } else {
                  scheduleShow(event);
                }

                if (event.type === 'click') {
                  isVisibleFromClick = !shouldScheduleClickHide;
                }

                if (shouldScheduleClickHide && !wasFocused) {
                  scheduleHide(event);
                }
              }

              function onMouseMove(event) {
                var target = event.target;
                var isCursorOverReferenceOrPopper = getCurrentTarget().contains(target) || popper.contains(target);

                if (event.type === 'mousemove' && isCursorOverReferenceOrPopper) {
                  return;
                }

                var popperTreeData = getNestedPopperTree().concat(popper).map(function (popper) {
                  var _instance$popperInsta;

                  var instance = popper._tippy;
                  var state = (_instance$popperInsta = instance.popperInstance) == null ? void 0 : _instance$popperInsta.state;

                  if (state) {
                    return {
                      popperRect: popper.getBoundingClientRect(),
                      popperState: state,
                      props: props
                    };
                  }

                  return null;
                }).filter(Boolean);

                if (isCursorOutsideInteractiveBorder(popperTreeData, event)) {
                  cleanupInteractiveMouseListeners();
                  scheduleHide(event);
                }
              }

              function onMouseLeave(event) {
                var shouldBail = isEventListenerStopped(event) || instance.props.trigger.indexOf('click') >= 0 && isVisibleFromClick;

                if (shouldBail) {
                  return;
                }

                if (instance.props.interactive) {
                  instance.hideWithInteractivity(event);
                  return;
                }

                scheduleHide(event);
              }

              function onBlurOrFocusOut(event) {
                if (instance.props.trigger.indexOf('focusin') < 0 && event.target !== getCurrentTarget()) {
                  return;
                } // If focus was moved to within the popper


                if (instance.props.interactive && event.relatedTarget && popper.contains(event.relatedTarget)) {
                  return;
                }

                scheduleHide(event);
              }

              function isEventListenerStopped(event) {
                return currentInput.isTouch ? getIsCustomTouchBehavior() !== event.type.indexOf('touch') >= 0 : false;
              }

              function createPopperInstance() {
                destroyPopperInstance();
                var _instance$props2 = instance.props,
                    popperOptions = _instance$props2.popperOptions,
                    placement = _instance$props2.placement,
                    offset = _instance$props2.offset,
                    getReferenceClientRect = _instance$props2.getReferenceClientRect,
                    moveTransition = _instance$props2.moveTransition;
                var arrow = getIsDefaultRenderFn() ? getChildren(popper).arrow : null;
                var computedReference = getReferenceClientRect ? {
                  getBoundingClientRect: getReferenceClientRect,
                  contextElement: getReferenceClientRect.contextElement || getCurrentTarget()
                } : reference;
                var tippyModifier = {
                  name: '$$tippy',
                  enabled: true,
                  phase: 'beforeWrite',
                  requires: ['computeStyles'],
                  fn: function fn(_ref2) {
                    var state = _ref2.state;

                    if (getIsDefaultRenderFn()) {
                      var _getDefaultTemplateCh = getDefaultTemplateChildren(),
                          box = _getDefaultTemplateCh.box;

                      ['placement', 'reference-hidden', 'escaped'].forEach(function (attr) {
                        if (attr === 'placement') {
                          box.setAttribute('data-placement', state.placement);
                        } else {
                          if (state.attributes.popper["data-popper-" + attr]) {
                            box.setAttribute("data-" + attr, '');
                          } else {
                            box.removeAttribute("data-" + attr);
                          }
                        }
                      });
                      state.attributes.popper = {};
                    }
                  }
                };
                var modifiers = [{
                  name: 'offset',
                  options: {
                    offset: offset
                  }
                }, {
                  name: 'preventOverflow',
                  options: {
                    padding: {
                      top: 2,
                      bottom: 2,
                      left: 5,
                      right: 5
                    }
                  }
                }, {
                  name: 'flip',
                  options: {
                    padding: 5
                  }
                }, {
                  name: 'computeStyles',
                  options: {
                    adaptive: !moveTransition
                  }
                }, tippyModifier];

                if (getIsDefaultRenderFn() && arrow) {
                  modifiers.push({
                    name: 'arrow',
                    options: {
                      element: arrow,
                      padding: 3
                    }
                  });
                }

                modifiers.push.apply(modifiers, (popperOptions == null ? void 0 : popperOptions.modifiers) || []);
                instance.popperInstance = createPopper(computedReference, popper, Object.assign({}, popperOptions, {
                  placement: placement,
                  onFirstUpdate: onFirstUpdate,
                  modifiers: modifiers
                }));
              }

              function destroyPopperInstance() {
                if (instance.popperInstance) {
                  instance.popperInstance.destroy();
                  instance.popperInstance = null;
                }
              }

              function mount() {
                var appendTo = instance.props.appendTo;
                var parentNode; // By default, we'll append the popper to the triggerTargets's parentNode so
                // it's directly after the reference element so the elements inside the
                // tippy can be tabbed to
                // If there are clipping issues, the user can specify a different appendTo
                // and ensure focus management is handled correctly manually

                var node = getCurrentTarget();

                if (instance.props.interactive && appendTo === defaultProps.appendTo || appendTo === 'parent') {
                  parentNode = node.parentNode;
                } else {
                  parentNode = invokeWithArgsOrReturn(appendTo, [node]);
                } // The popper element needs to exist on the DOM before its position can be
                // updated as Popper needs to read its dimensions


                if (!parentNode.contains(popper)) {
                  parentNode.appendChild(popper);
                }

                createPopperInstance();
                /* istanbul ignore else */

                {
                  // Accessibility check
                  warnWhen(instance.props.interactive && appendTo === defaultProps.appendTo && node.nextElementSibling !== popper, ['Interactive tippy element may not be accessible via keyboard', 'navigation because it is not directly after the reference element', 'in the DOM source order.', '\n\n', 'Using a wrapper <div> or <span> tag around the reference element', 'solves this by creating a new parentNode context.', '\n\n', 'Specifying `appendTo: document.body` silences this warning, but it', 'assumes you are using a focus management solution to handle', 'keyboard navigation.', '\n\n', 'See: https://atomiks.github.io/tippyjs/v6/accessibility/#interactivity'].join(' '));
                }
              }

              function getNestedPopperTree() {
                return arrayFrom(popper.querySelectorAll('[data-tippy-root]'));
              }

              function scheduleShow(event) {
                instance.clearDelayTimeouts();

                if (event) {
                  invokeHook('onTrigger', [instance, event]);
                }

                addDocumentPress();
                var delay = getDelay(true);

                var _getNormalizedTouchSe = getNormalizedTouchSettings(),
                    touchValue = _getNormalizedTouchSe[0],
                    touchDelay = _getNormalizedTouchSe[1];

                if (currentInput.isTouch && touchValue === 'hold' && touchDelay) {
                  delay = touchDelay;
                }

                if (delay) {
                  showTimeout = setTimeout(function () {
                    instance.show();
                  }, delay);
                } else {
                  instance.show();
                }
              }

              function scheduleHide(event) {
                instance.clearDelayTimeouts();
                invokeHook('onUntrigger', [instance, event]);

                if (!instance.state.isVisible) {
                  removeDocumentPress();
                  return;
                } // For interactive tippies, scheduleHide is added to a document.body handler
                // from onMouseLeave so must intercept scheduled hides from mousemove/leave
                // events when trigger contains mouseenter and click, and the tip is
                // currently shown as a result of a click.


                if (instance.props.trigger.indexOf('mouseenter') >= 0 && instance.props.trigger.indexOf('click') >= 0 && ['mouseleave', 'mousemove'].indexOf(event.type) >= 0 && isVisibleFromClick) {
                  return;
                }

                var delay = getDelay(false);

                if (delay) {
                  hideTimeout = setTimeout(function () {
                    if (instance.state.isVisible) {
                      instance.hide();
                    }
                  }, delay);
                } else {
                  // Fixes a `transitionend` problem when it fires 1 frame too
                  // late sometimes, we don't want hide() to be called.
                  scheduleHideAnimationFrame = requestAnimationFrame(function () {
                    instance.hide();
                  });
                }
              } // ===========================================================================
              // 🔑 Public methods
              // ===========================================================================


              function enable() {
                instance.state.isEnabled = true;
              }

              function disable() {
                // Disabling the instance should also hide it
                // https://github.com/atomiks/tippy.js-react/issues/106
                instance.hide();
                instance.state.isEnabled = false;
              }

              function clearDelayTimeouts() {
                clearTimeout(showTimeout);
                clearTimeout(hideTimeout);
                cancelAnimationFrame(scheduleHideAnimationFrame);
              }

              function setProps(partialProps) {
                /* istanbul ignore else */
                {
                  warnWhen(instance.state.isDestroyed, createMemoryLeakWarning('setProps'));
                }

                if (instance.state.isDestroyed) {
                  return;
                }

                invokeHook('onBeforeUpdate', [instance, partialProps]);
                removeListeners();
                var prevProps = instance.props;
                var nextProps = evaluateProps(reference, Object.assign({}, instance.props, {}, partialProps, {
                  ignoreAttributes: true
                }));
                instance.props = nextProps;
                addListeners();

                if (prevProps.interactiveDebounce !== nextProps.interactiveDebounce) {
                  cleanupInteractiveMouseListeners();
                  debouncedOnMouseMove = debounce(onMouseMove, nextProps.interactiveDebounce);
                } // Ensure stale aria-expanded attributes are removed


                if (prevProps.triggerTarget && !nextProps.triggerTarget) {
                  normalizeToArray(prevProps.triggerTarget).forEach(function (node) {
                    node.removeAttribute('aria-expanded');
                  });
                } else if (nextProps.triggerTarget) {
                  reference.removeAttribute('aria-expanded');
                }

                handleAriaExpandedAttribute();
                handleStyles();

                if (onUpdate) {
                  onUpdate(prevProps, nextProps);
                }

                if (instance.popperInstance) {
                  createPopperInstance(); // Fixes an issue with nested tippies if they are all getting re-rendered,
                  // and the nested ones get re-rendered first.
                  // https://github.com/atomiks/tippyjs-react/issues/177
                  // TODO: find a cleaner / more efficient solution(!)

                  getNestedPopperTree().forEach(function (nestedPopper) {
                    // React (and other UI libs likely) requires a rAF wrapper as it flushes
                    // its work in one
                    requestAnimationFrame(nestedPopper._tippy.popperInstance.forceUpdate);
                  });
                }

                invokeHook('onAfterUpdate', [instance, partialProps]);
              }

              function setContent(content) {
                instance.setProps({
                  content: content
                });
              }

              function show() {
                /* istanbul ignore else */
                {
                  warnWhen(instance.state.isDestroyed, createMemoryLeakWarning('show'));
                } // Early bail-out


                var isAlreadyVisible = instance.state.isVisible;
                var isDestroyed = instance.state.isDestroyed;
                var isDisabled = !instance.state.isEnabled;
                var isTouchAndTouchDisabled = currentInput.isTouch && !instance.props.touch;
                var duration = getValueAtIndexOrReturn(instance.props.duration, 0, defaultProps.duration);

                if (isAlreadyVisible || isDestroyed || isDisabled || isTouchAndTouchDisabled) {
                  return;
                } // Normalize `disabled` behavior across browsers.
                // Firefox allows events on disabled elements, but Chrome doesn't.
                // Using a wrapper element (i.e. <span>) is recommended.


                if (getCurrentTarget().hasAttribute('disabled')) {
                  return;
                }

                invokeHook('onShow', [instance], false);

                if (instance.props.onShow(instance) === false) {
                  return;
                }

                instance.state.isVisible = true;

                if (getIsDefaultRenderFn()) {
                  popper.style.visibility = 'visible';
                }

                handleStyles();
                addDocumentPress();

                if (!instance.state.isMounted) {
                  popper.style.transition = 'none';
                } // If flipping to the opposite side after hiding at least once, the
                // animation will use the wrong placement without resetting the duration


                if (getIsDefaultRenderFn()) {
                  var _getDefaultTemplateCh2 = getDefaultTemplateChildren(),
                      box = _getDefaultTemplateCh2.box,
                      content = _getDefaultTemplateCh2.content;

                  setTransitionDuration([box, content], 0);
                }

                onFirstUpdate = function onFirstUpdate() {
                  var _instance$popperInsta2;

                  if (!instance.state.isVisible || ignoreOnFirstUpdate) {
                    return;
                  }

                  ignoreOnFirstUpdate = true; // reflow

                  void popper.offsetHeight;
                  popper.style.transition = instance.props.moveTransition;

                  if (getIsDefaultRenderFn() && instance.props.animation) {
                    var _getDefaultTemplateCh3 = getDefaultTemplateChildren(),
                        _box = _getDefaultTemplateCh3.box,
                        _content = _getDefaultTemplateCh3.content;

                    setTransitionDuration([_box, _content], duration);
                    setVisibilityState([_box, _content], 'visible');
                  }

                  handleAriaContentAttribute();
                  handleAriaExpandedAttribute();
                  pushIfUnique(mountedInstances, instance); // certain modifiers (e.g. `maxSize`) require a second update after the
                  // popper has been positioned for the first time

                  (_instance$popperInsta2 = instance.popperInstance) == null ? void 0 : _instance$popperInsta2.forceUpdate();
                  instance.state.isMounted = true;
                  invokeHook('onMount', [instance]);

                  if (instance.props.animation && getIsDefaultRenderFn()) {
                    onTransitionedIn(duration, function () {
                      instance.state.isShown = true;
                      invokeHook('onShown', [instance]);
                    });
                  }
                };

                mount();
              }

              function hide() {
                /* istanbul ignore else */
                {
                  warnWhen(instance.state.isDestroyed, createMemoryLeakWarning('hide'));
                } // Early bail-out


                var isAlreadyHidden = !instance.state.isVisible;
                var isDestroyed = instance.state.isDestroyed;
                var isDisabled = !instance.state.isEnabled;
                var duration = getValueAtIndexOrReturn(instance.props.duration, 1, defaultProps.duration);

                if (isAlreadyHidden || isDestroyed || isDisabled) {
                  return;
                }

                invokeHook('onHide', [instance], false);

                if (instance.props.onHide(instance) === false) {
                  return;
                }

                instance.state.isVisible = false;
                instance.state.isShown = false;
                ignoreOnFirstUpdate = false;
                isVisibleFromClick = false;

                if (getIsDefaultRenderFn()) {
                  popper.style.visibility = 'hidden';
                }

                cleanupInteractiveMouseListeners();
                removeDocumentPress();
                handleStyles();

                if (getIsDefaultRenderFn()) {
                  var _getDefaultTemplateCh4 = getDefaultTemplateChildren(),
                      box = _getDefaultTemplateCh4.box,
                      content = _getDefaultTemplateCh4.content;

                  if (instance.props.animation) {
                    setTransitionDuration([box, content], duration);
                    setVisibilityState([box, content], 'hidden');
                  }
                }

                handleAriaContentAttribute();
                handleAriaExpandedAttribute();

                if (instance.props.animation) {
                  if (getIsDefaultRenderFn()) {
                    onTransitionedOut(duration, instance.unmount);
                  }
                } else {
                  instance.unmount();
                }
              }

              function hideWithInteractivity(event) {
                /* istanbul ignore else */
                {
                  warnWhen(instance.state.isDestroyed, createMemoryLeakWarning('hideWithInteractivity'));
                }

                getDocument().addEventListener('mousemove', debouncedOnMouseMove);
                pushIfUnique(mouseMoveListeners, debouncedOnMouseMove);
                debouncedOnMouseMove(event);
              }

              function unmount() {
                /* istanbul ignore else */
                {
                  warnWhen(instance.state.isDestroyed, createMemoryLeakWarning('unmount'));
                }

                if (instance.state.isVisible) {
                  instance.hide();
                }

                if (!instance.state.isMounted) {
                  return;
                }

                destroyPopperInstance(); // If a popper is not interactive, it will be appended outside the popper
                // tree by default. This seems mainly for interactive tippies, but we should
                // find a workaround if possible

                getNestedPopperTree().forEach(function (nestedPopper) {
                  nestedPopper._tippy.unmount();
                });

                if (popper.parentNode) {
                  popper.parentNode.removeChild(popper);
                }

                mountedInstances = mountedInstances.filter(function (i) {
                  return i !== instance;
                });
                instance.state.isMounted = false;
                invokeHook('onHidden', [instance]);
              }

              function destroy() {
                /* istanbul ignore else */
                {
                  warnWhen(instance.state.isDestroyed, createMemoryLeakWarning('destroy'));
                }

                if (instance.state.isDestroyed) {
                  return;
                }

                instance.clearDelayTimeouts();
                instance.unmount();
                removeListeners();
                delete reference._tippy;
                instance.state.isDestroyed = true;
                invokeHook('onDestroy', [instance]);
              }
            }

            function tippy(targets, optionalProps) {
              if (optionalProps === void 0) {
                optionalProps = {};
              }

              var plugins = defaultProps.plugins.concat(optionalProps.plugins || []);
              /* istanbul ignore else */

              {
                validateTargets(targets);
                validateProps(optionalProps, plugins);
              }

              bindGlobalEventListeners();
              var passedProps = Object.assign({}, optionalProps, {
                plugins: plugins
              });
              var elements = getArrayOfElements(targets);
              /* istanbul ignore else */

              {
                var isSingleContentElement = isElement(passedProps.content);
                var isMoreThanOneReferenceElement = elements.length > 1;
                warnWhen(isSingleContentElement && isMoreThanOneReferenceElement, ['tippy() was passed an Element as the `content` prop, but more than', 'one tippy instance was created by this invocation. This means the', 'content element will only be appended to the last tippy instance.', '\n\n', 'Instead, pass the .innerHTML of the element, or use a function that', 'returns a cloned version of the element instead.', '\n\n', '1) content: element.innerHTML\n', '2) content: () => element.cloneNode(true)'].join(' '));
              }

              var instances = elements.reduce(function (acc, reference) {
                var instance = reference && createTippy(reference, passedProps);

                if (instance) {
                  acc.push(instance);
                }

                return acc;
              }, []);
              return isElement(targets) ? instances[0] : instances;
            }

            tippy.defaultProps = defaultProps;
            tippy.setDefaultProps = setDefaultProps;
            tippy.currentInput = currentInput;

            // every time the popper is destroyed (i.e. a new target), removing the styles
            // and causing transitions to break for singletons when the console is open, but
            // most notably for non-transform styles being used, `gpuAcceleration: false`.

            Object.assign({}, applyStyles$1, {
              effect: function effect(_ref) {
                var state = _ref.state;
                var initialStyles = {
                  popper: {
                    position: state.options.strategy,
                    left: '0',
                    top: '0',
                    margin: '0'
                  },
                  arrow: {
                    position: 'absolute'
                  },
                  reference: {}
                };
                Object.assign(state.elements.popper.style, initialStyles.popper);
                state.styles = initialStyles;

                if (state.elements.arrow) {
                  Object.assign(state.elements.arrow.style, initialStyles.arrow);
                } // intentionally return no cleanup function
                // return () => { ... }

              }
            });

            tippy.setDefaultProps({
              animation: false
            });

            const InfoIcon = qe(AiFillInfoCircle) `
  display: inline-block;
  color: ${({ theme }) => theme.baseColors['blue-light']};
`;
            const ErrorIcon$1 = qe(AiFillWarning) `
  display: inline-block;
  color: ${({ theme }) => theme.baseColors['red-light']};
`;
            const whiteSpace = (props) => {
                if (props.nowrap) {
                    return 'nowrap';
                }
                if (props.pre) {
                    return 'pre';
                }
                return 'inherit';
            };
            const TooltipText = qe.div `
  text-align: center;
  text-transform: ${(props) => props.capitalize ? 'capitalize' : 'inherit'};
`;
            const Container$b = qe.div `
  display: ${({ inline }) => inline ? 'inline-block' : 'inherit'};
  margin: 0 ${({ marginY, theme }) => marginY ? theme.sizes.md.marginY : 'inherit'};
  text-overflow: ${(props) => props.truncate ? 'ellipsis' : 'inherit'};
  overflow: ${(props) => props.truncate ? 'hidden' : 'inherit'};
  min-width: ${(props) => props.truncate ? '0px' : 'inherit'};
  
  &:hover {
    cursor: ${({ cursorType }) => cursorType ? cursorType : 'default'};
  }
`;
            const backgroundColor$1 = (props) => {
                const { appColor, theme } = props;
                if (!appColor) {
                    return theme.colors.secondary.background;
                }
                if (isBaseColor(appColor)) {
                    return theme.baseColors[appColor];
                }
                if (isThemeColor(appColor)) {
                    return theme.colors[appColor].background;
                }
                return appColor;
            };
            const StyledTooltip = qe.div `
  background-color: ${(props) => backgroundColor$1(props)};
  border-radius: ${({ theme }) => theme.sizes.lg.borderRadius};
  color: ${(props) => props.theme.colors.secondary.foreground};
  border: 2px ${({ theme }) => alpha(theme.colors.secondary.accent, .7)} solid;
  white-space: ${(props) => whiteSpace(props)};
  padding: 4px 8px;
  font-weight: ${({ theme, size }) => theme.sizes[size || 'md'].fontWeight};
  font-size: ${(props) => props.theme.sizes[props.size || 'md'].fontSize};
  opacity: 1;
`;

            const Tip = (props) => {
                const { text, isNotHovered, onClick, handleHover, capitalize, ...rest } = props;
                const tooltipText = typeof text === 'string' ? text.split('\n)').join('<br />') : text;
                const ref = react.useRef(null);
                useIsHovered({ ref, onChange: handleHover });
                if (isNotHovered) {
                    return null;
                }
                return (react.createElement(Ge, { theme: {
                        ...theme,
                        windowHeight: 1000,
                    } },
                    react.createElement(StyledTooltip, Object.assign({ ref: ref }, rest),
                        react.createElement(TooltipText, { capitalize: capitalize, onClick: onClick }, tooltipText))));
            };

            const Tooltip$2 = (props) => {
                const { children, showDelay, hideDelay, inline, marginY, truncate, placement, isDisabled, cursorType } = props;
                const ref = react.useRef(null);
                const [instance, setInstance] = react.useState(null);
                const [containerHovered, setContainerHovered] = react.useState(false);
                const [tipHovered, setTipHovered] = react.useState(false);
                useIsHovered({ ref, onChange: setContainerHovered });
                const handleTipHover = (nextHoverState) => {
                    if (nextHoverState) {
                        setTimeout(() => {
                            setTipHovered(nextHoverState);
                        }, showDelay || 0);
                        return;
                    }
                    setTimeout(() => {
                        setTipHovered(nextHoverState);
                    }, hideDelay || 0);
                };
                react.useEffect(() => {
                    const nextInstance = ref.current ?
                        tippy(ref.current, {
                            delay: [showDelay || null, hideDelay || null],
                            placement: placement || 'bottom',
                            content: 'content',
                            render() {
                                const popper = document.createElement('div');
                                const box = document.createElement('div');
                                reactDom.render(react.createElement(Tip, Object.assign({}, props, { handleHover: handleTipHover, isNotHovered: !containerHovered && !isDisabled })), box);
                                popper.appendChild(box);
                                return {
                                    popper,
                                };
                            },
                            allowHTML: true,
                        }) :
                        null;
                    setInstance(nextInstance);
                    return () => {
                        if (nextInstance) {
                            nextInstance.destroy();
                        }
                    };
                }, [ref.current, containerHovered, hideDelay, showDelay, tipHovered]);
                react.useEffect(() => {
                    if (instance) {
                        if (containerHovered) {
                            setTimeout(() => {
                                if (!instance.state.isDestroyed) {
                                    instance.show();
                                }
                            }, showDelay || 0);
                            return;
                        }
                        setTimeout(() => {
                            if (!instance.state.isDestroyed) {
                                instance.hide();
                            }
                        }, hideDelay || 0);
                    }
                }, [instance, containerHovered, tipHovered]);
                if (isDisabled) {
                    return (react.createElement(Container$b, { truncate: truncate, cursorType: cursorType }, children));
                }
                return (react.createElement(Container$b, { ref: ref, cursorType: cursorType, truncate: truncate, inline: inline, marginY: marginY }, children));
            };

            const ErrorTooltip = (props) => {
                return (react.createElement(Tooltip$2, Object.assign({ noDelay: true, marginY: true }, props),
                    react.createElement(ErrorIcon$1, null)));
            };

            const InfoTooltip = (props) => {
                return (react.createElement(Tooltip$2, Object.assign({ noDelay: true, marginY: true, cursorType: "help" }, props),
                    react.createElement(InfoIcon, null)));
            };

            const Repo = (props) => {
                const { repository, style, type } = props;
                const [isSelected, setIsSelected] = react.useState(false);
                const [isEllipsis, setIsEllipsis] = react.useState(false);
                const labelRef = react.useRef(null);
                const { updateWatched } = useRepositories();
                react.useEffect(() => {
                    if (labelRef.current) {
                        const { current } = labelRef;
                        const isActive = current.offsetHeight < current.scrollHeight || current.offsetWidth < current.scrollWidth;
                        setIsEllipsis(isActive);
                    }
                }, [labelRef]);
                const addRepo = () => {
                    updateWatched({
                        ...repository,
                        isWatched: true,
                    });
                };
                const removeRepo = () => {
                    updateWatched({
                        ...repository,
                        isWatched: false,
                    });
                };
                const onClick = () => {
                    if (type === 'unwatched') {
                        addRepo();
                        return;
                    }
                    removeRepo();
                };
                const select = () => {
                    setIsSelected(true);
                    onClick();
                };
                return (react.createElement(RepoContainer, { style: style, onClick: select },
                    react.createElement(Tooltip$2, { truncate: true, size: "sm", isDisabled: !isEllipsis, text: repository.fullName, cursorType: "pointer" },
                        react.createElement(Checkbox, { handleClick: select, label: repository.fullName, ref: labelRef, isChecked: false }))));
            };

            const RepositoryList = (props) => {
                const { repositories, type, loadingMessage, title } = props;
                const [count, setCount] = react.useState(0);
                react.useEffect(() => {
                    const cancel = setInterval(() => {
                        setCount(count + 1);
                    }, 300);
                    return () => {
                        clearInterval(cancel);
                    };
                }, []);
                return (react.createElement(RepoListContainer, null,
                    react.createElement(Title$3, null, title),
                    react.createElement(Repos, null,
                        react.createElement(List, { noRowsRenderer: () => react.createElement(Loading$1, { message: loadingMessage }), height: 200, width: 300, rowHeight: 20, rowCount: repositories.length, rowRenderer: ({ index, style, key }) => (react.createElement(Repo, { key: key, style: style, repository: repositories[index], type: type })) }))));
            };

            const Repositories = () => {
                const { repositories: { watched, unwatched, }, } = useRepositories();
                return (react.createElement(react.Fragment, null,
                    react.createElement(SectionTitle, null, "Repositories"),
                    react.createElement(SectionContent, null,
                        react.createElement(RepositoryListsWrapper, null,
                            react.createElement(RepositoryList, { type: "watched", repositories: watched, title: "Currently Watched Repositories", loadingMessage: unwatched.length === 0 ? 'Fetching Repositories' : 'Add Repos to Watch' }),
                            react.createElement(RepositoryList, { type: "unwatched", repositories: unwatched, title: "Unwatched Repositories", loadingMessage: "Fetching Repositories" })))));
            };

            const ReviewsRequired = () => {
                const { settings: { reviewsRequired } } = useSettings$1(['reviewsRequired']);
                const updateSettings = useUpdateSettings$1();
                const onChange = (event) => {
                    const { value } = event.target;
                    if (value.length === 0) {
                        updateSettings('reviewsRequired', undefined);
                        return;
                    }
                    const num = Number(event.target.value);
                    if (isNaN(num)) {
                        return;
                    }
                    updateSettings('reviewsRequired', num);
                };
                return (react.createElement(Input$1, { containerPosition: "left", maxSize: 2, label: "Reviews Required", value: reviewsRequired, onChange: onChange }));
            };

            const Main$2 = () => {
                const { logout } = useAuthStatus$1();
                const { init } = useInit$3();
                const { hasInit } = useTrackedState$5();
                react.useEffect(() => {
                    if (!hasInit.includes('repositories')) {
                        init('repositories');
                    }
                }, []);
                return (react.createElement(react.Fragment, null,
                    react.createElement(Logout, { handleClickLogout: logout }),
                    react.createElement(Section$1, null,
                        react.createElement(SectionTitle, null, "Validation"),
                        react.createElement(SectionContent, null,
                            react.createElement(ReviewsRequired, null)),
                        react.createElement(Repositories, null))));
            };

            const Github$1 = () => {
                const { authStatus } = useAuthStatus$1();
                const { selection } = useHide();
                if (selection !== 'github') {
                    return null;
                }
                if (authStatus === 'is') {
                    return (react.createElement(Main$2, null));
                }
                return react.createElement(Login$1, { unit: "github" });
            };

            const Filters$2 = () => {
                const { setRememberSelections, rememberSelections } = useRememberSelections();
                return (react.createElement(Section$1, null,
                    react.createElement(SectionTitle, null, "Filters"),
                    react.createElement(SectionContent, null,
                        react.createElement(Checkbox, { isChecked: rememberSelections, handleClick: setRememberSelections, label: "Remember Filter Selections" }))));
            };

            const Unit = (props) => {
                const { unit } = props;
                const { visibleUnits, setVisibleUnit } = useUnits();
                const handleClick = (nextState) => {
                    setVisibleUnit(unit, nextState);
                };
                return (react.createElement(Checkbox, { capitalize: true, isChecked: visibleUnits.includes(unit), handleClick: handleClick, label: unit }));
            };

            const Units = () => {
                const { allUnits } = useUnits();
                return (react.createElement(Section$1, null,
                    react.createElement(SectionTitle, null, "Show Units"),
                    react.createElement(SectionContent, null, allUnits.length > 0 && allUnits.map((unit) => react.createElement(Unit, { key: unit, unit: unit })))));
            };

            const Global$1 = () => {
                return (react.createElement(react.Fragment, null,
                    react.createElement(Units, null),
                    react.createElement(Filters$2, null)));
            };

            const handleRGBA = (color, isLight, opacity) => {
                if (!isLight) {
                    return alpha(color, opacity);
                }
                return alpha(color, opacity || .8);
            };
            const backgroundColor = (props) => {
                const { isLight, overrideBackground, background, opacity, theme, themeColor } = props;
                if (overrideBackground) {
                    return handleRGBA(overrideBackground, isLight, opacity);
                }
                if (background) {
                    return handleRGBA(theme.baseColors[background], isLight, opacity);
                }
                if (typeof themeColor === 'string') {
                    return handleRGBA(theme.colors[themeColor].background, isLight, opacity);
                }
                if (typeof themeColor === 'undefined') {
                    if (isLight) {
                        return alpha(theme.baseColors['grey-dark'], opacity || 0.7);
                    }
                    return alpha(theme.baseColors['grey-light'], opacity || 0.7);
                }
                return handleRGBA(theme.colors[themeColor], isLight, opacity);
            };
            const Container$a = qe.div `
  display: flex;
  align-items: center;
  margin: ${({ theme: { sizes }, size }) => sizes[size || 'md'].margin};
  font-family: ${(props) => props.theme.fonts.inconsolata};
  text-transform: ${(props) => {
    if (props.uppercase) {
        return 'uppercase';
    }
    if (props.capitalize) {
        return 'capitalize';
    }
    return 'inherit';
}};
  white-space: ${({ nowrap }) => nowrap ? 'nowrap' : 'normal'};
  width: ${({ minContent }) => minContent ? 'min-content' : 'auto'};
  word-spacing: ${({ minContent }) => minContent ? 'nowrap' : 'normal'};
  font-size: ${(props) => props.theme.sizes[props.size || 'md'].fontSize};
  line-height: ${(props) => props.theme.sizes[props.size || 'md'].fontSize};
  padding: ${({ theme: { sizes }, size, extraSmallPadding }) => {
    if (extraSmallPadding) {
        return `${sizes.xs.paddingY} ${sizes.md.paddingX}`;
    }
    return sizes[size || 'md'].padding;
}};
  background-color: ${(props) => backgroundColor(props)};
  color: ${(props) => props.overrideForeground || (props.foreground ? props.theme.baseColors[props.foreground] : props.theme.colors[props.themeColor || 'secondary'].foreground)};
  border-radius: ${({ theme, size }) => theme.sizes[size || 'md'].borderRadius};
  user-select: none;

  &:hover {
    cursor: ${({ noCursor, onClick }) => !noCursor && !!onClick ? 'pointer' : 'default'};
  }
`;
            const Close = qe(IoIosCloseCircleOutline) `
  &:hover {
    cursor: pointer;
  }
`;

            const Pill = (props) => {
                const { label, size, children, onClose, ...rest } = props;
                return (react.createElement(Container$a, Object.assign({ unselectable: "on", size: size || 'md' }, rest),
                    label || children,
                    onClose &&
                        react.createElement(Close, { onClick: onClose })));
            };

            const DataContainer = qe.div `
  max-height: 200px;
  overflow-y: scroll;
  min-height: 50px;
  padding: 10px;
  border-radius: ${({ theme }) => theme.sizes.md.borderRadius};
  box-shadow: inset 0 0 4px rgba(${({ theme: { colors: { primary: { 'accent-rgb': accent } } } }) => `${accent.r}, ${accent.g}, ${accent.b},`} 0.3);
  border: 1px rgba(${({ theme: { colors: { primary: { 'accent-rgb': accent } } } }) => `${accent.r}, ${accent.g}, ${accent.b},`} 0.6) solid;
  background-color: ${(props) => props.theme.colors.primary.background};
`;
            qe.div `
  flex: 1;
`;

            const Selection = (props) => {
                const { handleClick, value, label } = props;
                const { filters } = useSettings(['filters']);
                const onClick = (nextState) => {
                    handleClick(value, nextState);
                };
                return (react.createElement(Checkbox, { handleClick: onClick, label: label, isChecked: filters.includes(value) }));
            };

            const available = [
                {
                    value: 'assignee',
                    label: 'Assignee',
                },
                {
                    value: 'sprints',
                    label: 'Sprint',
                },
                {
                    value: 'status',
                    label: 'Status',
                },
            ];
            const Filters$1 = () => {
                const update = useUpdateSettings();
                const { filters } = useSettings(['filters']);
                const onClick = (value, nextState) => {
                    if (nextState) {
                        if (!filters.includes(value)) {
                            update('filters', [...filters, value]);
                        }
                        return;
                    }
                    update('filters', filters.filter((filter) => filter !== value));
                };
                return (react.createElement(Section$1, null,
                    react.createElement(SectionTitle, null, "Filters"),
                    react.createElement(SectionContent, null,
                        react.createElement(DataContainer, null, available.map((selection) => react.createElement(Selection, { key: selection.value, handleClick: onClick, value: selection.value, label: selection.label }))))));
            };

            // THIS FILE IS AUTO GENERATED
            function BiCaretDown (props) {
              return GenIcon({"tag":"svg","attr":{"viewBox":"0 0 24 24"},"child":[{"tag":"path","attr":{"d":"M11.998 17L18.998 9 4.998 9z"}}]})(props);
            }function BiCaretRight (props) {
              return GenIcon({"tag":"svg","attr":{"viewBox":"0 0 24 24"},"child":[{"tag":"path","attr":{"d":"M9 19L17 12 9 5z"}}]})(props);
            }function BiHistory (props) {
              return GenIcon({"tag":"svg","attr":{"viewBox":"0 0 24 24"},"child":[{"tag":"path","attr":{"d":"M12 8L12 13 17 13 17 11 14 11 14 8z"}},{"tag":"path","attr":{"d":"M21.292,8.497c-0.226-0.535-0.505-1.05-0.829-1.529c-0.322-0.478-0.691-0.926-1.099-1.333S18.51,4.86,18.032,4.537 c-0.482-0.326-0.997-0.604-1.528-0.829c-0.545-0.23-1.114-0.407-1.69-0.525c-1.181-0.243-2.444-0.244-3.626,0 c-0.579,0.118-1.147,0.295-1.69,0.524c-0.531,0.225-1.045,0.503-1.529,0.83C7.492,4.859,7.043,5.229,6.636,5.636 C6.229,6.043,5.859,6.492,5.537,6.968C5.211,7.452,4.932,7.966,4.708,8.496c-0.23,0.544-0.407,1.113-0.525,1.69 C4.062,10.778,4,11.388,4,12c0,0.008,0.001,0.017,0.001,0.025H2L5,16l3-3.975H6.001C6.001,12.017,6,12.008,6,12 c0-0.477,0.048-0.952,0.142-1.412c0.092-0.449,0.229-0.89,0.408-1.313c0.174-0.412,0.391-0.813,0.645-1.188 C7.445,7.716,7.733,7.368,8.05,7.05s0.666-0.605,1.036-0.855c0.376-0.254,0.777-0.471,1.19-0.646 c0.421-0.179,0.863-0.316,1.313-0.408c0.919-0.189,1.904-0.188,2.823,0c0.447,0.092,0.89,0.229,1.313,0.408 c0.413,0.174,0.813,0.392,1.188,0.644c0.37,0.251,0.72,0.539,1.037,0.856c0.317,0.316,0.604,0.665,0.855,1.037 c0.252,0.372,0.469,0.772,0.645,1.189c0.178,0.417,0.314,0.858,0.408,1.311C19.952,11.049,20,11.524,20,12 s-0.048,0.951-0.142,1.41c-0.094,0.455-0.23,0.896-0.408,1.314c-0.176,0.416-0.393,0.815-0.646,1.189 c-0.25,0.371-0.537,0.72-0.854,1.036c-0.317,0.317-0.667,0.605-1.036,0.855c-0.376,0.253-0.775,0.471-1.189,0.646 c-0.423,0.179-0.865,0.316-1.313,0.408c-0.918,0.188-1.902,0.189-2.823,0c-0.449-0.092-0.89-0.229-1.313-0.408 c-0.412-0.174-0.813-0.391-1.188-0.645c-0.371-0.25-0.719-0.538-1.037-0.855l-1.414,1.414c0.407,0.408,0.855,0.777,1.332,1.099 c0.483,0.326,0.998,0.605,1.528,0.829c0.544,0.23,1.113,0.407,1.69,0.525C11.778,20.938,12.388,21,13,21 c0.612,0,1.223-0.062,1.813-0.183c0.577-0.118,1.146-0.294,1.69-0.524c0.532-0.225,1.047-0.504,1.531-0.831 c0.476-0.322,0.923-0.691,1.33-1.098s0.776-0.855,1.098-1.331c0.325-0.48,0.604-0.995,0.83-1.529 c0.228-0.538,0.405-1.106,0.525-1.692C21.938,13.22,22,12.61,22,12s-0.062-1.22-0.183-1.814 C21.697,9.602,21.52,9.034,21.292,8.497z"}}]})(props);
            }

            const TreeContainer = qe.ul `
  list-style-type: none;
  margin: 0;
  overflow-y: hidden;
`;
            const Wrapper$3 = qe.div `
  overflow: hidden;
`;
            const ItemChildren = qe.div `
  padding: ${(props) => props.hasPadding ? props.theme.sizes.lg.padding : '0'} 0;
`;
            const TreeWrapper = qe.div `
  overflow: scroll;
  max-height: 100px;
  background-color: ${(props) => props.theme.colors[props.isEven ? 'tertiary' : 'primary'].background};
`;
            const ChildTitle = qe.div `
  font-size: ${(props) => props.theme.sizes.md.fontSize};
  color: ${(props) => props.theme.colors.tertiary.foreground};
  margin-bottom: 6px;
  display: flex;
  align-items: center;
  padding-left: 4px;
`;
            qe(ChildTitle) `
  padding-left: 0;
`;
            const TreeWrapperContainer = qe.div `
  flex: 1;
  /* overflow-y: hidden; */
  margin: 0 0 0 ${(props) => props.hasLeftMenu ? '8px' : '0'};
`;
            qe.div `
  margin: 0 8px 0 0;
`;
            qe(IoMdHelpCircle) `
  margin-left: ${({ theme }) => theme.sizes.md.marginX};

  &:hover {
    cursor: help;
  }
`;
            qe.div `
  padding: 0 2px;
`;
            qe.div `
  display: flex;
`;
            const ChildWrapper = qe.div `
  display: flex;
  padding: 8px ${(props) => props.noBorder ? '0' : '8px'};
  /* overflow-y: hidden; */
  background-color: ${(props) => props.theme.colors[props.isEven ? 'tertiary' : 'primary'].background};
  box-shadow: ${(props) => {
    const { noBorder, theme: { colors: { tertiary, primary } } } = props;
    if (noBorder) {
        return 'inherit';
    }
    const accent = props.isEven ? tertiary['accent-rgb'] : primary['accent-rgb'];
    return `inset 0 0 8px rgba(${accent.r}, ${accent.g}, ${accent.b}, 0.3)`;
}};
  border: ${(props) => {
    const { noBorder, theme: { colors: { tertiary, primary } } } = props;
    if (noBorder) {
        return 'inherit';
    }
    const accent = props.isEven ? tertiary['accent-rgb'] : primary['accent-rgb'];
    return `1px rgba(${accent.r}, ${accent.g}, ${accent.b}, 0.9) solid`;
}};
`;
            const CaretRight = qe(BiCaretRight) `
  padding-top: 2px;
  display: block;
  height: 100%;

  &:hover {
    cursor: pointer;
  }
`;
            const CaretDown = qe(BiCaretDown) `
  padding-top: 2px;
  display: block;
  height: 100%;

  &:hover {
    cursor: pointer;
  }
`;
            const CaretHidden = qe(CaretRight) `
  visibility: hidden;

  &:hover {
    cursor: default;
  }
`;
            const Break = qe.div `
  height: 4px;
  margin-top: 4px;
  border-top: 1px ${getThemeColor('tertiary', 'background')} solid;
`;
            const Item$1 = qe.div `
  display: flex;
  position: relative;
  width: min-content;
  align-items: center;
  white-space: nowrap;

  &:hover {
    cursor: ${(props) => props.isClickable ? 'pointer' : 'inherit'};
  }
`;
            const ItemContainer = qe.li `
  margin-left: ${(props) => props.level * 8}px;
  font-style: ${(props) => props.italics ? 'italic' : 'inherit'};
`;
            const BlankContainer = qe.div `
  margin-left: ${(props) => props.level * 8}px;
  font-style: ${(props) => props.italics ? 'italic' : 'inherit'};
`;

            const ChildrenLoading = (props) => {
                const { mayHaveChildren, level, loadingMessage, noChildrenMessage, hasNoChildren } = props;
                if (!mayHaveChildren) {
                    return null;
                }
                if (hasNoChildren) {
                    return (react.createElement(ChildWrapper, { noBorder: true, isEven: level % 2 === 0 },
                        react.createElement(BlankContainer, { italics: true, level: level }, noChildrenMessage || 'No Results Found')));
                }
                return (react.createElement(ChildWrapper, { noBorder: true, isEven: level % 2 === 0 },
                    react.createElement(BlankContainer, { italics: true, level: level }, loadingMessage || 'Loading')));
            };

            const Caret = (props) => {
                const { hasChildren, mayHaveChildren, label, isActive, onSelect, isSelected } = props;
                if (!hasChildren && !mayHaveChildren) {
                    if (onSelect) {
                        return (react.createElement(Checkbox, { handleClick: onSelect, isChecked: isSelected, label: label }));
                    }
                    return (react.createElement(react.Fragment, null,
                        react.createElement(CaretHidden, null),
                        label));
                }
                if (isActive) {
                    return (react.createElement(react.Fragment, null,
                        react.createElement(CaretDown, null),
                        label));
                }
                return (react.createElement(react.Fragment, null,
                    react.createElement(CaretRight, null),
                    label));
            };

            const Subtext = (props) => {
                const { subtext } = props;
                if (Array.isArray(subtext)) {
                    return (react.createElement(react.Fragment, null, subtext.map((text) => react.createElement(Pill, { nowrap: true, key: text.label, capitalize: true, size: "xs", foreground: text.color?.color || 'white', background: text.color?.background || 'grey-dark' }, text.label))));
                }
                return (react.createElement(Pill, { nowrap: true, capitalize: true, size: "xs", foreground: subtext.color?.color || 'white', background: subtext.color?.background || 'grey-dark' }, subtext.label));
            };

            const Item = (props) => {
                const { item, level, isRoot, hasOnSelect, mayHaveChildren, handleOnClick, handleOnSelect, path, children } = props;
                const { isSelected, label, childItems, breakAfter, id, loading, subtext } = item;
                const [isActive, setIsActive] = react.useState(!!isSelected && !!mayHaveChildren);
                const [itemIsSelected, setItemIsSelected] = react.useState(isSelected || false);
                const currentPath = [...path, id];
                react.useEffect(() => {
                    if (isSelected !== itemIsSelected) {
                        setItemIsSelected(isSelected || false);
                    }
                }, [isSelected]);
                const toggle = (force) => {
                    const change = typeof force === 'undefined' ? !isActive : force;
                    if (childItems || loading?.mayHaveChildren || typeof force !== 'undefined') {
                        setIsActive(change);
                    }
                };
                const selectItem = () => {
                    setItemIsSelected(!itemIsSelected);
                    handleOnSelect(currentPath, item.id);
                };
                const caretSelect = hasOnSelect ? selectItem : undefined;
                const itemClick = (event) => {
                    event.preventDefault();
                    handleOnClick(currentPath, !isActive);
                    if (caretSelect && !childItems && !loading?.mayHaveChildren) {
                        selectItem();
                        return;
                    }
                    toggle();
                };
                return (react.createElement(ItemContainer, { level: level },
                    react.createElement(Item$1, { onClick: itemClick, isClickable: hasOnSelect || !!childItems },
                        react.createElement(Caret, { mayHaveChildren: loading?.mayHaveChildren, isSelected: itemIsSelected, onSelect: caretSelect, isActive: !!isActive, hasChildren: !!childItems, label: label }),
                        subtext && react.createElement(Subtext, { subtext: subtext })),
                    react.createElement(ItemChildren, { hasPadding: !isRoot && !!isActive && !isSelected }, isActive && children),
                    breakAfter &&
                        react.createElement(Break, null)));
            };

            const Children = (props) => {
                const { items, title, loading, childrenNodes, noChildrenMessage, loadingMessage, isRoot, level, path, handleOnClick, handleOnSelect, hasOnSelect } = props;
                if (items.length > 0) {
                    return (react.createElement(TreeWrapperContainer, null,
                        title &&
                            react.createElement(ChildTitle, null, title),
                        react.createElement(TreeWrapper, { isEven: level % 2 === 0 }, childrenNodes ?
                            items.map((child) => react.createElement(react.Fragment, null, child))
                            :
                                react.createElement(Tree$1, { path: path, handleOnSelect: handleOnSelect, hasOnSelect: hasOnSelect, handleOnClick: handleOnClick, level: level + 1, items: items || [] }))));
                }
                return (react.createElement(ChildrenLoading, { level: level, mayHaveChildren: isRoot || loading?.mayHaveChildren, loadingMessage: loadingMessage, noChildrenMessage: noChildrenMessage, isLoading: loading?.isLoading, hasNoChildren: loading?.hasNoChildren }));
            };
            const Tree$1 = (props) => {
                const { items, level, isRoot, hasOnSelect, noChildrenMessage, loadingMessage, handleOnSelect, handleOnClick, path } = props;
                const currentPath = (id) => [...path, id];
                return (react.createElement(TreeContainer, null,
                    items && items.map((item, index) => react.createElement(Item, { path: path, handleOnSelect: handleOnSelect, key: index, index: index, isRoot: !!isRoot, item: item, hasOnSelect: hasOnSelect, handleOnClick: handleOnClick, level: level, mayHaveChildren: item.loading?.mayHaveChildren || !!(item.childItems && item.childItems.length > 0) },
                        react.createElement(ChildWrapper, { isEven: level % 2 === 0 },
                            item.childItems &&
                                react.createElement(Children, { items: item.childItems, handleOnClick: handleOnClick, handleOnSelect: handleOnSelect, hasOnSelect: hasOnSelect, loading: item.loading, childrenNodes: item.childrenNodes, title: item.childItemsTitle, isRoot: isRoot, loadingMessage: loadingMessage, level: level, noChildrenMessage: noChildrenMessage, path: currentPath(item.id) }),
                            item.rightChildItems &&
                                react.createElement(Children, { items: item.rightChildItems, handleOnClick: handleOnClick, handleOnSelect: handleOnSelect, hasOnSelect: hasOnSelect, loading: item.loading, childrenNodes: item.childrenNodes, title: item.rightChildItemsTitle, isRoot: isRoot, level: level, noChildrenMessage: noChildrenMessage, path: currentPath(item.id) })))),
                    items.length === 0 && isRoot && loadingMessage &&
                        react.createElement(ChildrenLoading, { level: 1, mayHaveChildren: true, loadingMessage: loadingMessage, noChildrenMessage: noChildrenMessage, isLoading: true })));
            };

            const Tree = (props) => {
                const { onSelect, onClick, items, loadingMessage, ...rest } = props;
                const [childItems, setChildItems] = react.useState(items || []);
                react.useEffect(() => {
                    setChildItems(items);
                }, [items]);
                const findNode = (itemIdPath, nodes) => {
                    const path = [...itemIdPath];
                    let node = nodes;
                    while (path.length > 1 && node && node.length > 0) {
                        const currentPath = path.shift();
                        const children = node.find((child) => child.id === currentPath);
                        const rightItems = children.rightChildItems ? children.rightChildItems : [];
                        node = [...children.childItems, ...rightItems];
                    }
                    return node;
                };
                const handleOnSelect = (itemIdPath, id) => {
                    if (onSelect) {
                        const node = findNode(itemIdPath, childItems);
                        if (node) {
                            const index = node.findIndex((i) => i.id === id);
                            const nextStateSelected = !node[index].isSelected;
                            onSelect(itemIdPath, nextStateSelected);
                        }
                    }
                    const nextChildItems = fn(childItems, (draft) => {
                        const node = findNode(itemIdPath, draft);
                        if (node) {
                            const index = node.findIndex((i) => i.id === id);
                            node[index].isSelected = !node[index].isSelected;
                        }
                    });
                    setChildItems(nextChildItems);
                };
                const handleOnClick = (itemIdPath, newStateOpen) => {
                    if (onClick) {
                        onClick(itemIdPath, newStateOpen);
                    }
                };
                return (react.createElement(Wrapper$3, null,
                    react.createElement(Tree$1, Object.assign({ isRoot: true, loadingMessage: loadingMessage, handleOnClick: handleOnClick, items: childItems, hasOnSelect: !!onSelect, level: 0, path: [], handleOnSelect: handleOnSelect }, rest))));
            };

            const rightChildItems = [
                {
                    id: 'onlyActive',
                    label: 'Only issues in active sprint',
                },
                {
                    id: 'onlyAssigned',
                    label: 'Only assigned issues',
                },
            ];
            const Projects = () => {
                const { updateWatched, projects: { watchedProjects, watches, all, }, } = useProjects();
                const [loadingKeys, setLoadingKeys] = react.useState([]);
                const onSelect = (path, nextInclude) => {
                    const [projectId, id] = path;
                    const idIsStatus = rightChildItems.findIndex((item) => item.id === id) === -1;
                    updateWatched({
                        projectId,
                        id,
                        nextInclude,
                        idIsStatus,
                    });
                };
                const onClick = ([projectKey]) => {
                    setLoadingKeys([...loadingKeys, projectKey]);
                    chrome$1.runtime.send({ type: 'jira/STATUSES_FETCH', projectKey });
                };
                const buildChildren = (project) => {
                    const duplicates = new Map();
                    const projectWatches = watches[project.id];
                    return project.statuses
                        .map((status) => {
                        const amount = duplicates.get(status.issueType) || 0;
                        duplicates.set(status.issueType, amount + 1);
                        return status;
                    })
                        .sort((a, b) => {
                        const aName = a.issueType.toUpperCase();
                        const bName = b.issueType.toUpperCase();
                        if (aName > bName) {
                            return 1;
                        }
                        if (aName < bName) {
                            return -1;
                        }
                        return 0;
                    })
                        .map((status) => {
                        const count = duplicates.get(status.issueType);
                        const subtext = count && count > 1 ?
                            {
                                label: status.issueType,
                                color: {
                                    color: 'black',
                                    background: 'green',
                                },
                            }
                            : undefined;
                        return {
                            isSelected: projectWatches && projectWatches.statuses.includes(status.id) ? true : false,
                            label: status.name,
                            id: status.id,
                            subtext,
                        };
                    })
                        .reduce((acc, cur) => {
                        if (cur.subtext) {
                            const same = acc.find((item) => item.label === cur.label);
                            if (same && same.subtext) {
                                if (Array.isArray(same.subtext)) {
                                    if (Array.isArray(cur.subtext)) {
                                        same.subtext.push(...cur.subtext);
                                        return acc;
                                    }
                                    same.subtext.push(cur.subtext);
                                    return acc;
                                }
                                if (Array.isArray(cur.subtext)) {
                                    same.subtext = [same.subtext, ...cur.subtext];
                                    return acc;
                                }
                                same.subtext = [same.subtext, cur.subtext];
                                return acc;
                            }
                        }
                        acc.push(cur);
                        return acc;
                    }, []);
                };
                const buildRightChildren = (project) => rightChildItems.map((item) => ({
                    ...item,
                    isSelected: watches[project.id]?.filters[item.id],
                }));
                const treeItems = (projectKind) => projectKind.map((project) => ({
                    label: project.name,
                    subtext: {
                        label: project.key,
                        color: {
                            color: 'green',
                            background: 'grey-dark',
                        },
                    },
                    loading: {
                        isLoading: loadingKeys.includes(project.key) && project.statuses.length === 0,
                        mayHaveChildren: true,
                    },
                    childItemsTitle: react.createElement(react.Fragment, null,
                        react.createElement("div", null, "Statuses"),
                        react.createElement(InfoTooltip, { text: "Follow a project for all sprints for a given status" })),
                    rightChildItemsTitle: react.createElement(react.Fragment, null,
                        react.createElement("div", null, "Filters"),
                        react.createElement(InfoTooltip, { text: "Add filters to only see certain issues" })),
                    id: project.id,
                    childItems: buildChildren(project),
                    rightChildItems: project.statuses.length > 0 && watches[project.id]?.statuses.length > 0 ? buildRightChildren(project) : undefined,
                }));
                return (react.createElement(react.Fragment, null,
                    react.createElement(Section$1, null,
                        react.createElement(SectionTitle, null, "Watched Projects"),
                        react.createElement(SectionContent, null,
                            react.createElement(DataContainer, null,
                                react.createElement(Tree, { onClick: onClick, items: treeItems(watchedProjects), onSelect: onSelect })))),
                    react.createElement(Section$1, null,
                        react.createElement(SectionTitle, null, "Other Projects"),
                        react.createElement(SectionContent, null,
                            react.createElement(DataContainer, null,
                                react.createElement(Tree, { onClick: onClick, items: treeItems(all), onSelect: onSelect }))))));
            };

            const Main$1 = () => {
                const { logout } = useAuthStatus();
                return (react.createElement(react.Fragment, null,
                    react.createElement(Logout, { handleClickLogout: logout }),
                    react.createElement(Filters$1, null),
                    react.createElement(Projects, null)));
            };

            const Jira$1 = () => {
                const { authStatus } = useAuthStatus();
                if (authStatus === 'is') {
                    return (react.createElement(Main$1, null));
                }
                return react.createElement(Login$1, { unit: "jira" });
            };

            qe.div `
  background-color: ${(props) => props.theme.colors.secondary.background};
  color: ${(props) => props.theme.colors.secondary.foreground};
  border-radius: 2px;
  padding: 2px;
  box-shadow: 0 0 2px ${(props) => props.theme.colors.secondary.accent};

  &:hover {
    cursor: ${(props) => props.onClick ? 'pointer' : 'inherit'};
  }
`;
            const CenterTitle = qe.div `
  flex: 1;
  text-align: left;
  font-size: ${(props) => props.theme.sizes.sm.fontSize};
  padding-left: ${({ theme }) => theme.sizes.xs.paddingX};;
  margin-top: -6px;
  align-self: center;
  justify-self: center;
  top: 2px;
  font-family: ${(props) => props.theme.fonts.heebo};
`;
            qe.div `
  border-radius: 2px;
  padding: 2px;
  color: #000000;
`;
            const Heading = qe.div `
  display: flex;
  width: 100%;
  justify-content: space-between;
  margin-bottom: 2px;
`;
            const Content$2 = qe.div `
  margin: ${({ theme }) => theme.sizes.xl.margin};
  font-size: ${({ contentSize, theme: { sizes } }) => sizes[contentSize || 'lg'].fontSize};
  font-family: ${(props) => props.theme.fonts.manrope};
  font-weight: 600;
  display: ${({ contentDisplay }) => contentDisplay || 'inherit'};
  grid-template-columns: ${({ contentColumns }) => contentColumns ?
    Array.from({ length: contentColumns }).map(() => 'auto ') :
    'auto'};
`;
            const Footer = qe.div `
  display: flex;
  align-items: baseline;
  width: 100%;
  justify-content: space-between;
`;
            const Title$2 = qe.div `
  padding: 2px 4px;
  font-size: ${(props) => props.theme.sizes.lg.fontSize};
`;
            const Container$9 = qe.div `
  border-radius: ${({ theme }) => theme.sizes.xxl.borderRadius};
  box-shadow: ${({ theme: { colors: { secondary: { 'accent-rgb': { r, g, b } } } } }) => {
    const lead = `rgba(${r}, ${g}, ${b},`;
    const tail = ')';
    return `0 0 2px ${lead}0.9${tail}, 0 0 4px ${lead}0.5${tail}, 0 0 8px ${lead}0.2${tail}`;
}};
  border: 1px ${(props) => props.theme.colors.primary.background} solid;
  transition: height 0.5s ease-in-out;
  color: ${(props) => props.theme.colors.tertiary.foreground};
  background-color: ${({ theme, isDisabled }) => isDisabled ? theme.colors.primary.background : theme.colors.tertiary.background};
  margin: 10px 4px;
  padding: ${({ theme }) => theme.sizes.xl.padding};
  width: 100%;
`;
            const EndFooter$1 = qe.div `
  justify-self: flex-end;
`;
            const EndFooterExpand = qe.div `
  font-size: ${(props) => props.theme.sizes.sm.fontSize};

  &:hover {
    cursor: pointer;
  }
`;

            const EndFooter = (props) => {
                const { endFooter } = props;
                const [endFooterExpanded, setEndFooterExpanded] = react.useState(false);
                const clickFooter = () => {
                    if (endFooter?.expand) {
                        setEndFooterExpanded(!endFooterExpanded);
                    }
                };
                return (react.createElement(EndFooter$1, null, endFooterExpanded ?
                    react.createElement(EndFooterExpand, { onClick: clickFooter }, endFooter.expand)
                    :
                        react.createElement(react.Fragment, null, endFooter.text)));
            };

            const isEndTitleObject = (unknown) => !!unknown && !!unknown.text;
            const endTitleColor = (endTitle) => {
                if (endTitle.color?.startsWith('#')) {
                    return endTitle.color;
                }
                if (endTitle.color) {
                    return `#${endTitle.color}`;
                }
                return '#DDDDDD';
            };
            const EndTitle = (props) => {
                const { endTitle } = props;
                const onClick = () => {
                    if (isEndTitleObject(endTitle) && endTitle.handleClick) {
                        endTitle.handleClick(endTitle.text);
                    }
                };
                if (isEndTitleObject(endTitle)) {
                    return (react.createElement(Pill, { onClick: onClick, uppercase: true, size: "md", foreground: "black", overrideBackground: endTitleColor(endTitle), label: endTitle.text }));
                }
                return (react.createElement(react.Fragment, null, endTitle));
            };

            const Title$1 = (props) => {
                const { title } = props;
                if (title.pill) {
                    return (react.createElement(Title$2, null,
                        react.createElement(Pill, { onClick: title.onClick, themeColor: "secondary", label: title.text })));
                }
                return (react.createElement(Title$2, null, title.text));
            };

            const Card = react.forwardRef((props, ref) => {
                const { children, isDisabled, title, contentSize, contentDisplay, contentColumns, centerTitle, endTitle, footer, endFooter } = props;
                return (react.createElement(Container$9, { ref: ref, isDisabled: isDisabled },
                    react.createElement(Heading, null,
                        title && react.createElement(Title$1, { title: title }),
                        centerTitle &&
                            react.createElement(CenterTitle, null, centerTitle),
                        react.createElement(EndTitle, { endTitle: endTitle })),
                    react.createElement(Content$2, { contentColumns: contentColumns, contentDisplay: contentDisplay, contentSize: contentSize }, children),
                    react.createElement(Footer, null,
                        footer || '',
                        endFooter && react.createElement(EndFooter, { endFooter: endFooter }))));
            });

            const Delete = (props) => {
                const { link, type } = props;
                const deleteLink = useDeleteLink();
                const handleDelete = () => {
                    if (deleteLink) {
                        deleteLink(link.id);
                    }
                };
                if (type === 'standard') {
                    return null;
                }
                return (react.createElement(Button, { onClick: handleDelete, size: "xs" }, "Delete"));
            };

            qe.div `
  max-height: 200px;
  overflow-y: scroll;
  min-height: 50px;
  padding: 10px;
  box-shadow: inset 0 0 4px rgba(${({ theme: { colors: { primary: { 'accent-rgb': accent } } } }) => `${accent.r}, ${accent.g}, ${accent.b},`} 0.3);
  border: 1px rgba(${({ theme: { colors: { primary: { 'accent-rgb': accent } } } }) => `${accent.r}, ${accent.g}, ${accent.b},`} 0.6) solid;
  background-color: ${(props) => props.theme.colors.primary.background};
`;
            const Options$2 = qe.div `
  display: grid;
  position: relative;
  flex-direction: column;
  grid-template-columns: auto 1fr;
  grid-template-rows: auto;
  column-gap: ${({ theme }) => theme.sizes.md.marginX};;
  align-items: center;
`;
            const Option = qe.div `
  align-items: center;
  position: relative;
  align-items: center;
  display: flex;
  top: 0;
`;
            const OptionTitle = qe.label `
  font-weight: 200;
  font-size: ${({ theme }) => theme.sizes.sm.fontSize};
`;
            const OptionSwitch = qe.div `
  justify-self: left;
`;

            const Container$8 = qe.label `
  position: relative;
  display: block;
  min-width: 45px;
  height: 26px;
  white-space: nowrap;
`;
            const Image$1 = qe.img `
  height: 18px;
  width: 18px;
  display: block;
`;
            const Input = qe.input `
  opacity: 0;
  width: 0;
  height: 0;
`;
            const Options$1 = qe.span `
  position: relative;
  height: 36px;
  align-items: center;
  display: flex;
  font-family: ${({ theme: { fonts } }) => fonts.inconsolata};

  &:hover {
    cursor:${({ isDisabled }) => isDisabled ? 'default' : 'pointer'};
  }
`;
            const LeftOption = qe.div `
  color: ${({ theme: { colors } }) => colors.primary.foreground};
  margin: -10px 26px 0 12px;
  user-select: none;

  &:hover {
    cursor:${({ isDisabled }) => isDisabled ? 'default' : 'pointer'};
  }
`;
            const RightOption = qe.div `
  color: ${({ theme: { colors } }) => colors.primary.foreground};
  margin: -10px 12px 0 26px;
  user-select: none;

  &:hover {
    cursor:${({ isDisabled }) => isDisabled ? 'default' : 'pointer'};
  }
`;
            const Slider = qe.span `
  position: absolute;
  cursor: pointer;
  top: 0;
  left: 0;
  right: 0;
  bottom: 0;
  background-color: ${({ isBackgroundReverse, theme: { colors: { primary, tertiary } } }) => {
    return isBackgroundReverse ? tertiary.background : alpha(primary.background, 0.6);
}};
  border-style: solid;
  border-width: 1px;
  border-color: ${({ theme: { colors: { primary: { 'accent-rgb': { r, g, b } } } } }) => `rgba(${r}, ${g}, ${b}, 0.4)`};
  box-shadow: ${({ theme: { colors: { primary: { 'accent-rgb': { r, g, b } } } } }) => {
    const lead = `rgba(${r}, ${g}, ${b},`;
    const tail = ')';
    return `inset 0 0 2px ${lead}0.3${tail}, inset 0 0 4px ${lead}0.1${tail}`;
}};
  transition: .4s;
  border-radius: 26px;


  &:hover {
    cursor:${({ isDisabled }) => isDisabled ? 'default' : 'pointer'};
  }


  &::before {
    position: absolute;
    content: "";
    height: 18px;
    width: 18px;
    left: calc(16px + ${({ leftOptionWidth }) => leftOptionWidth}px);
    bottom: 3px;
    background-color: ${({ isDisabled, theme: { baseColors } }) => isDisabled ? alpha(baseColors.white, 0.4) : baseColors.white};
    transition: .4s;
    border-radius: 50%;
    transform: ${({ isChecked }) => isChecked ? 'translateX(26px)' : 'inherit'};

    &:hover {
      cursor:${({ isDisabled }) => isDisabled ? 'default' : 'pointer'};
    }
  }
`;

            function Switch(props) {
                const { options, isDisabled, isBackgroundReverse, halfSize, onChange, value } = props;
                const [leftOption, rightOption] = options;
                const inputRef = react.useRef(null);
                const rightOptionRef = react.useRef(null);
                const leftOptionRef = react.useRef(null);
                const [isChecked, setIsChecked] = react.useState(rightOption.value === value);
                const [isFocused, setIsFocused] = react.useState(false);
                const [leftOptionWidth, setLeftOptionWidth] = react.useState(18);
                const [rightOptionWidth, setRightOptionWidth] = react.useState(18);
                react.useEffect(() => {
                    if (inputRef.current) {
                        inputRef.current.addEventListener('focus', focusListener);
                        inputRef.current.addEventListener('blur', blurListener);
                    }
                    return () => {
                        if (inputRef.current) {
                            inputRef.current.removeEventListener('focus', focusListener);
                            inputRef.current.removeEventListener('blur', blurListener);
                        }
                    };
                }, [inputRef]);
                react.useEffect(() => {
                    if (!rightOption.isIcon && rightOptionRef.current) {
                        setRightOptionWidth(rightOptionRef.current.offsetWidth);
                    }
                }, [rightOptionRef, rightOption]);
                react.useEffect(() => {
                    if (!leftOption.isIcon && leftOptionRef.current) {
                        setLeftOptionWidth(leftOptionRef.current.offsetWidth);
                    }
                }, [leftOptionRef, leftOption]);
                const focusListener = () => {
                    setIsFocused(true);
                };
                const blurListener = () => {
                    setIsFocused(true);
                };
                const handleChange = (event) => {
                    if (isDisabled) {
                        return;
                    }
                    const { checked } = event.target;
                    setIsChecked(checked);
                    if (onChange) {
                        const value = checked ? rightOption.value : leftOption.value;
                        onChange(value);
                    }
                };
                return (react.createElement(Container$8, { halfSize: halfSize },
                    react.createElement(Slider, { isDisabled: isDisabled, isBackgroundReverse: isBackgroundReverse, isChecked: isChecked, isFocused: isFocused, rightOptionWidth: rightOptionWidth, leftOptionWidth: leftOptionWidth }),
                    react.createElement(Options$1, { isDisabled: isDisabled },
                        react.createElement(LeftOption, { isChecked: isChecked, isDisabled: isDisabled, ref: leftOptionRef }, leftOption.isIcon ?
                            react.createElement(Image$1, { src: leftOption.label })
                            :
                                react.createElement(react.Fragment, null, leftOption.label || '')),
                        react.createElement(RightOption, { isChecked: isChecked, isDisabled: isDisabled, ref: rightOptionRef }, rightOption.label || '')),
                    react.createElement(Input, { type: "checkbox", ref: inputRef, onChange: handleChange })));
            }

            const ButtonLabel = react.forwardRef((props, ref) => {
                const { link, update } = props;
                const { standard } = useLinks();
                const settings = link || {};
                const [label, setLabel] = react.useState(settings.buttonChoice || 'icon');
                const onChangeButtonLabel = (value) => {
                    setLabel(value);
                    update('buttonChoice', value);
                };
                const config = standard.find((item) => item.id === link.id);
                if (!config) {
                    return null;
                }
                return (react.createElement(react.Fragment, null,
                    react.createElement(OptionTitle, { ref: ref }, "Button"),
                    react.createElement(OptionSwitch, null,
                        react.createElement(Switch, { halfSize: true, isDisabled: !config.enabled, onChange: onChangeButtonLabel, value: label, options: [
                                {
                                    value: 'icon',
                                    label: config.svg,
                                    isIcon: true,
                                },
                                {
                                    value: 'letter',
                                    label: 'Letters',
                                },
                            ] }))));
            });

            const evaluateValue$2 = (value) => {
                if (value.length === 0) {
                    return 'URL is required';
                }
                return undefined;
            };
            const modifyChange$3 = (value) => value;
            var url = {
                evaluateValue: evaluateValue$2,
                modifyChange: modifyChange$3,
            };

            const TooltipPart = qe.span `
  color: ${({ theme }) => theme.baseColors.red};
  font-family: ${({ theme }) => theme.fonts.inconsolata};
  text-transform: uppercase;
  font-weight: 800;
  font-size: ${({ theme }) => theme.sizes.lg.fontSize};
`;
            const TooltipNotPart = qe.span `
  color: ${({ theme }) => theme.baseColors.black};
  font-size: ${({ theme }) => theme.sizes.md.fontSize};
`;

            const Tooltip$1 = (props) => {
                const { parts } = props;
                return (react.createElement(react.Fragment, null, parts.map((part) => part.isPath ?
                    react.createElement(TooltipPart, { key: part.text }, part.text)
                    :
                        react.createElement(TooltipNotPart, { key: part.text }, part.text))));
            };

            const Generic = react.forwardRef((props, ref) => {
                const { defaultValue, generic, handleChange, handleLoseFocus, isDisabled, label, tooltipParts, onlyValidChange, } = props;
                const { evaluateChange, evaluateValue, maxSize, modifyChange, } = generic || {};
                const tooltip = tooltipParts || [];
                const force = useForceUpdate();
                react.useEffect(() => {
                    force.update();
                }, []);
                const [value, setValue] = react.useState(defaultValue || '');
                const [validInput, setValidInput] = react.useState();
                react.useImperativeHandle(ref, () => ({
                    clearValue: () => {
                        setValue('');
                    },
                    checkValidValue: () => {
                        if (evaluateValue) {
                            const result = evaluateValue(value);
                            setValidInput(result);
                            if (!result) {
                                return value;
                            }
                            return false;
                        }
                        return value;
                    },
                }));
                const onReactChange = (value) => {
                    run(value, handleChange);
                };
                const run = (nextValue, cb) => {
                    const cleanValue = modifyChange ? modifyChange(nextValue) : nextValue;
                    if (evaluateChange) {
                        const result = evaluateChange(cleanValue);
                        if (typeof result !== 'undefined') {
                            setValidInput(result);
                            if (!onlyValidChange) {
                                setValue(cleanValue);
                                if (cb) {
                                    cb(cleanValue);
                                }
                                return;
                            }
                            return;
                        }
                    }
                    setValidInput(undefined);
                    setValue(cleanValue);
                    if (cb) {
                        cb(cleanValue);
                    }
                    return false;
                };
                const onLoseFocus = () => {
                    run(value, handleLoseFocus);
                };
                return (react.createElement(Input$1, { noMargin: true, maxSize: maxSize, isDisabled: isDisabled, ifDisabledColorSteady: true, value: value, isInvalid: !!validInput, handleLoseFocus: onLoseFocus, onReactChange: onReactChange, containerPosition: "left", label: label, forceRerender: true, invalidText: validInput, afterNode: tooltip.length > 0 && react.createElement(InfoTooltip, { text: react.createElement(Tooltip$1, { parts: tooltip }) }) }));
            });

            const evaluateChange$2 = (value) => {
                if (value.length > 3) {
                    return 'Maximum 3 characters';
                }
                return undefined;
            };
            const modifyChange$2 = (value) => value.toUpperCase();
            const maxSize$1 = 3;
            var label = {
                evaluateChange: evaluateChange$2,
                modifyChange: modifyChange$2,
                maxSize: maxSize$1,
            };

            const evaluateValue$1 = (value) => {
                if (value.length === 0) {
                    return 'Label is required';
                }
                return undefined;
            };
            const evaluateChange$1 = (configs, config) => (value) => {
                if (value.length > 1) {
                    return 'Maximum 1 character';
                }
                const isTaken = configs.find((c) => c.hotkey === value);
                if (isTaken && value.length > 0 && config.id !== isTaken.id) {
                    return `${value} is already used in ${isTaken.id}`;
                }
                return undefined;
            };
            const modifyChange$1 = (value) => value.toUpperCase();
            const maxSize = 1;
            var hotkey = {
                evaluateValue: evaluateValue$1,
                evaluateChange: evaluateChange$1,
                modifyChange: modifyChange$1,
                maxSize,
            };

            const evaluateValue = (value) => {
                if (value.length === 0) {
                    return 'URL is required';
                }
                return undefined;
            };
            const evaluateChange = () => undefined;
            const modifyChange = (value) => value;
            var path = {
                evaluateValue,
                evaluateChange,
                modifyChange,
            };

            var inputs = {
                Generic,
                url,
                hotkey,
                label,
                path,
            };

            const Hotkey$1 = (props) => {
                const inputRef = react.useRef(null);
                const { update, link } = props;
                const { all } = useLinks();
                const { hotkey, enabled } = link;
                const { hotkey: input } = inputs;
                react.useEffect(() => {
                    if (!enabled && hotkey && inputRef.current) {
                        inputRef.current.clearValue();
                        update('hotkey', undefined);
                    }
                }, [link, inputRef]);
                const onChange = (value) => {
                    update('hotkey', value);
                };
                return (react.createElement(inputs.Generic, { isDisabled: !link.enabled, ref: inputRef, defaultValue: hotkey, label: "Hotkey", generic: {
                        ...input,
                        evaluateChange: input.evaluateChange(all, link),
                    }, handleChange: onChange, onlyValidChange: true }));
            };

            const Label$2 = (props) => {
                const { link, update, type } = props;
                const { label } = link;
                const onChange = (value) => {
                    update('label', value);
                };
                const isAllowed = isStandardConfig(type) ? link.buttonChoice === 'letter' : true;
                const isInputDisabled = link.enabled ? !isAllowed : true;
                return (react.createElement(inputs.Generic, { isDisabled: isInputDisabled, defaultValue: label, label: "Label", generic: inputs.label, handleChange: onChange, onlyValidChange: true, tooltipParts: isInputDisabled && link.enabled ? [{ isPath: false, text: 'Only available when Button is set to Letters' }] : [] }));
            };

            const Path = (props) => {
                const { link, update, index, path } = props;
                const onChange = (value) => {
                    const currentPath = link.path || [];
                    const nextPath = [...currentPath];
                    nextPath[index] = value;
                    update('path', nextPath);
                };
                const defaultValue = link.path && link.path[index] ? link.path[index] : undefined;
                return (react.createElement(inputs.Generic, { isDisabled: !link.enabled, defaultValue: defaultValue, label: capitalize(path.name), generic: inputs.path, handleChange: onChange, onlyValidChange: true, tooltipParts: path.tooltipParts }));
            };

            const URL$1 = (props) => {
                const { update, link } = props;
                const onChange = (value) => {
                    update('url', value);
                };
                return (react.createElement(inputs.Generic, { isDisabled: !link.enabled, defaultValue: link.url, label: "URL", generic: inputs.url, handleLoseFocus: onChange, onlyValidChange: true }));
            };

            const Options = react.forwardRef((props, ref) => {
                const { link, type } = props;
                const updateLink = useUpdateLink();
                const update = (key, value) => {
                    updateLink({
                        id: link.id,
                        key,
                        value,
                    });
                };
                const updateStandard = (key, value) => {
                    if (isConfigKey(key)) {
                        update(key, value);
                    }
                };
                const updateCustom = (key, value) => {
                    if (isConfigKey(key)) {
                        update(key, value);
                    }
                };
                return (react.createElement(Options$2, { ref: ref },
                    isStandardConfig(type) &&
                        react.createElement(ButtonLabel, { link: link, update: updateStandard }),
                    react.createElement(Label$2, { link: link, type: type, update: updateCustom }),
                    isCustomConfig(type) &&
                        react.createElement(URL$1, { link: link, update: updateCustom }),
                    isStandardConfig(type) && link?.pathsNeeded && link.pathsNeeded.map((path, index) => (react.createElement(Path, { key: path.name, link: link, index: index, path: path, update: updateStandard }))),
                    react.createElement(Hotkey$1, { link: link, update: updateCustom })));
            });

            const Title = (props) => {
                const { type, link } = props;
                const { active, standard } = useLinks();
                const label = standard.find((item) => item.id === link.id)?.title || link.label;
                const isIncomplete = active.findIndex((l) => l.id === link.id) < 0;
                const inCompleteText = type === 'custom' ?
                    'The URL provided is invalid' :
                    'All URL fields must be populated.';
                return (react.createElement("div", null,
                    label,
                    isIncomplete && link.enabled &&
                        react.createElement(ErrorTooltip, { inline: true, text: inCompleteText })));
            };

            const Toggle = (props) => {
                const { link, isBackgroundReverse } = props;
                const updateLink = useUpdateLink();
                const value = link.enabled ? 'enabled' : 'disabled';
                const force = useForceUpdate();
                react.useEffect(() => {
                    force.update();
                }, []);
                const toggle = (choice) => {
                    updateLink({
                        id: link.id,
                        key: 'enabled',
                        value: choice === 'enabled',
                    });
                };
                const options = [
                    {
                        value: 'enabled',
                        label: 'Enable',
                    },
                    {
                        value: 'disabled',
                        label: 'Disable',
                    },
                ];
                return (react.createElement(Option, null,
                    react.createElement(Switch, { isBackgroundReverse: isBackgroundReverse, halfSize: true, onChange: toggle, value: value, options: options })));
            };

            const Link$1 = (props) => {
                const { link, type } = props;
                return (react.createElement(Card, { contentSize: "md", title: {
                        text: react.createElement(Title, { link: link, type: type }),
                    }, endTitle: react.createElement(Toggle, { link: link, isBackgroundReverse: !link.enabled }), centerTitle: react.createElement(Delete, { link: link, type: type }), isDisabled: !link.enabled },
                    react.createElement(Options, { type: type, link: link })));
            };

            qe.div `
  display: flex;
  position: relative;
`;
            qe.div `
  align-items: center;
  position: relative;
  display: flex;
  flex-direction: column;
  top: 0;
`;
            qe.div `
  position: relative;
`;
            qe.div `
  position: relative;
`;
            const CreateContainer = qe.div `
  display: grid;
  position: relative;
  flex-direction: column;
  grid-template-columns: auto auto;
  grid-template-rows: auto;
  align-items: center;
`;

            const Create = () => {
                const urlRef = react.useRef(null);
                const labelRef = react.useRef(null);
                const createLink = useCreateLink();
                const handleCreate = () => {
                    const url = urlRef.current?.checkValidValue();
                    const label = labelRef.current?.checkValidValue();
                    if (label && url) {
                        createLink({
                            url,
                            label,
                        });
                    }
                };
                return (react.createElement(Card, { contentDisplay: "grid", contentColumns: 2, contentSize: "md", title: {
                        text: 'New Link',
                    }, endTitle: react.createElement(Button, { onClick: handleCreate, size: "sm" }, "Create") },
                    react.createElement(CreateContainer, null,
                        react.createElement(inputs.Generic, { ref: labelRef, label: "Label", onlyValidChange: true, generic: inputs.label }),
                        react.createElement(inputs.Generic, { ref: urlRef, label: "URL", onlyValidChange: true, generic: inputs.url }))));
            };

            const CustomLinks = () => {
                const { custom } = useLinks();
                return (react.createElement(Section$1, null,
                    react.createElement(SectionTitle, null, "Custom Links"),
                    react.createElement(SectionContent, { displayType: "grid" },
                        react.createElement(Create, null)),
                    react.createElement(SectionContent, { displayType: "grid" }, custom.map((customLink) => react.createElement(Link$1, { key: customLink.url, type: "custom", link: customLink })))));
            };

            const Reorder = () => {
                const update = useUpdate();
                const hide = useHide$1();
                const handleClick = () => {
                    update.selection('save');
                    hide.units(['github', 'jira', 'settings-icon']);
                };
                return (react.createElement(RightContainer, null,
                    react.createElement(Button, { onClick: handleClick }, "Adjust link order")));
            };

            const StandardLinks = () => {
                const { standard } = useLinks();
                return (react.createElement(Section$1, null,
                    react.createElement(SectionTitle, null, "Standard Links"),
                    react.createElement(SectionContent, { displayType: "grid" }, standard.map((config) => react.createElement(Link$1, { key: config.id, link: config, type: "standard" })))));
            };

            const Main = () => {
                return (react.createElement(react.Fragment, null,
                    react.createElement(Reorder, null),
                    react.createElement(CustomLinks, null),
                    react.createElement(StandardLinks, null)));
            };

            /**
             * Create the React Context
             */

            var DndContext = react.createContext({
              dragDropManager: undefined
            });

            /** @license React v17.0.2
             * react-jsx-runtime.production.min.js
             *
             * Copyright (c) Facebook, Inc. and its affiliates.
             *
             * This source code is licensed under the MIT license found in the
             * LICENSE file in the root directory of this source tree.
             */

            createCommonjsModule(function (module, exports) {
            var g=60103;exports.Fragment=60107;if("function"===typeof Symbol&&Symbol.for){var h=Symbol.for;g=h("react.element");exports.Fragment=h("react.fragment");}var m=react.__SECRET_INTERNALS_DO_NOT_USE_OR_YOU_WILL_BE_FIRED.ReactCurrentOwner,n=Object.prototype.hasOwnProperty,p={key:!0,ref:!0,__self:!0,__source:!0};
            function q(c,a,k){var b,d={},e=null,l=null;void 0!==k&&(e=""+k);void 0!==a.key&&(e=""+a.key);void 0!==a.ref&&(l=a.ref);for(b in a)n.call(a,b)&&!p.hasOwnProperty(b)&&(d[b]=a[b]);if(c&&c.defaultProps)for(b in a=c.defaultProps,a)void 0===d[b]&&(d[b]=a[b]);return {$$typeof:g,type:c,key:e,ref:l,props:d,_owner:m.current}}exports.jsx=q;exports.jsxs=q;
            });

            var reactJsxRuntime_development = createCommonjsModule(function (module, exports) {

            {
              (function() {

            var React = react;
            var _assign = objectAssign;

            // ATTENTION
            // When adding new symbols to this file,
            // Please consider also adding to 'react-devtools-shared/src/backend/ReactSymbols'
            // The Symbol used to tag the ReactElement-like types. If there is no native Symbol
            // nor polyfill, then a plain number is used for performance.
            var REACT_ELEMENT_TYPE = 0xeac7;
            var REACT_PORTAL_TYPE = 0xeaca;
            exports.Fragment = 0xeacb;
            var REACT_STRICT_MODE_TYPE = 0xeacc;
            var REACT_PROFILER_TYPE = 0xead2;
            var REACT_PROVIDER_TYPE = 0xeacd;
            var REACT_CONTEXT_TYPE = 0xeace;
            var REACT_FORWARD_REF_TYPE = 0xead0;
            var REACT_SUSPENSE_TYPE = 0xead1;
            var REACT_SUSPENSE_LIST_TYPE = 0xead8;
            var REACT_MEMO_TYPE = 0xead3;
            var REACT_LAZY_TYPE = 0xead4;
            var REACT_BLOCK_TYPE = 0xead9;
            var REACT_SERVER_BLOCK_TYPE = 0xeada;
            var REACT_FUNDAMENTAL_TYPE = 0xead5;
            var REACT_DEBUG_TRACING_MODE_TYPE = 0xeae1;
            var REACT_LEGACY_HIDDEN_TYPE = 0xeae3;

            if (typeof Symbol === 'function' && Symbol.for) {
              var symbolFor = Symbol.for;
              REACT_ELEMENT_TYPE = symbolFor('react.element');
              REACT_PORTAL_TYPE = symbolFor('react.portal');
              exports.Fragment = symbolFor('react.fragment');
              REACT_STRICT_MODE_TYPE = symbolFor('react.strict_mode');
              REACT_PROFILER_TYPE = symbolFor('react.profiler');
              REACT_PROVIDER_TYPE = symbolFor('react.provider');
              REACT_CONTEXT_TYPE = symbolFor('react.context');
              REACT_FORWARD_REF_TYPE = symbolFor('react.forward_ref');
              REACT_SUSPENSE_TYPE = symbolFor('react.suspense');
              REACT_SUSPENSE_LIST_TYPE = symbolFor('react.suspense_list');
              REACT_MEMO_TYPE = symbolFor('react.memo');
              REACT_LAZY_TYPE = symbolFor('react.lazy');
              REACT_BLOCK_TYPE = symbolFor('react.block');
              REACT_SERVER_BLOCK_TYPE = symbolFor('react.server.block');
              REACT_FUNDAMENTAL_TYPE = symbolFor('react.fundamental');
              symbolFor('react.scope');
              symbolFor('react.opaque.id');
              REACT_DEBUG_TRACING_MODE_TYPE = symbolFor('react.debug_trace_mode');
              symbolFor('react.offscreen');
              REACT_LEGACY_HIDDEN_TYPE = symbolFor('react.legacy_hidden');
            }

            var MAYBE_ITERATOR_SYMBOL = typeof Symbol === 'function' && Symbol.iterator;
            var FAUX_ITERATOR_SYMBOL = '@@iterator';
            function getIteratorFn(maybeIterable) {
              if (maybeIterable === null || typeof maybeIterable !== 'object') {
                return null;
              }

              var maybeIterator = MAYBE_ITERATOR_SYMBOL && maybeIterable[MAYBE_ITERATOR_SYMBOL] || maybeIterable[FAUX_ITERATOR_SYMBOL];

              if (typeof maybeIterator === 'function') {
                return maybeIterator;
              }

              return null;
            }

            var ReactSharedInternals = React.__SECRET_INTERNALS_DO_NOT_USE_OR_YOU_WILL_BE_FIRED;

            function error(format) {
              {
                for (var _len2 = arguments.length, args = new Array(_len2 > 1 ? _len2 - 1 : 0), _key2 = 1; _key2 < _len2; _key2++) {
                  args[_key2 - 1] = arguments[_key2];
                }

                printWarning('error', format, args);
              }
            }

            function printWarning(level, format, args) {
              // When changing this logic, you might want to also
              // update consoleWithStackDev.www.js as well.
              {
                var ReactDebugCurrentFrame = ReactSharedInternals.ReactDebugCurrentFrame;
                var stack = ReactDebugCurrentFrame.getStackAddendum();

                if (stack !== '') {
                  format += '%s';
                  args = args.concat([stack]);
                }

                var argsWithFormat = args.map(function (item) {
                  return '' + item;
                }); // Careful: RN currently depends on this prefix

                argsWithFormat.unshift('Warning: ' + format); // We intentionally don't use spread (or .apply) directly because it
                // breaks IE9: https://github.com/facebook/react/issues/13610
                // eslint-disable-next-line react-internal/no-production-logging

                Function.prototype.apply.call(console[level], console, argsWithFormat);
              }
            }

            // Filter certain DOM attributes (e.g. src, href) if their values are empty strings.

            var enableScopeAPI = false; // Experimental Create Event Handle API.

            function isValidElementType(type) {
              if (typeof type === 'string' || typeof type === 'function') {
                return true;
              } // Note: typeof might be other than 'symbol' or 'number' (e.g. if it's a polyfill).


              if (type === exports.Fragment || type === REACT_PROFILER_TYPE || type === REACT_DEBUG_TRACING_MODE_TYPE || type === REACT_STRICT_MODE_TYPE || type === REACT_SUSPENSE_TYPE || type === REACT_SUSPENSE_LIST_TYPE || type === REACT_LEGACY_HIDDEN_TYPE || enableScopeAPI ) {
                return true;
              }

              if (typeof type === 'object' && type !== null) {
                if (type.$$typeof === REACT_LAZY_TYPE || type.$$typeof === REACT_MEMO_TYPE || type.$$typeof === REACT_PROVIDER_TYPE || type.$$typeof === REACT_CONTEXT_TYPE || type.$$typeof === REACT_FORWARD_REF_TYPE || type.$$typeof === REACT_FUNDAMENTAL_TYPE || type.$$typeof === REACT_BLOCK_TYPE || type[0] === REACT_SERVER_BLOCK_TYPE) {
                  return true;
                }
              }

              return false;
            }

            function getWrappedName(outerType, innerType, wrapperName) {
              var functionName = innerType.displayName || innerType.name || '';
              return outerType.displayName || (functionName !== '' ? wrapperName + "(" + functionName + ")" : wrapperName);
            }

            function getContextName(type) {
              return type.displayName || 'Context';
            }

            function getComponentName(type) {
              if (type == null) {
                // Host root, text node or just invalid type.
                return null;
              }

              {
                if (typeof type.tag === 'number') {
                  error('Received an unexpected object in getComponentName(). ' + 'This is likely a bug in React. Please file an issue.');
                }
              }

              if (typeof type === 'function') {
                return type.displayName || type.name || null;
              }

              if (typeof type === 'string') {
                return type;
              }

              switch (type) {
                case exports.Fragment:
                  return 'Fragment';

                case REACT_PORTAL_TYPE:
                  return 'Portal';

                case REACT_PROFILER_TYPE:
                  return 'Profiler';

                case REACT_STRICT_MODE_TYPE:
                  return 'StrictMode';

                case REACT_SUSPENSE_TYPE:
                  return 'Suspense';

                case REACT_SUSPENSE_LIST_TYPE:
                  return 'SuspenseList';
              }

              if (typeof type === 'object') {
                switch (type.$$typeof) {
                  case REACT_CONTEXT_TYPE:
                    var context = type;
                    return getContextName(context) + '.Consumer';

                  case REACT_PROVIDER_TYPE:
                    var provider = type;
                    return getContextName(provider._context) + '.Provider';

                  case REACT_FORWARD_REF_TYPE:
                    return getWrappedName(type, type.render, 'ForwardRef');

                  case REACT_MEMO_TYPE:
                    return getComponentName(type.type);

                  case REACT_BLOCK_TYPE:
                    return getComponentName(type._render);

                  case REACT_LAZY_TYPE:
                    {
                      var lazyComponent = type;
                      var payload = lazyComponent._payload;
                      var init = lazyComponent._init;

                      try {
                        return getComponentName(init(payload));
                      } catch (x) {
                        return null;
                      }
                    }
                }
              }

              return null;
            }

            // Helpers to patch console.logs to avoid logging during side-effect free
            // replaying on render function. This currently only patches the object
            // lazily which won't cover if the log function was extracted eagerly.
            // We could also eagerly patch the method.
            var disabledDepth = 0;
            var prevLog;
            var prevInfo;
            var prevWarn;
            var prevError;
            var prevGroup;
            var prevGroupCollapsed;
            var prevGroupEnd;

            function disabledLog() {}

            disabledLog.__reactDisabledLog = true;
            function disableLogs() {
              {
                if (disabledDepth === 0) {
                  /* eslint-disable react-internal/no-production-logging */
                  prevLog = console.log;
                  prevInfo = console.info;
                  prevWarn = console.warn;
                  prevError = console.error;
                  prevGroup = console.group;
                  prevGroupCollapsed = console.groupCollapsed;
                  prevGroupEnd = console.groupEnd; // https://github.com/facebook/react/issues/19099

                  var props = {
                    configurable: true,
                    enumerable: true,
                    value: disabledLog,
                    writable: true
                  }; // $FlowFixMe Flow thinks console is immutable.

                  Object.defineProperties(console, {
                    info: props,
                    log: props,
                    warn: props,
                    error: props,
                    group: props,
                    groupCollapsed: props,
                    groupEnd: props
                  });
                  /* eslint-enable react-internal/no-production-logging */
                }

                disabledDepth++;
              }
            }
            function reenableLogs() {
              {
                disabledDepth--;

                if (disabledDepth === 0) {
                  /* eslint-disable react-internal/no-production-logging */
                  var props = {
                    configurable: true,
                    enumerable: true,
                    writable: true
                  }; // $FlowFixMe Flow thinks console is immutable.

                  Object.defineProperties(console, {
                    log: _assign({}, props, {
                      value: prevLog
                    }),
                    info: _assign({}, props, {
                      value: prevInfo
                    }),
                    warn: _assign({}, props, {
                      value: prevWarn
                    }),
                    error: _assign({}, props, {
                      value: prevError
                    }),
                    group: _assign({}, props, {
                      value: prevGroup
                    }),
                    groupCollapsed: _assign({}, props, {
                      value: prevGroupCollapsed
                    }),
                    groupEnd: _assign({}, props, {
                      value: prevGroupEnd
                    })
                  });
                  /* eslint-enable react-internal/no-production-logging */
                }

                if (disabledDepth < 0) {
                  error('disabledDepth fell below zero. ' + 'This is a bug in React. Please file an issue.');
                }
              }
            }

            var ReactCurrentDispatcher = ReactSharedInternals.ReactCurrentDispatcher;
            var prefix;
            function describeBuiltInComponentFrame(name, source, ownerFn) {
              {
                if (prefix === undefined) {
                  // Extract the VM specific prefix used by each line.
                  try {
                    throw Error();
                  } catch (x) {
                    var match = x.stack.trim().match(/\n( *(at )?)/);
                    prefix = match && match[1] || '';
                  }
                } // We use the prefix to ensure our stacks line up with native stack frames.


                return '\n' + prefix + name;
              }
            }
            var reentry = false;
            var componentFrameCache;

            {
              var PossiblyWeakMap = typeof WeakMap === 'function' ? WeakMap : Map;
              componentFrameCache = new PossiblyWeakMap();
            }

            function describeNativeComponentFrame(fn, construct) {
              // If something asked for a stack inside a fake render, it should get ignored.
              if (!fn || reentry) {
                return '';
              }

              {
                var frame = componentFrameCache.get(fn);

                if (frame !== undefined) {
                  return frame;
                }
              }

              var control;
              reentry = true;
              var previousPrepareStackTrace = Error.prepareStackTrace; // $FlowFixMe It does accept undefined.

              Error.prepareStackTrace = undefined;
              var previousDispatcher;

              {
                previousDispatcher = ReactCurrentDispatcher.current; // Set the dispatcher in DEV because this might be call in the render function
                // for warnings.

                ReactCurrentDispatcher.current = null;
                disableLogs();
              }

              try {
                // This should throw.
                if (construct) {
                  // Something should be setting the props in the constructor.
                  var Fake = function () {
                    throw Error();
                  }; // $FlowFixMe


                  Object.defineProperty(Fake.prototype, 'props', {
                    set: function () {
                      // We use a throwing setter instead of frozen or non-writable props
                      // because that won't throw in a non-strict mode function.
                      throw Error();
                    }
                  });

                  if (typeof Reflect === 'object' && Reflect.construct) {
                    // We construct a different control for this case to include any extra
                    // frames added by the construct call.
                    try {
                      Reflect.construct(Fake, []);
                    } catch (x) {
                      control = x;
                    }

                    Reflect.construct(fn, [], Fake);
                  } else {
                    try {
                      Fake.call();
                    } catch (x) {
                      control = x;
                    }

                    fn.call(Fake.prototype);
                  }
                } else {
                  try {
                    throw Error();
                  } catch (x) {
                    control = x;
                  }

                  fn();
                }
              } catch (sample) {
                // This is inlined manually because closure doesn't do it for us.
                if (sample && control && typeof sample.stack === 'string') {
                  // This extracts the first frame from the sample that isn't also in the control.
                  // Skipping one frame that we assume is the frame that calls the two.
                  var sampleLines = sample.stack.split('\n');
                  var controlLines = control.stack.split('\n');
                  var s = sampleLines.length - 1;
                  var c = controlLines.length - 1;

                  while (s >= 1 && c >= 0 && sampleLines[s] !== controlLines[c]) {
                    // We expect at least one stack frame to be shared.
                    // Typically this will be the root most one. However, stack frames may be
                    // cut off due to maximum stack limits. In this case, one maybe cut off
                    // earlier than the other. We assume that the sample is longer or the same
                    // and there for cut off earlier. So we should find the root most frame in
                    // the sample somewhere in the control.
                    c--;
                  }

                  for (; s >= 1 && c >= 0; s--, c--) {
                    // Next we find the first one that isn't the same which should be the
                    // frame that called our sample function and the control.
                    if (sampleLines[s] !== controlLines[c]) {
                      // In V8, the first line is describing the message but other VMs don't.
                      // If we're about to return the first line, and the control is also on the same
                      // line, that's a pretty good indicator that our sample threw at same line as
                      // the control. I.e. before we entered the sample frame. So we ignore this result.
                      // This can happen if you passed a class to function component, or non-function.
                      if (s !== 1 || c !== 1) {
                        do {
                          s--;
                          c--; // We may still have similar intermediate frames from the construct call.
                          // The next one that isn't the same should be our match though.

                          if (c < 0 || sampleLines[s] !== controlLines[c]) {
                            // V8 adds a "new" prefix for native classes. Let's remove it to make it prettier.
                            var _frame = '\n' + sampleLines[s].replace(' at new ', ' at ');

                            {
                              if (typeof fn === 'function') {
                                componentFrameCache.set(fn, _frame);
                              }
                            } // Return the line we found.


                            return _frame;
                          }
                        } while (s >= 1 && c >= 0);
                      }

                      break;
                    }
                  }
                }
              } finally {
                reentry = false;

                {
                  ReactCurrentDispatcher.current = previousDispatcher;
                  reenableLogs();
                }

                Error.prepareStackTrace = previousPrepareStackTrace;
              } // Fallback to just using the name if we couldn't make it throw.


              var name = fn ? fn.displayName || fn.name : '';
              var syntheticFrame = name ? describeBuiltInComponentFrame(name) : '';

              {
                if (typeof fn === 'function') {
                  componentFrameCache.set(fn, syntheticFrame);
                }
              }

              return syntheticFrame;
            }
            function describeFunctionComponentFrame(fn, source, ownerFn) {
              {
                return describeNativeComponentFrame(fn, false);
              }
            }

            function shouldConstruct(Component) {
              var prototype = Component.prototype;
              return !!(prototype && prototype.isReactComponent);
            }

            function describeUnknownElementTypeFrameInDEV(type, source, ownerFn) {

              if (type == null) {
                return '';
              }

              if (typeof type === 'function') {
                {
                  return describeNativeComponentFrame(type, shouldConstruct(type));
                }
              }

              if (typeof type === 'string') {
                return describeBuiltInComponentFrame(type);
              }

              switch (type) {
                case REACT_SUSPENSE_TYPE:
                  return describeBuiltInComponentFrame('Suspense');

                case REACT_SUSPENSE_LIST_TYPE:
                  return describeBuiltInComponentFrame('SuspenseList');
              }

              if (typeof type === 'object') {
                switch (type.$$typeof) {
                  case REACT_FORWARD_REF_TYPE:
                    return describeFunctionComponentFrame(type.render);

                  case REACT_MEMO_TYPE:
                    // Memo may contain any component type so we recursively resolve it.
                    return describeUnknownElementTypeFrameInDEV(type.type, source, ownerFn);

                  case REACT_BLOCK_TYPE:
                    return describeFunctionComponentFrame(type._render);

                  case REACT_LAZY_TYPE:
                    {
                      var lazyComponent = type;
                      var payload = lazyComponent._payload;
                      var init = lazyComponent._init;

                      try {
                        // Lazy may contain any component type so we recursively resolve it.
                        return describeUnknownElementTypeFrameInDEV(init(payload), source, ownerFn);
                      } catch (x) {}
                    }
                }
              }

              return '';
            }

            var loggedTypeFailures = {};
            var ReactDebugCurrentFrame = ReactSharedInternals.ReactDebugCurrentFrame;

            function setCurrentlyValidatingElement(element) {
              {
                if (element) {
                  var owner = element._owner;
                  var stack = describeUnknownElementTypeFrameInDEV(element.type, element._source, owner ? owner.type : null);
                  ReactDebugCurrentFrame.setExtraStackFrame(stack);
                } else {
                  ReactDebugCurrentFrame.setExtraStackFrame(null);
                }
              }
            }

            function checkPropTypes(typeSpecs, values, location, componentName, element) {
              {
                // $FlowFixMe This is okay but Flow doesn't know it.
                var has = Function.call.bind(Object.prototype.hasOwnProperty);

                for (var typeSpecName in typeSpecs) {
                  if (has(typeSpecs, typeSpecName)) {
                    var error$1 = void 0; // Prop type validation may throw. In case they do, we don't want to
                    // fail the render phase where it didn't fail before. So we log it.
                    // After these have been cleaned up, we'll let them throw.

                    try {
                      // This is intentionally an invariant that gets caught. It's the same
                      // behavior as without this statement except with a better message.
                      if (typeof typeSpecs[typeSpecName] !== 'function') {
                        var err = Error((componentName || 'React class') + ': ' + location + ' type `' + typeSpecName + '` is invalid; ' + 'it must be a function, usually from the `prop-types` package, but received `' + typeof typeSpecs[typeSpecName] + '`.' + 'This often happens because of typos such as `PropTypes.function` instead of `PropTypes.func`.');
                        err.name = 'Invariant Violation';
                        throw err;
                      }

                      error$1 = typeSpecs[typeSpecName](values, typeSpecName, componentName, location, null, 'SECRET_DO_NOT_PASS_THIS_OR_YOU_WILL_BE_FIRED');
                    } catch (ex) {
                      error$1 = ex;
                    }

                    if (error$1 && !(error$1 instanceof Error)) {
                      setCurrentlyValidatingElement(element);

                      error('%s: type specification of %s' + ' `%s` is invalid; the type checker ' + 'function must return `null` or an `Error` but returned a %s. ' + 'You may have forgotten to pass an argument to the type checker ' + 'creator (arrayOf, instanceOf, objectOf, oneOf, oneOfType, and ' + 'shape all require an argument).', componentName || 'React class', location, typeSpecName, typeof error$1);

                      setCurrentlyValidatingElement(null);
                    }

                    if (error$1 instanceof Error && !(error$1.message in loggedTypeFailures)) {
                      // Only monitor this failure once because there tends to be a lot of the
                      // same error.
                      loggedTypeFailures[error$1.message] = true;
                      setCurrentlyValidatingElement(element);

                      error('Failed %s type: %s', location, error$1.message);

                      setCurrentlyValidatingElement(null);
                    }
                  }
                }
              }
            }

            var ReactCurrentOwner = ReactSharedInternals.ReactCurrentOwner;
            var hasOwnProperty = Object.prototype.hasOwnProperty;
            var RESERVED_PROPS = {
              key: true,
              ref: true,
              __self: true,
              __source: true
            };
            var specialPropKeyWarningShown;
            var specialPropRefWarningShown;
            var didWarnAboutStringRefs;

            {
              didWarnAboutStringRefs = {};
            }

            function hasValidRef(config) {
              {
                if (hasOwnProperty.call(config, 'ref')) {
                  var getter = Object.getOwnPropertyDescriptor(config, 'ref').get;

                  if (getter && getter.isReactWarning) {
                    return false;
                  }
                }
              }

              return config.ref !== undefined;
            }

            function hasValidKey(config) {
              {
                if (hasOwnProperty.call(config, 'key')) {
                  var getter = Object.getOwnPropertyDescriptor(config, 'key').get;

                  if (getter && getter.isReactWarning) {
                    return false;
                  }
                }
              }

              return config.key !== undefined;
            }

            function warnIfStringRefCannotBeAutoConverted(config, self) {
              {
                if (typeof config.ref === 'string' && ReactCurrentOwner.current && self && ReactCurrentOwner.current.stateNode !== self) {
                  var componentName = getComponentName(ReactCurrentOwner.current.type);

                  if (!didWarnAboutStringRefs[componentName]) {
                    error('Component "%s" contains the string ref "%s". ' + 'Support for string refs will be removed in a future major release. ' + 'This case cannot be automatically converted to an arrow function. ' + 'We ask you to manually fix this case by using useRef() or createRef() instead. ' + 'Learn more about using refs safely here: ' + 'https://reactjs.org/link/strict-mode-string-ref', getComponentName(ReactCurrentOwner.current.type), config.ref);

                    didWarnAboutStringRefs[componentName] = true;
                  }
                }
              }
            }

            function defineKeyPropWarningGetter(props, displayName) {
              {
                var warnAboutAccessingKey = function () {
                  if (!specialPropKeyWarningShown) {
                    specialPropKeyWarningShown = true;

                    error('%s: `key` is not a prop. Trying to access it will result ' + 'in `undefined` being returned. If you need to access the same ' + 'value within the child component, you should pass it as a different ' + 'prop. (https://reactjs.org/link/special-props)', displayName);
                  }
                };

                warnAboutAccessingKey.isReactWarning = true;
                Object.defineProperty(props, 'key', {
                  get: warnAboutAccessingKey,
                  configurable: true
                });
              }
            }

            function defineRefPropWarningGetter(props, displayName) {
              {
                var warnAboutAccessingRef = function () {
                  if (!specialPropRefWarningShown) {
                    specialPropRefWarningShown = true;

                    error('%s: `ref` is not a prop. Trying to access it will result ' + 'in `undefined` being returned. If you need to access the same ' + 'value within the child component, you should pass it as a different ' + 'prop. (https://reactjs.org/link/special-props)', displayName);
                  }
                };

                warnAboutAccessingRef.isReactWarning = true;
                Object.defineProperty(props, 'ref', {
                  get: warnAboutAccessingRef,
                  configurable: true
                });
              }
            }
            /**
             * Factory method to create a new React element. This no longer adheres to
             * the class pattern, so do not use new to call it. Also, instanceof check
             * will not work. Instead test $$typeof field against Symbol.for('react.element') to check
             * if something is a React Element.
             *
             * @param {*} type
             * @param {*} props
             * @param {*} key
             * @param {string|object} ref
             * @param {*} owner
             * @param {*} self A *temporary* helper to detect places where `this` is
             * different from the `owner` when React.createElement is called, so that we
             * can warn. We want to get rid of owner and replace string `ref`s with arrow
             * functions, and as long as `this` and owner are the same, there will be no
             * change in behavior.
             * @param {*} source An annotation object (added by a transpiler or otherwise)
             * indicating filename, line number, and/or other information.
             * @internal
             */


            var ReactElement = function (type, key, ref, self, source, owner, props) {
              var element = {
                // This tag allows us to uniquely identify this as a React Element
                $$typeof: REACT_ELEMENT_TYPE,
                // Built-in properties that belong on the element
                type: type,
                key: key,
                ref: ref,
                props: props,
                // Record the component responsible for creating this element.
                _owner: owner
              };

              {
                // The validation flag is currently mutative. We put it on
                // an external backing store so that we can freeze the whole object.
                // This can be replaced with a WeakMap once they are implemented in
                // commonly used development environments.
                element._store = {}; // To make comparing ReactElements easier for testing purposes, we make
                // the validation flag non-enumerable (where possible, which should
                // include every environment we run tests in), so the test framework
                // ignores it.

                Object.defineProperty(element._store, 'validated', {
                  configurable: false,
                  enumerable: false,
                  writable: true,
                  value: false
                }); // self and source are DEV only properties.

                Object.defineProperty(element, '_self', {
                  configurable: false,
                  enumerable: false,
                  writable: false,
                  value: self
                }); // Two elements created in two different places should be considered
                // equal for testing purposes and therefore we hide it from enumeration.

                Object.defineProperty(element, '_source', {
                  configurable: false,
                  enumerable: false,
                  writable: false,
                  value: source
                });

                if (Object.freeze) {
                  Object.freeze(element.props);
                  Object.freeze(element);
                }
              }

              return element;
            };
            /**
             * https://github.com/reactjs/rfcs/pull/107
             * @param {*} type
             * @param {object} props
             * @param {string} key
             */

            function jsxDEV(type, config, maybeKey, source, self) {
              {
                var propName; // Reserved names are extracted

                var props = {};
                var key = null;
                var ref = null; // Currently, key can be spread in as a prop. This causes a potential
                // issue if key is also explicitly declared (ie. <div {...props} key="Hi" />
                // or <div key="Hi" {...props} /> ). We want to deprecate key spread,
                // but as an intermediary step, we will use jsxDEV for everything except
                // <div {...props} key="Hi" />, because we aren't currently able to tell if
                // key is explicitly declared to be undefined or not.

                if (maybeKey !== undefined) {
                  key = '' + maybeKey;
                }

                if (hasValidKey(config)) {
                  key = '' + config.key;
                }

                if (hasValidRef(config)) {
                  ref = config.ref;
                  warnIfStringRefCannotBeAutoConverted(config, self);
                } // Remaining properties are added to a new props object


                for (propName in config) {
                  if (hasOwnProperty.call(config, propName) && !RESERVED_PROPS.hasOwnProperty(propName)) {
                    props[propName] = config[propName];
                  }
                } // Resolve default props


                if (type && type.defaultProps) {
                  var defaultProps = type.defaultProps;

                  for (propName in defaultProps) {
                    if (props[propName] === undefined) {
                      props[propName] = defaultProps[propName];
                    }
                  }
                }

                if (key || ref) {
                  var displayName = typeof type === 'function' ? type.displayName || type.name || 'Unknown' : type;

                  if (key) {
                    defineKeyPropWarningGetter(props, displayName);
                  }

                  if (ref) {
                    defineRefPropWarningGetter(props, displayName);
                  }
                }

                return ReactElement(type, key, ref, self, source, ReactCurrentOwner.current, props);
              }
            }

            var ReactCurrentOwner$1 = ReactSharedInternals.ReactCurrentOwner;
            var ReactDebugCurrentFrame$1 = ReactSharedInternals.ReactDebugCurrentFrame;

            function setCurrentlyValidatingElement$1(element) {
              {
                if (element) {
                  var owner = element._owner;
                  var stack = describeUnknownElementTypeFrameInDEV(element.type, element._source, owner ? owner.type : null);
                  ReactDebugCurrentFrame$1.setExtraStackFrame(stack);
                } else {
                  ReactDebugCurrentFrame$1.setExtraStackFrame(null);
                }
              }
            }

            var propTypesMisspellWarningShown;

            {
              propTypesMisspellWarningShown = false;
            }
            /**
             * Verifies the object is a ReactElement.
             * See https://reactjs.org/docs/react-api.html#isvalidelement
             * @param {?object} object
             * @return {boolean} True if `object` is a ReactElement.
             * @final
             */

            function isValidElement(object) {
              {
                return typeof object === 'object' && object !== null && object.$$typeof === REACT_ELEMENT_TYPE;
              }
            }

            function getDeclarationErrorAddendum() {
              {
                if (ReactCurrentOwner$1.current) {
                  var name = getComponentName(ReactCurrentOwner$1.current.type);

                  if (name) {
                    return '\n\nCheck the render method of `' + name + '`.';
                  }
                }

                return '';
              }
            }

            function getSourceInfoErrorAddendum(source) {
              {
                if (source !== undefined) {
                  var fileName = source.fileName.replace(/^.*[\\\/]/, '');
                  var lineNumber = source.lineNumber;
                  return '\n\nCheck your code at ' + fileName + ':' + lineNumber + '.';
                }

                return '';
              }
            }
            /**
             * Warn if there's no key explicitly set on dynamic arrays of children or
             * object keys are not valid. This allows us to keep track of children between
             * updates.
             */


            var ownerHasKeyUseWarning = {};

            function getCurrentComponentErrorInfo(parentType) {
              {
                var info = getDeclarationErrorAddendum();

                if (!info) {
                  var parentName = typeof parentType === 'string' ? parentType : parentType.displayName || parentType.name;

                  if (parentName) {
                    info = "\n\nCheck the top-level render call using <" + parentName + ">.";
                  }
                }

                return info;
              }
            }
            /**
             * Warn if the element doesn't have an explicit key assigned to it.
             * This element is in an array. The array could grow and shrink or be
             * reordered. All children that haven't already been validated are required to
             * have a "key" property assigned to it. Error statuses are cached so a warning
             * will only be shown once.
             *
             * @internal
             * @param {ReactElement} element Element that requires a key.
             * @param {*} parentType element's parent's type.
             */


            function validateExplicitKey(element, parentType) {
              {
                if (!element._store || element._store.validated || element.key != null) {
                  return;
                }

                element._store.validated = true;
                var currentComponentErrorInfo = getCurrentComponentErrorInfo(parentType);

                if (ownerHasKeyUseWarning[currentComponentErrorInfo]) {
                  return;
                }

                ownerHasKeyUseWarning[currentComponentErrorInfo] = true; // Usually the current owner is the offender, but if it accepts children as a
                // property, it may be the creator of the child that's responsible for
                // assigning it a key.

                var childOwner = '';

                if (element && element._owner && element._owner !== ReactCurrentOwner$1.current) {
                  // Give the component that originally created this child.
                  childOwner = " It was passed a child from " + getComponentName(element._owner.type) + ".";
                }

                setCurrentlyValidatingElement$1(element);

                error('Each child in a list should have a unique "key" prop.' + '%s%s See https://reactjs.org/link/warning-keys for more information.', currentComponentErrorInfo, childOwner);

                setCurrentlyValidatingElement$1(null);
              }
            }
            /**
             * Ensure that every element either is passed in a static location, in an
             * array with an explicit keys property defined, or in an object literal
             * with valid key property.
             *
             * @internal
             * @param {ReactNode} node Statically passed child of any type.
             * @param {*} parentType node's parent's type.
             */


            function validateChildKeys(node, parentType) {
              {
                if (typeof node !== 'object') {
                  return;
                }

                if (Array.isArray(node)) {
                  for (var i = 0; i < node.length; i++) {
                    var child = node[i];

                    if (isValidElement(child)) {
                      validateExplicitKey(child, parentType);
                    }
                  }
                } else if (isValidElement(node)) {
                  // This element was passed in a valid location.
                  if (node._store) {
                    node._store.validated = true;
                  }
                } else if (node) {
                  var iteratorFn = getIteratorFn(node);

                  if (typeof iteratorFn === 'function') {
                    // Entry iterators used to provide implicit keys,
                    // but now we print a separate warning for them later.
                    if (iteratorFn !== node.entries) {
                      var iterator = iteratorFn.call(node);
                      var step;

                      while (!(step = iterator.next()).done) {
                        if (isValidElement(step.value)) {
                          validateExplicitKey(step.value, parentType);
                        }
                      }
                    }
                  }
                }
              }
            }
            /**
             * Given an element, validate that its props follow the propTypes definition,
             * provided by the type.
             *
             * @param {ReactElement} element
             */


            function validatePropTypes(element) {
              {
                var type = element.type;

                if (type === null || type === undefined || typeof type === 'string') {
                  return;
                }

                var propTypes;

                if (typeof type === 'function') {
                  propTypes = type.propTypes;
                } else if (typeof type === 'object' && (type.$$typeof === REACT_FORWARD_REF_TYPE || // Note: Memo only checks outer props here.
                // Inner props are checked in the reconciler.
                type.$$typeof === REACT_MEMO_TYPE)) {
                  propTypes = type.propTypes;
                } else {
                  return;
                }

                if (propTypes) {
                  // Intentionally inside to avoid triggering lazy initializers:
                  var name = getComponentName(type);
                  checkPropTypes(propTypes, element.props, 'prop', name, element);
                } else if (type.PropTypes !== undefined && !propTypesMisspellWarningShown) {
                  propTypesMisspellWarningShown = true; // Intentionally inside to avoid triggering lazy initializers:

                  var _name = getComponentName(type);

                  error('Component %s declared `PropTypes` instead of `propTypes`. Did you misspell the property assignment?', _name || 'Unknown');
                }

                if (typeof type.getDefaultProps === 'function' && !type.getDefaultProps.isReactClassApproved) {
                  error('getDefaultProps is only used on classic React.createClass ' + 'definitions. Use a static property named `defaultProps` instead.');
                }
              }
            }
            /**
             * Given a fragment, validate that it can only be provided with fragment props
             * @param {ReactElement} fragment
             */


            function validateFragmentProps(fragment) {
              {
                var keys = Object.keys(fragment.props);

                for (var i = 0; i < keys.length; i++) {
                  var key = keys[i];

                  if (key !== 'children' && key !== 'key') {
                    setCurrentlyValidatingElement$1(fragment);

                    error('Invalid prop `%s` supplied to `React.Fragment`. ' + 'React.Fragment can only have `key` and `children` props.', key);

                    setCurrentlyValidatingElement$1(null);
                    break;
                  }
                }

                if (fragment.ref !== null) {
                  setCurrentlyValidatingElement$1(fragment);

                  error('Invalid attribute `ref` supplied to `React.Fragment`.');

                  setCurrentlyValidatingElement$1(null);
                }
              }
            }

            function jsxWithValidation(type, props, key, isStaticChildren, source, self) {
              {
                var validType = isValidElementType(type); // We warn in this case but don't throw. We expect the element creation to
                // succeed and there will likely be errors in render.

                if (!validType) {
                  var info = '';

                  if (type === undefined || typeof type === 'object' && type !== null && Object.keys(type).length === 0) {
                    info += ' You likely forgot to export your component from the file ' + "it's defined in, or you might have mixed up default and named imports.";
                  }

                  var sourceInfo = getSourceInfoErrorAddendum(source);

                  if (sourceInfo) {
                    info += sourceInfo;
                  } else {
                    info += getDeclarationErrorAddendum();
                  }

                  var typeString;

                  if (type === null) {
                    typeString = 'null';
                  } else if (Array.isArray(type)) {
                    typeString = 'array';
                  } else if (type !== undefined && type.$$typeof === REACT_ELEMENT_TYPE) {
                    typeString = "<" + (getComponentName(type.type) || 'Unknown') + " />";
                    info = ' Did you accidentally export a JSX literal instead of a component?';
                  } else {
                    typeString = typeof type;
                  }

                  error('React.jsx: type is invalid -- expected a string (for ' + 'built-in components) or a class/function (for composite ' + 'components) but got: %s.%s', typeString, info);
                }

                var element = jsxDEV(type, props, key, source, self); // The result can be nullish if a mock or a custom function is used.
                // TODO: Drop this when these are no longer allowed as the type argument.

                if (element == null) {
                  return element;
                } // Skip key warning if the type isn't valid since our key validation logic
                // doesn't expect a non-string/function type and can throw confusing errors.
                // We don't want exception behavior to differ between dev and prod.
                // (Rendering will throw with a helpful message and as soon as the type is
                // fixed, the key warnings will appear.)


                if (validType) {
                  var children = props.children;

                  if (children !== undefined) {
                    if (isStaticChildren) {
                      if (Array.isArray(children)) {
                        for (var i = 0; i < children.length; i++) {
                          validateChildKeys(children[i], type);
                        }

                        if (Object.freeze) {
                          Object.freeze(children);
                        }
                      } else {
                        error('React.jsx: Static children should always be an array. ' + 'You are likely explicitly calling React.jsxs or React.jsxDEV. ' + 'Use the Babel transform instead.');
                      }
                    } else {
                      validateChildKeys(children, type);
                    }
                  }
                }

                if (type === exports.Fragment) {
                  validateFragmentProps(element);
                } else {
                  validatePropTypes(element);
                }

                return element;
              }
            } // These two functions exist to still get child warnings in dev
            // even with the prod transform. This means that jsxDEV is purely
            // opt-in behavior for better messages but that we won't stop
            // giving you warnings if you use production apis.

            function jsxWithValidationStatic(type, props, key) {
              {
                return jsxWithValidation(type, props, key, true);
              }
            }
            function jsxWithValidationDynamic(type, props, key) {
              {
                return jsxWithValidation(type, props, key, false);
              }
            }

            var jsx =  jsxWithValidationDynamic ; // we may want to special case jsxs internally to take advantage of static children.
            // for now we can ship identical prod functions

            var jsxs =  jsxWithValidationStatic ;

            exports.jsx = jsx;
            exports.jsxs = jsxs;
              })();
            }
            });

            var jsxRuntime = createCommonjsModule(function (module) {

            {
              module.exports = reactJsxRuntime_development;
            }
            });

            var HandlerRole;

            (function (HandlerRole) {
              HandlerRole["SOURCE"] = "SOURCE";
              HandlerRole["TARGET"] = "TARGET";
            })(HandlerRole || (HandlerRole = {}));

            /**
             * Use invariant() to assert state which your program assumes to be true.
             *
             * Provide sprintf-style format (only %s is supported) and arguments
             * to provide information about what broke and what you were
             * expecting.
             *
             * The invariant message will be stripped in production, but the invariant
             * will remain to ensure logic does not differ in production.
             */
            function invariant(condition, format) {
              for (var _len = arguments.length, args = new Array(_len > 2 ? _len - 2 : 0), _key = 2; _key < _len; _key++) {
                args[_key - 2] = arguments[_key];
              }

              {
                if (format === undefined) {
                  throw new Error('invariant requires an error message argument');
                }
              }

              if (!condition) {
                var error;

                if (format === undefined) {
                  error = new Error('Minified exception occurred; use the non-minified dev environment ' + 'for the full error message and additional helpful warnings.');
                } else {
                  var argIndex = 0;
                  error = new Error(format.replace(/%s/g, function () {
                    return args[argIndex++];
                  }));
                  error.name = 'Invariant Violation';
                }

                error.framesToPop = 1; // we don't care about invariant's own frame

                throw error;
              }
            }

            var INIT_COORDS = 'dnd-core/INIT_COORDS';
            var BEGIN_DRAG = 'dnd-core/BEGIN_DRAG';
            var PUBLISH_DRAG_SOURCE = 'dnd-core/PUBLISH_DRAG_SOURCE';
            var HOVER = 'dnd-core/HOVER';
            var DROP = 'dnd-core/DROP';
            var END_DRAG = 'dnd-core/END_DRAG';

            function setClientOffset(clientOffset, sourceClientOffset) {
              return {
                type: INIT_COORDS,
                payload: {
                  sourceClientOffset: sourceClientOffset || null,
                  clientOffset: clientOffset || null
                }
              };
            }

            function _typeof$1(obj) { "@babel/helpers - typeof"; if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") { _typeof$1 = function _typeof(obj) { return typeof obj; }; } else { _typeof$1 = function _typeof(obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }; } return _typeof$1(obj); }

            // cheap lodash replacements

            /**
             * drop-in replacement for _.get
             * @param obj
             * @param path
             * @param defaultValue
             */
            function get(obj, path, defaultValue) {
              return path.split('.').reduce(function (a, c) {
                return a && a[c] ? a[c] : defaultValue || null;
              }, obj);
            }
            /**
             * drop-in replacement for _.without
             */

            function without$1(items, item) {
              return items.filter(function (i) {
                return i !== item;
              });
            }
            /**
             * drop-in replacement for _.isString
             * @param input
             */

            function isObject(input) {
              return _typeof$1(input) === 'object';
            }
            /**
             * repalcement for _.xor
             * @param itemsA
             * @param itemsB
             */

            function xor(itemsA, itemsB) {
              var map = new Map();

              var insertItem = function insertItem(item) {
                map.set(item, map.has(item) ? map.get(item) + 1 : 1);
              };

              itemsA.forEach(insertItem);
              itemsB.forEach(insertItem);
              var result = [];
              map.forEach(function (count, key) {
                if (count === 1) {
                  result.push(key);
                }
              });
              return result;
            }
            /**
             * replacement for _.intersection
             * @param itemsA
             * @param itemsB
             */

            function intersection(itemsA, itemsB) {
              return itemsA.filter(function (t) {
                return itemsB.indexOf(t) > -1;
              });
            }

            var ResetCoordinatesAction = {
              type: INIT_COORDS,
              payload: {
                clientOffset: null,
                sourceClientOffset: null
              }
            };
            function createBeginDrag(manager) {
              return function beginDrag() {
                var sourceIds = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : [];
                var options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {
                  publishSource: true
                };
                var _options$publishSourc = options.publishSource,
                    publishSource = _options$publishSourc === void 0 ? true : _options$publishSourc,
                    clientOffset = options.clientOffset,
                    getSourceClientOffset = options.getSourceClientOffset;
                var monitor = manager.getMonitor();
                var registry = manager.getRegistry(); // Initialize the coordinates using the client offset

                manager.dispatch(setClientOffset(clientOffset));
                verifyInvariants$1(sourceIds, monitor, registry); // Get the draggable source

                var sourceId = getDraggableSource(sourceIds, monitor);

                if (sourceId === null) {
                  manager.dispatch(ResetCoordinatesAction);
                  return;
                } // Get the source client offset


                var sourceClientOffset = null;

                if (clientOffset) {
                  if (!getSourceClientOffset) {
                    throw new Error('getSourceClientOffset must be defined');
                  }

                  verifyGetSourceClientOffsetIsFunction(getSourceClientOffset);
                  sourceClientOffset = getSourceClientOffset(sourceId);
                } // Initialize the full coordinates


                manager.dispatch(setClientOffset(clientOffset, sourceClientOffset));
                var source = registry.getSource(sourceId);
                var item = source.beginDrag(monitor, sourceId); // If source.beginDrag returns null, this is an indicator to cancel the drag

                if (item == null) {
                  return undefined;
                }

                verifyItemIsObject(item);
                registry.pinSource(sourceId);
                var itemType = registry.getSourceType(sourceId);
                return {
                  type: BEGIN_DRAG,
                  payload: {
                    itemType: itemType,
                    item: item,
                    sourceId: sourceId,
                    clientOffset: clientOffset || null,
                    sourceClientOffset: sourceClientOffset || null,
                    isSourcePublic: !!publishSource
                  }
                };
              };
            }

            function verifyInvariants$1(sourceIds, monitor, registry) {
              invariant(!monitor.isDragging(), 'Cannot call beginDrag while dragging.');
              sourceIds.forEach(function (sourceId) {
                invariant(registry.getSource(sourceId), 'Expected sourceIds to be registered.');
              });
            }

            function verifyGetSourceClientOffsetIsFunction(getSourceClientOffset) {
              invariant(typeof getSourceClientOffset === 'function', 'When clientOffset is provided, getSourceClientOffset must be a function.');
            }

            function verifyItemIsObject(item) {
              invariant(isObject(item), 'Item must be an object.');
            }

            function getDraggableSource(sourceIds, monitor) {
              var sourceId = null;

              for (var i = sourceIds.length - 1; i >= 0; i--) {
                if (monitor.canDragSource(sourceIds[i])) {
                  sourceId = sourceIds[i];
                  break;
                }
              }

              return sourceId;
            }

            function createPublishDragSource(manager) {
              return function publishDragSource() {
                var monitor = manager.getMonitor();

                if (monitor.isDragging()) {
                  return {
                    type: PUBLISH_DRAG_SOURCE
                  };
                }
              };
            }

            function matchesType(targetType, draggedItemType) {
              if (draggedItemType === null) {
                return targetType === null;
              }

              return Array.isArray(targetType) ? targetType.some(function (t) {
                return t === draggedItemType;
              }) : targetType === draggedItemType;
            }

            function createHover(manager) {
              return function hover(targetIdsArg) {
                var _ref = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {},
                    clientOffset = _ref.clientOffset;

                verifyTargetIdsIsArray(targetIdsArg);
                var targetIds = targetIdsArg.slice(0);
                var monitor = manager.getMonitor();
                var registry = manager.getRegistry();
                checkInvariants(targetIds, monitor, registry);
                var draggedItemType = monitor.getItemType();
                removeNonMatchingTargetIds(targetIds, registry, draggedItemType);
                hoverAllTargets(targetIds, monitor, registry);
                return {
                  type: HOVER,
                  payload: {
                    targetIds: targetIds,
                    clientOffset: clientOffset || null
                  }
                };
              };
            }

            function verifyTargetIdsIsArray(targetIdsArg) {
              invariant(Array.isArray(targetIdsArg), 'Expected targetIds to be an array.');
            }

            function checkInvariants(targetIds, monitor, registry) {
              invariant(monitor.isDragging(), 'Cannot call hover while not dragging.');
              invariant(!monitor.didDrop(), 'Cannot call hover after drop.');

              for (var i = 0; i < targetIds.length; i++) {
                var targetId = targetIds[i];
                invariant(targetIds.lastIndexOf(targetId) === i, 'Expected targetIds to be unique in the passed array.');
                var target = registry.getTarget(targetId);
                invariant(target, 'Expected targetIds to be registered.');
              }
            }

            function removeNonMatchingTargetIds(targetIds, registry, draggedItemType) {
              // Remove those targetIds that don't match the targetType.  This
              // fixes shallow isOver which would only be non-shallow because of
              // non-matching targets.
              for (var i = targetIds.length - 1; i >= 0; i--) {
                var targetId = targetIds[i];
                var targetType = registry.getTargetType(targetId);

                if (!matchesType(targetType, draggedItemType)) {
                  targetIds.splice(i, 1);
                }
              }
            }

            function hoverAllTargets(targetIds, monitor, registry) {
              // Finally call hover on all matching targets.
              targetIds.forEach(function (targetId) {
                var target = registry.getTarget(targetId);
                target.hover(monitor, targetId);
              });
            }

            function ownKeys$4(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }

            function _objectSpread$4(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys$4(Object(source), true).forEach(function (key) { _defineProperty$5(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys$4(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }

            function _defineProperty$5(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }
            function createDrop(manager) {
              return function drop() {
                var options = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};
                var monitor = manager.getMonitor();
                var registry = manager.getRegistry();
                verifyInvariants(monitor);
                var targetIds = getDroppableTargets(monitor); // Multiple actions are dispatched here, which is why this doesn't return an action

                targetIds.forEach(function (targetId, index) {
                  var dropResult = determineDropResult(targetId, index, registry, monitor);
                  var action = {
                    type: DROP,
                    payload: {
                      dropResult: _objectSpread$4(_objectSpread$4({}, options), dropResult)
                    }
                  };
                  manager.dispatch(action);
                });
              };
            }

            function verifyInvariants(monitor) {
              invariant(monitor.isDragging(), 'Cannot call drop while not dragging.');
              invariant(!monitor.didDrop(), 'Cannot call drop twice during one drag operation.');
            }

            function determineDropResult(targetId, index, registry, monitor) {
              var target = registry.getTarget(targetId);
              var dropResult = target ? target.drop(monitor, targetId) : undefined;
              verifyDropResultType(dropResult);

              if (typeof dropResult === 'undefined') {
                dropResult = index === 0 ? {} : monitor.getDropResult();
              }

              return dropResult;
            }

            function verifyDropResultType(dropResult) {
              invariant(typeof dropResult === 'undefined' || isObject(dropResult), 'Drop result must either be an object or undefined.');
            }

            function getDroppableTargets(monitor) {
              var targetIds = monitor.getTargetIds().filter(monitor.canDropOnTarget, monitor);
              targetIds.reverse();
              return targetIds;
            }

            function createEndDrag(manager) {
              return function endDrag() {
                var monitor = manager.getMonitor();
                var registry = manager.getRegistry();
                verifyIsDragging(monitor);
                var sourceId = monitor.getSourceId();

                if (sourceId != null) {
                  var source = registry.getSource(sourceId, true);
                  source.endDrag(monitor, sourceId);
                  registry.unpinSource();
                }

                return {
                  type: END_DRAG
                };
              };
            }

            function verifyIsDragging(monitor) {
              invariant(monitor.isDragging(), 'Cannot call endDrag while not dragging.');
            }

            function createDragDropActions(manager) {
              return {
                beginDrag: createBeginDrag(manager),
                publishDragSource: createPublishDragSource(manager),
                hover: createHover(manager),
                drop: createDrop(manager),
                endDrag: createEndDrag(manager)
              };
            }

            function _classCallCheck$7(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

            function _defineProperties$7(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }

            function _createClass$7(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties$7(Constructor.prototype, protoProps); if (staticProps) _defineProperties$7(Constructor, staticProps); return Constructor; }
            var DragDropManagerImpl = /*#__PURE__*/function () {
              function DragDropManagerImpl(store, monitor) {
                var _this = this;

                _classCallCheck$7(this, DragDropManagerImpl);

                this.isSetUp = false;

                this.handleRefCountChange = function () {
                  var shouldSetUp = _this.store.getState().refCount > 0;

                  if (_this.backend) {
                    if (shouldSetUp && !_this.isSetUp) {
                      _this.backend.setup();

                      _this.isSetUp = true;
                    } else if (!shouldSetUp && _this.isSetUp) {
                      _this.backend.teardown();

                      _this.isSetUp = false;
                    }
                  }
                };

                this.store = store;
                this.monitor = monitor;
                store.subscribe(this.handleRefCountChange);
              }

              _createClass$7(DragDropManagerImpl, [{
                key: "receiveBackend",
                value: function receiveBackend(backend) {
                  this.backend = backend;
                }
              }, {
                key: "getMonitor",
                value: function getMonitor() {
                  return this.monitor;
                }
              }, {
                key: "getBackend",
                value: function getBackend() {
                  return this.backend;
                }
              }, {
                key: "getRegistry",
                value: function getRegistry() {
                  return this.monitor.registry;
                }
              }, {
                key: "getActions",
                value: function getActions() {
                  /* eslint-disable-next-line @typescript-eslint/no-this-alias */
                  var manager = this;
                  var dispatch = this.store.dispatch;

                  function bindActionCreator(actionCreator) {
                    return function () {
                      for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
                        args[_key] = arguments[_key];
                      }

                      var action = actionCreator.apply(manager, args);

                      if (typeof action !== 'undefined') {
                        dispatch(action);
                      }
                    };
                  }

                  var actions = createDragDropActions(this);
                  return Object.keys(actions).reduce(function (boundActions, key) {
                    var action = actions[key];
                    boundActions[key] = bindActionCreator(action);
                    return boundActions;
                  }, {});
                }
              }, {
                key: "dispatch",
                value: function dispatch(action) {
                  this.store.dispatch(action);
                }
              }]);

              return DragDropManagerImpl;
            }();

            // Inlined version of the `symbol-observable` polyfill
            var $$observable = (function () {
              return typeof Symbol === 'function' && Symbol.observable || '@@observable';
            })();

            /**
             * These are private action types reserved by Redux.
             * For any unknown actions, you must return the current state.
             * If the current state is undefined, you must return the initial state.
             * Do not reference these action types directly in your code.
             */
            var randomString = function randomString() {
              return Math.random().toString(36).substring(7).split('').join('.');
            };

            var ActionTypes = {
              INIT: "@@redux/INIT" + randomString(),
              REPLACE: "@@redux/REPLACE" + randomString(),
              PROBE_UNKNOWN_ACTION: function PROBE_UNKNOWN_ACTION() {
                return "@@redux/PROBE_UNKNOWN_ACTION" + randomString();
              }
            };

            /**
             * @param {any} obj The object to inspect.
             * @returns {boolean} True if the argument appears to be a plain object.
             */
            function isPlainObject(obj) {
              if (typeof obj !== 'object' || obj === null) return false;
              var proto = obj;

              while (Object.getPrototypeOf(proto) !== null) {
                proto = Object.getPrototypeOf(proto);
              }

              return Object.getPrototypeOf(obj) === proto;
            }

            function kindOf(val) {
              var typeOfVal = typeof val;

              {
                // Inlined / shortened version of `kindOf` from https://github.com/jonschlinkert/kind-of
                function miniKindOf(val) {
                  if (val === void 0) return 'undefined';
                  if (val === null) return 'null';
                  var type = typeof val;

                  switch (type) {
                    case 'boolean':
                    case 'string':
                    case 'number':
                    case 'symbol':
                    case 'function':
                      {
                        return type;
                      }
                  }

                  if (Array.isArray(val)) return 'array';
                  if (isDate(val)) return 'date';
                  if (isError(val)) return 'error';
                  var constructorName = ctorName(val);

                  switch (constructorName) {
                    case 'Symbol':
                    case 'Promise':
                    case 'WeakMap':
                    case 'WeakSet':
                    case 'Map':
                    case 'Set':
                      return constructorName;
                  } // other


                  return type.slice(8, -1).toLowerCase().replace(/\s/g, '');
                }

                function ctorName(val) {
                  return typeof val.constructor === 'function' ? val.constructor.name : null;
                }

                function isError(val) {
                  return val instanceof Error || typeof val.message === 'string' && val.constructor && typeof val.constructor.stackTraceLimit === 'number';
                }

                function isDate(val) {
                  if (val instanceof Date) return true;
                  return typeof val.toDateString === 'function' && typeof val.getDate === 'function' && typeof val.setDate === 'function';
                }

                typeOfVal = miniKindOf(val);
              }

              return typeOfVal;
            }

            /**
             * Creates a Redux store that holds the state tree.
             * The only way to change the data in the store is to call `dispatch()` on it.
             *
             * There should only be a single store in your app. To specify how different
             * parts of the state tree respond to actions, you may combine several reducers
             * into a single reducer function by using `combineReducers`.
             *
             * @param {Function} reducer A function that returns the next state tree, given
             * the current state tree and the action to handle.
             *
             * @param {any} [preloadedState] The initial state. You may optionally specify it
             * to hydrate the state from the server in universal apps, or to restore a
             * previously serialized user session.
             * If you use `combineReducers` to produce the root reducer function, this must be
             * an object with the same shape as `combineReducers` keys.
             *
             * @param {Function} [enhancer] The store enhancer. You may optionally specify it
             * to enhance the store with third-party capabilities such as middleware,
             * time travel, persistence, etc. The only store enhancer that ships with Redux
             * is `applyMiddleware()`.
             *
             * @returns {Store} A Redux store that lets you read the state, dispatch actions
             * and subscribe to changes.
             */

            function createStore(reducer, preloadedState, enhancer) {
              var _ref2;

              if (typeof preloadedState === 'function' && typeof enhancer === 'function' || typeof enhancer === 'function' && typeof arguments[3] === 'function') {
                throw new Error('It looks like you are passing several store enhancers to ' + 'createStore(). This is not supported. Instead, compose them ' + 'together to a single function. See https://redux.js.org/tutorials/fundamentals/part-4-store#creating-a-store-with-enhancers for an example.');
              }

              if (typeof preloadedState === 'function' && typeof enhancer === 'undefined') {
                enhancer = preloadedState;
                preloadedState = undefined;
              }

              if (typeof enhancer !== 'undefined') {
                if (typeof enhancer !== 'function') {
                  throw new Error("Expected the enhancer to be a function. Instead, received: '" + kindOf(enhancer) + "'");
                }

                return enhancer(createStore)(reducer, preloadedState);
              }

              if (typeof reducer !== 'function') {
                throw new Error("Expected the root reducer to be a function. Instead, received: '" + kindOf(reducer) + "'");
              }

              var currentReducer = reducer;
              var currentState = preloadedState;
              var currentListeners = [];
              var nextListeners = currentListeners;
              var isDispatching = false;
              /**
               * This makes a shallow copy of currentListeners so we can use
               * nextListeners as a temporary list while dispatching.
               *
               * This prevents any bugs around consumers calling
               * subscribe/unsubscribe in the middle of a dispatch.
               */

              function ensureCanMutateNextListeners() {
                if (nextListeners === currentListeners) {
                  nextListeners = currentListeners.slice();
                }
              }
              /**
               * Reads the state tree managed by the store.
               *
               * @returns {any} The current state tree of your application.
               */


              function getState() {
                if (isDispatching) {
                  throw new Error('You may not call store.getState() while the reducer is executing. ' + 'The reducer has already received the state as an argument. ' + 'Pass it down from the top reducer instead of reading it from the store.');
                }

                return currentState;
              }
              /**
               * Adds a change listener. It will be called any time an action is dispatched,
               * and some part of the state tree may potentially have changed. You may then
               * call `getState()` to read the current state tree inside the callback.
               *
               * You may call `dispatch()` from a change listener, with the following
               * caveats:
               *
               * 1. The subscriptions are snapshotted just before every `dispatch()` call.
               * If you subscribe or unsubscribe while the listeners are being invoked, this
               * will not have any effect on the `dispatch()` that is currently in progress.
               * However, the next `dispatch()` call, whether nested or not, will use a more
               * recent snapshot of the subscription list.
               *
               * 2. The listener should not expect to see all state changes, as the state
               * might have been updated multiple times during a nested `dispatch()` before
               * the listener is called. It is, however, guaranteed that all subscribers
               * registered before the `dispatch()` started will be called with the latest
               * state by the time it exits.
               *
               * @param {Function} listener A callback to be invoked on every dispatch.
               * @returns {Function} A function to remove this change listener.
               */


              function subscribe(listener) {
                if (typeof listener !== 'function') {
                  throw new Error("Expected the listener to be a function. Instead, received: '" + kindOf(listener) + "'");
                }

                if (isDispatching) {
                  throw new Error('You may not call store.subscribe() while the reducer is executing. ' + 'If you would like to be notified after the store has been updated, subscribe from a ' + 'component and invoke store.getState() in the callback to access the latest state. ' + 'See https://redux.js.org/api/store#subscribelistener for more details.');
                }

                var isSubscribed = true;
                ensureCanMutateNextListeners();
                nextListeners.push(listener);
                return function unsubscribe() {
                  if (!isSubscribed) {
                    return;
                  }

                  if (isDispatching) {
                    throw new Error('You may not unsubscribe from a store listener while the reducer is executing. ' + 'See https://redux.js.org/api/store#subscribelistener for more details.');
                  }

                  isSubscribed = false;
                  ensureCanMutateNextListeners();
                  var index = nextListeners.indexOf(listener);
                  nextListeners.splice(index, 1);
                  currentListeners = null;
                };
              }
              /**
               * Dispatches an action. It is the only way to trigger a state change.
               *
               * The `reducer` function, used to create the store, will be called with the
               * current state tree and the given `action`. Its return value will
               * be considered the **next** state of the tree, and the change listeners
               * will be notified.
               *
               * The base implementation only supports plain object actions. If you want to
               * dispatch a Promise, an Observable, a thunk, or something else, you need to
               * wrap your store creating function into the corresponding middleware. For
               * example, see the documentation for the `redux-thunk` package. Even the
               * middleware will eventually dispatch plain object actions using this method.
               *
               * @param {Object} action A plain object representing “what changed”. It is
               * a good idea to keep actions serializable so you can record and replay user
               * sessions, or use the time travelling `redux-devtools`. An action must have
               * a `type` property which may not be `undefined`. It is a good idea to use
               * string constants for action types.
               *
               * @returns {Object} For convenience, the same action object you dispatched.
               *
               * Note that, if you use a custom middleware, it may wrap `dispatch()` to
               * return something else (for example, a Promise you can await).
               */


              function dispatch(action) {
                if (!isPlainObject(action)) {
                  throw new Error("Actions must be plain objects. Instead, the actual type was: '" + kindOf(action) + "'. You may need to add middleware to your store setup to handle dispatching other values, such as 'redux-thunk' to handle dispatching functions. See https://redux.js.org/tutorials/fundamentals/part-4-store#middleware and https://redux.js.org/tutorials/fundamentals/part-6-async-logic#using-the-redux-thunk-middleware for examples.");
                }

                if (typeof action.type === 'undefined') {
                  throw new Error('Actions may not have an undefined "type" property. You may have misspelled an action type string constant.');
                }

                if (isDispatching) {
                  throw new Error('Reducers may not dispatch actions.');
                }

                try {
                  isDispatching = true;
                  currentState = currentReducer(currentState, action);
                } finally {
                  isDispatching = false;
                }

                var listeners = currentListeners = nextListeners;

                for (var i = 0; i < listeners.length; i++) {
                  var listener = listeners[i];
                  listener();
                }

                return action;
              }
              /**
               * Replaces the reducer currently used by the store to calculate the state.
               *
               * You might need this if your app implements code splitting and you want to
               * load some of the reducers dynamically. You might also need this if you
               * implement a hot reloading mechanism for Redux.
               *
               * @param {Function} nextReducer The reducer for the store to use instead.
               * @returns {void}
               */


              function replaceReducer(nextReducer) {
                if (typeof nextReducer !== 'function') {
                  throw new Error("Expected the nextReducer to be a function. Instead, received: '" + kindOf(nextReducer));
                }

                currentReducer = nextReducer; // This action has a similiar effect to ActionTypes.INIT.
                // Any reducers that existed in both the new and old rootReducer
                // will receive the previous state. This effectively populates
                // the new state tree with any relevant data from the old one.

                dispatch({
                  type: ActionTypes.REPLACE
                });
              }
              /**
               * Interoperability point for observable/reactive libraries.
               * @returns {observable} A minimal observable of state changes.
               * For more information, see the observable proposal:
               * https://github.com/tc39/proposal-observable
               */


              function observable() {
                var _ref;

                var outerSubscribe = subscribe;
                return _ref = {
                  /**
                   * The minimal observable subscription method.
                   * @param {Object} observer Any object that can be used as an observer.
                   * The observer object should have a `next` method.
                   * @returns {subscription} An object with an `unsubscribe` method that can
                   * be used to unsubscribe the observable from the store, and prevent further
                   * emission of values from the observable.
                   */
                  subscribe: function subscribe(observer) {
                    if (typeof observer !== 'object' || observer === null) {
                      throw new Error("Expected the observer to be an object. Instead, received: '" + kindOf(observer) + "'");
                    }

                    function observeState() {
                      if (observer.next) {
                        observer.next(getState());
                      }
                    }

                    observeState();
                    var unsubscribe = outerSubscribe(observeState);
                    return {
                      unsubscribe: unsubscribe
                    };
                  }
                }, _ref[$$observable] = function () {
                  return this;
                }, _ref;
              } // When a store is created, an "INIT" action is dispatched so that every
              // reducer returns their initial state. This effectively populates
              // the initial state tree.


              dispatch({
                type: ActionTypes.INIT
              });
              return _ref2 = {
                dispatch: dispatch,
                subscribe: subscribe,
                getState: getState,
                replaceReducer: replaceReducer
              }, _ref2[$$observable] = observable, _ref2;
            }

            /**
             * Prints a warning in the console if it exists.
             *
             * @param {String} message The warning message.
             * @returns {void}
             */
            function warning(message) {
              /* eslint-disable no-console */
              if (typeof console !== 'undefined' && typeof console.error === 'function') {
                console.error(message);
              }
              /* eslint-enable no-console */


              try {
                // This error was thrown as a convenience so that if you enable
                // "break on all exceptions" in your console,
                // it would pause the execution at this line.
                throw new Error(message);
              } catch (e) {} // eslint-disable-line no-empty

            }

            /*
             * This is a dummy function to check if the function name has been altered by minification.
             * If the function has been minified and NODE_ENV !== 'production', warn the user.
             */

            function isCrushed() {}

            if (typeof isCrushed.name === 'string' && isCrushed.name !== 'isCrushed') {
              warning('You are currently using minified code outside of NODE_ENV === "production". ' + 'This means that you are running a slower development build of Redux. ' + 'You can use loose-envify (https://github.com/zertosh/loose-envify) for browserify ' + 'or setting mode to production in webpack (https://webpack.js.org/concepts/mode/) ' + 'to ensure you have the correct code for your production build.');
            }

            var strictEquality = function strictEquality(a, b) {
              return a === b;
            };
            /**
             * Determine if two cartesian coordinate offsets are equal
             * @param offsetA
             * @param offsetB
             */

            function areCoordsEqual(offsetA, offsetB) {
              if (!offsetA && !offsetB) {
                return true;
              } else if (!offsetA || !offsetB) {
                return false;
              } else {
                return offsetA.x === offsetB.x && offsetA.y === offsetB.y;
              }
            }
            /**
             * Determines if two arrays of items are equal
             * @param a The first array of items
             * @param b The second array of items
             */

            function areArraysEqual(a, b) {
              var isEqual = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : strictEquality;

              if (a.length !== b.length) {
                return false;
              }

              for (var i = 0; i < a.length; ++i) {
                if (!isEqual(a[i], b[i])) {
                  return false;
                }
              }

              return true;
            }

            function ownKeys$3(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }

            function _objectSpread$3(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys$3(Object(source), true).forEach(function (key) { _defineProperty$4(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys$3(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }

            function _defineProperty$4(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }
            var initialState$1 = {
              initialSourceClientOffset: null,
              initialClientOffset: null,
              clientOffset: null
            };
            function reduce$5() {
              var state = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : initialState$1;
              var action = arguments.length > 1 ? arguments[1] : undefined;
              var payload = action.payload;

              switch (action.type) {
                case INIT_COORDS:
                case BEGIN_DRAG:
                  return {
                    initialSourceClientOffset: payload.sourceClientOffset,
                    initialClientOffset: payload.clientOffset,
                    clientOffset: payload.clientOffset
                  };

                case HOVER:
                  if (areCoordsEqual(state.clientOffset, payload.clientOffset)) {
                    return state;
                  }

                  return _objectSpread$3(_objectSpread$3({}, state), {}, {
                    clientOffset: payload.clientOffset
                  });

                case END_DRAG:
                case DROP:
                  return initialState$1;

                default:
                  return state;
              }
            }

            var ADD_SOURCE = 'dnd-core/ADD_SOURCE';
            var ADD_TARGET = 'dnd-core/ADD_TARGET';
            var REMOVE_SOURCE = 'dnd-core/REMOVE_SOURCE';
            var REMOVE_TARGET = 'dnd-core/REMOVE_TARGET';
            function addSource(sourceId) {
              return {
                type: ADD_SOURCE,
                payload: {
                  sourceId: sourceId
                }
              };
            }
            function addTarget(targetId) {
              return {
                type: ADD_TARGET,
                payload: {
                  targetId: targetId
                }
              };
            }
            function removeSource(sourceId) {
              return {
                type: REMOVE_SOURCE,
                payload: {
                  sourceId: sourceId
                }
              };
            }
            function removeTarget(targetId) {
              return {
                type: REMOVE_TARGET,
                payload: {
                  targetId: targetId
                }
              };
            }

            function ownKeys$2(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }

            function _objectSpread$2(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys$2(Object(source), true).forEach(function (key) { _defineProperty$3(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys$2(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }

            function _defineProperty$3(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }
            var initialState = {
              itemType: null,
              item: null,
              sourceId: null,
              targetIds: [],
              dropResult: null,
              didDrop: false,
              isSourcePublic: null
            };
            function reduce$4() {
              var state = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : initialState;
              var action = arguments.length > 1 ? arguments[1] : undefined;
              var payload = action.payload;

              switch (action.type) {
                case BEGIN_DRAG:
                  return _objectSpread$2(_objectSpread$2({}, state), {}, {
                    itemType: payload.itemType,
                    item: payload.item,
                    sourceId: payload.sourceId,
                    isSourcePublic: payload.isSourcePublic,
                    dropResult: null,
                    didDrop: false
                  });

                case PUBLISH_DRAG_SOURCE:
                  return _objectSpread$2(_objectSpread$2({}, state), {}, {
                    isSourcePublic: true
                  });

                case HOVER:
                  return _objectSpread$2(_objectSpread$2({}, state), {}, {
                    targetIds: payload.targetIds
                  });

                case REMOVE_TARGET:
                  if (state.targetIds.indexOf(payload.targetId) === -1) {
                    return state;
                  }

                  return _objectSpread$2(_objectSpread$2({}, state), {}, {
                    targetIds: without$1(state.targetIds, payload.targetId)
                  });

                case DROP:
                  return _objectSpread$2(_objectSpread$2({}, state), {}, {
                    dropResult: payload.dropResult,
                    didDrop: true,
                    targetIds: []
                  });

                case END_DRAG:
                  return _objectSpread$2(_objectSpread$2({}, state), {}, {
                    itemType: null,
                    item: null,
                    sourceId: null,
                    dropResult: null,
                    didDrop: false,
                    isSourcePublic: null,
                    targetIds: []
                  });

                default:
                  return state;
              }
            }

            function reduce$3() {
              var state = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 0;
              var action = arguments.length > 1 ? arguments[1] : undefined;

              switch (action.type) {
                case ADD_SOURCE:
                case ADD_TARGET:
                  return state + 1;

                case REMOVE_SOURCE:
                case REMOVE_TARGET:
                  return state - 1;

                default:
                  return state;
              }
            }

            var NONE = [];
            var ALL = [];
            NONE.__IS_NONE__ = true;
            ALL.__IS_ALL__ = true;
            /**
             * Determines if the given handler IDs are dirty or not.
             *
             * @param dirtyIds The set of dirty handler ids
             * @param handlerIds The set of handler ids to check
             */

            function areDirty(dirtyIds, handlerIds) {
              if (dirtyIds === NONE) {
                return false;
              }

              if (dirtyIds === ALL || typeof handlerIds === 'undefined') {
                return true;
              }

              var commonIds = intersection(handlerIds, dirtyIds);
              return commonIds.length > 0;
            }

            function reduce$2() {

              var action = arguments.length > 1 ? arguments[1] : undefined;

              switch (action.type) {
                case HOVER:
                  break;

                case ADD_SOURCE:
                case ADD_TARGET:
                case REMOVE_TARGET:
                case REMOVE_SOURCE:
                  return NONE;

                case BEGIN_DRAG:
                case PUBLISH_DRAG_SOURCE:
                case END_DRAG:
                case DROP:
                default:
                  return ALL;
              }

              var _action$payload = action.payload,
                  _action$payload$targe = _action$payload.targetIds,
                  targetIds = _action$payload$targe === void 0 ? [] : _action$payload$targe,
                  _action$payload$prevT = _action$payload.prevTargetIds,
                  prevTargetIds = _action$payload$prevT === void 0 ? [] : _action$payload$prevT;
              var result = xor(targetIds, prevTargetIds);
              var didChange = result.length > 0 || !areArraysEqual(targetIds, prevTargetIds);

              if (!didChange) {
                return NONE;
              } // Check the target ids at the innermost position. If they are valid, add them
              // to the result


              var prevInnermostTargetId = prevTargetIds[prevTargetIds.length - 1];
              var innermostTargetId = targetIds[targetIds.length - 1];

              if (prevInnermostTargetId !== innermostTargetId) {
                if (prevInnermostTargetId) {
                  result.push(prevInnermostTargetId);
                }

                if (innermostTargetId) {
                  result.push(innermostTargetId);
                }
              }

              return result;
            }

            function reduce$1() {
              var state = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 0;
              return state + 1;
            }

            function ownKeys$1(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }

            function _objectSpread$1(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys$1(Object(source), true).forEach(function (key) { _defineProperty$2(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys$1(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }

            function _defineProperty$2(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }
            function reduce() {
              var state = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};
              var action = arguments.length > 1 ? arguments[1] : undefined;
              return {
                dirtyHandlerIds: reduce$2(state.dirtyHandlerIds, {
                  type: action.type,
                  payload: _objectSpread$1(_objectSpread$1({}, action.payload), {}, {
                    prevTargetIds: get(state, 'dragOperation.targetIds', [])
                  })
                }),
                dragOffset: reduce$5(state.dragOffset, action),
                refCount: reduce$3(state.refCount, action),
                dragOperation: reduce$4(state.dragOperation, action),
                stateId: reduce$1(state.stateId)
              };
            }

            /**
             * Coordinate addition
             * @param a The first coordinate
             * @param b The second coordinate
             */
            function add(a, b) {
              return {
                x: a.x + b.x,
                y: a.y + b.y
              };
            }
            /**
             * Coordinate subtraction
             * @param a The first coordinate
             * @param b The second coordinate
             */

            function subtract(a, b) {
              return {
                x: a.x - b.x,
                y: a.y - b.y
              };
            }
            /**
             * Returns the cartesian distance of the drag source component's position, based on its position
             * at the time when the current drag operation has started, and the movement difference.
             *
             * Returns null if no item is being dragged.
             *
             * @param state The offset state to compute from
             */

            function getSourceClientOffset(state) {
              var clientOffset = state.clientOffset,
                  initialClientOffset = state.initialClientOffset,
                  initialSourceClientOffset = state.initialSourceClientOffset;

              if (!clientOffset || !initialClientOffset || !initialSourceClientOffset) {
                return null;
              }

              return subtract(add(clientOffset, initialSourceClientOffset), initialClientOffset);
            }
            /**
             * Determines the x,y offset between the client offset and the initial client offset
             *
             * @param state The offset state to compute from
             */

            function getDifferenceFromInitialOffset(state) {
              var clientOffset = state.clientOffset,
                  initialClientOffset = state.initialClientOffset;

              if (!clientOffset || !initialClientOffset) {
                return null;
              }

              return subtract(clientOffset, initialClientOffset);
            }

            function _classCallCheck$6(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

            function _defineProperties$6(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }

            function _createClass$6(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties$6(Constructor.prototype, protoProps); if (staticProps) _defineProperties$6(Constructor, staticProps); return Constructor; }
            var DragDropMonitorImpl = /*#__PURE__*/function () {
              function DragDropMonitorImpl(store, registry) {
                _classCallCheck$6(this, DragDropMonitorImpl);

                this.store = store;
                this.registry = registry;
              }

              _createClass$6(DragDropMonitorImpl, [{
                key: "subscribeToStateChange",
                value: function subscribeToStateChange(listener) {
                  var _this = this;

                  var options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {
                    handlerIds: undefined
                  };
                  var handlerIds = options.handlerIds;
                  invariant(typeof listener === 'function', 'listener must be a function.');
                  invariant(typeof handlerIds === 'undefined' || Array.isArray(handlerIds), 'handlerIds, when specified, must be an array of strings.');
                  var prevStateId = this.store.getState().stateId;

                  var handleChange = function handleChange() {
                    var state = _this.store.getState();

                    var currentStateId = state.stateId;

                    try {
                      var canSkipListener = currentStateId === prevStateId || currentStateId === prevStateId + 1 && !areDirty(state.dirtyHandlerIds, handlerIds);

                      if (!canSkipListener) {
                        listener();
                      }
                    } finally {
                      prevStateId = currentStateId;
                    }
                  };

                  return this.store.subscribe(handleChange);
                }
              }, {
                key: "subscribeToOffsetChange",
                value: function subscribeToOffsetChange(listener) {
                  var _this2 = this;

                  invariant(typeof listener === 'function', 'listener must be a function.');
                  var previousState = this.store.getState().dragOffset;

                  var handleChange = function handleChange() {
                    var nextState = _this2.store.getState().dragOffset;

                    if (nextState === previousState) {
                      return;
                    }

                    previousState = nextState;
                    listener();
                  };

                  return this.store.subscribe(handleChange);
                }
              }, {
                key: "canDragSource",
                value: function canDragSource(sourceId) {
                  if (!sourceId) {
                    return false;
                  }

                  var source = this.registry.getSource(sourceId);
                  invariant(source, "Expected to find a valid source. sourceId=".concat(sourceId));

                  if (this.isDragging()) {
                    return false;
                  }

                  return source.canDrag(this, sourceId);
                }
              }, {
                key: "canDropOnTarget",
                value: function canDropOnTarget(targetId) {
                  // undefined on initial render
                  if (!targetId) {
                    return false;
                  }

                  var target = this.registry.getTarget(targetId);
                  invariant(target, "Expected to find a valid target. targetId=".concat(targetId));

                  if (!this.isDragging() || this.didDrop()) {
                    return false;
                  }

                  var targetType = this.registry.getTargetType(targetId);
                  var draggedItemType = this.getItemType();
                  return matchesType(targetType, draggedItemType) && target.canDrop(this, targetId);
                }
              }, {
                key: "isDragging",
                value: function isDragging() {
                  return Boolean(this.getItemType());
                }
              }, {
                key: "isDraggingSource",
                value: function isDraggingSource(sourceId) {
                  // undefined on initial render
                  if (!sourceId) {
                    return false;
                  }

                  var source = this.registry.getSource(sourceId, true);
                  invariant(source, "Expected to find a valid source. sourceId=".concat(sourceId));

                  if (!this.isDragging() || !this.isSourcePublic()) {
                    return false;
                  }

                  var sourceType = this.registry.getSourceType(sourceId);
                  var draggedItemType = this.getItemType();

                  if (sourceType !== draggedItemType) {
                    return false;
                  }

                  return source.isDragging(this, sourceId);
                }
              }, {
                key: "isOverTarget",
                value: function isOverTarget(targetId) {
                  var options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {
                    shallow: false
                  };

                  // undefined on initial render
                  if (!targetId) {
                    return false;
                  }

                  var shallow = options.shallow;

                  if (!this.isDragging()) {
                    return false;
                  }

                  var targetType = this.registry.getTargetType(targetId);
                  var draggedItemType = this.getItemType();

                  if (draggedItemType && !matchesType(targetType, draggedItemType)) {
                    return false;
                  }

                  var targetIds = this.getTargetIds();

                  if (!targetIds.length) {
                    return false;
                  }

                  var index = targetIds.indexOf(targetId);

                  if (shallow) {
                    return index === targetIds.length - 1;
                  } else {
                    return index > -1;
                  }
                }
              }, {
                key: "getItemType",
                value: function getItemType() {
                  return this.store.getState().dragOperation.itemType;
                }
              }, {
                key: "getItem",
                value: function getItem() {
                  return this.store.getState().dragOperation.item;
                }
              }, {
                key: "getSourceId",
                value: function getSourceId() {
                  return this.store.getState().dragOperation.sourceId;
                }
              }, {
                key: "getTargetIds",
                value: function getTargetIds() {
                  return this.store.getState().dragOperation.targetIds;
                }
              }, {
                key: "getDropResult",
                value: function getDropResult() {
                  return this.store.getState().dragOperation.dropResult;
                }
              }, {
                key: "didDrop",
                value: function didDrop() {
                  return this.store.getState().dragOperation.didDrop;
                }
              }, {
                key: "isSourcePublic",
                value: function isSourcePublic() {
                  return Boolean(this.store.getState().dragOperation.isSourcePublic);
                }
              }, {
                key: "getInitialClientOffset",
                value: function getInitialClientOffset() {
                  return this.store.getState().dragOffset.initialClientOffset;
                }
              }, {
                key: "getInitialSourceClientOffset",
                value: function getInitialSourceClientOffset() {
                  return this.store.getState().dragOffset.initialSourceClientOffset;
                }
              }, {
                key: "getClientOffset",
                value: function getClientOffset() {
                  return this.store.getState().dragOffset.clientOffset;
                }
              }, {
                key: "getSourceClientOffset",
                value: function getSourceClientOffset$1() {
                  return getSourceClientOffset(this.store.getState().dragOffset);
                }
              }, {
                key: "getDifferenceFromInitialOffset",
                value: function getDifferenceFromInitialOffset$1() {
                  return getDifferenceFromInitialOffset(this.store.getState().dragOffset);
                }
              }]);

              return DragDropMonitorImpl;
            }();

            var nextUniqueId = 0;
            function getNextUniqueId() {
              return nextUniqueId++;
            }

            function _typeof(obj) { "@babel/helpers - typeof"; if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") { _typeof = function _typeof(obj) { return typeof obj; }; } else { _typeof = function _typeof(obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }; } return _typeof(obj); }
            function validateSourceContract(source) {
              invariant(typeof source.canDrag === 'function', 'Expected canDrag to be a function.');
              invariant(typeof source.beginDrag === 'function', 'Expected beginDrag to be a function.');
              invariant(typeof source.endDrag === 'function', 'Expected endDrag to be a function.');
            }
            function validateTargetContract(target) {
              invariant(typeof target.canDrop === 'function', 'Expected canDrop to be a function.');
              invariant(typeof target.hover === 'function', 'Expected hover to be a function.');
              invariant(typeof target.drop === 'function', 'Expected beginDrag to be a function.');
            }
            function validateType(type, allowArray) {
              if (allowArray && Array.isArray(type)) {
                type.forEach(function (t) {
                  return validateType(t, false);
                });
                return;
              }

              invariant(typeof type === 'string' || _typeof(type) === 'symbol', allowArray ? 'Type can only be a string, a symbol, or an array of either.' : 'Type can only be a string or a symbol.');
            }

            // Use the fastest means possible to execute a task in its own turn, with
            // priority over other events including IO, animation, reflow, and redraw
            // events in browsers.
            //
            // An exception thrown by a task will permanently interrupt the processing of
            // subsequent tasks. The higher level `asap` function ensures that if an
            // exception is thrown by a task, that the task queue will continue flushing as
            // soon as possible, but if you use `rawAsap` directly, you are responsible to
            // either ensure that no exceptions are thrown from your task, or to manually
            // call `rawAsap.requestFlush` if an exception is thrown.
            function rawAsap(task) {
              if (!queue.length) {
                requestFlush();
              } // Equivalent to push, but avoids a function call.


              queue[queue.length] = task;
            }
            var queue = []; // Once a flush has been requested, no further calls to `requestFlush` are
            // off a `flush` event as quickly as possible. `flush` will attempt to exhaust
            // the event queue before yielding to the browser's own event loop.

            var requestFlush; // The position of the next task to execute in the task queue. This is
            // preserved between calls to `flush` so that it can be resumed if
            // a task throws an exception.

            var index = 0; // If a task schedules additional tasks recursively, the task queue can grow
            // unbounded. To prevent memory exhaustion, the task queue will periodically
            // truncate already-completed tasks.

            var capacity = 1024; // The flush function processes all tasks that have been scheduled with
            // `rawAsap` unless and until one of those tasks throws an exception.
            // If a task throws an exception, `flush` ensures that its state will remain
            // consistent and will resume where it left off when called again.
            // However, `flush` does not make any arrangements to be called again if an
            // exception is thrown.

            function flush() {
              while (index < queue.length) {
                var currentIndex = index; // Advance the index before calling the task. This ensures that we will
                // begin flushing on the next task the task throws an error.

                index = index + 1;
                queue[currentIndex].call(); // Prevent leaking memory for long chains of recursive calls to `asap`.
                // If we call `asap` within tasks scheduled by `asap`, the queue will
                // grow, but to avoid an O(n) walk for every task we execute, we don't
                // shift tasks off the queue after they have been executed.
                // Instead, we periodically shift 1024 tasks off the queue.

                if (index > capacity) {
                  // Manually shift all values starting at the index back to the
                  // beginning of the queue.
                  for (var scan = 0, newLength = queue.length - index; scan < newLength; scan++) {
                    queue[scan] = queue[scan + index];
                  }

                  queue.length -= index;
                  index = 0;
                }
              }

              queue.length = 0;
              index = 0;
            } // `requestFlush` is implemented using a strategy based on data collected from
            // every available SauceLabs Selenium web driver worker at time of writing.
            // https://docs.google.com/spreadsheets/d/1mG-5UYGup5qxGdEMWkhP6BWCz053NUb2E1QoUTU16uA/edit#gid=783724593
            // Safari 6 and 6.1 for desktop, iPad, and iPhone are the only browsers that
            // have WebKitMutationObserver but not un-prefixed MutationObserver.
            // Must use `global` or `self` instead of `window` to work in both frames and web
            // workers. `global` is a provision of Browserify, Mr, Mrs, or Mop.

            /* globals self */


            var scope = typeof global$1 !== 'undefined' ? global$1 : self;
            var BrowserMutationObserver = scope.MutationObserver || scope.WebKitMutationObserver; // MutationObservers are desirable because they have high priority and work
            // reliably everywhere they are implemented.
            // They are implemented in all modern browsers.
            //
            // - Android 4-4.3
            // - Chrome 26-34
            // - Firefox 14-29
            // - Internet Explorer 11
            // - iPad Safari 6-7.1
            // - iPhone Safari 7-7.1
            // - Safari 6-7

            if (typeof BrowserMutationObserver === 'function') {
              requestFlush = makeRequestCallFromMutationObserver(flush); // MessageChannels are desirable because they give direct access to the HTML
              // task queue, are implemented in Internet Explorer 10, Safari 5.0-1, and Opera
              // 11-12, and in web workers in many engines.
              // Although message channels yield to any queued rendering and IO tasks, they
              // would be better than imposing the 4ms delay of timers.
              // However, they do not work reliably in Internet Explorer or Safari.
              // Internet Explorer 10 is the only browser that has setImmediate but does
              // not have MutationObservers.
              // Although setImmediate yields to the browser's renderer, it would be
              // preferrable to falling back to setTimeout since it does not have
              // the minimum 4ms penalty.
              // Unfortunately there appears to be a bug in Internet Explorer 10 Mobile (and
              // Desktop to a lesser extent) that renders both setImmediate and
              // MessageChannel useless for the purposes of ASAP.
              // https://github.com/kriskowal/q/issues/396
              // Timers are implemented universally.
              // We fall back to timers in workers in most engines, and in foreground
              // contexts in the following browsers.
              // However, note that even this simple case requires nuances to operate in a
              // broad spectrum of browsers.
              //
              // - Firefox 3-13
              // - Internet Explorer 6-9
              // - iPad Safari 4.3
              // - Lynx 2.8.7
            } else {
              requestFlush = makeRequestCallFromTimer(flush);
            } // `requestFlush` requests that the high priority event queue be flushed as
            // soon as possible.
            // This is useful to prevent an error thrown in a task from stalling the event
            // queue if the exception handled by Node.js’s
            // `process.on("uncaughtException")` or by a domain.


            rawAsap.requestFlush = requestFlush; // To request a high priority event, we induce a mutation observer by toggling
            // the text of a text node between "1" and "-1".

            function makeRequestCallFromMutationObserver(callback) {
              var toggle = 1;
              var observer = new BrowserMutationObserver(callback);
              var node = document.createTextNode('');
              observer.observe(node, {
                characterData: true
              });
              return function requestCall() {
                toggle = -toggle;
                node.data = toggle;
              };
            } // The message channel technique was discovered by Malte Ubl and was the
            // original foundation for this library.
            // http://www.nonblocking.io/2011/06/windownexttick.html
            // Safari 6.0.5 (at least) intermittently fails to create message ports on a
            // page's first load. Thankfully, this version of Safari supports
            // MutationObservers, so we don't need to fall back in that case.
            // function makeRequestCallFromMessageChannel(callback) {
            //     var channel = new MessageChannel();
            //     channel.port1.onmessage = callback;
            //     return function requestCall() {
            //         channel.port2.postMessage(0);
            //     };
            // }
            // For reasons explained above, we are also unable to use `setImmediate`
            // under any circumstances.
            // Even if we were, there is another bug in Internet Explorer 10.
            // It is not sufficient to assign `setImmediate` to `requestFlush` because
            // `setImmediate` must be called *by name* and therefore must be wrapped in a
            // closure.
            // Never forget.
            // function makeRequestCallFromSetImmediate(callback) {
            //     return function requestCall() {
            //         setImmediate(callback);
            //     };
            // }
            // Safari 6.0 has a problem where timers will get lost while the user is
            // scrolling. This problem does not impact ASAP because Safari 6.0 supports
            // mutation observers, so that implementation is used instead.
            // However, if we ever elect to use timers in Safari, the prevalent work-around
            // is to add a scroll event listener that calls for a flush.
            // `setTimeout` does not call the passed callback if the delay is less than
            // approximately 7 in web workers in Firefox 8 through 18, and sometimes not
            // even then.


            function makeRequestCallFromTimer(callback) {
              return function requestCall() {
                // We dispatch a timeout with a specified delay of 0 for engines that
                // can reliably accommodate that request. This will usually be snapped
                // to a 4 milisecond delay, but once we're flushing, there's no delay
                // between events.
                var timeoutHandle = setTimeout(handleTimer, 0); // However, since this timer gets frequently dropped in Firefox
                // workers, we enlist an interval handle that will try to fire
                // an event 20 times per second until it succeeds.

                var intervalHandle = setInterval(handleTimer, 50);

                function handleTimer() {
                  // Whichever timer succeeds will cancel both timers and
                  // execute the callback.
                  clearTimeout(timeoutHandle);
                  clearInterval(intervalHandle);
                  callback();
                }
              };
            } // This is for `asap.js` only.
            // Its name will be periodically randomized to break any code that depends on
            // its existence.


            rawAsap.makeRequestCallFromTimer = makeRequestCallFromTimer; // ASAP was originally a nextTick shim included in Q. This was factored out
            // into this ASAP package. It was later adapted to RSVP which made further
            // amendments. These decisions, particularly to marginalize MessageChannel and
            // to capture the MutationObserver implementation in a closure, were integrated
            // back into ASAP proper.
            // https://github.com/tildeio/rsvp.js/blob/cddf7232546a9cf858524b75cde6f9edf72620a7/lib/rsvp/asap.js

            // RawTasks are recycled to reduce GC churn.

            var freeTasks = []; // We queue errors to ensure they are thrown in right order (FIFO).
            // Array-as-queue is good enough here, since we are just dealing with exceptions.

            var pendingErrors = [];
            var requestErrorThrow = rawAsap.makeRequestCallFromTimer(throwFirstError);

            function throwFirstError() {
              if (pendingErrors.length) {
                throw pendingErrors.shift();
              }
            }
            /**
             * Calls a task as soon as possible after returning, in its own event, with priority
             * over other events like animation, reflow, and repaint. An error thrown from an
             * event will not interrupt, nor even substantially slow down the processing of
             * other events, but will be rather postponed to a lower priority event.
             * @param {{call}} task A callable object, typically a function that takes no
             * arguments.
             */


            function asap(task) {
              var rawTask;

              if (freeTasks.length) {
                rawTask = freeTasks.pop();
              } else {
                rawTask = new RawTask();
              }

              rawTask.task = task;
              rawAsap(rawTask);
            } // We wrap tasks with recyclable task objects.  A task object implements
            // `call`, just like a function.

            var RawTask =
            /** @class */
            function () {
              function RawTask() {}

              RawTask.prototype.call = function () {
                try {
                  this.task.call();
                } catch (error) {
                  if (asap.onerror) {
                    // This hook exists purely for testing purposes.
                    // Its name will be periodically randomized to break any code that
                    // depends on its existence.
                    asap.onerror(error);
                  } else {
                    // In a web browser, exceptions are not fatal. However, to avoid
                    // slowing down the queue of pending tasks, we rethrow the error in a
                    // lower priority turn.
                    pendingErrors.push(error);
                    requestErrorThrow();
                  }
                } finally {
                  this.task = null;
                  freeTasks[freeTasks.length] = this;
                }
              };

              return RawTask;
            }();

            function _classCallCheck$5(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

            function _defineProperties$5(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }

            function _createClass$5(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties$5(Constructor.prototype, protoProps); if (staticProps) _defineProperties$5(Constructor, staticProps); return Constructor; }

            function _slicedToArray$1(arr, i) { return _arrayWithHoles$1(arr) || _iterableToArrayLimit$1(arr, i) || _unsupportedIterableToArray$1(arr, i) || _nonIterableRest$1(); }

            function _nonIterableRest$1() { throw new TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method."); }

            function _unsupportedIterableToArray$1(o, minLen) { if (!o) return; if (typeof o === "string") return _arrayLikeToArray$1(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === "Object" && o.constructor) n = o.constructor.name; if (n === "Map" || n === "Set") return Array.from(o); if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray$1(o, minLen); }

            function _arrayLikeToArray$1(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) { arr2[i] = arr[i]; } return arr2; }

            function _iterableToArrayLimit$1(arr, i) { if (typeof Symbol === "undefined" || !(Symbol.iterator in Object(arr))) return; var _arr = []; var _n = true; var _d = false; var _e = undefined; try { for (var _i = arr[Symbol.iterator](), _s; !(_n = (_s = _i.next()).done); _n = true) { _arr.push(_s.value); if (i && _arr.length === i) break; } } catch (err) { _d = true; _e = err; } finally { try { if (!_n && _i["return"] != null) _i["return"](); } finally { if (_d) throw _e; } } return _arr; }

            function _arrayWithHoles$1(arr) { if (Array.isArray(arr)) return arr; }

            function getNextHandlerId(role) {
              var id = getNextUniqueId().toString();

              switch (role) {
                case HandlerRole.SOURCE:
                  return "S".concat(id);

                case HandlerRole.TARGET:
                  return "T".concat(id);

                default:
                  throw new Error("Unknown Handler Role: ".concat(role));
              }
            }

            function parseRoleFromHandlerId(handlerId) {
              switch (handlerId[0]) {
                case 'S':
                  return HandlerRole.SOURCE;

                case 'T':
                  return HandlerRole.TARGET;

                default:
                  invariant(false, "Cannot parse handler ID: ".concat(handlerId));
              }
            }

            function mapContainsValue(map, searchValue) {
              var entries = map.entries();
              var isDone = false;

              do {
                var _entries$next = entries.next(),
                    done = _entries$next.done,
                    _entries$next$value = _slicedToArray$1(_entries$next.value, 2),
                    value = _entries$next$value[1];

                if (value === searchValue) {
                  return true;
                }

                isDone = !!done;
              } while (!isDone);

              return false;
            }

            var HandlerRegistryImpl = /*#__PURE__*/function () {
              function HandlerRegistryImpl(store) {
                _classCallCheck$5(this, HandlerRegistryImpl);

                this.types = new Map();
                this.dragSources = new Map();
                this.dropTargets = new Map();
                this.pinnedSourceId = null;
                this.pinnedSource = null;
                this.store = store;
              }

              _createClass$5(HandlerRegistryImpl, [{
                key: "addSource",
                value: function addSource$1(type, source) {
                  validateType(type);
                  validateSourceContract(source);
                  var sourceId = this.addHandler(HandlerRole.SOURCE, type, source);
                  this.store.dispatch(addSource(sourceId));
                  return sourceId;
                }
              }, {
                key: "addTarget",
                value: function addTarget$1(type, target) {
                  validateType(type, true);
                  validateTargetContract(target);
                  var targetId = this.addHandler(HandlerRole.TARGET, type, target);
                  this.store.dispatch(addTarget(targetId));
                  return targetId;
                }
              }, {
                key: "containsHandler",
                value: function containsHandler(handler) {
                  return mapContainsValue(this.dragSources, handler) || mapContainsValue(this.dropTargets, handler);
                }
              }, {
                key: "getSource",
                value: function getSource(sourceId) {
                  var includePinned = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : false;
                  invariant(this.isSourceId(sourceId), 'Expected a valid source ID.');
                  var isPinned = includePinned && sourceId === this.pinnedSourceId;
                  var source = isPinned ? this.pinnedSource : this.dragSources.get(sourceId);
                  return source;
                }
              }, {
                key: "getTarget",
                value: function getTarget(targetId) {
                  invariant(this.isTargetId(targetId), 'Expected a valid target ID.');
                  return this.dropTargets.get(targetId);
                }
              }, {
                key: "getSourceType",
                value: function getSourceType(sourceId) {
                  invariant(this.isSourceId(sourceId), 'Expected a valid source ID.');
                  return this.types.get(sourceId);
                }
              }, {
                key: "getTargetType",
                value: function getTargetType(targetId) {
                  invariant(this.isTargetId(targetId), 'Expected a valid target ID.');
                  return this.types.get(targetId);
                }
              }, {
                key: "isSourceId",
                value: function isSourceId(handlerId) {
                  var role = parseRoleFromHandlerId(handlerId);
                  return role === HandlerRole.SOURCE;
                }
              }, {
                key: "isTargetId",
                value: function isTargetId(handlerId) {
                  var role = parseRoleFromHandlerId(handlerId);
                  return role === HandlerRole.TARGET;
                }
              }, {
                key: "removeSource",
                value: function removeSource$1(sourceId) {
                  var _this = this;

                  invariant(this.getSource(sourceId), 'Expected an existing source.');
                  this.store.dispatch(removeSource(sourceId));
                  asap(function () {
                    _this.dragSources.delete(sourceId);

                    _this.types.delete(sourceId);
                  });
                }
              }, {
                key: "removeTarget",
                value: function removeTarget$1(targetId) {
                  invariant(this.getTarget(targetId), 'Expected an existing target.');
                  this.store.dispatch(removeTarget(targetId));
                  this.dropTargets.delete(targetId);
                  this.types.delete(targetId);
                }
              }, {
                key: "pinSource",
                value: function pinSource(sourceId) {
                  var source = this.getSource(sourceId);
                  invariant(source, 'Expected an existing source.');
                  this.pinnedSourceId = sourceId;
                  this.pinnedSource = source;
                }
              }, {
                key: "unpinSource",
                value: function unpinSource() {
                  invariant(this.pinnedSource, 'No source is pinned at the time.');
                  this.pinnedSourceId = null;
                  this.pinnedSource = null;
                }
              }, {
                key: "addHandler",
                value: function addHandler(role, type, handler) {
                  var id = getNextHandlerId(role);
                  this.types.set(id, type);

                  if (role === HandlerRole.SOURCE) {
                    this.dragSources.set(id, handler);
                  } else if (role === HandlerRole.TARGET) {
                    this.dropTargets.set(id, handler);
                  }

                  return id;
                }
              }]);

              return HandlerRegistryImpl;
            }();

            function createDragDropManager(backendFactory) {
              var globalContext = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : undefined;
              var backendOptions = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};
              var debugMode = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : false;
              var store = makeStoreInstance(debugMode);
              var monitor = new DragDropMonitorImpl(store, new HandlerRegistryImpl(store));
              var manager = new DragDropManagerImpl(store, monitor);
              var backend = backendFactory(manager, globalContext, backendOptions);
              manager.receiveBackend(backend);
              return manager;
            }

            function makeStoreInstance(debugMode) {
              // TODO: if we ever make a react-native version of this,
              // we'll need to consider how to pull off dev-tooling
              var reduxDevTools = typeof window !== 'undefined' && window.__REDUX_DEVTOOLS_EXTENSION__;
              return createStore(reduce, debugMode && reduxDevTools && reduxDevTools({
                name: 'dnd-core',
                instanceId: 'dnd-core'
              }));
            }

            function _slicedToArray(arr, i) { return _arrayWithHoles(arr) || _iterableToArrayLimit(arr, i) || _unsupportedIterableToArray(arr, i) || _nonIterableRest(); }

            function _nonIterableRest() { throw new TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method."); }

            function _unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === "string") return _arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === "Object" && o.constructor) n = o.constructor.name; if (n === "Map" || n === "Set") return Array.from(o); if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen); }

            function _arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) { arr2[i] = arr[i]; } return arr2; }

            function _iterableToArrayLimit(arr, i) { if (typeof Symbol === "undefined" || !(Symbol.iterator in Object(arr))) return; var _arr = []; var _n = true; var _d = false; var _e = undefined; try { for (var _i = arr[Symbol.iterator](), _s; !(_n = (_s = _i.next()).done); _n = true) { _arr.push(_s.value); if (i && _arr.length === i) break; } } catch (err) { _d = true; _e = err; } finally { try { if (!_n && _i["return"] != null) _i["return"](); } finally { if (_d) throw _e; } } return _arr; }

            function _arrayWithHoles(arr) { if (Array.isArray(arr)) return arr; }

            function _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }

            function _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }
            var refCount = 0;
            var INSTANCE_SYM = Symbol.for('__REACT_DND_CONTEXT_INSTANCE__');
            /**
             * A React component that provides the React-DnD context
             */

            var DndProvider = react.memo(function DndProvider(_ref) {
              var children = _ref.children,
                  props = _objectWithoutProperties(_ref, ["children"]);

              var _getDndContextValue = getDndContextValue(props),
                  _getDndContextValue2 = _slicedToArray(_getDndContextValue, 2),
                  manager = _getDndContextValue2[0],
                  isGlobalInstance = _getDndContextValue2[1]; // memoized from props

              /**
               * If the global context was used to store the DND context
               * then where theres no more references to it we should
               * clean it up to avoid memory leaks
               */


              react.useEffect(function () {
                if (isGlobalInstance) {
                  var context = getGlobalContext();
                  ++refCount;
                  return function () {
                    if (--refCount === 0) {
                      context[INSTANCE_SYM] = null;
                    }
                  };
                }
              }, []);
              return jsxRuntime.jsx(DndContext.Provider, Object.assign({
                value: manager
              }, {
                children: children
              }), void 0);
            });

            function getDndContextValue(props) {
              if ('manager' in props) {
                var _manager = {
                  dragDropManager: props.manager
                };
                return [_manager, false];
              }

              var manager = createSingletonDndContext(props.backend, props.context, props.options, props.debugMode);
              var isGlobalInstance = !props.context;
              return [manager, isGlobalInstance];
            }

            function createSingletonDndContext(backend) {
              var context = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : getGlobalContext();
              var options = arguments.length > 2 ? arguments[2] : undefined;
              var debugMode = arguments.length > 3 ? arguments[3] : undefined;
              var ctx = context;

              if (!ctx[INSTANCE_SYM]) {
                ctx[INSTANCE_SYM] = {
                  dragDropManager: createDragDropManager(backend, context, options, debugMode)
                };
              }

              return ctx[INSTANCE_SYM];
            }

            function getGlobalContext() {
              return typeof global$1 !== 'undefined' ? global$1 : window;
            }

            // cheap lodash replacements
            function memoize(fn) {
              var result = null;

              var memoized = function memoized() {
                if (result == null) {
                  result = fn();
                }

                return result;
              };

              return memoized;
            }
            /**
             * drop-in replacement for _.without
             */

            function without(items, item) {
              return items.filter(function (i) {
                return i !== item;
              });
            }
            function union(itemsA, itemsB) {
              var set = new Set();

              var insertItem = function insertItem(item) {
                return set.add(item);
              };

              itemsA.forEach(insertItem);
              itemsB.forEach(insertItem);
              var result = [];
              set.forEach(function (key) {
                return result.push(key);
              });
              return result;
            }

            function _classCallCheck$4(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

            function _defineProperties$4(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }

            function _createClass$4(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties$4(Constructor.prototype, protoProps); if (staticProps) _defineProperties$4(Constructor, staticProps); return Constructor; }
            var EnterLeaveCounter = /*#__PURE__*/function () {
              function EnterLeaveCounter(isNodeInDocument) {
                _classCallCheck$4(this, EnterLeaveCounter);

                this.entered = [];
                this.isNodeInDocument = isNodeInDocument;
              }

              _createClass$4(EnterLeaveCounter, [{
                key: "enter",
                value: function enter(enteringNode) {
                  var _this = this;

                  var previousLength = this.entered.length;

                  var isNodeEntered = function isNodeEntered(node) {
                    return _this.isNodeInDocument(node) && (!node.contains || node.contains(enteringNode));
                  };

                  this.entered = union(this.entered.filter(isNodeEntered), [enteringNode]);
                  return previousLength === 0 && this.entered.length > 0;
                }
              }, {
                key: "leave",
                value: function leave(leavingNode) {
                  var previousLength = this.entered.length;
                  this.entered = without(this.entered.filter(this.isNodeInDocument), leavingNode);
                  return previousLength > 0 && this.entered.length === 0;
                }
              }, {
                key: "reset",
                value: function reset() {
                  this.entered = [];
                }
              }]);

              return EnterLeaveCounter;
            }();

            var isFirefox = memoize(function () {
              return /firefox/i.test(navigator.userAgent);
            });
            var isSafari = memoize(function () {
              return Boolean(window.safari);
            });

            function _classCallCheck$3(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

            function _defineProperties$3(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }

            function _createClass$3(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties$3(Constructor.prototype, protoProps); if (staticProps) _defineProperties$3(Constructor, staticProps); return Constructor; }

            var MonotonicInterpolant = /*#__PURE__*/function () {
              function MonotonicInterpolant(xs, ys) {
                _classCallCheck$3(this, MonotonicInterpolant);

                var length = xs.length; // Rearrange xs and ys so that xs is sorted

                var indexes = [];

                for (var i = 0; i < length; i++) {
                  indexes.push(i);
                }

                indexes.sort(function (a, b) {
                  return xs[a] < xs[b] ? -1 : 1;
                }); // Get consecutive differences and slopes
                var dxs = [];
                var ms = [];
                var dx;
                var dy;

                for (var _i = 0; _i < length - 1; _i++) {
                  dx = xs[_i + 1] - xs[_i];
                  dy = ys[_i + 1] - ys[_i];
                  dxs.push(dx);
                  ms.push(dy / dx);
                } // Get degree-1 coefficients


                var c1s = [ms[0]];

                for (var _i2 = 0; _i2 < dxs.length - 1; _i2++) {
                  var m2 = ms[_i2];
                  var mNext = ms[_i2 + 1];

                  if (m2 * mNext <= 0) {
                    c1s.push(0);
                  } else {
                    dx = dxs[_i2];
                    var dxNext = dxs[_i2 + 1];
                    var common = dx + dxNext;
                    c1s.push(3 * common / ((common + dxNext) / m2 + (common + dx) / mNext));
                  }
                }

                c1s.push(ms[ms.length - 1]); // Get degree-2 and degree-3 coefficients

                var c2s = [];
                var c3s = [];
                var m;

                for (var _i3 = 0; _i3 < c1s.length - 1; _i3++) {
                  m = ms[_i3];
                  var c1 = c1s[_i3];
                  var invDx = 1 / dxs[_i3];

                  var _common = c1 + c1s[_i3 + 1] - m - m;

                  c2s.push((m - c1 - _common) * invDx);
                  c3s.push(_common * invDx * invDx);
                }

                this.xs = xs;
                this.ys = ys;
                this.c1s = c1s;
                this.c2s = c2s;
                this.c3s = c3s;
              }

              _createClass$3(MonotonicInterpolant, [{
                key: "interpolate",
                value: function interpolate(x) {
                  var xs = this.xs,
                      ys = this.ys,
                      c1s = this.c1s,
                      c2s = this.c2s,
                      c3s = this.c3s; // The rightmost point in the dataset should give an exact result

                  var i = xs.length - 1;

                  if (x === xs[i]) {
                    return ys[i];
                  } // Search for the interval x is in, returning the corresponding y if x is one of the original xs


                  var low = 0;
                  var high = c3s.length - 1;
                  var mid;

                  while (low <= high) {
                    mid = Math.floor(0.5 * (low + high));
                    var xHere = xs[mid];

                    if (xHere < x) {
                      low = mid + 1;
                    } else if (xHere > x) {
                      high = mid - 1;
                    } else {
                      return ys[mid];
                    }
                  }

                  i = Math.max(0, high); // Interpolate

                  var diff = x - xs[i];
                  var diffSq = diff * diff;
                  return ys[i] + c1s[i] * diff + c2s[i] * diffSq + c3s[i] * diff * diffSq;
                }
              }]);

              return MonotonicInterpolant;
            }();

            var ELEMENT_NODE = 1;
            function getNodeClientOffset(node) {
              var el = node.nodeType === ELEMENT_NODE ? node : node.parentElement;

              if (!el) {
                return null;
              }

              var _el$getBoundingClient = el.getBoundingClientRect(),
                  top = _el$getBoundingClient.top,
                  left = _el$getBoundingClient.left;

              return {
                x: left,
                y: top
              };
            }
            function getEventClientOffset(e) {
              return {
                x: e.clientX,
                y: e.clientY
              };
            }

            function isImageNode(node) {
              var _document$documentEle;

              return node.nodeName === 'IMG' && (isFirefox() || !((_document$documentEle = document.documentElement) !== null && _document$documentEle !== void 0 && _document$documentEle.contains(node)));
            }

            function getDragPreviewSize(isImage, dragPreview, sourceWidth, sourceHeight) {
              var dragPreviewWidth = isImage ? dragPreview.width : sourceWidth;
              var dragPreviewHeight = isImage ? dragPreview.height : sourceHeight; // Work around @2x coordinate discrepancies in browsers

              if (isSafari() && isImage) {
                dragPreviewHeight /= window.devicePixelRatio;
                dragPreviewWidth /= window.devicePixelRatio;
              }

              return {
                dragPreviewWidth: dragPreviewWidth,
                dragPreviewHeight: dragPreviewHeight
              };
            }

            function getDragPreviewOffset(sourceNode, dragPreview, clientOffset, anchorPoint, offsetPoint) {
              // The browsers will use the image intrinsic size under different conditions.
              // Firefox only cares if it's an image, but WebKit also wants it to be detached.
              var isImage = isImageNode(dragPreview);
              var dragPreviewNode = isImage ? sourceNode : dragPreview;
              var dragPreviewNodeOffsetFromClient = getNodeClientOffset(dragPreviewNode);
              var offsetFromDragPreview = {
                x: clientOffset.x - dragPreviewNodeOffsetFromClient.x,
                y: clientOffset.y - dragPreviewNodeOffsetFromClient.y
              };
              var sourceWidth = sourceNode.offsetWidth,
                  sourceHeight = sourceNode.offsetHeight;
              var anchorX = anchorPoint.anchorX,
                  anchorY = anchorPoint.anchorY;

              var _getDragPreviewSize = getDragPreviewSize(isImage, dragPreview, sourceWidth, sourceHeight),
                  dragPreviewWidth = _getDragPreviewSize.dragPreviewWidth,
                  dragPreviewHeight = _getDragPreviewSize.dragPreviewHeight;

              var calculateYOffset = function calculateYOffset() {
                var interpolantY = new MonotonicInterpolant([0, 0.5, 1], [// Dock to the top
                offsetFromDragPreview.y, // Align at the center
                offsetFromDragPreview.y / sourceHeight * dragPreviewHeight, // Dock to the bottom
                offsetFromDragPreview.y + dragPreviewHeight - sourceHeight]);
                var y = interpolantY.interpolate(anchorY); // Work around Safari 8 positioning bug

                if (isSafari() && isImage) {
                  // We'll have to wait for @3x to see if this is entirely correct
                  y += (window.devicePixelRatio - 1) * dragPreviewHeight;
                }

                return y;
              };

              var calculateXOffset = function calculateXOffset() {
                // Interpolate coordinates depending on anchor point
                // If you know a simpler way to do this, let me know
                var interpolantX = new MonotonicInterpolant([0, 0.5, 1], [// Dock to the left
                offsetFromDragPreview.x, // Align at the center
                offsetFromDragPreview.x / sourceWidth * dragPreviewWidth, // Dock to the right
                offsetFromDragPreview.x + dragPreviewWidth - sourceWidth]);
                return interpolantX.interpolate(anchorX);
              }; // Force offsets if specified in the options.


              var offsetX = offsetPoint.offsetX,
                  offsetY = offsetPoint.offsetY;
              var isManualOffsetX = offsetX === 0 || offsetX;
              var isManualOffsetY = offsetY === 0 || offsetY;
              return {
                x: isManualOffsetX ? offsetX : calculateXOffset(),
                y: isManualOffsetY ? offsetY : calculateYOffset()
              };
            }

            var FILE = '__NATIVE_FILE__';
            var URL = '__NATIVE_URL__';
            var TEXT = '__NATIVE_TEXT__';
            var HTML = '__NATIVE_HTML__';

            var NativeTypes = /*#__PURE__*/Object.freeze({
                        __proto__: null,
                        FILE: FILE,
                        URL: URL,
                        TEXT: TEXT,
                        HTML: HTML
            });

            function getDataFromDataTransfer(dataTransfer, typesToTry, defaultValue) {
              var result = typesToTry.reduce(function (resultSoFar, typeToTry) {
                return resultSoFar || dataTransfer.getData(typeToTry);
              }, '');
              return result != null ? result : defaultValue;
            }

            var _nativeTypesConfig;

            function _defineProperty$1(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }
            var nativeTypesConfig = (_nativeTypesConfig = {}, _defineProperty$1(_nativeTypesConfig, FILE, {
              exposeProperties: {
                files: function files(dataTransfer) {
                  return Array.prototype.slice.call(dataTransfer.files);
                },
                items: function items(dataTransfer) {
                  return dataTransfer.items;
                }
              },
              matchesTypes: ['Files']
            }), _defineProperty$1(_nativeTypesConfig, HTML, {
              exposeProperties: {
                html: function html(dataTransfer, matchesTypes) {
                  return getDataFromDataTransfer(dataTransfer, matchesTypes, '');
                }
              },
              matchesTypes: ['Html', 'text/html']
            }), _defineProperty$1(_nativeTypesConfig, URL, {
              exposeProperties: {
                urls: function urls(dataTransfer, matchesTypes) {
                  return getDataFromDataTransfer(dataTransfer, matchesTypes, '').split('\n');
                }
              },
              matchesTypes: ['Url', 'text/uri-list']
            }), _defineProperty$1(_nativeTypesConfig, TEXT, {
              exposeProperties: {
                text: function text(dataTransfer, matchesTypes) {
                  return getDataFromDataTransfer(dataTransfer, matchesTypes, '');
                }
              },
              matchesTypes: ['Text', 'text/plain']
            }), _nativeTypesConfig);

            function _classCallCheck$2(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

            function _defineProperties$2(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }

            function _createClass$2(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties$2(Constructor.prototype, protoProps); if (staticProps) _defineProperties$2(Constructor, staticProps); return Constructor; }

            var NativeDragSource = /*#__PURE__*/function () {
              function NativeDragSource(config) {
                _classCallCheck$2(this, NativeDragSource);

                this.config = config;
                this.item = {};
                this.initializeExposedProperties();
              }

              _createClass$2(NativeDragSource, [{
                key: "initializeExposedProperties",
                value: function initializeExposedProperties() {
                  var _this = this;

                  Object.keys(this.config.exposeProperties).forEach(function (property) {
                    Object.defineProperty(_this.item, property, {
                      configurable: true,
                      enumerable: true,
                      get: function get() {
                        // eslint-disable-next-line no-console
                        console.warn("Browser doesn't allow reading \"".concat(property, "\" until the drop event."));
                        return null;
                      }
                    });
                  });
                }
              }, {
                key: "loadDataTransfer",
                value: function loadDataTransfer(dataTransfer) {
                  var _this2 = this;

                  if (dataTransfer) {
                    var newProperties = {};
                    Object.keys(this.config.exposeProperties).forEach(function (property) {
                      newProperties[property] = {
                        value: _this2.config.exposeProperties[property](dataTransfer, _this2.config.matchesTypes),
                        configurable: true,
                        enumerable: true
                      };
                    });
                    Object.defineProperties(this.item, newProperties);
                  }
                }
              }, {
                key: "canDrag",
                value: function canDrag() {
                  return true;
                }
              }, {
                key: "beginDrag",
                value: function beginDrag() {
                  return this.item;
                }
              }, {
                key: "isDragging",
                value: function isDragging(monitor, handle) {
                  return handle === monitor.getSourceId();
                }
              }, {
                key: "endDrag",
                value: function endDrag() {// empty
                }
              }]);

              return NativeDragSource;
            }();

            function createNativeDragSource(type, dataTransfer) {
              var result = new NativeDragSource(nativeTypesConfig[type]);
              result.loadDataTransfer(dataTransfer);
              return result;
            }
            function matchNativeItemType(dataTransfer) {
              if (!dataTransfer) {
                return null;
              }

              var dataTransferTypes = Array.prototype.slice.call(dataTransfer.types || []);
              return Object.keys(nativeTypesConfig).filter(function (nativeItemType) {
                var matchesTypes = nativeTypesConfig[nativeItemType].matchesTypes;
                return matchesTypes.some(function (t) {
                  return dataTransferTypes.indexOf(t) > -1;
                });
              })[0] || null;
            }

            function _classCallCheck$1(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

            function _defineProperties$1(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }

            function _createClass$1(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties$1(Constructor.prototype, protoProps); if (staticProps) _defineProperties$1(Constructor, staticProps); return Constructor; }

            var OptionsReader = /*#__PURE__*/function () {
              function OptionsReader(globalContext, options) {
                _classCallCheck$1(this, OptionsReader);

                this.ownerDocument = null;
                this.globalContext = globalContext;
                this.optionsArgs = options;
              }

              _createClass$1(OptionsReader, [{
                key: "window",
                get: function get() {
                  if (this.globalContext) {
                    return this.globalContext;
                  } else if (typeof window !== 'undefined') {
                    return window;
                  }

                  return undefined;
                }
              }, {
                key: "document",
                get: function get() {
                  var _this$globalContext;

                  if ((_this$globalContext = this.globalContext) !== null && _this$globalContext !== void 0 && _this$globalContext.document) {
                    return this.globalContext.document;
                  } else if (this.window) {
                    return this.window.document;
                  } else {
                    return undefined;
                  }
                }
              }, {
                key: "rootElement",
                get: function get() {
                  var _this$optionsArgs;

                  return ((_this$optionsArgs = this.optionsArgs) === null || _this$optionsArgs === void 0 ? void 0 : _this$optionsArgs.rootElement) || this.window;
                }
              }]);

              return OptionsReader;
            }();

            function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }

            function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }

            function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

            function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

            function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }

            function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }
            var HTML5BackendImpl = /*#__PURE__*/function () {
              function HTML5BackendImpl(manager, globalContext, options) {
                var _this = this;

                _classCallCheck(this, HTML5BackendImpl);

                this.sourcePreviewNodes = new Map();
                this.sourcePreviewNodeOptions = new Map();
                this.sourceNodes = new Map();
                this.sourceNodeOptions = new Map();
                this.dragStartSourceIds = null;
                this.dropTargetIds = [];
                this.dragEnterTargetIds = [];
                this.currentNativeSource = null;
                this.currentNativeHandle = null;
                this.currentDragSourceNode = null;
                this.altKeyPressed = false;
                this.mouseMoveTimeoutTimer = null;
                this.asyncEndDragFrameId = null;
                this.dragOverTargetIds = null;

                this.getSourceClientOffset = function (sourceId) {
                  var source = _this.sourceNodes.get(sourceId);

                  return source && getNodeClientOffset(source) || null;
                };

                this.endDragNativeItem = function () {
                  if (!_this.isDraggingNativeItem()) {
                    return;
                  }

                  _this.actions.endDrag();

                  if (_this.currentNativeHandle) {
                    _this.registry.removeSource(_this.currentNativeHandle);
                  }

                  _this.currentNativeHandle = null;
                  _this.currentNativeSource = null;
                };

                this.isNodeInDocument = function (node) {
                  // Check the node either in the main document or in the current context
                  return Boolean(node && _this.document && _this.document.body && document.body.contains(node));
                };

                this.endDragIfSourceWasRemovedFromDOM = function () {
                  var node = _this.currentDragSourceNode;

                  if (node == null || _this.isNodeInDocument(node)) {
                    return;
                  }

                  if (_this.clearCurrentDragSourceNode() && _this.monitor.isDragging()) {
                    _this.actions.endDrag();
                  }
                };

                this.handleTopDragStartCapture = function () {
                  _this.clearCurrentDragSourceNode();

                  _this.dragStartSourceIds = [];
                };

                this.handleTopDragStart = function (e) {
                  if (e.defaultPrevented) {
                    return;
                  }

                  var dragStartSourceIds = _this.dragStartSourceIds;
                  _this.dragStartSourceIds = null;
                  var clientOffset = getEventClientOffset(e); // Avoid crashing if we missed a drop event or our previous drag died

                  if (_this.monitor.isDragging()) {
                    _this.actions.endDrag();
                  } // Don't publish the source just yet (see why below)


                  _this.actions.beginDrag(dragStartSourceIds || [], {
                    publishSource: false,
                    getSourceClientOffset: _this.getSourceClientOffset,
                    clientOffset: clientOffset
                  });

                  var dataTransfer = e.dataTransfer;
                  var nativeType = matchNativeItemType(dataTransfer);

                  if (_this.monitor.isDragging()) {
                    if (dataTransfer && typeof dataTransfer.setDragImage === 'function') {
                      // Use custom drag image if user specifies it.
                      // If child drag source refuses drag but parent agrees,
                      // use parent's node as drag image. Neither works in IE though.
                      var sourceId = _this.monitor.getSourceId();

                      var sourceNode = _this.sourceNodes.get(sourceId);

                      var dragPreview = _this.sourcePreviewNodes.get(sourceId) || sourceNode;

                      if (dragPreview) {
                        var _this$getCurrentSourc = _this.getCurrentSourcePreviewNodeOptions(),
                            anchorX = _this$getCurrentSourc.anchorX,
                            anchorY = _this$getCurrentSourc.anchorY,
                            offsetX = _this$getCurrentSourc.offsetX,
                            offsetY = _this$getCurrentSourc.offsetY;

                        var anchorPoint = {
                          anchorX: anchorX,
                          anchorY: anchorY
                        };
                        var offsetPoint = {
                          offsetX: offsetX,
                          offsetY: offsetY
                        };
                        var dragPreviewOffset = getDragPreviewOffset(sourceNode, dragPreview, clientOffset, anchorPoint, offsetPoint);
                        dataTransfer.setDragImage(dragPreview, dragPreviewOffset.x, dragPreviewOffset.y);
                      }
                    }

                    try {
                      // Firefox won't drag without setting data
                      dataTransfer === null || dataTransfer === void 0 ? void 0 : dataTransfer.setData('application/json', {});
                    } catch (err) {// IE doesn't support MIME types in setData
                    } // Store drag source node so we can check whether
                    // it is removed from DOM and trigger endDrag manually.


                    _this.setCurrentDragSourceNode(e.target); // Now we are ready to publish the drag source.. or are we not?


                    var _this$getCurrentSourc2 = _this.getCurrentSourcePreviewNodeOptions(),
                        captureDraggingState = _this$getCurrentSourc2.captureDraggingState;

                    if (!captureDraggingState) {
                      // Usually we want to publish it in the next tick so that browser
                      // is able to screenshot the current (not yet dragging) state.
                      //
                      // It also neatly avoids a situation where render() returns null
                      // in the same tick for the source element, and browser freaks out.
                      setTimeout(function () {
                        return _this.actions.publishDragSource();
                      }, 0);
                    } else {
                      // In some cases the user may want to override this behavior, e.g.
                      // to work around IE not supporting custom drag previews.
                      //
                      // When using a custom drag layer, the only way to prevent
                      // the default drag preview from drawing in IE is to screenshot
                      // the dragging state in which the node itself has zero opacity
                      // and height. In this case, though, returning null from render()
                      // will abruptly end the dragging, which is not obvious.
                      //
                      // This is the reason such behavior is strictly opt-in.
                      _this.actions.publishDragSource();
                    }
                  } else if (nativeType) {
                    // A native item (such as URL) dragged from inside the document
                    _this.beginDragNativeItem(nativeType);
                  } else if (dataTransfer && !dataTransfer.types && (e.target && !e.target.hasAttribute || !e.target.hasAttribute('draggable'))) {
                    // Looks like a Safari bug: dataTransfer.types is null, but there was no draggable.
                    // Just let it drag. It's a native type (URL or text) and will be picked up in
                    // dragenter handler.
                    return;
                  } else {
                    // If by this time no drag source reacted, tell browser not to drag.
                    e.preventDefault();
                  }
                };

                this.handleTopDragEndCapture = function () {
                  if (_this.clearCurrentDragSourceNode() && _this.monitor.isDragging()) {
                    // Firefox can dispatch this event in an infinite loop
                    // if dragend handler does something like showing an alert.
                    // Only proceed if we have not handled it already.
                    _this.actions.endDrag();
                  }
                };

                this.handleTopDragEnterCapture = function (e) {
                  _this.dragEnterTargetIds = [];

                  var isFirstEnter = _this.enterLeaveCounter.enter(e.target);

                  if (!isFirstEnter || _this.monitor.isDragging()) {
                    return;
                  }

                  var dataTransfer = e.dataTransfer;
                  var nativeType = matchNativeItemType(dataTransfer);

                  if (nativeType) {
                    // A native item (such as file or URL) dragged from outside the document
                    _this.beginDragNativeItem(nativeType, dataTransfer);
                  }
                };

                this.handleTopDragEnter = function (e) {
                  var dragEnterTargetIds = _this.dragEnterTargetIds;
                  _this.dragEnterTargetIds = [];

                  if (!_this.monitor.isDragging()) {
                    // This is probably a native item type we don't understand.
                    return;
                  }

                  _this.altKeyPressed = e.altKey; // If the target changes position as the result of `dragenter`, `dragover` might still
                  // get dispatched despite target being no longer there. The easy solution is to check
                  // whether there actually is a target before firing `hover`.

                  if (dragEnterTargetIds.length > 0) {
                    _this.actions.hover(dragEnterTargetIds, {
                      clientOffset: getEventClientOffset(e)
                    });
                  }

                  var canDrop = dragEnterTargetIds.some(function (targetId) {
                    return _this.monitor.canDropOnTarget(targetId);
                  });

                  if (canDrop) {
                    // IE requires this to fire dragover events
                    e.preventDefault();

                    if (e.dataTransfer) {
                      e.dataTransfer.dropEffect = _this.getCurrentDropEffect();
                    }
                  }
                };

                this.handleTopDragOverCapture = function () {
                  _this.dragOverTargetIds = [];
                };

                this.handleTopDragOver = function (e) {
                  var dragOverTargetIds = _this.dragOverTargetIds;
                  _this.dragOverTargetIds = [];

                  if (!_this.monitor.isDragging()) {
                    // This is probably a native item type we don't understand.
                    // Prevent default "drop and blow away the whole document" action.
                    e.preventDefault();

                    if (e.dataTransfer) {
                      e.dataTransfer.dropEffect = 'none';
                    }

                    return;
                  }

                  _this.altKeyPressed = e.altKey;

                  _this.actions.hover(dragOverTargetIds || [], {
                    clientOffset: getEventClientOffset(e)
                  });

                  var canDrop = (dragOverTargetIds || []).some(function (targetId) {
                    return _this.monitor.canDropOnTarget(targetId);
                  });

                  if (canDrop) {
                    // Show user-specified drop effect.
                    e.preventDefault();

                    if (e.dataTransfer) {
                      e.dataTransfer.dropEffect = _this.getCurrentDropEffect();
                    }
                  } else if (_this.isDraggingNativeItem()) {
                    // Don't show a nice cursor but still prevent default
                    // "drop and blow away the whole document" action.
                    e.preventDefault();
                  } else {
                    e.preventDefault();

                    if (e.dataTransfer) {
                      e.dataTransfer.dropEffect = 'none';
                    }
                  }
                };

                this.handleTopDragLeaveCapture = function (e) {
                  if (_this.isDraggingNativeItem()) {
                    e.preventDefault();
                  }

                  var isLastLeave = _this.enterLeaveCounter.leave(e.target);

                  if (!isLastLeave) {
                    return;
                  }

                  if (_this.isDraggingNativeItem()) {
                    setTimeout(function () {
                      return _this.endDragNativeItem();
                    }, 0);
                  }
                };

                this.handleTopDropCapture = function (e) {
                  _this.dropTargetIds = [];

                  if (_this.isDraggingNativeItem()) {
                    var _this$currentNativeSo;

                    e.preventDefault();
                    (_this$currentNativeSo = _this.currentNativeSource) === null || _this$currentNativeSo === void 0 ? void 0 : _this$currentNativeSo.loadDataTransfer(e.dataTransfer);
                  }

                  _this.enterLeaveCounter.reset();
                };

                this.handleTopDrop = function (e) {
                  var dropTargetIds = _this.dropTargetIds;
                  _this.dropTargetIds = [];

                  _this.actions.hover(dropTargetIds, {
                    clientOffset: getEventClientOffset(e)
                  });

                  _this.actions.drop({
                    dropEffect: _this.getCurrentDropEffect()
                  });

                  if (_this.isDraggingNativeItem()) {
                    _this.endDragNativeItem();
                  } else if (_this.monitor.isDragging()) {
                    _this.actions.endDrag();
                  }
                };

                this.handleSelectStart = function (e) {
                  var target = e.target; // Only IE requires us to explicitly say
                  // we want drag drop operation to start

                  if (typeof target.dragDrop !== 'function') {
                    return;
                  } // Inputs and textareas should be selectable


                  if (target.tagName === 'INPUT' || target.tagName === 'SELECT' || target.tagName === 'TEXTAREA' || target.isContentEditable) {
                    return;
                  } // For other targets, ask IE
                  // to enable drag and drop


                  e.preventDefault();
                  target.dragDrop();
                };

                this.options = new OptionsReader(globalContext, options);
                this.actions = manager.getActions();
                this.monitor = manager.getMonitor();
                this.registry = manager.getRegistry();
                this.enterLeaveCounter = new EnterLeaveCounter(this.isNodeInDocument);
              }
              /**
               * Generate profiling statistics for the HTML5Backend.
               */


              _createClass(HTML5BackendImpl, [{
                key: "profile",
                value: function profile() {
                  var _this$dragStartSource, _this$dragOverTargetI;

                  return {
                    sourcePreviewNodes: this.sourcePreviewNodes.size,
                    sourcePreviewNodeOptions: this.sourcePreviewNodeOptions.size,
                    sourceNodeOptions: this.sourceNodeOptions.size,
                    sourceNodes: this.sourceNodes.size,
                    dragStartSourceIds: ((_this$dragStartSource = this.dragStartSourceIds) === null || _this$dragStartSource === void 0 ? void 0 : _this$dragStartSource.length) || 0,
                    dropTargetIds: this.dropTargetIds.length,
                    dragEnterTargetIds: this.dragEnterTargetIds.length,
                    dragOverTargetIds: ((_this$dragOverTargetI = this.dragOverTargetIds) === null || _this$dragOverTargetI === void 0 ? void 0 : _this$dragOverTargetI.length) || 0
                  };
                } // public for test

              }, {
                key: "window",
                get: function get() {
                  return this.options.window;
                }
              }, {
                key: "document",
                get: function get() {
                  return this.options.document;
                }
                /**
                 * Get the root element to use for event subscriptions
                 */

              }, {
                key: "rootElement",
                get: function get() {
                  return this.options.rootElement;
                }
              }, {
                key: "setup",
                value: function setup() {
                  var root = this.rootElement;

                  if (root === undefined) {
                    return;
                  }

                  if (root.__isReactDndBackendSetUp) {
                    throw new Error('Cannot have two HTML5 backends at the same time.');
                  }

                  root.__isReactDndBackendSetUp = true;
                  this.addEventListeners(root);
                }
              }, {
                key: "teardown",
                value: function teardown() {
                  var root = this.rootElement;

                  if (root === undefined) {
                    return;
                  }

                  root.__isReactDndBackendSetUp = false;
                  this.removeEventListeners(this.rootElement);
                  this.clearCurrentDragSourceNode();

                  if (this.asyncEndDragFrameId) {
                    var _this$window;

                    (_this$window = this.window) === null || _this$window === void 0 ? void 0 : _this$window.cancelAnimationFrame(this.asyncEndDragFrameId);
                  }
                }
              }, {
                key: "connectDragPreview",
                value: function connectDragPreview(sourceId, node, options) {
                  var _this2 = this;

                  this.sourcePreviewNodeOptions.set(sourceId, options);
                  this.sourcePreviewNodes.set(sourceId, node);
                  return function () {
                    _this2.sourcePreviewNodes.delete(sourceId);

                    _this2.sourcePreviewNodeOptions.delete(sourceId);
                  };
                }
              }, {
                key: "connectDragSource",
                value: function connectDragSource(sourceId, node, options) {
                  var _this3 = this;

                  this.sourceNodes.set(sourceId, node);
                  this.sourceNodeOptions.set(sourceId, options);

                  var handleDragStart = function handleDragStart(e) {
                    return _this3.handleDragStart(e, sourceId);
                  };

                  var handleSelectStart = function handleSelectStart(e) {
                    return _this3.handleSelectStart(e);
                  };

                  node.setAttribute('draggable', 'true');
                  node.addEventListener('dragstart', handleDragStart);
                  node.addEventListener('selectstart', handleSelectStart);
                  return function () {
                    _this3.sourceNodes.delete(sourceId);

                    _this3.sourceNodeOptions.delete(sourceId);

                    node.removeEventListener('dragstart', handleDragStart);
                    node.removeEventListener('selectstart', handleSelectStart);
                    node.setAttribute('draggable', 'false');
                  };
                }
              }, {
                key: "connectDropTarget",
                value: function connectDropTarget(targetId, node) {
                  var _this4 = this;

                  var handleDragEnter = function handleDragEnter(e) {
                    return _this4.handleDragEnter(e, targetId);
                  };

                  var handleDragOver = function handleDragOver(e) {
                    return _this4.handleDragOver(e, targetId);
                  };

                  var handleDrop = function handleDrop(e) {
                    return _this4.handleDrop(e, targetId);
                  };

                  node.addEventListener('dragenter', handleDragEnter);
                  node.addEventListener('dragover', handleDragOver);
                  node.addEventListener('drop', handleDrop);
                  return function () {
                    node.removeEventListener('dragenter', handleDragEnter);
                    node.removeEventListener('dragover', handleDragOver);
                    node.removeEventListener('drop', handleDrop);
                  };
                }
              }, {
                key: "addEventListeners",
                value: function addEventListeners(target) {
                  // SSR Fix (https://github.com/react-dnd/react-dnd/pull/813
                  if (!target.addEventListener) {
                    return;
                  }

                  target.addEventListener('dragstart', this.handleTopDragStart);
                  target.addEventListener('dragstart', this.handleTopDragStartCapture, true);
                  target.addEventListener('dragend', this.handleTopDragEndCapture, true);
                  target.addEventListener('dragenter', this.handleTopDragEnter);
                  target.addEventListener('dragenter', this.handleTopDragEnterCapture, true);
                  target.addEventListener('dragleave', this.handleTopDragLeaveCapture, true);
                  target.addEventListener('dragover', this.handleTopDragOver);
                  target.addEventListener('dragover', this.handleTopDragOverCapture, true);
                  target.addEventListener('drop', this.handleTopDrop);
                  target.addEventListener('drop', this.handleTopDropCapture, true);
                }
              }, {
                key: "removeEventListeners",
                value: function removeEventListeners(target) {
                  // SSR Fix (https://github.com/react-dnd/react-dnd/pull/813
                  if (!target.removeEventListener) {
                    return;
                  }

                  target.removeEventListener('dragstart', this.handleTopDragStart);
                  target.removeEventListener('dragstart', this.handleTopDragStartCapture, true);
                  target.removeEventListener('dragend', this.handleTopDragEndCapture, true);
                  target.removeEventListener('dragenter', this.handleTopDragEnter);
                  target.removeEventListener('dragenter', this.handleTopDragEnterCapture, true);
                  target.removeEventListener('dragleave', this.handleTopDragLeaveCapture, true);
                  target.removeEventListener('dragover', this.handleTopDragOver);
                  target.removeEventListener('dragover', this.handleTopDragOverCapture, true);
                  target.removeEventListener('drop', this.handleTopDrop);
                  target.removeEventListener('drop', this.handleTopDropCapture, true);
                }
              }, {
                key: "getCurrentSourceNodeOptions",
                value: function getCurrentSourceNodeOptions() {
                  var sourceId = this.monitor.getSourceId();
                  var sourceNodeOptions = this.sourceNodeOptions.get(sourceId);
                  return _objectSpread({
                    dropEffect: this.altKeyPressed ? 'copy' : 'move'
                  }, sourceNodeOptions || {});
                }
              }, {
                key: "getCurrentDropEffect",
                value: function getCurrentDropEffect() {
                  if (this.isDraggingNativeItem()) {
                    // It makes more sense to default to 'copy' for native resources
                    return 'copy';
                  }

                  return this.getCurrentSourceNodeOptions().dropEffect;
                }
              }, {
                key: "getCurrentSourcePreviewNodeOptions",
                value: function getCurrentSourcePreviewNodeOptions() {
                  var sourceId = this.monitor.getSourceId();
                  var sourcePreviewNodeOptions = this.sourcePreviewNodeOptions.get(sourceId);
                  return _objectSpread({
                    anchorX: 0.5,
                    anchorY: 0.5,
                    captureDraggingState: false
                  }, sourcePreviewNodeOptions || {});
                }
              }, {
                key: "isDraggingNativeItem",
                value: function isDraggingNativeItem() {
                  var itemType = this.monitor.getItemType();
                  return Object.keys(NativeTypes).some(function (key) {
                    return NativeTypes[key] === itemType;
                  });
                }
              }, {
                key: "beginDragNativeItem",
                value: function beginDragNativeItem(type, dataTransfer) {
                  this.clearCurrentDragSourceNode();
                  this.currentNativeSource = createNativeDragSource(type, dataTransfer);
                  this.currentNativeHandle = this.registry.addSource(type, this.currentNativeSource);
                  this.actions.beginDrag([this.currentNativeHandle]);
                }
              }, {
                key: "setCurrentDragSourceNode",
                value: function setCurrentDragSourceNode(node) {
                  var _this5 = this;

                  this.clearCurrentDragSourceNode();
                  this.currentDragSourceNode = node; // A timeout of > 0 is necessary to resolve Firefox issue referenced
                  // See:
                  //   * https://github.com/react-dnd/react-dnd/pull/928
                  //   * https://github.com/react-dnd/react-dnd/issues/869

                  var MOUSE_MOVE_TIMEOUT = 1000; // Receiving a mouse event in the middle of a dragging operation
                  // means it has ended and the drag source node disappeared from DOM,
                  // so the browser didn't dispatch the dragend event.
                  //
                  // We need to wait before we start listening for mousemove events.
                  // This is needed because the drag preview needs to be drawn or else it fires an 'mousemove' event
                  // immediately in some browsers.
                  //
                  // See:
                  //   * https://github.com/react-dnd/react-dnd/pull/928
                  //   * https://github.com/react-dnd/react-dnd/issues/869
                  //

                  this.mouseMoveTimeoutTimer = setTimeout(function () {
                    var _this5$rootElement;

                    return (_this5$rootElement = _this5.rootElement) === null || _this5$rootElement === void 0 ? void 0 : _this5$rootElement.addEventListener('mousemove', _this5.endDragIfSourceWasRemovedFromDOM, true);
                  }, MOUSE_MOVE_TIMEOUT);
                }
              }, {
                key: "clearCurrentDragSourceNode",
                value: function clearCurrentDragSourceNode() {
                  if (this.currentDragSourceNode) {
                    this.currentDragSourceNode = null;

                    if (this.rootElement) {
                      var _this$window2;

                      (_this$window2 = this.window) === null || _this$window2 === void 0 ? void 0 : _this$window2.clearTimeout(this.mouseMoveTimeoutTimer || undefined);
                      this.rootElement.removeEventListener('mousemove', this.endDragIfSourceWasRemovedFromDOM, true);
                    }

                    this.mouseMoveTimeoutTimer = null;
                    return true;
                  }

                  return false;
                }
              }, {
                key: "handleDragStart",
                value: function handleDragStart(e, sourceId) {
                  if (e.defaultPrevented) {
                    return;
                  }

                  if (!this.dragStartSourceIds) {
                    this.dragStartSourceIds = [];
                  }

                  this.dragStartSourceIds.unshift(sourceId);
                }
              }, {
                key: "handleDragEnter",
                value: function handleDragEnter(e, targetId) {
                  this.dragEnterTargetIds.unshift(targetId);
                }
              }, {
                key: "handleDragOver",
                value: function handleDragOver(e, targetId) {
                  if (this.dragOverTargetIds === null) {
                    this.dragOverTargetIds = [];
                  }

                  this.dragOverTargetIds.unshift(targetId);
                }
              }, {
                key: "handleDrop",
                value: function handleDrop(e, targetId) {
                  this.dropTargetIds.unshift(targetId);
                }
              }]);

              return HTML5BackendImpl;
            }();

            var HTML5Backend = function createBackend(manager, context, options) {
              return new HTML5BackendImpl(manager, context, options);
            };

            const Loading = (props) => {
                const { type, isLoading, height, width, loadingMessage, speed } = props;
                if (typeof isLoading !== 'undefined' && !isLoading) {
                    return null;
                }
                const Icon = type === 'line' ? Line : Balls;
                return (react.createElement(IconContainer$2, null,
                    react.createElement(Icon, { height: height, width: width, speed: speed }),
                    loadingMessage &&
                        react.createElement("div", null, loadingMessage)));
            };

            const Container$7 = qe.div `
  height: 100%;
  display: flex;
  flex-direction: column;
  align-items: center;
  margin-bottom: 48px;
  overflow-y: scroll;


  &::-webkit-scrollbar {
    display: none;
  }
`;
            const ButtonBase = qe.div `
  margin: 12px 0;
  width: 48px;
  position: relative;
  display: flex;
  align-items: center;
  justify-content: center;
  height: 48px;
  opacity: ${({ isDragging }) => isDragging ? 0 : 1};
  background-color: ${(props) => props.theme.colors.primary.background};
  padding: 14px 0;;
  border-radius: 50%;

  box-shadow: 0 1px 2px rgba(0,0,0,0.7), 0 2px 4px rgba(0,0,0,0.6), 0 4px 8px rgba(0,0,0,0.4);
  transition: transform 600ms ease-in-out, box-shadow 600ms linear;


  &:hover {
    transition: transform 100ms ease-in-out, box-shadow 100ms linear;
    cursor: pointer;
    transform: scale(1.04);
    box-shadow: 0 2px 2px rgba(0,0,0,0.6), 0 2px 4px rgba(0,0,0,0.5), 0 4px 7px rgba(0,0,0,0.3);
  }

`;
            const ImageContainer = qe(ButtonBase) `
  font-size: 0;
`;
            const Hotkey = qe.div `
  position: absolute;
  border-radius: 50%;
  width: 14px;
  width: 14px;
  top: -2px;
  right: -2px;
  text-align: center;
  border: 1px ${({ theme }) => alpha(theme.baseColors['grey-dark-rgb'], .4)} solid;
  font-size: ${({ theme }) => theme.sizes.xs.fontSize};
  color: ${({ theme }) => theme.baseColors['grey-dark']};
  background-color: ${({ theme }) => theme.baseColors.white};
`;
            const LettersWrapper = qe.div `
  color: ${({ theme: { colors: { secondary: { background } } } }) => background};
  width: 30px;
  height: 30px;
  font-size: 24px;
  font-weight: bold;
  text-align: center;
  display: flex;
  justify-content: center;

  &:hover {
    cursor: pointer;
  }
`;
            const LettersContainer = qe.div `
  transform: scale(${({ scale }) => scale});
  display: inline-block;

  &:hover {
    cursor: pointer;
  }
`;
            const Image = qe.img `
  height: 30px;
  width: 30px;
  display: block;

  &:hover {
    cursor: pointer;
  }
`;

            const SVGLink = react.forwardRef((props, ref) => {
                const { isDragging, isFocused, handlerId, link } = props;
                const { svg, hotkey, url } = link;
                const [isLoading, setIsLoading] = react.useState(false);
                react.useEffect(() => {
                    setIsLoading(link.isLoading || false);
                }, [link.isLoading]);
                const navigate = () => {
                    if (!isLoading) {
                        setIsLoading(true);
                        window.location.href = url;
                    }
                };
                return (react.createElement(ImageContainer, { ref: ref, "data-handler-id": handlerId, isDragging: isDragging, onClick: navigate },
                    hotkey && isFocused &&
                        react.createElement(Hotkey, null, hotkey),
                    isLoading ?
                        react.createElement(LettersWrapper, null,
                            react.createElement(Loading, { speed: 0.5, type: "line" }))
                        :
                            react.createElement(Image, { src: svg })));
            });

            const TextLink = react.forwardRef((props, ref) => {
                const { isDragging, isFocused, handlerId, linkConfig } = props;
                const { label, hotkey, url } = linkConfig.link;
                const containerRef = react.useRef(null);
                const [scale, setScale] = react.useState(1);
                const [isLoading, setIsLoading] = react.useState(false);
                react.useEffect(() => {
                    if (containerRef.current) {
                        const { clientWidth } = containerRef.current;
                        if (clientWidth > 30) {
                            setScale(30 / clientWidth);
                        }
                    }
                }, [containerRef]);
                const navigate = () => {
                    if (!isLoading) {
                        setIsLoading(true);
                        window.location.href = url;
                    }
                };
                return (react.createElement(ButtonBase, { ref: ref, "data-handler-id": handlerId, isDragging: isDragging, onClick: navigate },
                    hotkey && isFocused &&
                        react.createElement(Hotkey, null, hotkey),
                    react.createElement(LettersWrapper, null, isLoading ?
                        react.createElement(Loading, { speed: 0.8, type: "line" })
                        :
                            react.createElement(LettersContainer, { scale: scale, ref: containerRef }, label))));
            });

            const getLink = (id, standard, custom) => {
                const standardLink = standard.find((link) => link.id === id);
                if (standardLink) {
                    return {
                        type: 'standard',
                        link: standardLink,
                    };
                }
                const customLink = custom.find((link) => link.id == id);
                if (customLink) {
                    return {
                        type: 'custom',
                        link: customLink,
                    };
                }
                return null;
            };
            const isStandardLink = (type, unknown) => type === 'standard';
            const Link = (props) => {
                const { id, isFocused } = props;
                const { standard, custom } = links.useTrackedState();
                const linkConfig = getLink(id, standard, custom);
                const handlerId = v4();
                const ref = react.useRef(null);
                const isDragging = false;
                if (!linkConfig) {
                    return null;
                }
                const { link, type } = linkConfig;
                if (isStandardLink(type) && link.buttonChoice === 'icon') {
                    return (react.createElement(SVGLink, { ref: ref, link: link, isFocused: isFocused, handlerId: handlerId, isDragging: isDragging }));
                }
                return (react.createElement(TextLink, { ref: ref, isFocused: isFocused, linkConfig: linkConfig, handlerId: handlerId, isDragging: isDragging }));
            };

            const LinksUI = () => {
                const { active } = useLinks();
                const setEnabled = useHotkeyLinks();
                const { selection } = modalContext.useTrackedState();
                const [isFocused, setIsFocused] = react.useState(false);
                react.useEffect(() => {
                    window.addEventListener('focus', windowFocus);
                    window.addEventListener('blur', windowBlur);
                    return () => {
                        window.removeEventListener('focus', windowFocus);
                        window.removeEventListener('blur', windowBlur);
                    };
                }, []);
                const windowBlur = () => {
                    setIsFocused(false);
                };
                const windowFocus = () => {
                    setIsFocused(true);
                };
                react.useEffect(() => {
                    if (selection === null) {
                        setEnabled(true);
                        return;
                    }
                    setEnabled(false);
                }, [selection]);
                return (react.createElement(Container$7, null,
                    react.createElement(DndProvider, { backend: HTML5Backend }, active.map((link) => react.createElement(Link, { isFocused: isFocused, key: link.id, id: link.id })))));
            };

            const Links = (props) => {
                const { isVisible } = props;
                const trackedState = links.useTrackedState();
                const setDraft = links.useSetDraft();
                const init = useInitLinks();
                react.useEffect(() => {
                    if (!trackedState.hasInit.includes('links')) {
                        setDraft((draft) => {
                            draft.hasInit = [...draft.hasInit, 'links'];
                        });
                        init();
                    }
                }, []);
                return (react.createElement(react.Fragment, null,
                    isVisible &&
                        react.createElement(LinksUI, null),
                    react.createElement(Portal, { selectionTrigger: "links" },
                        react.createElement(Main, null))));
            };

            const Container$6 = qe.div `
  align-self: center;

  &:hover {
    cursor: pointer;
  }
`;

            const Settings = () => {
                const update = useUpdate();
                const { hiddenUnits } = modalContext.useTrackedState();
                const handleSettingsClick = (event) => {
                    event.stopPropagation();
                    update.selection('links');
                };
                if (hiddenUnits.includes('settings-icon')) {
                    return null;
                }
                return (react.createElement(Container$6, { onClick: handleSettingsClick },
                    react.createElement(VscSettingsGear, null)));
            };

            const Container$5 = qe.div `
  display: flex;
  flex-direction: column;
  justify-content: center;
  position: relative;
  /* height: 100%; */
`;

            const Center = (props) => {
                const { showLinks } = props;
                return (react.createElement(Unit$1.Container, { column: "second" },
                    react.createElement(Container$5, null,
                        react.createElement(links.Provider, null,
                            react.createElement(Links, { isVisible: showLinks })),
                        react.createElement(Settings, null))));
            };

            // THIS FILE IS AUTO GENERATED
            function DiGithubBadge (props) {
              return GenIcon({"tag":"svg","attr":{"version":"1.1","viewBox":"0 0 32 32"},"child":[{"tag":"path","attr":{"d":"M16 5.343c-6.196 0-11.219 5.023-11.219 11.219 0 4.957 3.214 9.162 7.673 10.645 0.561 0.103 0.766-0.244 0.766-0.54 0-0.267-0.010-1.152-0.016-2.088-3.12 0.678-3.779-1.323-3.779-1.323-0.511-1.296-1.246-1.641-1.246-1.641-1.020-0.696 0.077-0.682 0.077-0.682 1.126 0.078 1.72 1.156 1.72 1.156 1.001 1.715 2.627 1.219 3.265 0.931 0.102-0.723 0.392-1.219 0.712-1.498-2.49-0.283-5.11-1.246-5.11-5.545 0-1.226 0.438-2.225 1.154-3.011-0.114-0.285-0.501-1.426 0.111-2.97 0 0 0.941-0.301 3.085 1.15 0.894-0.25 1.854-0.373 2.807-0.377 0.953 0.004 1.913 0.129 2.809 0.379 2.14-1.453 3.083-1.15 3.083-1.15 0.613 1.545 0.227 2.685 0.112 2.969 0.719 0.785 1.153 1.785 1.153 3.011 0 4.31-2.624 5.259-5.123 5.537 0.404 0.348 0.761 1.030 0.761 2.076 0 1.5-0.015 2.709-0.015 3.079 0 0.299 0.204 0.648 0.772 0.538 4.455-1.486 7.666-5.69 7.666-10.645 0-6.195-5.023-11.219-11.219-11.219z"}}]})(props);
            }

            const Login = (props) => {
                const { unit, column } = props;
                const update = useUpdate();
                const handleClick = () => {
                    update.selection(unit);
                };
                return (react.createElement(Unit$1.Container, { rightMargin: true, column: column },
                    react.createElement(Button, { onClick: handleClick, size: "lg" }, "Login")));
            };

            // THIS FILE IS AUTO GENERATED
            function BsFillQuestionOctagonFill (props) {
              return GenIcon({"tag":"svg","attr":{"viewBox":"0 0 16 16","fill":"currentColor"},"child":[{"tag":"path","attr":{"fillRule":"evenodd","d":"M11.46.146A.5.5 0 0011.107 0H4.893a.5.5 0 00-.353.146L.146 4.54A.5.5 0 000 4.893v6.214a.5.5 0 00.146.353l4.394 4.394a.5.5 0 00.353.146h6.214a.5.5 0 00.353-.146l4.394-4.394a.5.5 0 00.146-.353V4.893a.5.5 0 00-.146-.353L11.46.146zM6.57 6.033H5.25C5.22 4.147 6.68 3.5 8.006 3.5c1.397 0 2.673.73 2.673 2.24 0 1.08-.635 1.594-1.244 2.057-.737.559-1.01.768-1.01 1.486v.355H7.117l-.007-.463c-.038-.927.495-1.498 1.168-1.987.59-.444.965-.736.965-1.371 0-.825-.628-1.168-1.314-1.168-.901 0-1.358.603-1.358 1.384zm1.251 6.443c-.584 0-1.009-.394-1.009-.927 0-.552.425-.94 1.01-.94.609 0 1.028.388 1.028.94 0 .533-.42.927-1.029.927z","clipRule":"evenodd"}}]})(props);
            }function BsCircleFill (props) {
              return GenIcon({"tag":"svg","attr":{"viewBox":"0 0 16 16","fill":"currentColor"},"child":[{"tag":"circle","attr":{"cx":"8","cy":"8","r":"8"}}]})(props);
            }function BsCircleHalf (props) {
              return GenIcon({"tag":"svg","attr":{"viewBox":"0 0 16 16","fill":"currentColor"},"child":[{"tag":"path","attr":{"fillRule":"evenodd","d":"M8 15V1a7 7 0 000 14zm0 1A8 8 0 108 0a8 8 0 000 16z","clipRule":"evenodd"}}]})(props);
            }function BsCircle (props) {
              return GenIcon({"tag":"svg","attr":{"viewBox":"0 0 16 16","fill":"currentColor"},"child":[{"tag":"path","attr":{"fillRule":"evenodd","d":"M8 15A7 7 0 108 1a7 7 0 000 14zm0 1A8 8 0 108 0a8 8 0 000 16z","clipRule":"evenodd"}}]})(props);
            }function BsExclamationCircleFill (props) {
              return GenIcon({"tag":"svg","attr":{"viewBox":"0 0 16 16","fill":"currentColor"},"child":[{"tag":"path","attr":{"fillRule":"evenodd","d":"M16 8A8 8 0 110 8a8 8 0 0116 0zM8 4a.905.905 0 00-.9.995l.35 3.507a.552.552 0 001.1 0l.35-3.507A.905.905 0 008 4zm.002 6a1 1 0 100 2 1 1 0 000-2z","clipRule":"evenodd"}}]})(props);
            }function BsQuestionCircleFill (props) {
              return GenIcon({"tag":"svg","attr":{"viewBox":"0 0 16 16","fill":"currentColor"},"child":[{"tag":"path","attr":{"fillRule":"evenodd","d":"M16 8A8 8 0 110 8a8 8 0 0116 0zM6.57 6.033H5.25C5.22 4.147 6.68 3.5 8.006 3.5c1.397 0 2.673.73 2.673 2.24 0 1.08-.635 1.594-1.244 2.057-.737.559-1.01.768-1.01 1.486v.355H7.117l-.007-.463c-.038-.927.495-1.498 1.168-1.987.59-.444.965-.736.965-1.371 0-.825-.628-1.168-1.314-1.168-.901 0-1.358.603-1.358 1.384zm1.251 6.443c-.584 0-1.009-.394-1.009-.927 0-.552.425-.94 1.01-.94.609 0 1.028.388 1.028.94 0 .533-.42.927-1.029.927z","clipRule":"evenodd"}}]})(props);
            }

            const BadgeContainer = qe.div `
  font-size: ${({ theme }) => theme.sizes.sm.fontSize};
  position: absolute;
  background-color: ${({ theme, isFiltered }) => isFiltered ?
    theme.baseColors['red-light'] :
    theme.baseColors['white']};
  color: ${({ theme, isFiltered }) => isFiltered ?
    theme.baseColors['white'] :
    theme.baseColors['grey-dark']};
  border-radius: 6px;
  padding: 1px ${({ theme }) => theme.sizes.sm.paddingX};
  line-height: ${({ theme }) => theme.sizes.xs.fontSize};
  top: -2px;
  right: -6px;
  border: 1px ${({ theme }) => alpha(theme.baseColors['grey-dark'], 0.2)} solid;

  &:hover {
    cursor: pointer;
  }
`;
            const FilterContainer = qe.div `
  border-radius: 50%;
  margin: 0 3px;
  font-size: 14px;
  position: relative;
  display: flex;
  justify-content: center;
  align-items: center;
  color: #000;
  width: 30px;
  height: 30px;
  text-align: center;
  background-color: ${({ color, count }) => alpha(color, count > 0 ? 1 : 0.4)};
  border-style: solid;
  border-width: 1px;
  border-color: ${({ theme }) => alpha(theme.baseColors['grey-dark'], 0.4)};

  &:hover {
    cursor: pointer;
  }
`;
            const Text = qe.div `
  transform: scale(${({ scale }) => scale});
  &:hover {
    cursor: pointer;
  }
`;
            const Cross = qe(BsCircleFill) `
  position: absolute;
  height: 100%;
  width: 100%;
  left: 0;
  top: 0;
  opacity: 0.8;
  color: ${(props) => props.theme.baseColors.red};
`;
            const Checkmark = qe(BsCircleFill) `
  transform: scale(0.8);
  position:absolute;
  height: 100%;
  width: 100%;
  left: 0;
  top: 0;
  opacity: 0.7;
  color: ${(props) => props.theme.baseColors.green};
`;
            const GroupContainer = qe.div `
  display: flex;
  justify-content: center;
  align-items: center;
  background-color: ${(props) => props.theme.colors.secondary.background};
  color: ${(props) => props.theme.colors.secondary.foreground};
  box-shadow: 0 0 2px ${(props) => props.theme.colors.secondary.accent};
  width: min-content;
  padding: 2px 4px;
  border-radius: 4px;
  margin: 2px 0;
`;
            const LabelWrapper = qe.div `
  margin-right: 4px;
  white-space: nowrap;
  display: flex;
  flex-direction: column;
  justify-content: center;
`;
            const Label$1 = qe.div `

`;
            const Clear = qe.div `
  opacity: ${({ isHidden }) => isHidden ? '0' : '1'};
  font-size: ${(props) => props.theme.sizes.sm.fontSize};

  &:hover {
    cursor: ${({ isHidden }) => isHidden ? 'inherit' : 'pointer'};
  }
`;
            qe.div `
  width: 100%;
  overflow-x: hidden;
`;
            const Container$4 = qe.div `
  display: flex;
  flex-wrap: wrap;
  justify-content: center;
  align-items: center;
  width: 100%;
  margin: 4px 0;

  -ms-overflow-style: none;
  scrollbar-width: none;

  &::-webkit-scrollbar {
    display: none;
  }

  & > :not(:last-child) {
    margin-right: 4px;
  }


  & > :not(:first-child) {
    margin-left: 4px;
  }
`;

            const Badge = (props) => {
                const { currentCount, total } = props.counts;
                return (react.createElement(BadgeContainer, { isFiltered: currentCount !== total }, currentCount));
            };

            const Filter = (props) => {
                const { current, disableTooltip } = props;
                const { filter, groupId, counts } = current;
                const { currentFilters } = filters.useTrackedState();
                const { handle } = useClickFilter();
                const containerRef = react.useRef(null);
                const [scale, setScale] = react.useState(1);
                react.useEffect(() => {
                    if (containerRef.current) {
                        const { clientWidth } = containerRef.current;
                        if (clientWidth > 22) {
                            setScale(22 / clientWidth);
                        }
                    }
                }, [containerRef]);
                const onClick = () => {
                    handle(current);
                };
                const currentFilter = currentFilters.find((currentFilter) => currentFilter.filter.id === filter.id &&
                    currentFilter.groupId === groupId);
                return (react.createElement(Tooltip$2, { appColor: filter.color, key: filter.id, capitalize: filter.capitalize, text: filter.full, isDisabled: disableTooltip, noDelay: true },
                    react.createElement(FilterContainer, { count: counts.currentCount, color: filter.color, onClick: onClick },
                        react.createElement(Text, { ref: containerRef, scale: scale }, filter.abbreviation),
                        currentFilter?.state === 'include' &&
                            react.createElement(Checkmark, null),
                        currentFilter?.state === 'exclude' &&
                            react.createElement(Cross, null),
                        counts.currentCount > 0 && react.createElement(Badge, { counts: counts }))));
            };

            function FilterGroup(props) {
                const { filterGroup } = props;
                const { currentFilters } = filters.useTrackedState();
                const { handle } = useClearFilters();
                const { filters: filterGroupFilters } = useFilterGroupFilters(filterGroup.id);
                const hasFilters = currentFilters.filter((filter) => filter.state !== 'omit' && filter.groupId === filterGroup.id).length > 0;
                const handleClear = () => {
                    if (hasFilters) {
                        handle(filterGroup.id);
                    }
                };
                return (react.createElement(GroupContainer, null,
                    react.createElement(LabelWrapper, null,
                        react.createElement(Label$1, null, filterGroup.label),
                        react.createElement(Clear, { onClick: handleClear, isHidden: !hasFilters }, "Clear")),
                    filterGroupFilters.map((filter) => react.createElement(Filter, { key: filter.filter.id, current: filter }))));
            }

            const Filters = () => {
                const { filterGroups } = filters.useTrackedState();
                const groups = filterGroups.filter((group) => Object.keys(group.filters).length > 0);
                return (react.createElement(Container$4, null, groups.map((group) => react.createElement(FilterGroup, { key: group.label, filterGroup: group }))));
            };

            qe(BsCircleHalf) `
  transform: rotate(90deg);
`;
            const Avatar = qe.img `
  width: 16px;
  border-radius: 50%;
  margin-right: ${({ theme }) => theme.sizes.md.marginX};
`;
            const ApprovalTooltip$1 = qe.div `
  display: flex;
  align-items: center;
`;
            const IconContainer = qe.div `
  display: flex;
  opacity: ${({ isFake }) => isFake ? 0 : 1};

  & svg {
    color: ${(props) => props.theme.baseColors[props.appColor]};
  }

  & path {
    stroke: ${(props) => props.theme.baseColors[props.appColor]};
  }

  &:hover {
    cursor: ${({ isLink }) => isLink ? 'pointer' : 'default'};
  }
`;
            const StateContainer$1 = qe.div `
  border-radius: 4px;
  display: flex;
  align-items: center;
  margin: 0 ${({ theme }) => theme.sizes.md.marginX};
  padding: ${({ theme }) => theme.sizes.md.padding};
  background-color: ${({ theme, isRed }) => {
    const base = isRed ? theme.baseColors['red-rgb'] : theme.baseColors['white-rgb'];
    const { r, g, b } = base;
    return `rgba(${r}, ${g}, ${b}, ${isRed ? 0.7 : 0.3})`;
}};
`;
            const StateLabel = qe.div `
  margin-right: ${({ theme }) => theme.sizes.md.marginX};
`;
            const TooltipHeader = qe.div `
  font-size: ${({ theme: { sizes: { md } } }) => md.fontSize};
  font-weight: 600;
`;
            const Container$3 = qe.div `
  display: flex;
  align-items: center;

  & :not(:first-child) {
    margin-left: 2px;
  }

  & :not(:last-child) {
    margin-right: 2px;
  }
`;
            qe.div `
  margin-left: 4px;
`;
            qe.div `
  background-color: ${(props) => props.theme.baseColors.green};
  border-radius: 3px;
  padding: 2px 4px;
  color: ${(props) => props.theme.baseColors.black};
  display: flex;
  align-items: center;
`;

            const ApprovalTooltip = (props) => {
                const { author } = props;
                return (react.createElement(ApprovalTooltip$1, null,
                    react.createElement(Avatar, { src: author.avatarUrl }),
                    author.login));
            };

            const create$5 = (pullRequest, mapping) => {
                const { createdBy, author } = pullRequest;
                if (!mapping[status]) {
                    const abbreviation = createdBy
                        .split('-')
                        .slice(0, 2)
                        .map((word) => word[0])
                        .join('')
                        .toUpperCase();
                    mapping[createdBy] = {
                        id: createdBy,
                        abbreviation,
                        full: createdBy,
                        tooltip: react.createElement(ApprovalTooltip, { author: author }),
                    };
                }
            };
            const run$5 = (pullRequest, full) => pullRequest.createdBy === full;
            var createdBy = {
                id: 'github-createdBy',
                label: 'Creator',
                run: run$5,
                create: create$5,
            };

            const create$4 = (pullRequest, mapping) => {
                const { labels } = pullRequest;
                if (labels.length === 0) {
                    const labelName = 'No Labels';
                    if (!mapping[labelName]) {
                        const filter = {
                            id: 'No Labels',
                            abbreviation: 'NL',
                            full: 'No Labels',
                            color: `#FF0000`,
                        };
                        mapping[labelName] = filter;
                    }
                    return;
                }
                labels.forEach(({ name: labelName, color }) => {
                    if (!mapping[labelName]) {
                        const abbreviation = labelName
                            .split(' ')
                            .map((word) => word[0])
                            .join('')
                            .toUpperCase();
                        const filter = {
                            id: labelName,
                            abbreviation,
                            full: labelName,
                            color: `#${color}`,
                        };
                        mapping[labelName] = filter;
                    }
                });
            };
            const run$4 = (pullRequest, full) => {
                if (pullRequest.labels.length === 0 && full === 'No Labels') {
                    return true;
                }
                return pullRequest.labels.findIndex((label) => label.name === full) > -1;
            };
            var labels = {
                id: 'github-labels',
                label: 'Label',
                run: run$4,
                create: create$4,
            };

            const setColors$1 = {
                FAILURE: baseColorsBase['red'],
                ERROR: baseColorsBase['red'],
                SUCCESS: baseColorsBase['green'],
                PENDING: baseColorsBase['yellow'],
            };
            const readable = {
                FAILURE: 'Failure',
                ERROR: 'Failure',
                SUCCESS: 'Success',
                PENDING: 'Pending',
            };
            const create$3 = (pullRequest, mapping) => {
                const { status } = pullRequest;
                if (!mapping[readable[status.state]]) {
                    mapping[status.state] = {
                        id: readable[status.state],
                        abbreviation: status.state[0],
                        full: readable[status.state],
                        color: setColors$1[status.state],
                    };
                }
            };
            const run$3 = (pullRequest, full) => readable[pullRequest.status.state] === full;
            var status$2 = {
                id: 'github-status',
                label: 'Status',
                run: run$3,
                create: create$3,
            };

            const filterConfigs$2 = {
                createdBy,
                status: status$2,
                labels,
            };
            var filterConfigs$3 = filterBuilder.createFilterConfigs(filterConfigs$2);

            function requiredArgs(required, args) {
              if (args.length < required) {
                throw new TypeError(required + ' argument' + (required > 1 ? 's' : '') + ' required, but only ' + args.length + ' present');
              }
            }

            /**
             * @name toDate
             * @category Common Helpers
             * @summary Convert the given argument to an instance of Date.
             *
             * @description
             * Convert the given argument to an instance of Date.
             *
             * If the argument is an instance of Date, the function returns its clone.
             *
             * If the argument is a number, it is treated as a timestamp.
             *
             * If the argument is none of the above, the function returns Invalid Date.
             *
             * **Note**: *all* Date arguments passed to any *date-fns* function is processed by `toDate`.
             *
             * @param {Date|Number} argument - the value to convert
             * @returns {Date} the parsed date in the local time zone
             * @throws {TypeError} 1 argument required
             *
             * @example
             * // Clone the date:
             * const result = toDate(new Date(2014, 1, 11, 11, 30, 30))
             * //=> Tue Feb 11 2014 11:30:30
             *
             * @example
             * // Convert the timestamp to date:
             * const result = toDate(1392098430000)
             * //=> Tue Feb 11 2014 11:30:30
             */

            function toDate(argument) {
              requiredArgs(1, arguments);
              var argStr = Object.prototype.toString.call(argument); // Clone the date

              if (argument instanceof Date || typeof argument === 'object' && argStr === '[object Date]') {
                // Prevent the date to lose the milliseconds when passed to new Date() in IE10
                return new Date(argument.getTime());
              } else if (typeof argument === 'number' || argStr === '[object Number]') {
                return new Date(argument);
              } else {
                if ((typeof argument === 'string' || argStr === '[object String]') && typeof console !== 'undefined') {
                  // eslint-disable-next-line no-console
                  console.warn("Starting with v2.0.0-beta.1 date-fns doesn't accept strings as date arguments. Please use `parseISO` to parse strings. See: https://git.io/fjule"); // eslint-disable-next-line no-console

                  console.warn(new Error().stack);
                }

                return new Date(NaN);
              }
            }

            /**
             * Google Chrome as of 67.0.3396.87 introduced timezones with offset that includes seconds.
             * They usually appear for dates that denote time before the timezones were introduced
             * (e.g. for 'Europe/Prague' timezone the offset is GMT+00:57:44 before 1 October 1891
             * and GMT+01:00:00 after that date)
             *
             * Date#getTimezoneOffset returns the offset in minutes and would return 57 for the example above,
             * which would lead to incorrect calculations.
             *
             * This function returns the timezone offset in milliseconds that takes seconds in account.
             */
            function getTimezoneOffsetInMilliseconds(date) {
              var utcDate = new Date(Date.UTC(date.getFullYear(), date.getMonth(), date.getDate(), date.getHours(), date.getMinutes(), date.getSeconds(), date.getMilliseconds()));
              utcDate.setUTCFullYear(date.getFullYear());
              return date.getTime() - utcDate.getTime();
            }

            /**
             * @name compareAsc
             * @category Common Helpers
             * @summary Compare the two dates and return -1, 0 or 1.
             *
             * @description
             * Compare the two dates and return 1 if the first date is after the second,
             * -1 if the first date is before the second or 0 if dates are equal.
             *
             * ### v2.0.0 breaking changes:
             *
             * - [Changes that are common for the whole library](https://github.com/date-fns/date-fns/blob/master/docs/upgradeGuide.md#Common-Changes).
             *
             * @param {Date|Number} dateLeft - the first date to compare
             * @param {Date|Number} dateRight - the second date to compare
             * @returns {Number} the result of the comparison
             * @throws {TypeError} 2 arguments required
             *
             * @example
             * // Compare 11 February 1987 and 10 July 1989:
             * const result = compareAsc(new Date(1987, 1, 11), new Date(1989, 6, 10))
             * //=> -1
             *
             * @example
             * // Sort the array of dates:
             * const result = [
             *   new Date(1995, 6, 2),
             *   new Date(1987, 1, 11),
             *   new Date(1989, 6, 10)
             * ].sort(compareAsc)
             * //=> [
             * //   Wed Feb 11 1987 00:00:00,
             * //   Mon Jul 10 1989 00:00:00,
             * //   Sun Jul 02 1995 00:00:00
             * // ]
             */

            function compareAsc(dirtyDateLeft, dirtyDateRight) {
              requiredArgs(2, arguments);
              var dateLeft = toDate(dirtyDateLeft);
              var dateRight = toDate(dirtyDateRight);
              var diff = dateLeft.getTime() - dateRight.getTime();

              if (diff < 0) {
                return -1;
              } else if (diff > 0) {
                return 1; // Return 0 if diff is 0; return NaN if diff is NaN
              } else {
                return diff;
              }
            }

            /**
             * @name differenceInCalendarMonths
             * @category Month Helpers
             * @summary Get the number of calendar months between the given dates.
             *
             * @description
             * Get the number of calendar months between the given dates.
             *
             * ### v2.0.0 breaking changes:
             *
             * - [Changes that are common for the whole library](https://github.com/date-fns/date-fns/blob/master/docs/upgradeGuide.md#Common-Changes).
             *
             * @param {Date|Number} dateLeft - the later date
             * @param {Date|Number} dateRight - the earlier date
             * @returns {Number} the number of calendar months
             * @throws {TypeError} 2 arguments required
             *
             * @example
             * // How many calendar months are between 31 January 2014 and 1 September 2014?
             * var result = differenceInCalendarMonths(
             *   new Date(2014, 8, 1),
             *   new Date(2014, 0, 31)
             * )
             * //=> 8
             */

            function differenceInCalendarMonths(dirtyDateLeft, dirtyDateRight) {
              requiredArgs(2, arguments);
              var dateLeft = toDate(dirtyDateLeft);
              var dateRight = toDate(dirtyDateRight);
              var yearDiff = dateLeft.getFullYear() - dateRight.getFullYear();
              var monthDiff = dateLeft.getMonth() - dateRight.getMonth();
              return yearDiff * 12 + monthDiff;
            }

            /**
             * @name differenceInMilliseconds
             * @category Millisecond Helpers
             * @summary Get the number of milliseconds between the given dates.
             *
             * @description
             * Get the number of milliseconds between the given dates.
             *
             * ### v2.0.0 breaking changes:
             *
             * - [Changes that are common for the whole library](https://github.com/date-fns/date-fns/blob/master/docs/upgradeGuide.md#Common-Changes).
             *
             * @param {Date|Number} dateLeft - the later date
             * @param {Date|Number} dateRight - the earlier date
             * @returns {Number} the number of milliseconds
             * @throws {TypeError} 2 arguments required
             *
             * @example
             * // How many milliseconds are between
             * // 2 July 2014 12:30:20.600 and 2 July 2014 12:30:21.700?
             * const result = differenceInMilliseconds(
             *   new Date(2014, 6, 2, 12, 30, 21, 700),
             *   new Date(2014, 6, 2, 12, 30, 20, 600)
             * )
             * //=> 1100
             */

            function differenceInMilliseconds(dirtyDateLeft, dirtyDateRight) {
              requiredArgs(2, arguments);
              var dateLeft = toDate(dirtyDateLeft);
              var dateRight = toDate(dirtyDateRight);
              return dateLeft.getTime() - dateRight.getTime();
            }

            /**
             * @name endOfDay
             * @category Day Helpers
             * @summary Return the end of a day for the given date.
             *
             * @description
             * Return the end of a day for the given date.
             * The result will be in the local timezone.
             *
             * ### v2.0.0 breaking changes:
             *
             * - [Changes that are common for the whole library](https://github.com/date-fns/date-fns/blob/master/docs/upgradeGuide.md#Common-Changes).
             *
             * @param {Date|Number} date - the original date
             * @returns {Date} the end of a day
             * @throws {TypeError} 1 argument required
             *
             * @example
             * // The end of a day for 2 September 2014 11:55:00:
             * const result = endOfDay(new Date(2014, 8, 2, 11, 55, 0))
             * //=> Tue Sep 02 2014 23:59:59.999
             */

            function endOfDay(dirtyDate) {
              requiredArgs(1, arguments);
              var date = toDate(dirtyDate);
              date.setHours(23, 59, 59, 999);
              return date;
            }

            /**
             * @name endOfMonth
             * @category Month Helpers
             * @summary Return the end of a month for the given date.
             *
             * @description
             * Return the end of a month for the given date.
             * The result will be in the local timezone.
             *
             * ### v2.0.0 breaking changes:
             *
             * - [Changes that are common for the whole library](https://github.com/date-fns/date-fns/blob/master/docs/upgradeGuide.md#Common-Changes).
             *
             * @param {Date|Number} date - the original date
             * @returns {Date} the end of a month
             * @throws {TypeError} 1 argument required
             *
             * @example
             * // The end of a month for 2 September 2014 11:55:00:
             * const result = endOfMonth(new Date(2014, 8, 2, 11, 55, 0))
             * //=> Tue Sep 30 2014 23:59:59.999
             */

            function endOfMonth(dirtyDate) {
              requiredArgs(1, arguments);
              var date = toDate(dirtyDate);
              var month = date.getMonth();
              date.setFullYear(date.getFullYear(), month + 1, 0);
              date.setHours(23, 59, 59, 999);
              return date;
            }

            /**
             * @name isLastDayOfMonth
             * @category Month Helpers
             * @summary Is the given date the last day of a month?
             *
             * @description
             * Is the given date the last day of a month?
             *
             * ### v2.0.0 breaking changes:
             *
             * - [Changes that are common for the whole library](https://github.com/date-fns/date-fns/blob/master/docs/upgradeGuide.md#Common-Changes).
             *
             * @param {Date|Number} date - the date to check
             * @returns {Boolean} the date is the last day of a month
             * @throws {TypeError} 1 argument required
             *
             * @example
             * // Is 28 February 2014 the last day of a month?
             * var result = isLastDayOfMonth(new Date(2014, 1, 28))
             * //=> true
             */

            function isLastDayOfMonth(dirtyDate) {
              requiredArgs(1, arguments);
              var date = toDate(dirtyDate);
              return endOfDay(date).getTime() === endOfMonth(date).getTime();
            }

            /**
             * @name differenceInMonths
             * @category Month Helpers
             * @summary Get the number of full months between the given dates.
             *
             * @description
             * Get the number of full months between the given dates.
             *
             * ### v2.0.0 breaking changes:
             *
             * - [Changes that are common for the whole library](https://github.com/date-fns/date-fns/blob/master/docs/upgradeGuide.md#Common-Changes).
             *
             * @param {Date|Number} dateLeft - the later date
             * @param {Date|Number} dateRight - the earlier date
             * @returns {Number} the number of full months
             * @throws {TypeError} 2 arguments required
             *
             * @example
             * // How many full months are between 31 January 2014 and 1 September 2014?
             * var result = differenceInMonths(new Date(2014, 8, 1), new Date(2014, 0, 31))
             * //=> 7
             */

            function differenceInMonths(dirtyDateLeft, dirtyDateRight) {
              requiredArgs(2, arguments);
              var dateLeft = toDate(dirtyDateLeft);
              var dateRight = toDate(dirtyDateRight);
              var sign = compareAsc(dateLeft, dateRight);
              var difference = Math.abs(differenceInCalendarMonths(dateLeft, dateRight));
              var result; // Check for the difference of less than month

              if (difference < 1) {
                result = 0;
              } else {
                if (dateLeft.getMonth() === 1 && dateLeft.getDate() > 27) {
                  // This will check if the date is end of Feb and assign a higher end of month date
                  // to compare it with Jan
                  dateLeft.setDate(30);
                }

                dateLeft.setMonth(dateLeft.getMonth() - sign * difference); // Math.abs(diff in full months - diff in calendar months) === 1 if last calendar month is not full
                // If so, result must be decreased by 1 in absolute value

                var isLastMonthNotFull = compareAsc(dateLeft, dateRight) === -sign; // Check for cases of one full calendar month

                if (isLastDayOfMonth(toDate(dirtyDateLeft)) && difference === 1 && compareAsc(dirtyDateLeft, dateRight) === 1) {
                  isLastMonthNotFull = false;
                }

                result = sign * (difference - Number(isLastMonthNotFull));
              } // Prevent negative zero


              return result === 0 ? 0 : result;
            }

            /**
             * @name differenceInSeconds
             * @category Second Helpers
             * @summary Get the number of seconds between the given dates.
             *
             * @description
             * Get the number of seconds between the given dates.
             *
             * ### v2.0.0 breaking changes:
             *
             * - [Changes that are common for the whole library](https://github.com/date-fns/date-fns/blob/master/docs/upgradeGuide.md#Common-Changes).
             *
             * @param {Date|Number} dateLeft - the later date
             * @param {Date|Number} dateRight - the earlier date
             * @returns {Number} the number of seconds
             * @throws {TypeError} 2 arguments required
             *
             * @example
             * // How many seconds are between
             * // 2 July 2014 12:30:07.999 and 2 July 2014 12:30:20.000?
             * const result = differenceInSeconds(
             *   new Date(2014, 6, 2, 12, 30, 20, 0),
             *   new Date(2014, 6, 2, 12, 30, 7, 999)
             * )
             * //=> 12
             */

            function differenceInSeconds(dirtyDateLeft, dirtyDateRight) {
              requiredArgs(2, arguments);
              var diff = differenceInMilliseconds(dirtyDateLeft, dirtyDateRight) / 1000;
              return diff > 0 ? Math.floor(diff) : Math.ceil(diff);
            }

            var formatDistanceLocale = {
              lessThanXSeconds: {
                one: 'less than a second',
                other: 'less than {{count}} seconds'
              },
              xSeconds: {
                one: '1 second',
                other: '{{count}} seconds'
              },
              halfAMinute: 'half a minute',
              lessThanXMinutes: {
                one: 'less than a minute',
                other: 'less than {{count}} minutes'
              },
              xMinutes: {
                one: '1 minute',
                other: '{{count}} minutes'
              },
              aboutXHours: {
                one: 'about 1 hour',
                other: 'about {{count}} hours'
              },
              xHours: {
                one: '1 hour',
                other: '{{count}} hours'
              },
              xDays: {
                one: '1 day',
                other: '{{count}} days'
              },
              aboutXWeeks: {
                one: 'about 1 week',
                other: 'about {{count}} weeks'
              },
              xWeeks: {
                one: '1 week',
                other: '{{count}} weeks'
              },
              aboutXMonths: {
                one: 'about 1 month',
                other: 'about {{count}} months'
              },
              xMonths: {
                one: '1 month',
                other: '{{count}} months'
              },
              aboutXYears: {
                one: 'about 1 year',
                other: 'about {{count}} years'
              },
              xYears: {
                one: '1 year',
                other: '{{count}} years'
              },
              overXYears: {
                one: 'over 1 year',
                other: 'over {{count}} years'
              },
              almostXYears: {
                one: 'almost 1 year',
                other: 'almost {{count}} years'
              }
            };
            function formatDistance$1(token, count, options) {
              options = options || {};
              var result;

              if (typeof formatDistanceLocale[token] === 'string') {
                result = formatDistanceLocale[token];
              } else if (count === 1) {
                result = formatDistanceLocale[token].one;
              } else {
                result = formatDistanceLocale[token].other.replace('{{count}}', count);
              }

              if (options.addSuffix) {
                if (options.comparison > 0) {
                  return 'in ' + result;
                } else {
                  return result + ' ago';
                }
              }

              return result;
            }

            function buildFormatLongFn(args) {
              return function (dirtyOptions) {
                var options = dirtyOptions || {};
                var width = options.width ? String(options.width) : args.defaultWidth;
                var format = args.formats[width] || args.formats[args.defaultWidth];
                return format;
              };
            }

            var dateFormats = {
              full: 'EEEE, MMMM do, y',
              long: 'MMMM do, y',
              medium: 'MMM d, y',
              short: 'MM/dd/yyyy'
            };
            var timeFormats = {
              full: 'h:mm:ss a zzzz',
              long: 'h:mm:ss a z',
              medium: 'h:mm:ss a',
              short: 'h:mm a'
            };
            var dateTimeFormats = {
              full: "{{date}} 'at' {{time}}",
              long: "{{date}} 'at' {{time}}",
              medium: '{{date}}, {{time}}',
              short: '{{date}}, {{time}}'
            };
            var formatLong = {
              date: buildFormatLongFn({
                formats: dateFormats,
                defaultWidth: 'full'
              }),
              time: buildFormatLongFn({
                formats: timeFormats,
                defaultWidth: 'full'
              }),
              dateTime: buildFormatLongFn({
                formats: dateTimeFormats,
                defaultWidth: 'full'
              })
            };

            var formatRelativeLocale = {
              lastWeek: "'last' eeee 'at' p",
              yesterday: "'yesterday at' p",
              today: "'today at' p",
              tomorrow: "'tomorrow at' p",
              nextWeek: "eeee 'at' p",
              other: 'P'
            };
            function formatRelative(token, _date, _baseDate, _options) {
              return formatRelativeLocale[token];
            }

            function buildLocalizeFn(args) {
              return function (dirtyIndex, dirtyOptions) {
                var options = dirtyOptions || {};
                var context = options.context ? String(options.context) : 'standalone';
                var valuesArray;

                if (context === 'formatting' && args.formattingValues) {
                  var defaultWidth = args.defaultFormattingWidth || args.defaultWidth;
                  var width = options.width ? String(options.width) : defaultWidth;
                  valuesArray = args.formattingValues[width] || args.formattingValues[defaultWidth];
                } else {
                  var _defaultWidth = args.defaultWidth;

                  var _width = options.width ? String(options.width) : args.defaultWidth;

                  valuesArray = args.values[_width] || args.values[_defaultWidth];
                }

                var index = args.argumentCallback ? args.argumentCallback(dirtyIndex) : dirtyIndex;
                return valuesArray[index];
              };
            }

            var eraValues = {
              narrow: ['B', 'A'],
              abbreviated: ['BC', 'AD'],
              wide: ['Before Christ', 'Anno Domini']
            };
            var quarterValues = {
              narrow: ['1', '2', '3', '4'],
              abbreviated: ['Q1', 'Q2', 'Q3', 'Q4'],
              wide: ['1st quarter', '2nd quarter', '3rd quarter', '4th quarter'] // Note: in English, the names of days of the week and months are capitalized.
              // If you are making a new locale based on this one, check if the same is true for the language you're working on.
              // Generally, formatted dates should look like they are in the middle of a sentence,
              // e.g. in Spanish language the weekdays and months should be in the lowercase.

            };
            var monthValues = {
              narrow: ['J', 'F', 'M', 'A', 'M', 'J', 'J', 'A', 'S', 'O', 'N', 'D'],
              abbreviated: ['Jan', 'Feb', 'Mar', 'Apr', 'May', 'Jun', 'Jul', 'Aug', 'Sep', 'Oct', 'Nov', 'Dec'],
              wide: ['January', 'February', 'March', 'April', 'May', 'June', 'July', 'August', 'September', 'October', 'November', 'December']
            };
            var dayValues = {
              narrow: ['S', 'M', 'T', 'W', 'T', 'F', 'S'],
              short: ['Su', 'Mo', 'Tu', 'We', 'Th', 'Fr', 'Sa'],
              abbreviated: ['Sun', 'Mon', 'Tue', 'Wed', 'Thu', 'Fri', 'Sat'],
              wide: ['Sunday', 'Monday', 'Tuesday', 'Wednesday', 'Thursday', 'Friday', 'Saturday']
            };
            var dayPeriodValues = {
              narrow: {
                am: 'a',
                pm: 'p',
                midnight: 'mi',
                noon: 'n',
                morning: 'morning',
                afternoon: 'afternoon',
                evening: 'evening',
                night: 'night'
              },
              abbreviated: {
                am: 'AM',
                pm: 'PM',
                midnight: 'midnight',
                noon: 'noon',
                morning: 'morning',
                afternoon: 'afternoon',
                evening: 'evening',
                night: 'night'
              },
              wide: {
                am: 'a.m.',
                pm: 'p.m.',
                midnight: 'midnight',
                noon: 'noon',
                morning: 'morning',
                afternoon: 'afternoon',
                evening: 'evening',
                night: 'night'
              }
            };
            var formattingDayPeriodValues = {
              narrow: {
                am: 'a',
                pm: 'p',
                midnight: 'mi',
                noon: 'n',
                morning: 'in the morning',
                afternoon: 'in the afternoon',
                evening: 'in the evening',
                night: 'at night'
              },
              abbreviated: {
                am: 'AM',
                pm: 'PM',
                midnight: 'midnight',
                noon: 'noon',
                morning: 'in the morning',
                afternoon: 'in the afternoon',
                evening: 'in the evening',
                night: 'at night'
              },
              wide: {
                am: 'a.m.',
                pm: 'p.m.',
                midnight: 'midnight',
                noon: 'noon',
                morning: 'in the morning',
                afternoon: 'in the afternoon',
                evening: 'in the evening',
                night: 'at night'
              }
            };

            function ordinalNumber(dirtyNumber, _dirtyOptions) {
              var number = Number(dirtyNumber); // If ordinal numbers depend on context, for example,
              // if they are different for different grammatical genders,
              // use `options.unit`:
              //
              //   var options = dirtyOptions || {}
              //   var unit = String(options.unit)
              //
              // where `unit` can be 'year', 'quarter', 'month', 'week', 'date', 'dayOfYear',
              // 'day', 'hour', 'minute', 'second'

              var rem100 = number % 100;

              if (rem100 > 20 || rem100 < 10) {
                switch (rem100 % 10) {
                  case 1:
                    return number + 'st';

                  case 2:
                    return number + 'nd';

                  case 3:
                    return number + 'rd';
                }
              }

              return number + 'th';
            }

            var localize = {
              ordinalNumber: ordinalNumber,
              era: buildLocalizeFn({
                values: eraValues,
                defaultWidth: 'wide'
              }),
              quarter: buildLocalizeFn({
                values: quarterValues,
                defaultWidth: 'wide',
                argumentCallback: function (quarter) {
                  return Number(quarter) - 1;
                }
              }),
              month: buildLocalizeFn({
                values: monthValues,
                defaultWidth: 'wide'
              }),
              day: buildLocalizeFn({
                values: dayValues,
                defaultWidth: 'wide'
              }),
              dayPeriod: buildLocalizeFn({
                values: dayPeriodValues,
                defaultWidth: 'wide',
                formattingValues: formattingDayPeriodValues,
                defaultFormattingWidth: 'wide'
              })
            };

            function buildMatchPatternFn(args) {
              return function (dirtyString, dirtyOptions) {
                var string = String(dirtyString);
                var options = dirtyOptions || {};
                var matchResult = string.match(args.matchPattern);

                if (!matchResult) {
                  return null;
                }

                var matchedString = matchResult[0];
                var parseResult = string.match(args.parsePattern);

                if (!parseResult) {
                  return null;
                }

                var value = args.valueCallback ? args.valueCallback(parseResult[0]) : parseResult[0];
                value = options.valueCallback ? options.valueCallback(value) : value;
                return {
                  value: value,
                  rest: string.slice(matchedString.length)
                };
              };
            }

            function buildMatchFn(args) {
              return function (dirtyString, dirtyOptions) {
                var string = String(dirtyString);
                var options = dirtyOptions || {};
                var width = options.width;
                var matchPattern = width && args.matchPatterns[width] || args.matchPatterns[args.defaultMatchWidth];
                var matchResult = string.match(matchPattern);

                if (!matchResult) {
                  return null;
                }

                var matchedString = matchResult[0];
                var parsePatterns = width && args.parsePatterns[width] || args.parsePatterns[args.defaultParseWidth];
                var value;

                if (Object.prototype.toString.call(parsePatterns) === '[object Array]') {
                  value = findIndex(parsePatterns, function (pattern) {
                    return pattern.test(matchedString);
                  });
                } else {
                  value = findKey(parsePatterns, function (pattern) {
                    return pattern.test(matchedString);
                  });
                }

                value = args.valueCallback ? args.valueCallback(value) : value;
                value = options.valueCallback ? options.valueCallback(value) : value;
                return {
                  value: value,
                  rest: string.slice(matchedString.length)
                };
              };
            }

            function findKey(object, predicate) {
              for (var key in object) {
                if (object.hasOwnProperty(key) && predicate(object[key])) {
                  return key;
                }
              }
            }

            function findIndex(array, predicate) {
              for (var key = 0; key < array.length; key++) {
                if (predicate(array[key])) {
                  return key;
                }
              }
            }

            var matchOrdinalNumberPattern = /^(\d+)(th|st|nd|rd)?/i;
            var parseOrdinalNumberPattern = /\d+/i;
            var matchEraPatterns = {
              narrow: /^(b|a)/i,
              abbreviated: /^(b\.?\s?c\.?|b\.?\s?c\.?\s?e\.?|a\.?\s?d\.?|c\.?\s?e\.?)/i,
              wide: /^(before christ|before common era|anno domini|common era)/i
            };
            var parseEraPatterns = {
              any: [/^b/i, /^(a|c)/i]
            };
            var matchQuarterPatterns = {
              narrow: /^[1234]/i,
              abbreviated: /^q[1234]/i,
              wide: /^[1234](th|st|nd|rd)? quarter/i
            };
            var parseQuarterPatterns = {
              any: [/1/i, /2/i, /3/i, /4/i]
            };
            var matchMonthPatterns = {
              narrow: /^[jfmasond]/i,
              abbreviated: /^(jan|feb|mar|apr|may|jun|jul|aug|sep|oct|nov|dec)/i,
              wide: /^(january|february|march|april|may|june|july|august|september|october|november|december)/i
            };
            var parseMonthPatterns = {
              narrow: [/^j/i, /^f/i, /^m/i, /^a/i, /^m/i, /^j/i, /^j/i, /^a/i, /^s/i, /^o/i, /^n/i, /^d/i],
              any: [/^ja/i, /^f/i, /^mar/i, /^ap/i, /^may/i, /^jun/i, /^jul/i, /^au/i, /^s/i, /^o/i, /^n/i, /^d/i]
            };
            var matchDayPatterns = {
              narrow: /^[smtwf]/i,
              short: /^(su|mo|tu|we|th|fr|sa)/i,
              abbreviated: /^(sun|mon|tue|wed|thu|fri|sat)/i,
              wide: /^(sunday|monday|tuesday|wednesday|thursday|friday|saturday)/i
            };
            var parseDayPatterns = {
              narrow: [/^s/i, /^m/i, /^t/i, /^w/i, /^t/i, /^f/i, /^s/i],
              any: [/^su/i, /^m/i, /^tu/i, /^w/i, /^th/i, /^f/i, /^sa/i]
            };
            var matchDayPeriodPatterns = {
              narrow: /^(a|p|mi|n|(in the|at) (morning|afternoon|evening|night))/i,
              any: /^([ap]\.?\s?m\.?|midnight|noon|(in the|at) (morning|afternoon|evening|night))/i
            };
            var parseDayPeriodPatterns = {
              any: {
                am: /^a/i,
                pm: /^p/i,
                midnight: /^mi/i,
                noon: /^no/i,
                morning: /morning/i,
                afternoon: /afternoon/i,
                evening: /evening/i,
                night: /night/i
              }
            };
            var match = {
              ordinalNumber: buildMatchPatternFn({
                matchPattern: matchOrdinalNumberPattern,
                parsePattern: parseOrdinalNumberPattern,
                valueCallback: function (value) {
                  return parseInt(value, 10);
                }
              }),
              era: buildMatchFn({
                matchPatterns: matchEraPatterns,
                defaultMatchWidth: 'wide',
                parsePatterns: parseEraPatterns,
                defaultParseWidth: 'any'
              }),
              quarter: buildMatchFn({
                matchPatterns: matchQuarterPatterns,
                defaultMatchWidth: 'wide',
                parsePatterns: parseQuarterPatterns,
                defaultParseWidth: 'any',
                valueCallback: function (index) {
                  return index + 1;
                }
              }),
              month: buildMatchFn({
                matchPatterns: matchMonthPatterns,
                defaultMatchWidth: 'wide',
                parsePatterns: parseMonthPatterns,
                defaultParseWidth: 'any'
              }),
              day: buildMatchFn({
                matchPatterns: matchDayPatterns,
                defaultMatchWidth: 'wide',
                parsePatterns: parseDayPatterns,
                defaultParseWidth: 'any'
              }),
              dayPeriod: buildMatchFn({
                matchPatterns: matchDayPeriodPatterns,
                defaultMatchWidth: 'any',
                parsePatterns: parseDayPeriodPatterns,
                defaultParseWidth: 'any'
              })
            };

            /**
             * @type {Locale}
             * @category Locales
             * @summary English locale (United States).
             * @language English
             * @iso-639-2 eng
             * @author Sasha Koss [@kossnocorp]{@link https://github.com/kossnocorp}
             * @author Lesha Koss [@leshakoss]{@link https://github.com/leshakoss}
             */

            var locale = {
              code: 'en-US',
              formatDistance: formatDistance$1,
              formatLong: formatLong,
              formatRelative: formatRelative,
              localize: localize,
              match: match,
              options: {
                weekStartsOn: 0
                /* Sunday */
                ,
                firstWeekContainsDate: 1
              }
            };

            function assign(target, dirtyObject) {
              if (target == null) {
                throw new TypeError('assign requires that input parameter not be null or undefined');
              }

              dirtyObject = dirtyObject || {};

              for (var property in dirtyObject) {
                if (dirtyObject.hasOwnProperty(property)) {
                  target[property] = dirtyObject[property];
                }
              }

              return target;
            }

            function cloneObject(dirtyObject) {
              return assign({}, dirtyObject);
            }

            var MINUTES_IN_DAY = 1440;
            var MINUTES_IN_ALMOST_TWO_DAYS = 2520;
            var MINUTES_IN_MONTH = 43200;
            var MINUTES_IN_TWO_MONTHS = 86400;
            /**
             * @name formatDistance
             * @category Common Helpers
             * @summary Return the distance between the given dates in words.
             *
             * @description
             * Return the distance between the given dates in words.
             *
             * | Distance between dates                                            | Result              |
             * |-------------------------------------------------------------------|---------------------|
             * | 0 ... 30 secs                                                     | less than a minute  |
             * | 30 secs ... 1 min 30 secs                                         | 1 minute            |
             * | 1 min 30 secs ... 44 mins 30 secs                                 | [2..44] minutes     |
             * | 44 mins ... 30 secs ... 89 mins 30 secs                           | about 1 hour        |
             * | 89 mins 30 secs ... 23 hrs 59 mins 30 secs                        | about [2..24] hours |
             * | 23 hrs 59 mins 30 secs ... 41 hrs 59 mins 30 secs                 | 1 day               |
             * | 41 hrs 59 mins 30 secs ... 29 days 23 hrs 59 mins 30 secs         | [2..30] days        |
             * | 29 days 23 hrs 59 mins 30 secs ... 44 days 23 hrs 59 mins 30 secs | about 1 month       |
             * | 44 days 23 hrs 59 mins 30 secs ... 59 days 23 hrs 59 mins 30 secs | about 2 months      |
             * | 59 days 23 hrs 59 mins 30 secs ... 1 yr                           | [2..12] months      |
             * | 1 yr ... 1 yr 3 months                                            | about 1 year        |
             * | 1 yr 3 months ... 1 yr 9 month s                                  | over 1 year         |
             * | 1 yr 9 months ... 2 yrs                                           | almost 2 years      |
             * | N yrs ... N yrs 3 months                                          | about N years       |
             * | N yrs 3 months ... N yrs 9 months                                 | over N years        |
             * | N yrs 9 months ... N+1 yrs                                        | almost N+1 years    |
             *
             * With `options.includeSeconds == true`:
             * | Distance between dates | Result               |
             * |------------------------|----------------------|
             * | 0 secs ... 5 secs      | less than 5 seconds  |
             * | 5 secs ... 10 secs     | less than 10 seconds |
             * | 10 secs ... 20 secs    | less than 20 seconds |
             * | 20 secs ... 40 secs    | half a minute        |
             * | 40 secs ... 60 secs    | less than a minute   |
             * | 60 secs ... 90 secs    | 1 minute             |
             *
             * ### v2.0.0 breaking changes:
             *
             * - [Changes that are common for the whole library](https://github.com/date-fns/date-fns/blob/master/docs/upgradeGuide.md#Common-Changes).
             *
             * - The function was renamed from `distanceInWords ` to `formatDistance`
             *   to make its name consistent with `format` and `formatRelative`.
             *
             * - The order of arguments is swapped to make the function
             *   consistent with `differenceIn...` functions.
             *
             *   ```javascript
             *   // Before v2.0.0
             *
             *   distanceInWords(
             *     new Date(1986, 3, 4, 10, 32, 0),
             *     new Date(1986, 3, 4, 11, 32, 0),
             *     { addSuffix: true }
             *   ) //=> 'in about 1 hour'
             *
             *   // v2.0.0 onward
             *
             *   formatDistance(
             *     new Date(1986, 3, 4, 11, 32, 0),
             *     new Date(1986, 3, 4, 10, 32, 0),
             *     { addSuffix: true }
             *   ) //=> 'in about 1 hour'
             *   ```
             *
             * @param {Date|Number} date - the date
             * @param {Date|Number} baseDate - the date to compare with
             * @param {Object} [options] - an object with options.
             * @param {Boolean} [options.includeSeconds=false] - distances less than a minute are more detailed
             * @param {Boolean} [options.addSuffix=false] - result indicates if the second date is earlier or later than the first
             * @param {Locale} [options.locale=defaultLocale] - the locale object. See [Locale]{@link https://date-fns.org/docs/Locale}
             * @returns {String} the distance in words
             * @throws {TypeError} 2 arguments required
             * @throws {RangeError} `date` must not be Invalid Date
             * @throws {RangeError} `baseDate` must not be Invalid Date
             * @throws {RangeError} `options.locale` must contain `formatDistance` property
             *
             * @example
             * // What is the distance between 2 July 2014 and 1 January 2015?
             * const result = formatDistance(new Date(2014, 6, 2), new Date(2015, 0, 1))
             * //=> '6 months'
             *
             * @example
             * // What is the distance between 1 January 2015 00:00:15
             * // and 1 January 2015 00:00:00, including seconds?
             * const result = formatDistance(
             *   new Date(2015, 0, 1, 0, 0, 15),
             *   new Date(2015, 0, 1, 0, 0, 0),
             *   { includeSeconds: true }
             * )
             * //=> 'less than 20 seconds'
             *
             * @example
             * // What is the distance from 1 January 2016
             * // to 1 January 2015, with a suffix?
             * const result = formatDistance(new Date(2015, 0, 1), new Date(2016, 0, 1), {
             *   addSuffix: true
             * })
             * //=> 'about 1 year ago'
             *
             * @example
             * // What is the distance between 1 August 2016 and 1 January 2015 in Esperanto?
             * import { eoLocale } from 'date-fns/locale/eo'
             * const result = formatDistance(new Date(2016, 7, 1), new Date(2015, 0, 1), {
             *   locale: eoLocale
             * })
             * //=> 'pli ol 1 jaro'
             */

            function formatDistance(dirtyDate, dirtyBaseDate) {
              var options = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};
              requiredArgs(2, arguments);
              var locale$1 = options.locale || locale;

              if (!locale$1.formatDistance) {
                throw new RangeError('locale must contain formatDistance property');
              }

              var comparison = compareAsc(dirtyDate, dirtyBaseDate);

              if (isNaN(comparison)) {
                throw new RangeError('Invalid time value');
              }

              var localizeOptions = cloneObject(options);
              localizeOptions.addSuffix = Boolean(options.addSuffix);
              localizeOptions.comparison = comparison;
              var dateLeft;
              var dateRight;

              if (comparison > 0) {
                dateLeft = toDate(dirtyBaseDate);
                dateRight = toDate(dirtyDate);
              } else {
                dateLeft = toDate(dirtyDate);
                dateRight = toDate(dirtyBaseDate);
              }

              var seconds = differenceInSeconds(dateRight, dateLeft);
              var offsetInSeconds = (getTimezoneOffsetInMilliseconds(dateRight) - getTimezoneOffsetInMilliseconds(dateLeft)) / 1000;
              var minutes = Math.round((seconds - offsetInSeconds) / 60);
              var months; // 0 up to 2 mins

              if (minutes < 2) {
                if (options.includeSeconds) {
                  if (seconds < 5) {
                    return locale$1.formatDistance('lessThanXSeconds', 5, localizeOptions);
                  } else if (seconds < 10) {
                    return locale$1.formatDistance('lessThanXSeconds', 10, localizeOptions);
                  } else if (seconds < 20) {
                    return locale$1.formatDistance('lessThanXSeconds', 20, localizeOptions);
                  } else if (seconds < 40) {
                    return locale$1.formatDistance('halfAMinute', null, localizeOptions);
                  } else if (seconds < 60) {
                    return locale$1.formatDistance('lessThanXMinutes', 1, localizeOptions);
                  } else {
                    return locale$1.formatDistance('xMinutes', 1, localizeOptions);
                  }
                } else {
                  if (minutes === 0) {
                    return locale$1.formatDistance('lessThanXMinutes', 1, localizeOptions);
                  } else {
                    return locale$1.formatDistance('xMinutes', minutes, localizeOptions);
                  }
                } // 2 mins up to 0.75 hrs

              } else if (minutes < 45) {
                return locale$1.formatDistance('xMinutes', minutes, localizeOptions); // 0.75 hrs up to 1.5 hrs
              } else if (minutes < 90) {
                return locale$1.formatDistance('aboutXHours', 1, localizeOptions); // 1.5 hrs up to 24 hrs
              } else if (minutes < MINUTES_IN_DAY) {
                var hours = Math.round(minutes / 60);
                return locale$1.formatDistance('aboutXHours', hours, localizeOptions); // 1 day up to 1.75 days
              } else if (minutes < MINUTES_IN_ALMOST_TWO_DAYS) {
                return locale$1.formatDistance('xDays', 1, localizeOptions); // 1.75 days up to 30 days
              } else if (minutes < MINUTES_IN_MONTH) {
                var days = Math.round(minutes / MINUTES_IN_DAY);
                return locale$1.formatDistance('xDays', days, localizeOptions); // 1 month up to 2 months
              } else if (minutes < MINUTES_IN_TWO_MONTHS) {
                months = Math.round(minutes / MINUTES_IN_MONTH);
                return locale$1.formatDistance('aboutXMonths', months, localizeOptions);
              }

              months = differenceInMonths(dateRight, dateLeft); // 2 months up to 12 months

              if (months < 12) {
                var nearestMonth = Math.round(minutes / MINUTES_IN_MONTH);
                return locale$1.formatDistance('xMonths', nearestMonth, localizeOptions); // 1 year up to max Date
              } else {
                var monthsSinceStartOfYear = months % 12;
                var years = Math.floor(months / 12); // N years up to 1 years 3 months

                if (monthsSinceStartOfYear < 3) {
                  return locale$1.formatDistance('aboutXYears', years, localizeOptions); // N years 3 months up to N years 9 months
                } else if (monthsSinceStartOfYear < 9) {
                  return locale$1.formatDistance('overXYears', years, localizeOptions); // N years 9 months up to N year 12 months
                } else {
                  return locale$1.formatDistance('almostXYears', years + 1, localizeOptions);
                }
              }
            }

            // THIS FILE IS AUTO GENERATED
            function FaJira (props) {
              return GenIcon({"tag":"svg","attr":{"viewBox":"0 0 496 512"},"child":[{"tag":"path","attr":{"d":"M490 241.7C417.1 169 320.6 71.8 248.5 0 83 164.9 6 241.7 6 241.7c-7.9 7.9-7.9 20.7 0 28.7C138.8 402.7 67.8 331.9 248.5 512c379.4-378 15.7-16.7 241.5-241.7 8-7.9 8-20.7 0-28.6zm-241.5 90l-76-75.7 76-75.7 76 75.7-76 75.7z"}}]})(props);
            }function FaHourglassEnd (props) {
              return GenIcon({"tag":"svg","attr":{"viewBox":"0 0 384 512"},"child":[{"tag":"path","attr":{"d":"M360 64c13.255 0 24-10.745 24-24V24c0-13.255-10.745-24-24-24H24C10.745 0 0 10.745 0 24v16c0 13.255 10.745 24 24 24 0 90.965 51.016 167.734 120.842 192C75.016 280.266 24 357.035 24 448c-13.255 0-24 10.745-24 24v16c0 13.255 10.745 24 24 24h336c13.255 0 24-10.745 24-24v-16c0-13.255-10.745-24-24-24 0-90.965-51.016-167.734-120.842-192C308.984 231.734 360 154.965 360 64zM192 208c-57.787 0-104-66.518-104-144h208c0 77.945-46.51 144-104 144z"}}]})(props);
            }

            const Hourglass = () => {
                return (react.createElement(FaHourglassEnd, null));
            };

            const buildIcon = (status) => {
                if (!status) {
                    return {
                        icon: BsCircleFill,
                        color: 'green',
                    };
                }
                switch (status.state) {
                    case 'SUCCESS': return {
                        icon: BsCircleFill,
                        color: 'green',
                    };
                    case 'ERROR':
                    case 'FAILURE': return {
                        icon: BsExclamationCircleFill,
                        color: 'red',
                    };
                    case 'PENDING': return {
                        icon: Hourglass,
                        color: 'yellow',
                    };
                    default: return {
                        icon: BsQuestionCircleFill,
                        color: 'white',
                    };
                }
            };

            const Tooltip = (props) => {
                const { status } = props;
                return (react.createElement("div", null,
                    react.createElement(TooltipHeader, null, status.context),
                    status.description));
            };

            const Status$1 = (props) => {
                const { status, isFake } = props;
                const BuildIcon = buildIcon(status);
                const [isLoading, setIsLoading] = react.useState(false);
                const tooltipText = isFake || !status ? '' : react.createElement(Tooltip, { status: status });
                const navigate = () => {
                    if (!isLoading && status) {
                        setIsLoading(true);
                        window.location.href = status.targetUrl;
                    }
                };
                return (react.createElement(Tooltip$2, { noDelay: true, isDisabled: isFake, pre: true, placement: "left", text: tooltipText },
                    react.createElement(IconContainer, { isLink: !!status && !!status.targetUrl, onClick: navigate, isFake: isFake, appColor: BuildIcon.color },
                        react.createElement(BuildIcon.icon, null))));
            };

            const Checks = (props) => {
                const { status } = props.pullRequest;
                const { prConfig: { mostChecks } } = github.useTrackedState();
                const extra = Array.from({ length: mostChecks - status.contexts.length });
                return (react.createElement(StateContainer$1, null,
                    react.createElement(StateLabel, null, "Checks:"),
                    status.contexts.map((status) => react.createElement(Status$1, { key: status.context, status: status })),
                    extra.map((_, index) => react.createElement(Status$1, { key: index, isFake: true }))));
            };

            const Approval = (props) => {
                const { approval } = props;
                return (react.createElement(Tooltip$2, { noDelay: true, pre: true, placement: "left", text: react.createElement(ApprovalTooltip, { author: approval.author }) },
                    react.createElement(IconContainer, { appColor: "green" },
                        react.createElement(BsCircleFill, null))));
            };

            const Reviews = (props) => {
                const { isRejected, approvedCount, reviews } = props.pullRequest;
                const { prConfig: { mostReviews }, settings: { reviewsRequired } } = github.useTrackedState();
                const required = reviewsRequired || 2;
                const remaining = required - approvedCount < 0 ? 0 : required - approvedCount;
                const emptyIcons = Array.from({ length: remaining });
                const fakeIcons = Array.from({ length: mostReviews - remaining - approvedCount });
                const approvals = reviews.filter((review) => review.state === 'APPROVED');
                const fails = props.pullRequest.reviews.filter((review) => review.state === 'CHANGES_REQUESTED').map((review) => review.author);
                return (react.createElement(Tooltip$2, { text: react.createElement(react.Fragment, null,
                        "Changes requested by",
                        fails.map((author) => react.createElement(ApprovalTooltip, { key: author.login, author: author }))), isDisabled: !isRejected },
                    react.createElement(StateContainer$1, { isRed: isRejected },
                        react.createElement(StateLabel, null, "Reviews:"),
                        approvals.map((approval) => react.createElement(Approval, { key: approval.author.login, approval: approval })),
                        emptyIcons.map((_, index) => react.createElement(IconContainer, { key: index, appColor: "yellow" },
                            react.createElement(BsCircle, null))),
                        fakeIcons.map((_, index) => react.createElement(IconContainer, { key: index, isFake: true, appColor: "white" },
                            react.createElement(BsCircle, null))))));
            };

            const Statuses = (props) => {
                const { pullRequest } = props;
                return (react.createElement(Container$3, null,
                    react.createElement(Checks, { pullRequest: pullRequest }),
                    react.createElement(Reviews, { pullRequest: pullRequest })));
            };

            const Container$2 = qe.div `
  display: flex;
`;
            qe.div `
  padding: 2px 4px;
  border-radius: 4px;
  font-size: ${(props) => props.theme.sizes.md.fontSize};
  background-color: ${(props) => props.bgColor};
  color: ${({ theme: { baseColors }, isLight }) => isLight ? baseColors.black : baseColors.white};
  margin-left: 4px;
  box-shadow: 0 0 1px ${({ theme: { baseColors }, isLight }) => isLight ? baseColors['grey-dark'] : baseColors['grey-light']} ;
`;

            const Label = (props) => {
                const { label } = props;
                const { filterGroups } = filters.useTrackedState();
                const { handle } = useClickFilter();
                const labelsGroup = filterGroups.find((filter) => filter.id === 'github-labels');
                const filter = labelsGroup && Object.values(labelsGroup.filters).find((filter) => filter.filter.full === label.name);
                const handleClick = () => {
                    if (filter) {
                        handle(filter);
                    }
                };
                return (react.createElement(Pill, { onClick: handleClick, size: "sm", key: label.name, overrideBackground: `#${label.color}`, isLight: true, foreground: lightOrDark(`#${label.color}`) ? 'black' : 'white' }, label.name));
            };

            const NoLabels = () => {
                const { filterGroups } = filters.useTrackedState();
                const { handle } = useClickFilter();
                const labelsGroup = filterGroups.find((filter) => filter.id === 'github-labels');
                const filter = labelsGroup && Object.values(labelsGroup.filters).find((filter) => filter.filter.full === 'No Labels');
                const handleClick = () => {
                    if (filter) {
                        handle(filter);
                    }
                };
                return (react.createElement(Pill, { onClick: handleClick, size: "md", background: "red", foreground: "black" }, "No Labels"));
            };

            const Labels = (props) => {
                const { labels } = props.pullRequest;
                const labelCount = labels.length;
                return (react.createElement(Container$2, null, labelCount > 0 ?
                    labels.map((label) => react.createElement(Label, { key: label.name, label: label }))
                    :
                        react.createElement(NoLabels, null)));
            };

            const PullRequest = react.forwardRef((props, ref) => {
                const { pullRequest } = props;
                const { filterGroups } = filters.useTrackedState();
                const { handle } = useClickFilter();
                const { url, updatedAt, prNumber, owner, repository, createdBy, title } = pullRequest;
                const navigate = () => {
                    window.location.href = url;
                };
                const assigneeGroup = filterGroups.find((filter) => filter.id === 'github-createdBy');
                const colors = assigneeGroup ? Object.values(assigneeGroup.filters).map((current) => ({
                    full: current.filter.full,
                    color: current.filter.color,
                })) : [];
                const filter = assigneeGroup && Object.values(assigneeGroup.filters).find((filter) => filter.filter.full === pullRequest.createdBy);
                const handleClickCreatedBy = () => {
                    if (filter) {
                        handle(filter);
                    }
                };
                const color = colors.find((c) => c.full === pullRequest.createdBy)?.color;
                return (react.createElement(Card, { ref: ref, title: {
                        pill: true,
                        text: `${owner}/${repository}/${prNumber}`,
                        onClick: navigate,
                    }, centerTitle: `Updated ${formatDistance(new Date(updatedAt), new Date())} ago`, endTitle: {
                        text: createdBy,
                        color,
                        handleClick: handleClickCreatedBy,
                    }, footer: react.createElement(Labels, { pullRequest: pullRequest }), endFooter: {
                        text: react.createElement(Statuses, { pullRequest: pullRequest }),
                    } }, title));
            });

            const PullRequests = () => {
                const { listen } = useListenEvents('github');
                const { filteredItems } = useItems();
                const { find } = useGetFilter();
                const { handle } = useClickFilter();
                react.useEffect(() => {
                    listen('filter', callback);
                }, []);
                const callback = (event) => {
                    const filter = find(event);
                    if (filter) {
                        handle(filter);
                    }
                };
                return (react.createElement(react.Fragment, null, filteredItems.map((pullRequest) => react.createElement(PullRequest, { key: pullRequest.prNumber, pullRequest: pullRequest }))));
            };

            const Content$1 = () => {
                const { pullRequests } = usePullRequests();
                return (react.createElement(filters.Provider, { filterConfigs: filterConfigs$3(['createdBy', 'labels', 'status']), items: pullRequests },
                    react.createElement(Filters, null),
                    react.createElement(Unit$1.Content, { hasData: pullRequests.length > 0, hideProgress: pullRequests.length === 0 },
                        react.createElement(PullRequests, null))));
            };

            const Router$1 = () => {
                const { check, authStatus } = useAuthCheck$2();
                const { init } = useInit$3();
                react.useEffect(() => {
                    init('pullRequests');
                    init('settings');
                    init('repositories');
                }, []);
                react.useEffect(() => {
                    const hangup = check();
                    return () => {
                        hangup();
                    };
                }, []);
                switch (authStatus) {
                    case 'waiting': return null;
                    case 'not': return react.createElement(Login, { column: "third", unit: "github" });
                    default: return react.createElement(Content$1, null);
                }
            };

            const Wrapper$2 = () => {
                return (react.createElement(Unit$1.Container, { leftMargin: true, column: "third" },
                    react.createElement(Unit$1.Title, { text: "GitHub Pull Requests", icon: DiGithubBadge }),
                    react.createElement(Router$1, null)));
            };

            const Github = (props) => {
                const { isVisible } = props;
                return (react.createElement(github.Provider, null,
                    isVisible && react.createElement(Wrapper$2, null),
                    react.createElement(Portal, { selectionTrigger: "github" },
                        react.createElement(Github$1, null))));
            };

            const Global = () => {
                return (react.createElement(Portal, { selectionTrigger: "global" },
                    react.createElement(Global$1, null)));
            };

            const FeedItemTile = (props) => {
                const { tile, feedItem } = props;
                const { dispatch } = useDispatchEvent();
                const navigate = (url) => {
                    window.location.href = url;
                };
                const filter = () => {
                    dispatch({
                        unit: feedItem.app,
                        full: tile.label,
                        type: feedItem.type,
                    });
                };
                const handleOnClick = () => {
                    if (tile.url) {
                        navigate(tile.url);
                    }
                    if (tile.isFilterable) {
                        filter();
                    }
                };
                const isClickable = tile.isFilterable || tile.url;
                return (react.createElement(Pill, { nowrap: true, noCursor: !isClickable, onClick: handleOnClick, opacity: !isClickable ? 0.4 : undefined, themeColor: typeof tile.level === 'string' && isThemeColor$1(tile.level) ? tile.level : undefined, overrideBackground: typeof tile.level !== 'string' ? `#${tile.level.color}` : undefined, label: tile.label }));
            };

            const CloseButton = qe(AiFillDownCircle) `
  position: absolute;
  bottom: ${({ theme }) => theme.sizes.xxl.marginY};
  transform: scale(2);
  color: ${({ theme }) => theme.colors.tertiary.foreground};

  &:hover {
    cursor: pointer;
    color: ${({ theme }) => theme.colors.primary.background};
  }
`;
            const FeedContainer = qe.div `
  overflow-y: scroll;
  padding-top: ${({ isHidden }) => isHidden ? '24px' : '4px'};
  max-height: 30vh;
  width: calc(100vw - 50px);
  display: inline-block;
`;
            const HistoryIcon = qe(BiHistory) `
  color: ${({ theme }) => theme.colors.tertiary.foreground};
`;
            qe(AiFillCloseCircle) `
`;
            const SidebarContainer = qe.div `
  height: 100%;
  position: relative;
  width: 50px;
  display: inline-flex;
  justify-content: center;
`;
            const Container$1 = qe.div `
  max-height: ${({ hasHistory, isHidden, isTease }) => {
    if (isHidden && isTease) {
        return '20px';
    }
    if (hasHistory && !isHidden) {
        return '500px';
    }
    return '14px';
}};
  position: relative;
  grid-area: footer;
  margin-top: ${({ isHidden }) => isHidden ? '4px' : 0};
  visibility: ${({ hasHistory }) => hasHistory ? 'visible' : 'hidden'};
  transition: max-height ${({ isHidden }) => isHidden ? '0.2' : '2'}s ease-out;
  box-shadow: 0px 0 10px rgba(0, 0, 0, 0.8);
  border-top: ${({ theme }) => theme.colors.secondary.accent};
  background-color: ${({ theme }) => theme.colors.tertiary.background};
  overflow: hidden;
  
  &:hover {
    cursor: ${({ isHidden, isTease }) => isHidden && isTease ? 'pointer' : 'default'};
  }
`;
            qe.div `
  margin-left: ${({ theme }) => theme.sizes.md.marginX};
  padding: ${({ theme }) => theme.sizes.sm.paddingX};
  border-radius: 50%;
  display: flex;
  align-items: center;
  justify-content: center;
  transition: all 500ms;
  transform: scale(0.8);
  
  &:hover {
    transform: scale(1);
    background-color:${({ theme }) => alpha(theme.baseColors['red'], 0.5)};
    cursor: pointer;
  }
`;
            const FeedItem$1 = qe(Pill) `
  display: flex;
  font-size: 1vw;
  position: relative;
  align-items: center;
  overflow-x: scroll;
  white-space: nowrap;
  background-color: ${({ theme }) => alpha(theme.baseColors['grey-light'], 0.2)};
  color: ${({ theme }) => theme.colors.primary.foreground}
  `;
            const FeedItemMessage = qe.div `
  white-space: nowrap;
  font-weight: ${({ theme }) => theme.sizes.lg.fontWeight};
`;

            const FeedItem = (props) => {
                const { feedItem } = props;
                return (react.createElement(FeedItem$1, { minContent: true, background: "grey-light", foreground: "grey-dark" }, feedItem.message.map((message, index) => {
                    if (typeof message === 'string') {
                        return (react.createElement(FeedItemMessage, { key: `${message}-${index}` }, message));
                    }
                    return (react.createElement(FeedItemTile, { feedItem: feedItem, key: `${message.label}-${index}`, tile: message }));
                })));
            };

            const Feed = (props) => {
                const { isHidden } = props;
                const { feed } = useFeed();
                return (react.createElement(FeedContainer, { isHidden: isHidden }, feed.map((feedItem) => react.createElement(FeedItem, { key: feedItem.id, feedItem: feedItem }))));
            };

            const Sidebar = (props) => {
                const { hide } = props;
                return (react.createElement(SidebarContainer, null,
                    react.createElement(CloseButton, { onClick: hide })));
            };

            const Wrapper$1 = () => {
                const { init, feed } = useFeed();
                const [isHidden, setIsHidden] = react.useState(true);
                const [isTease, setIsTease] = react.useState(false);
                const hasFeed = feed.length > 0;
                react.useEffect(() => {
                    if (isHidden && hasFeed) {
                        setIsHidden(false);
                    }
                }, [feed.length]);
                react.useEffect(() => {
                    init();
                }, []);
                const hide = () => {
                    setIsHidden(true);
                };
                const onMouseEnter = () => {
                    if (isHidden && hasFeed) {
                        setIsTease(true);
                    }
                };
                const onMouseLeave = () => {
                    if (isHidden && hasFeed) {
                        setIsTease(false);
                    }
                };
                const onClick = () => {
                    if (isHidden && hasFeed) {
                        setIsTease(false);
                        setIsHidden(false);
                    }
                };
                return (react.createElement(Container$1, { onClick: onClick, onMouseLeave: onMouseLeave, onMouseEnter: onMouseEnter, hasHistory: hasFeed, isHidden: isHidden, isTease: isTease },
                    react.createElement(Unit$1.Title, { text: "History", icon: HistoryIcon, rotated: true }),
                    react.createElement(Sidebar, { hide: hide }),
                    react.createElement(Feed, { isHidden: isHidden })));
            };

            const History = (props) => {
                const { isVisible } = props;
                return (react.createElement(history.Provider, null, isVisible && react.createElement(Wrapper$1, null)));
            };

            const UNASSIGNED = 'Unassigned';
            const NO_SPRINT = 'No Sprint';

            const create$2 = (issue, mapping) => {
                const full = issue.assignee || UNASSIGNED;
                if (!mapping[full]) {
                    mapping[full] = {
                        id: full,
                        abbreviation: full.split(' ').map((word) => word[0]).join(''),
                        full,
                    };
                }
            };
            const run$2 = (issue, full) => {
                const fullName = issue.assignee || UNASSIGNED;
                return fullName === full;
            };
            var assignee = {
                id: 'jira-assignee',
                label: 'Assignee',
                run: run$2,
                create: create$2,
            };

            const create$1 = (issue, mapping) => {
                const { sprints } = issue;
                if (sprints.length === 0) {
                    if (!mapping[NO_SPRINT]) {
                        mapping[NO_SPRINT] = {
                            id: NO_SPRINT,
                            abbreviation: 'NS',
                            full: NO_SPRINT,
                        };
                    }
                    return;
                }
                issue.sprints.forEach((sprint) => {
                    const full = capitalize(sprint.state);
                    if (!mapping[full]) {
                        mapping[full] = {
                            id: full,
                            abbreviation: full[0],
                            full,
                        };
                    }
                });
            };
            const run$1 = (issue, full) => {
                const { sprints } = issue;
                if (sprints.length === 0 && full === NO_SPRINT) {
                    return true;
                }
                return sprints.some((sprint) => {
                    const sprintState = capitalize(sprint.state);
                    return full === sprintState;
                });
            };
            var sprints = {
                id: 'jira-sprint',
                label: 'Sprint State',
                run: run$1,
                create: create$1,
            };

            const setColors = {
                'In Progress': baseColorsBase['green'],
                'In Code Review': baseColorsBase['yellow'],
                'In QA': baseColorsBase['red'],
                'Rejected': baseColorsBase['red'],
                'Ready for Deployment': baseColorsBase['yellow'],
                'Unprioritized': baseColorsBase['grey-light'],
                'Verified on QA': baseColorsBase['green'],
                'Done': baseColorsBase['green'],
            };
            const create = (issue, mapping) => {
                const { id, name } = issue.status;
                if (!mapping[id]) {
                    mapping[id] = {
                        id: name,
                        abbreviation: name.split(' ').map((word) => word[0]).join(''),
                        full: name,
                        color: setColors[name],
                    };
                }
            };
            const run = (issue, full) => {
                const { name } = issue.status;
                return name === full;
            };
            var status$1 = {
                id: 'jira-status',
                label: 'Status',
                run,
                create,
            };

            const filterConfigs = {
                status: status$1,
                sprints,
                assignee,
            };
            var filterConfigs$1 = filterBuilder.createFilterConfigs(filterConfigs);

            // THIS FILE IS AUTO GENERATED
            function RiErrorWarningFill (props) {
              return GenIcon({"tag":"svg","attr":{"viewBox":"0 0 24 24"},"child":[{"tag":"g","attr":{},"child":[{"tag":"path","attr":{"fill":"none","d":"M0 0h24v24H0z"}},{"tag":"path","attr":{"d":"M12 22C6.477 22 2 17.523 2 12S6.477 2 12 2s10 4.477 10 10-4.477 10-10 10zm-1-7v2h2v-2h-2zm0-8v6h2V7h-2z"}}]}]})(props);
            }

            const StateValuesContainer = qe.div `
  display: flex;
`;
            const ErrorIcon = qe(RiErrorWarningFill) `
  color: ${(props) => props.theme.baseColors.red};

  &:hover {
    cursor: pointer;
  }
`;
            const WarningIcon = qe(AiFillWarning) `
  color: ${(props) => props.theme.baseColors.yellow};

  &:hover {
    cursor: pointer;
  }
`;
            const SuccessIcon = qe(AiFillCheckCircle) `
  color: ${(props) => props.theme.baseColors.green};

  &:hover {
    cursor: pointer;
  }
`;
            const UnknownIcon = qe(BsFillQuestionOctagonFill) `
  color: ${(props) => props.theme.baseColors.blue};

  &:hover {
    cursor: pointer;
  }
`;
            const Container = qe.div `
  border-radius: 4px;
  display: flex;
  align-items: center;
  margin: 0 ${({ theme }) => theme.sizes.md.marginX};
  padding: ${({ theme }) => theme.sizes.md.padding};
  background-color: ${({ theme, appColor }) => {
    const { r, g, b } = theme.baseColors[`${appColor}-rgb`];
    return `rgba(${r}, ${g}, ${b}, .3)`;
}};

  &:hover {
    cursor: pointer;
  }
`;
            const baseColor = (props) => {
                if (props.isError) {
                    return props.theme.baseColors['red-dark-rgb'];
                }
                if (props.isGreen) {
                    return props.theme.baseColors['green-rgb'];
                }
                if (props.isRed) {
                    return props.theme.baseColors['red-rgb'];
                }
                if (props.isYellow) {
                    return props.theme.baseColors['yellow-rgb'];
                }
                return props.theme.baseColors['white-rgb'];
            };
            const StateContainer = qe.div `
  border-radius: 4px;
  display: flex;
  align-items: center;
  margin: 0 ${({ theme }) => theme.sizes.md.marginX};
  padding: ${({ theme }) => theme.sizes.md.padding};
  background-color: ${(props) => {
    const base = baseColor(props);
    const { r, g, b } = base;
    return `rgba(${r}, ${g}, ${b}, .3)`;
}};

  &:hover {
    cursor: pointer;
  }
`;
            const StatusName = qe.div `
  margin-left: 2px;

  &:hover {
    cursor: pointer;
  }
`;

            const State = (props) => {
                const { state, names } = props;
                const { handle } = useClickFilter();
                const { groups } = useFilterGroups();
                const stateGroup = groups.find((filter) => filter.id === 'jira-sprint');
                const filter = stateGroup && Object.values(stateGroup.filters).find((filter) => filter.filter.full.toUpperCase() === state.toUpperCase());
                const handleClick = () => {
                    if (filter) {
                        handle(filter);
                    }
                };
                return (react.createElement(Tooltip$2, { text: names, isDisabled: names.length === 0 },
                    react.createElement(StateContainer, { onClick: handleClick, isError: names.length === 0, isRed: names.length === 0, isGreen: state === 'active', isYellow: state === 'closed' }, capitalize(state))));
            };

            const SprintState = (props) => {
                const { sprints } = props;
                if (sprints.length === 0) {
                    return (react.createElement(State, { state: NO_SPRINT, names: [] }));
                }
                const states = sprints
                    .reduce((acc, cur) => {
                    if (!acc[cur.state]) {
                        acc[cur.state] = [];
                    }
                    acc[cur.state].push(cur.name);
                    return acc;
                }, {});
                return (react.createElement(StateValuesContainer, null, Object.entries(states).map(([state, names]) => react.createElement(State, { key: state, state: state, names: names }))));
            };

            const statusState = {
                '10824': 'ok',
                '10820': 'ok',
                '3': 'ok',
                '10203': 'wip',
                '10823': 'wip',
                '10825': 'wip',
                '10817': 'needs-attention',
                '10205': 'needs-attention',
                '10009': 'ok',
            };
            const getIcon = (status) => {
                switch (statusState[status.id]) {
                    case 'ok': return {
                        color: 'green',
                        icon: SuccessIcon,
                    };
                    case 'wip': return {
                        color: 'yellow',
                        icon: WarningIcon,
                    };
                    case 'needs-attention': return {
                        color: 'red',
                        icon: ErrorIcon,
                    };
                    default: return {
                        color: 'white',
                        icon: UnknownIcon,
                    };
                }
            };
            const Status = (props) => {
                const { status } = props;
                const { filterGroups } = filters.useTrackedState();
                const { handle } = useClickFilter();
                const assigneeGroup = filterGroups.find((filter) => filter.id === 'jira-status');
                const filter = assigneeGroup && Object.values(assigneeGroup.filters).find((filter) => filter.filter.full === status.name);
                const icon = getIcon(status);
                const handleClick = () => {
                    if (filter) {
                        handle(filter);
                    }
                };
                return (react.createElement(Container, { onClick: handleClick, appColor: icon.color },
                    react.createElement(icon.icon, null),
                    react.createElement(StatusName, null, status.name)));
            };

            const Issue = react.forwardRef((props, ref) => {
                const { issue } = props;
                const { filterGroups } = filters.useTrackedState();
                const { handle } = useClickFilter();
                const link = `${issue.appUrl}/browse/${issue.key}`;
                const issueAssignee = issue.assignee || 'Unassigned';
                const navigate = () => {
                    window.location.href = link;
                };
                const assigneeGroup = filterGroups.find((filter) => filter.id === 'jira-assignee');
                const filter = assigneeGroup && Object.values(assigneeGroup.filters).find((filter) => filter.filter.full === issue.assignee);
                const colors = assigneeGroup ? Object.values(assigneeGroup.filters).map((current) => ({
                    full: current.filter.full,
                    color: current.filter.color,
                })) : [];
                const color = colors.find((c) => c.full === issueAssignee)?.color;
                const handleClick = () => {
                    if (filter) {
                        handle(filter);
                    }
                };
                return (react.createElement(Card, { ref: ref, title: {
                        pill: true,
                        text: issue.key,
                        onClick: navigate,
                    }, centerTitle: `Created ${formatDistance(new Date(issue.createdAt), new Date())} ago`, endTitle: {
                        text: issueAssignee,
                        color,
                        handleClick: handleClick,
                    }, footer: react.createElement(Status, { status: issue.status }), endFooter: {
                        text: react.createElement(SprintState, { sprints: issue.sprints }),
                    } }, issue.summary));
            });

            const Issues = () => {
                const { listen } = useListenEvents('jira');
                const { filteredItems } = useItems();
                const { find } = useGetFilter();
                const { handle } = useClickFilter();
                react.useEffect(() => {
                    listen('filter', callback);
                }, []);
                const callback = (event) => {
                    const filter = find(event);
                    if (filter) {
                        handle(filter);
                    }
                };
                return (react.createElement(react.Fragment, null, filteredItems.map((issue) => (react.createElement(Issue, { key: issue.key, issue: issue })))));
            };

            const Content = () => {
                const { issues } = useIssues();
                const { projects } = useProjects();
                const settings = useSettings(['filters']);
                const allOnlyActive = Object
                    .values(projects.watches)
                    .every((project) => project.filters.onlyActive);
                const useFilters = settings.filters
                    .filter((filter) => {
                    if (allOnlyActive) {
                        return filter !== 'sprints';
                    }
                    return true;
                });
                return (react.createElement(filters.Provider, { filterConfigs: filterConfigs$1(useFilters), items: issues },
                    react.createElement(Filters, null),
                    react.createElement(Unit$1.Content, { hasData: issues.length > 0, hideProgress: issues.length === 0 },
                        react.createElement(Issues, null))));
            };

            const Router = () => {
                const { init } = useInit();
                const { check, authStatus } = useAuthCheck();
                react.useEffect(() => {
                    check();
                    init('settings');
                }, []);
                switch (authStatus) {
                    case 'waiting': return null;
                    case 'not': return react.createElement(Login, { column: "first", unit: "jira" });
                    default: return react.createElement(Content, null);
                }
            };

            const Wrapper = () => {
                return (react.createElement(Unit$1.Container, { rightMargin: true, column: "first" },
                    react.createElement(Unit$1.Title, { text: "Jira Issues", icon: FaJira }),
                    react.createElement(Router, null)));
            };

            const Jira = (props) => {
                const { isVisible } = props;
                return (react.createElement(jira.Provider, null,
                    isVisible &&
                        react.createElement(Wrapper, null),
                    react.createElement(Portal, { selectionTrigger: "jira" },
                        react.createElement(Jira$1, null))));
            };

            const Application$1 = () => {
                const { visibleUnits } = useUnits();
                const hasJira = visibleUnits.includes('jira');
                const hasGithub = visibleUnits.includes('github');
                const hasHistory = visibleUnits.includes('history');
                const hasLinks = visibleUnits.includes('links');
                return (react.createElement(Unit$1.Console, null,
                    react.createElement(Unit$1.Row, { hasLeft: hasJira, hasRight: hasGithub, columns: 3 },
                        react.createElement(Jira, { isVisible: hasJira }),
                        react.createElement(Center, { showLinks: hasLinks }),
                        react.createElement(Github, { isVisible: hasGithub })),
                    react.createElement(History, { isVisible: hasHistory }),
                    react.createElement(Global, null)));
            };

            const Application = () => {
                return (react.createElement(Ge, { theme: { ...theme, windowHeight: window.innerHeight } },
                    react.createElement(Providers, null,
                        react.createElement(GlobalStyle, null),
                        react.createElement(Application$1, null),
                        react.createElement(Modal, null))));
            };

            reactDom.render(react.createElement(Application, null), document.getElementById('root'));

}());
